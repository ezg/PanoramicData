<?xml version="1.0"?>
<doc>
    <assembly>
        "AwesomiumDotNet"
    </assembly>
    <members>
        <member name="M:AwesomiumDotNet.WebCore.Resume">
            <summary>
Resumes the internal thread of the Awesomium WebCore.
</summary>
            <seealso cref="M:AwesomiumDotNet.WebCore.Pause" />
        </member>
        <member name="M:AwesomiumDotNet.WebCore.Pause">
            <summary>
Pauses the internal thread of the Awesomium WebCore.
</summary>
            <remarks>
The pause and resume functions were added as a temporary workaround
for threading issues with Flash plugins on the Mac OSX platform.
You should call WebCore::pause right before handling the message loop
in your main thread (usually via SDL_PollEvents) and immediately call
resume after.
</remarks>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.Update">
            <summary>
Updates the WebCore and allows it to conduct various operations such as the propagation
of bound JS callbacks and the invocation of any queued listener events.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCore.ArePluginsEnabled">
            <summary>
Whether or not plugins are enabled.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.SetCustomResponsePage(System.Int32,System.String)">
            <summary>
Sets a custom response page to use when a WebView encounters a certain
HTML status code from the server (such as '404 - File not found').
</summary>
            <param name="statusCode">
The status code this response page should be associated with.
See http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
</param>
            <param name="filePath">
The local page to load as a response, should be a path relative to the base directory.
</param>
        </member>
        <member name="P:AwesomiumDotNet.WebCore.PixelFormat">
            <summary>
The pixel format being used.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCore.BaseDirectory">
            <summary>
The current base directory.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
Creates a new WebView.
</summary>
            <param name="width">
The width of the WebView in pixels.
</param>
            <param name="height">
The height of the WebView in pixels.
</param>
            <param name="isTransparent">
Whether or not the background of a WebView should be rendered as transparent.
</param>
            <param name="enableAsyncRendering">
Enables fully-asynchronous rendering, see remarks.
</param>
            <param name="maxAsyncRenderPerSec">
The maximum times per second this WebView should asynchronously render.
</param>
            <returns>
Returns a WebView Instance.
</returns>
            <remark>
When asynchronous rendering is enabled, all rendering takes place on
another thread asynchronously. The benefit of this behavior is that you
may see a marked performance increase on machines with multi-core
processors (especially when a WebView has high-animation content).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
Creates a new WebView.
</summary>
            <param name="width">
The width of the WebView in pixels.
</param>
            <param name="height">
The height of the WebView in pixels.
</param>
            <param name="isTransparent">
Whether or not the background of a WebView should be rendered as transparent.
</param>
            <param name="enableAsyncRendering">
Enables fully-asynchronous rendering, see remarks.
</param>
            <returns>
Returns a WebView Instance.
</returns>
            <remark>
When asynchronous rendering is enabled, all rendering takes place on
another thread asynchronously. The benefit of this behavior is that you
may see a marked performance increase on machines with multi-core
processors (especially when a WebView has high-animation content).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean)">
            <summary>
Creates a new WebView.
</summary>
            <param name="width">
The width of the WebView in pixels.
</param>
            <param name="height">
The height of the WebView in pixels.
</param>
            <param name="isTransparent">
Whether or not the background of a WebView should be rendered as transparent.
</param>
            <returns>
Returns a WebView Instance.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.CreateWebView(System.Int32,System.Int32)">
            <summary>
Creates a new WebView.
</summary>
            <param name="width">
The width of the WebView in pixels.
</param>
            <param name="height">
The height of the WebView in pixels.
</param>
            <returns>
Returns a WebView Instance.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.Dispose">
            <summary>
Destroys the WebCore singleton. (Also destroys any lingering WebViews)
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.#ctor(AwesomiumDotNet.WebCoreOptions)">
            <summary>
Instantiates the WebCore.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.#ctor">
            <summary>
Instantiates the WebCore.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.WebCore">
            <summary>
The WebCore manages the creation of WebViews, the internal worker thread,
and various other global states that are required to embed Chromium.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCoreOptions.UserAgentOverride">
            <summary>
The user agent string that will override the default.
Leave empty to use the default user agent.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCoreOptions.PixelFormat">
            <summary>
The pixel-format/byte-ordering to use when rendering WebViews.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCoreOptions.EnablePlugins">
            <summary>
Whether or not to enable embedded plugins. (default is FALSE)
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCoreOptions.LogLevel">
            <summary>
The logging level to use (default is LogLevel.Normal).
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCoreOptions.LogPath">
            <summary>
The path to store the awesomium.log. If none is specified,
the log will be stored in the working directory.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCoreOptions.PluginPath">
            <summary>
An absolute path that will be included in the search for plugins. This is useful
if you wish to bundle certain plugins with your application.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCoreOptions.CookiePath">
            <summary>
An absolute path to the directory that will be used to store cookies.
If an empty string is specified, cookies will not persist between sessions.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCoreOptions.CachePath">
            <summary>
An absolute path to the directory that will be used to store the cache.
If an empty string is specified, the cache will not persist between sessions.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.PixelFormat">
            <summary>
An enumeration of the two output pixel formats that WebView::render will use.
</summary>
        </member>
        <member name="F:AwesomiumDotNet.PixelFormat.Rgba">
            <summary> RGBA byte ordering [Red, Green, Blue, Alpha] </summary>
        </member>
        <member name="F:AwesomiumDotNet.PixelFormat.Bgra">
            <summary> BGRA byte ordering [Blue, Green, Red, Alpha] </summary>
        </member>
        <member name="T:AwesomiumDotNet.LogLevel">
            <summary>
An enumeration of the three verbosity settings for the Awesomium Log.
</summary>
        </member>
        <member name="F:AwesomiumDotNet.LogLevel.Verbose">
            <summary> Logs everything </summary>
        </member>
        <member name="F:AwesomiumDotNet.LogLevel.Normal">
            <summary> Logs only errors </summary>
        </member>
        <member name="F:AwesomiumDotNet.LogLevel.None">
            <summary> No log is created </summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetOpensExternalLinksInCallingFrame(System.Boolean)">
            <summary>
Sets whether or not external links (links that normally would open in a new window) should
be automatically be opened in the same frame. The default behavior is enabled. You can handle
external links yourself via WebViewListener.OpenExternalLink.
</summary>
            <param name="isEnabled">
Whether or not external links will be automatically opened in the calling frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.RemoveHeaderRewriteRulesByDefinitionName(System.String)">
            <summary>
Removes all header re-write rules that are using a certain header definition.
</summary>
            <param name="name">
The name of the header definition (specified in WebView.SetHeaderDefinition). If you
specify an empty string, this will remove ALL header re-write rules.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.RemoveHeaderRewriteRule(System.String)">
            <summary>
Removes a header re-write rule from this WebView.
</summary>
            <param name="rule">
The rule to remove (should match the string specified in WebView.AddHeaderRewriteRule exactly).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.AddHeaderRewriteRule(System.String,System.String)">
            <summary>
Adds a new a header re-write rule. All requests whose URL matches the specified rule will have its 
HTTP headers re-written with the specified header definition before sending it to the server.
</summary>
            <param name="rule">
A wide string with optional wildcards (*, ?) that matches the URL(s) that will
have its headers re-written with the specified header definition.
</param>
            <param name="name">
The name of the header definition (specified in WebView.SetHeaderDefinition).
</param>
            <remarks>
The case where a URL is matched by multiple rules is unsupported, only the first match will be used.
</remarks>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetHeaderDefinition(System.String,System.Collections.Generic.Dictionary`2{System.String,System.String})">
            <summary>
Defines a new Header Definition or updates it if it already exists.
</summary>
            <param name="name">
The unique name of the Header Definition; this is used to refer to it later 
in WebView.AddHeaderRewriteRule and WebView.RemoveHeaderRewriteRulesByDefinitionName.
</param>
            <param name="definition">
The header definition, a map of key/values representing an HTTP header.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ClearAllUrlFilters">
            <summary>
Clears all URL Filter rules.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.AddUrlFilter(System.String)">
            <summary>
Adds a new URL Filter rule.
</summary>
            <param name="filter">
A string with optional wildcards that describes a certain URL.
</param>
            <remarks>
For example, to match all URLs from the domain "google.com", your filter string 
might be: http://google.com/*
You may also use the "local://" scheme prefix to describe the URL to the base
directory (set via WebCore.BaseDirectory).
</remarks>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetUrlFilteringMode(AwesomiumDotNet.UrlFilteringMode)">
            <summary>
Sets the current URL Filtering Mode (default is None).
See UrlFilteringMode for more information on the modes.
</summary>
            <param name="mode">
The URL filtering mode to use.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetObjectCallback(System.String,System.String)">
            <summary>
Sets a callback function of a Javascript object previously created by WebView.CreateObject.
This is very useful for passing events from Javascript. To receive notification of the callback,
an OnCallback event handler should be registered (see WebView.OnCallback).
</summary>
            <param name="objectName">
The name of the Javascript object.
</param>
            <param name="callbackName">
The name of the callback function.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetObjectProperty(System.String,System.String,AwesomiumDotNet.JSValue)">
            <summary>
Sets a property of a Javascript object previously created by WebView.CreateObject.
</summary>
            <param name="objectName">
The name of the Javascript object.
</param>
            <param name="propName">
The name of the property.
</param>
            <param name="value">
The javascript-value of the property.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.CallJavaScriptFunction(System.String,System.String,System.Collections.ObjectModel.Collection`1{AwesomiumDotNet.JSValue},System.String)">
            <summary>
Call a certain function defined in Javascript directly.
</summary>
            <param name="objectName">
The name of the object that contains the function, pass an empty string if the function
is defined in the global scope.
</param>
            <param name="functionName">
The name of the function.
</param>
            <param name="args">
The arguments to pass to the function.
</param>
            <param name="frameName">
Optional, the name of the frame to execute in; leave this blank to execute in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.CallJavaScriptFunction(System.String,System.String,System.Collections.ObjectModel.Collection`1{AwesomiumDotNet.JSValue})">
            <summary>
Call a certain function defined in Javascript directly.
</summary>
            <param name="objectName">
The name of the object that contains the function, pass an empty string if the function
is defined in the global scope.
</param>
            <param name="functionName">
The name of the function.
</param>
            <param name="args">
The arguments to pass to the function.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.DestroyObject(System.String)">
            <summary>
Destroys a Javascript object previously created by WebView.CreateObject.
</summary>
            <param name="objectName">
The name of the object to destroy.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.CreateObject(System.String)">
            <summary>
Creates a new global Javascript object that will persist throughout the lifetime of this WebView.
This object is managed directly by Awesomium and so you can modify its properties and bind
callback functions via WebView.SetObjectProperty and WebView.SetObjectCallback, respectively.
</summary>
            <param name="objectName">
The name of the object.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ExecuteJavaScriptWithResult(System.String,System.String)">
            <summary>
Executes a string of Javascript in the context of the current page asynchronously with a result.
</summary>
            <param name="javaScript">
The string of Javascript to execute.
</param>
            <param name="frameName">
The name of the frame to execute in; leave this blank to execute in the main frame.
</param>
            <returns>
Returns a 'FutureJSValue' which is basically an 'IOU' for the future JSValue result.
You can obtain the actual result via FutureJSValue.Get later.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ExecuteJavaScriptWithResult(System.String)">
            <summary>
Executes a string of Javascript in the context of the current page asynchronously with a result.
</summary>
            <param name="javaScript">
The string of Javascript to execute.
</param>
            <returns>
Returns a 'FutureJSValue' which is basically an 'IOU' for the future JSValue result.
You can obtain the actual result via FutureJSValue.Get later.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ExecuteJavaScript(System.String,System.String)">
            <summary>
Executes a string of Javascript in the context of the current page asynchronously.
</summary>
            <param name="javaScript">
The string of Javascript to execute.
</param>
            <param name="frameName">
The name of the frame to execute in; leave this blank to execute in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ExecuteJavaScript(System.String)">
            <summary>
Executes a string of Javascript in the context of the current page asynchronously.
</summary>
            <param name="javaScript">
The string of Javascript to execute.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.GoToHistoryOffset(System.Int32)">
            <summary>
Navigates back/forward in history via a relative offset.
</summary>
            <param name="offset">
The relative offset in history to navigate to.
</param>
            <remarks>
For example, to go back one page:
  myView.GoToHistoryOffset(-1);
Or, to go forward one page:
  myView.GoToHistoryOffset(1);
</remarks>
        </member>
        <member name="M:AwesomiumDotNet.WebView.IsDirty">
            <summary>
Returns whether or not the current web-view is dirty and needs to be re-rendered.
</summary>
            <returns>
If the web-view is dirty, returns true, otherwise returns false.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebView.RenderToBitmap(System.Drawing.Bitmap)">
            <summary>
Renders the WebView to an off-screen bitmap.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.RenderToBitmap(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
Renders the WebView to an off-screen bitmap.
</summary>
            <param name="width">
Width of the render.
</param>
            <param name="height">
Height of the render.
</param>
            <param name="pixelFormat">
Format of the color data. Use Imaging.PixelFormat.Format32bppArgb or Format24bppRgb
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.RenderToBitmap(System.Int32,System.Int32)">
            <summary>
Renders the WebView to an off-screen bitmap.
</summary>
            <param name="width">
Width of the render.
</param>
            <param name="height">
Height of the render.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.Int32,System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
            <param name="renderedRect">
If asynchronous rendering is not enabled,	you can provide
a pointer to a Rect to store the dimensions of the rendered area,
or rather, the dimensions of the area that actually changed
since the last render.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
            <param name="renderedRect">
If asynchronous rendering is not enabled,	you can provide
a pointer to a Rect to store the dimensions of the rendered area,
or rather, the dimensions of the area that actually changed
since the last render.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.Byte[],System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
            <param name="renderedRect">
If asynchronous rendering is not enabled,	you can provide
a pointer to a Rect to store the dimensions of the rendered area,
or rather, the dimensions of the area that actually changed
since the last render.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.Int32,System.Int32,System.Int32)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.IntPtr,System.Int32,System.Int32)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.Byte[],System.Int32,System.Int32)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetTransparent(System.Boolean)">
            <summary>
Sets whether or not pages should be rendered with a transparent background-color.
</summary>
            <param name="isTransparent">
Whether or not to force the background-color as transparent.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadFile(System.String,System.String)">
            <summary>
Loads a local file into the WebView asynchronously.
</summary>
            <param name="file">
The file to load.
</param>
            <param name="frameName">
The name of the frame to load the file in; leave this blank to load in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadFile(System.String)">
            <summary>
Loads a local file into the WebView asynchronously.
</summary>
            <param name="file">
The file to load.
</param>
            <remark>
The file should exist within the base directory
(specified via WebCore.BaseDirectory).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadHtml(System.String,System.String)">
            <summary>
Loads a string of HTML into the WebView asynchronously.
</summary>
            <param name="html">
The HTML string to load.
</param>
            <param name="frameName">
The name of the frame to load the HTML in; leave this blank to load in the main frame.
</param>
            <remark>
The base directory (specified via WebCore.BaseDirectory)
will be used to resolve relative URL's resources (such as images, links, etc).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadHtml(System.String)">
            <summary>
Loads a string of HTML into the WebView asynchronously.
</summary>
            <param name="html">
The HTML string to load.
</param>
            <remark>
The base directory (specified via WebCore.BaseDirectory)
will be used to resolve relative URL's resources (such as images, links, etc).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.String,System.String,System.String,System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
            <param name="frameName">
The name of the frame to load the URL in; leave this blank to load in the main frame.
</param>
            <param name="userName">
If the URL requires authentication, the username to authorize as.
</param>
            <param name="password">
If the URL requires authentication, the password to use.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.Uri,System.String,System.String,System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
            <param name="frameName">
The name of the frame to load the URL in; leave this blank to load in the main frame.
</param>
            <param name="userName">
If the URL requires authentication, the username to authorize as.
</param>
            <param name="password">
If the URL requires authentication, the password to use.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.String,System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
            <param name="frameName">
The name of the frame to load the URL in; leave this blank to load in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.Uri,System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
            <param name="frameName">
The name of the frame to load the URL in; leave this blank to load in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.Uri)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectKeyboardEvent(System.Windows.Forms.Message)">
            <summary>
Injects a keyboard event.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectKeyboardEvent(AwesomiumDotNet.WebKeyboardEvent)">
            <summary>
Injects a keyboard event.
</summary>
            <param name="keyboardEvent">
The keyboard event to inject.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseWheel(System.Int32)">
            <summary>
Injects a mouse-wheel event.
</summary>
            <param name="scrollAmount">
The amount of pixels to scroll by.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseUp(System.Windows.Forms.MouseButtons)">
            <summary>
Injects a mouse-up event.
</summary>
            <param name="button">
The button that was released.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseUp(AwesomiumDotNet.MouseButton)">
            <summary>
Injects a mouse-up event.
</summary>
            <param name="button">
The button that was released.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseDown(System.Windows.Forms.MouseButtons)">
            <summary>
Injects a mouse-down event.
</summary>
            <param name="button">
The button that was pressed.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseDown(AwesomiumDotNet.MouseButton)">
            <summary>
Injects a mouse-down event.
</summary>
            <param name="button">
The button that was pressed.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseMove(System.Drawing.Point)">
            <summary>
Injects a mouse-move event in local coordinates.
</summary>
            <param name="position">
The absolute coordinates of the mouse (localized to the WebView).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
Injects a mouse-move event in local coordinates.
</summary>
            <param name="x">
The absolute x-coordinate of the mouse (localized to the WebView).
</param>
            <param name="y">
The absolute y-coordinate of the mouse (localized to the WebView).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Resize(System.Int32,System.Int32)">
            <summary>
Resizes this WebView to certain dimensions.
</summary>
            <param name="width">
The width to resize to.
</param>
            <param name="height">
The height to resize to.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ResetZoom">
            <summary>
Resets the zoom level.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ZoomOut">
            <summary>
Zooms out of the page, reducing by 20%.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ZoomIn">
            <summary>
Zooms into the page, enlarging by 20%.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.GetContentAsText(System.Int32)">
            <summary>
Retrieves the content of the current page as plain text.
</summary>
            <param name="maxChars">
The maximum number of characters to retrieve.
</param>
            <returns>
Returns the retrieved text.
</returns>
            <remark>
Warning: The performance of this function depends upon the number
of retrieved characters and the complexity of the page.
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.DeselectAll">
            <summary>
Deselects all items on the current page.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SelectAll">
            <summary>
Selects all items on the current page.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Paste">
            <summary>
Invokes a 'paste' action using the system clipboard.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Cut">
            <summary>
Invokes a 'cut' action using the system clipboard.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Copy">
            <summary>
Invokes a 'copy' action using the system clipboard.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Unfocus">
            <summary>
Notifies the current page that it has lost focus.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Focus">
            <summary>
Notifies the current page that is has gained focus.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Destroy">
            <summary>
Explicitly destroys this WebView instance. If you neglect to call this,
the WebCore singleton will automatically destroy all lingering WebView instances at shutdown.
</summary>
            <remark>
This should NEVER be called directly from one of the notifications of WebViewListener.
</remark>
        </member>
        <member name="E:AwesomiumDotNet.WebView.OpenExternalLink">
            <summary>This event is fired when an external link is attempted to be opened. An external link
is any link that normally opens in a new window in a standard browser (for example, links
with target="_blank", calls to window.open(url), and URL open events from Flash plugins).
External links may or may not be automatically opened by a WebView (please see
WebView::setOpensExternalLinksInCallingFrame).</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ReceiveTitle">
            <summary>This event is fired when a page title is received.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.FinishLoading">
            <summary>This event is fired when all loads have finished for a WebView.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ChangeTooltip">
            <summary>This event is fired when a tooltip has changed state.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ChangeTargetUrl">
            <summary>This event is fired when the target URL has changed. This is usually the result of
hovering over a link on the page.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ChangeKeyboardFocus">
            <summary>This event is fired when keyboard focus has changed.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ChangeCursor">
            <summary>This event is fired when a cursor has changed state.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.Callback">
            <summary>This event is fired when a Client callback has been invoked via Javascript from a page.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.BeginNavigation">
            <summary>This event is fired when a WebView begins navigating to a new URL.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.BeginLoading">
            <summary>This event is fired when a WebView begins to actually receive data from a server.</summary>
        </member>
        <member name="T:AwesomiumDotNet.WebView">
            <summary>
A WebView is essentially a single instance of a web-browser
(created via the WebCore singleton) that you can interact with
(via input injection, javascript, etc.) and render to an off-screen buffer.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.UrlFilteringMode">
            <summary>
URL Filtering mode enumerations, used by WebView.SetUrlFilteringMode
</summary>
        </member>
        <member name="F:AwesomiumDotNet.UrlFilteringMode.None">
            <summary>
No filtering
</summary>
        </member>
        <member name="F:AwesomiumDotNet.UrlFilteringMode.Whitelist">
            <summary>
All resource requests and page navigations are DENIED 
except those that match the URL filters specified.
</summary>
        </member>
        <member name="F:AwesomiumDotNet.UrlFilteringMode.Blacklist">
            <summary>
All resource requests and page navigations are ALLOWED 
except those that match the URL filters specified.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.MouseButton">
            <summary>
Mouse button enumerations,
used with WebView.InjectMouseDown and WebView.InjectMouseUp
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebKeyboardEvent.#ctor(System.Windows.Forms.Message)">
            <summary>
Creates a WebKeyboardEvent directly from a Windows keyboard event message.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebKeyboardEvent.#ctor(System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Creates a WebKeyboardEvent directly from a Windows keyboard event message.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebKeyboardEvent.#ctor(AwesomiumDotNet.WM,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Creates a WebKeyboardEvent directly from a Windows keyboard event message.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebKeyboardEvent.#ctor">
            <summary>
Creates an empty WebKeyboardEvent, you will need to initialize its members
yourself. This is most useful for synthesizing your own keyboard events.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebKeyboardEvent.UnmodifiedText">
            <summary>
The text generated by this keyboard event before all modifiers except shift are applied.
This is used internally for working out shortcut keys.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebKeyboardEvent.Text">
            <summary>
The actual text generated by this keyboard event.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebKeyboardEvent.NativeKeyCode">
            <summary>
The actual key-code generated by the platform. The DOM specification primarily uses
Windows-equivalent codes (hence virtualKeyCode above) but it helps to additionally
specify the platform-specific key-code as well.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebKeyboardEvent.VirtualKeyCode">
            <summary>
The virtual key-code associated with this keyboard event. This is either directly
from the event (ie, WPARAM on Windows) or via a mapping function.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebKeyboardEvent.Modifiers">
            <summary>
The current state of the keyboard. Modifiers may be OR'd together to represent multiple values.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebKeyboardEvent.IsSystemKey">
            <summary>
Whether or not the pressed key is a "system key".
For more information, see the following
link: http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebKeyboardEvent.EventType">
            <summary>
The type of this WebKeyboardEvent.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.WebKeyboardEvent">
            <summary>
A generic keyboard event that can be created from a platform-specific event or
synthesized from a virtual event. Used by WebView.InjectKeyboardEvent.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.Modifiers">
            <summary>
An enumeration of the different keyboard modifiers.
</summary>
        </member>
        <member name="F:AwesomiumDotNet.Modifiers.AutoRepeat">
            <summary>Whether or not the character input is the result of an auto-repeat timer.</summary>
        </member>
        <member name="F:AwesomiumDotNet.Modifiers.KeyPad">
            <summary>Whether or not the key pressed is on the keypad</summary>
        </member>
        <member name="F:AwesomiumDotNet.Modifiers.MetaKey">
            <summary>Whether or not a meta key (Windows-key on Windows) is down</summary>
        </member>
        <member name="F:AwesomiumDotNet.Modifiers.AltKey">
            <summary>Whether or not an Alt key is down</summary>
        </member>
        <member name="F:AwesomiumDotNet.Modifiers.ControlKey">
            <summary>Whether or not a Control key is down</summary>
        </member>
        <member name="F:AwesomiumDotNet.Modifiers.ShiftKey">
            <summary>Whether or not a Shift key is down</summary>
        </member>
        <member name="F:AwesomiumDotNet.Modifiers.None">
            <summary>No modifiers</summary>
        </member>
        <member name="T:AwesomiumDotNet.KeyboardEventType">
            <summary>
An enumeration of the different WebKeyboardEvent types.
</summary>
        </member>
        <member name="F:AwesomiumDotNet.KeyboardEventType.CharType">
            <summary>Character input type</summary>
        </member>
        <member name="F:AwesomiumDotNet.KeyboardEventType.KeyUpType">
            <summary>Key-Up type</summary>
        </member>
        <member name="F:AwesomiumDotNet.KeyboardEventType.KeyDownType">
            <summary>Key-Down type</summary>
        </member>
        <member name="T:AwesomiumDotNet.WM">
            <summary>
Windows keyboard messages,
used with WebView.InjectKeyboardEvent
</summary>
        </member>
        <member name="P:AwesomiumDotNet.OpenExternalLinkEventArgs.Source">
            <summary>
If the external link originated from a call to window.open(), this value
is "window.open". Else, if the link originated from a Flash plugin, this
value is "flash". Otherwise, this value is the name of the frame that
contains the link.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.OpenExternalLinkEventArgs.Url">
            <summary>The URL of the external link.</summary>
        </member>
        <member name="P:AwesomiumDotNet.OpenExternalLinkEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ReceiveTitleEventArgs.FrameName">
            <summary>The name of the frame that this event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ReceiveTitleEventArgs.Title">
            <summary>The page title.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ReceiveTitleEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.FinishLoadingEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeTooltipEventArgs.Tooltip">
            <summary>The tooltip text (or, is an empty string when the tooltip should disappear).</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeTooltipEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeTargetUrlEventArgs.Url">
            <summary>The updated target URL (or empty if the target URL is cleared).</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeTargetUrlEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeKeyboardFocusEventArgs.IsFocused">
            <summary>Whether or not the keyboard is currently focused.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeKeyboardFocusEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeCursorEventArgs.Cursor">
            <summary>The cursor handle/type.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeCursorEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.CallbackEventArgs.Args">
            <summary>The arguments passed to the callback.</summary>
        </member>
        <member name="P:AwesomiumDotNet.CallbackEventArgs.CallbackName">
            <summary>The name of the callback that was invoked (must have been previously bound via WebView.SetObjectCallback).</summary>
        </member>
        <member name="P:AwesomiumDotNet.CallbackEventArgs.ObjectName">
            <summary>The name of the Javascript Object that contains the invoked callback.</summary>
        </member>
        <member name="P:AwesomiumDotNet.CallbackEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginNavigationEventArgs.FrameName">
            <summary>The name of the frame that this event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginNavigationEventArgs.Url">
            <summary>The URL that is being navigated to.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginNavigationEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.MimeType">
            <summary>The mime-type of the content that is being loaded.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.StatusCode">
            <summary>The HTTP status code returned by the server.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.FrameName">
            <summary>The name of the frame that this event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.Url">
            <summary>The URL of the frame that is being loaded.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="M:AwesomiumDotNet.FutureJSValue.Get">
            <summary>
If the internal JSValue has been computed, immediately returns
the value, else, blocks the calling thread until it has.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.FutureJSValue">
            <summary>
FutureJSValue is a special wrapper around a JSValue that allows
asynchronous retrieval of the actual value at a later time.
If you are unfamiliar with the concept of a 'Future', please see:
http://en.wikipedia.org/wiki/Futures_and_promises
</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.ToDouble">
            <summary>Returns this JSValue as a double.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.ToInteger">
            <summary>Returns this JSValue as an integer.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.ToBoolean">
            <summary>Returns this JSValue as a boolean.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.ToString">
            <summary>Returns this JSValue as a string (converting if necessary).</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsNull">
            <summary>Returns whether or not this JSValue is null.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsString">
            <summary>Returns whether or not this JSValue is a string.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsDouble">
            <summary>Returns whether or not this JSValue is a double.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsInteger">
            <summary>Returns whether or not this JSValue is an integer.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsBoolean">
            <summary>Returns whether or not this JSValue is a boolean.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor(System.String)">
            <summary>Creates a JSValue initialized with a string.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor(System.Double)">
            <summary>Creates a JSValue initialized with a double.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor(System.Int32)">
            <summary>Creates a JSValue initialized with an integer.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor(System.Boolean)">
            <summary>Creates a JSValue initialized with a boolean.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor">
            <summary>Creates a null JSValue.</summary>
        </member>
        <member name="T:AwesomiumDotNet.JSValue">
            <summary>
JSValue is a class that represents a Javascript value.
It can be initialized from and converted to several types:
boolean, integer, double, string
</summary>
        </member>
        <member name="M:Awesomium.WebView.setOpensExternalLinksInCallingFrame(System.Boolean)">
 Sets whether or not external links (links that normally would open in a new window) should
 be automatically be opened in the same frame. The default behavior is enabled. You can handle
 external links yourself via WebViewListener::onOpenExternalLink.

 @param	isEnabled	Whether or not external links will be automatically opened in the calling frame.

</member>
        <member name="M:Awesomium.WebView.removeHeaderRewriteRulesByDefinitionName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Removes all header re-write rules that are using a certain header definition.

 @param	name	The name of the header definition (specified in WebView::setHeaderDefinition). If you
					specify an empty string, this will remove ALL header re-write rules.

</member>
        <member name="M:Awesomium.WebView.removeHeaderRewriteRule(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Removes a header re-write rule from this WebView.

 @param	rule	The rule to remove (should match the string specified in WebView::addHeaderRewriteRule exactly).

</member>
        <member name="M:Awesomium.WebView.addHeaderRewriteRule(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Adds a new a header re-write rule. All requests whose URL matches the specified rule will have its 
 HTTP headers re-written with the specified header definition before sending it to the server.

 @param	rule	A wide string with optional wildcards (*, ?) that matches the URL(s) that will
					have its headers re-written with the specified header definition.

 @param	name	The name of the header definition (specified in WebView::setHeaderDefinition).

 @note		The case where a URL is matched by multiple rules is unsupported, only the first match will be used.

</member>
        <member name="M:Awesomium.WebView.setHeaderDefinition(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.map&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.C">
 Defines a new Header Definition or updates it if it already exists.

 @param	name	The unique name of the Header Definition; this is used to refer to it later 
					in WebView::addHeaderRewriteRule and WebView::removeHeaderRewriteRulesByDefinitionName.

 @param	definition	The header definition, a map of key/values representing an HTTP header.

</member>
        <member name="M:Awesomium.WebView.clearAllURLFilters">
Clears all URL Filter rules.

</member>
        <member name="M:Awesomium.WebView.addURLFilter(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Adds a new URL Filter rule.

 @param	filter	A string with optional wildcards that describes a certain URL.

 @note		For example, to match all URLs from the domain "google.com", your filter string 
			might be: http://google.com/*

 @note		You may also use the "local://" scheme prefix to describe the URL to the base
			directory (set via WebCore::setBaseDirectory).

</member>
        <member name="M:Awesomium.WebView.setURLFilteringMode(Awesomium.URLFilteringMode)">
 Sets the current URL Filtering Mode (default is UFM_NONE).
 See URLFilteringMode for more information on the modes.

 @param	mode	The URL filtering mode to use.

</member>
        <member name="M:Awesomium.WebView.setTransparent(System.Boolean)">
 Sets whether or not pages should be rendered with a transparent background-color.

 @param	isTransparent	Whether or not to force the background-color as transparent.

</member>
        <member name="M:Awesomium.WebView.focus">
Notifies the current page that is has gained focus.

</member>
        <member name="M:Awesomium.WebView.unfocus">
Notifies the current page that it has lost focus.

</member>
        <member name="M:Awesomium.WebView.resize(System.Int32,System.Int32)">
 Resizes this WebView to certain dimensions.

 @param	width	The width to resize to.
 @param	height	The height to resize to.

</member>
        <member name="M:Awesomium.WebView.resetZoom">
Resets the zoom level.

</member>
        <member name="M:Awesomium.WebView.zoomOut">
Zooms out of the page, reducing by 20%.

</member>
        <member name="M:Awesomium.WebView.zoomIn">
Zooms into the page, enlarging by 20%.

</member>
        <member name="M:Awesomium.WebView.getContentAsText(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
 Retrieves the content of the current page as plain text.

 @param	result	The wide string to store the retrieved text in.

 @param	maxChars	The maximum number of characters to retrieve.

 @note	Warning: The performance of this function depends upon the number of retrieved characters
		and the complexity of the page.

</member>
        <member name="M:Awesomium.WebView.deselectAll">
De-selects all items on the current page.

</member>
        <member name="M:Awesomium.WebView.selectAll">
Selects all items on the current page.

</member>
        <member name="M:Awesomium.WebView.paste">
Invokes a 'paste' action using the system clipboard.

</member>
        <member name="M:Awesomium.WebView.copy">
Invokes a 'copy' action using the system clipboard.

</member>
        <member name="M:Awesomium.WebView.cut">
Invokes a 'cut' action using the system clipboard.

</member>
        <member name="M:Awesomium.WebView.injectKeyboardEvent(Awesomium.WebKeyboardEvent!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Injects a keyboard event. See WebKeyboardEvent.h for more information.

 @param	keyboardEvent	The keyboard event to inject.

</member>
        <member name="M:Awesomium.WebView.injectMouseWheel(System.Int32)">
 Injects a mouse-wheel event.

 @param	scrollAmount	The relative amount of pixels to scroll by.

</member>
        <member name="M:Awesomium.WebView.injectMouseUp(Awesomium.MouseButton)">
 Injects a mouse-up event.

 @param	button	The button that was released.

</member>
        <member name="M:Awesomium.WebView.injectMouseDown(Awesomium.MouseButton)">
 Injects a mouse-down event.

 @param	button	The button that was pressed.

</member>
        <member name="M:Awesomium.WebView.injectMouseMove(System.Int32,System.Int32)">
 Injects a mouse-move event in local coordinates.

 @param	x	The absolute x-coordinate of the mouse (localized to the WebView).
 @param	y	The absolute y-coordinate of the mouse (localized to the WebView).

</member>
        <member name="M:Awesomium.WebView.render(System.Byte*,System.Int32,System.Int32,Awesomium.Rect*)">
 Renders the WebView to an off-screen buffer.

 @param	destination	The buffer to render to, its width and height should match the WebView's.

 @param	destRowSpan	The row-span of the destination buffer (number of bytes per row).

 @param	destDepth	The depth (bytes per pixel) of the destination buffer. Valid options
						include 3 (BGR/RGB) or 4 (BGRA/RGBA).

 @param	renderedRect	Optional (pass 0 to ignore); if asynchronous rendering is not enabled,
							you can provide a pointer to a Rect to store the dimensions of the 
							rendered area, or rather, the dimensions of the area that actually
							changed since the last render.

</member>
        <member name="M:Awesomium.WebView.isDirty">
 Returns whether or not the WebView is dirty and needs to be re-rendered via WebView::render.

 @return	If the WebView is dirty, returns true, otherwise returns false.

</member>
        <member name="M:Awesomium.WebView.setObjectCallback(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Sets a callback function of a Javascript object previously created by WebView::createObject. This is very useful
 for passing events from Javascript to C++. To receive notification of the callback, a WebViewListener should 
 be registered (see WebView::setListener and WebViewListener::onCallback).

 @param	objectName	The name of the Javascript object.

 @param	callbackName	The name of the callback function.

</member>
        <member name="M:Awesomium.WebView.setObjectProperty(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Awesomium.JSValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Sets a property of a Javascript object previously created by WebView::createObject.

 @param	objectName	The name of the Javascript object.

 @param	propName	The name of the property.

 @param	value	The javascript-value of the property.

</member>
        <member name="M:Awesomium.WebView.destroyObject(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Destroys a Javascript object previously created by WebView::createObject.

 @param	objectName	The name of the object to destroy.

</member>
        <member name="M:Awesomium.WebView.createObject(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Creates a new global Javascript object that will persist throughout the lifetime of this WebView. This object is
 managed directly by Awesomium and so you can modify its properties and bind callback functions via WebView::setObjectProperty
 and WebView::setObjectCallback, respectively.

 @param	objectName	The name of the object.

</member>
        <member name="M:Awesomium.WebView.callJavascriptFunction(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Awesomium.JSValue&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Call a certain function defined in Javascript directly.

 @param	object	The name of the object that contains the function, pass an empty string if the function
					is defined in the global scope.

 @param	function	The name of the function.

 @param	args	The arguments to pass to the function.

 @param	frameName	Optional, the name of the frame to execute in; leave this blank to execute in the main frame.

</member>
        <member name="M:Awesomium.WebView.executeJavascriptWithResult(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Executes a string of Javascript in the context of the current page asynchronously with a result.

 @param	javascript	The wide string of Javascript to execute.

 @param	frameName	Optional, the name of the frame to execute in; leave this blank to execute in the main frame.

 @return	Returns a 'FutureJSValue' which is basically an 'IOU' for the future JSValue result.
			You can obtain the actual result via FutureJSValue::get later.

</member>
        <member name="M:Awesomium.WebView.executeJavascriptWithResult(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Executes a string of Javascript in the context of the current page asynchronously with a result.

 @param	javascript	The ASCII string of Javascript to execute.

 @param	frameName	Optional, the name of the frame to execute in; leave this blank to execute in the main frame.

 @return	Returns a 'FutureJSValue' which is basically an 'IOU' for the future JSValue result.
			You can obtain the actual result via FutureJSValue::get later.

</member>
        <member name="M:Awesomium.WebView.executeJavascript(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Executes a string of Javascript in the context of the current page asynchronously.

 @param	javascript	The wide string of Javascript to execute.

 @param	frameName	Optional, the name of the frame to execute in; leave this blank to execute in the main frame.

</member>
        <member name="M:Awesomium.WebView.executeJavascript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Executes a string of Javascript in the context of the current page asynchronously.

 @param	javascript	The ASCII string of Javascript to execute.

 @param	frameName	Optional, the name of the frame to execute in; leave this blank to execute in the main frame.

</member>
        <member name="M:Awesomium.WebView.goToHistoryOffset(System.Int32)">
 Navigates back/forward in history via a relative offset.

 @note
	For example, to go back one page:
		myView-&gt;goToHistoryOffset(-1);
	Or, to go forward one page:
		myView-&gt;goToHistoryOffset(1);

 @param	offset	The relative offset in history to navigate to.

</member>
        <member name="M:Awesomium.WebView.loadFile(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Loads a local file into the WebView asynchronously.

 @param	file	The file to load.

 @param	frameName	Optional, the name of the frame to load the file in; leave this blank to load in the main frame.

 @note	The file should exist within the base directory (specified via WebCore::setBaseDirectory).

</member>
        <member name="M:Awesomium.WebView.loadHTML(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Loads a string of HTML into the WebView asynchronously.

 @param	html	The HTML string (wide) to load.

 @param	frameName	Optional, the name of the frame to load the HTML in; leave this blank to load in the main frame.

 @note	The base directory (specified via WebCore::setBaseDirectory) will be used to resolve
		relative URLs/resources (such as images, links, etc).

</member>
        <member name="M:Awesomium.WebView.loadHTML(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Loads a string of HTML into the WebView asynchronously.

 @param	html	The HTML string (ASCII) to load.

 @param	frameName	Optional, the name of the frame to load the HTML in; leave this blank to load in the main frame.

 @note	The base directory (specified via WebCore::setBaseDirectory) will be used to resolve
		relative URLs/resources (such as images, links, etc).

</member>
        <member name="M:Awesomium.WebView.loadURL(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!Sy">
 Loads a URL into the WebView asynchronously.

 @param	url	The URL to load.

 @param	frameName	Optional, the name of the frame to load the URL in; leave this blank to load in the main frame.

 @param	username	Optional, if the URL requires authentication, the username to authorize as.

 @param	password	Optional, if the URL requires authentication, the password to use.

</member>
        <member name="M:Awesomium.WebView.loadURL(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.Compil">
 Loads a URL into the WebView asynchronously.

 @param	url	The URL to load.

 @param	frameName	Optional, the name of the frame to load the URL in; leave this blank to load in the main frame.

 @param	username	Optional, if the URL requires authentication, the username to authorize as.

 @param	password	Optional, if the URL requires authentication, the password to use.

</member>
        <member name="M:Awesomium.WebView.getListener">
 Retrieves the current WebViewListener.

 @return	If a WebViewListener is registered, returns a pointer to the instance, otherwise returns 0.

</member>
        <member name="M:Awesomium.WebView.setListener(Awesomium.WebViewListener*)">
 Registers a WebViewListener to call upon various events (such as load completions, callbacks, title receptions,
 cursor changes, etc).

 @param	listener	The WebViewListener to register or NULL to clear any current registrations.

</member>
        <member name="M:Awesomium.WebView.destroy">
 Explicitly destroys this WebView instance. If you neglect to call this, the WebCore singleton
 will automatically destroy all lingering WebView instances at shutdown.

 @note	This should NEVER be called directly from one of the notifications of WebViewListener.

</member>
        <member name="T:Awesomium.WebView">
A WebView is essentially a single instance of a web-browser (created via the WebCore singleton)
that you can interact with (via input injection, javascript, etc.) and render to an off-screen buffer.

</member>
        <member name="D:Awesomium.HeaderDefinition">
A map of string key/values representing an HTTP header.

</member>
        <member name="T:Awesomium.Rect">
A simple rectangle class, used with WebView::render

</member>
        <member name="T:Awesomium.URLFilteringMode">
URL Filtering mode enumerations, used by WebView::setURLFilteringMode

</member>
        <member name="F:UFM_WHITELIST">
All resource requests and page navigations are DENIED 
except those that match the URL filters specified.

</member>
        <member name="F:UFM_BLACKLIST">
All resource requests and page navigations are ALLOWED 
except those that match the URL filters specified.

</member>
        <member name="T:Awesomium.MouseButton">
Mouse button enumerations, used with WebView::injectMouseDown 
and WebView::injectMouseUp

</member>
        <member name="M:Awesomium.getKeyIdentifierFromVirtualKeyCode(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
 Utility function for generating a key identifier string from a virtual key-code.

 @param	virtualKeyCode	The virtual key-code to generate the key identifier from.

 @param	keyIdentifierResult	The string to store the result in (must be at least 20 chars).

</member>
        <member name="F:Awesomium.WebKeyboardEvent.isSystemKey">
Whether or not the pressed key is a "system key". This is a Windows-only concept and
should be "false" for all non-Windows platforms. For more information, see the following
link: http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx

</member>
        <member name="F:Awesomium.WebKeyboardEvent.unmodifiedText">
The text generated by this keyboard event before all modifiers except shift are applied.
This is used internally for working out shortcut keys. This is usually only a single
character but we're generous and cap it at a max of 4 characters.

</member>
        <member name="F:Awesomium.WebKeyboardEvent.text">
The actual text generated by this keyboard event. This is usually only a single character
but we're generous and cap it at a max of 4 characters.

</member>
        <member name="F:Awesomium.WebKeyboardEvent.keyIdentifier">
This is a string identifying the key that was pressed. This can be generated from the
virtualKeyCode via the getKeyIdentifierFromVirtualKeyCode() utility function. You can
find the full list of key identifiers at:  http://www.w3.org/TR/DOM-Level-3-Events/keyset.html

</member>
        <member name="F:Awesomium.WebKeyboardEvent.nativeKeyCode">
The actual key-code generated by the platform. The DOM specification primarily uses
Windows-equivalent codes (hence virtualKeyCode above) but it helps to additionally
specify the platform-specific key-code as well.

</member>
        <member name="F:Awesomium.WebKeyboardEvent.virtualKeyCode">
The virtual key-code associated with this keyboard event. This is either directly
from the event (ie, WPARAM on Windows) or via a mapping function. You can see a full 
list of the possible virtual key-codes in KeyboardCodes.h

</member>
        <member name="F:Awesomium.WebKeyboardEvent.modifiers">
The current state of the keyboard. Modifiers may be OR'd together to represent multiple values.
</member>
        <member name="F:Awesomium.WebKeyboardEvent.type">
The type of this WebKeyboardEvent
</member>
        <member name="T:Awesomium.WebKeyboardEvent.Modifiers">
An enumeration of the different keyboard modifiers.
</member>
        <member name="T:Awesomium.WebKeyboardEvent.Type">
An enumeration of the different WebKeyboardEvent types.
</member>
        <member name="M:Awesomium.WebKeyboardEvent.#ctor(System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)">
 Creates a WebKeyboardEvent directly from a Windows keyboard event message.

 @note	Valid message types include:
		- WM_KEYDOWN
		- WM_KEYUP
		- WM_SYSKEYDOWN
		- WM_SYSKEYUP
		- WM_CHAR
		- WM_IMECHAR
		- WM_SYSCHAR

</member>
        <member name="M:Awesomium.WebKeyboardEvent.#ctor">
Creates an empty WebKeyboardEvent, you will need to initialize its members
yourself. This is most useful for synthesizing your own keyboard events.

</member>
        <member name="T:Awesomium.WebKeyboardEvent">
A generic keyboard event that can be created from a platform-specific event or
synthesized from a virtual event. Used by WebView::injectKeyboardEvent.

</member>
        <member name="M:Awesomium.WebViewListener.onOpenExternalLink(Awesomium.WebView*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when an external link is attempted to be opened. An external link
 is any link that normally opens in a new window in a standard browser (for example, links
 with target="_blank", calls to window.open(url), and URL open events from Flash plugins).
 External links may or may not be automatically opened by a WebView (please see
 WebView::setOpensExternalLinksInCallingFrame).

 @param	caller	The WebView that fired the event.

 @param	url		The URL of the external link.

 @param	source	If the external link originated from a call to window.open(), this value
					is "window.open". Else, if the link originated from a Flash plugin, this
					value is "flash". Otherwise, this value is the name of the frame that
					contains the link.

</member>
        <member name="M:Awesomium.WebViewListener.onChangeTargetURL(Awesomium.WebView*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when the target URL has changed. This is usually the result of 
 hovering over a link on the page.

 @param	caller	The WebView that fired the event.

 @param	url	The updated target URL (or empty if the target URL is cleared).

</member>
        <member name="M:Awesomium.WebViewListener.onChangeKeyboardFocus(Awesomium.WebView*,System.Boolean)">
 This event is fired when keyboard focus has changed.

 @param	caller	The WebView that fired the event.

 @param	isFocused	Whether or not the keyboard is currently focused.

</member>
        <member name="M:Awesomium.WebViewListener.onChangeCursor(Awesomium.WebView*,HICON__*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a cursor has changed state. [Windows-only]

 @param	caller	The WebView that fired the event.

 @param	cursor	The cursor handle/type.

</member>
        <member name="M:Awesomium.WebViewListener.onChangeTooltip(Awesomium.WebView*,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a tooltip has changed state.

 @param	caller	The WebView that fired the event.

 @param	tooltip		The tooltip text (or, is an empty string when the tooltip should disappear).

</member>
        <member name="M:Awesomium.WebViewListener.onReceiveTitle(Awesomium.WebView*,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a page title is received.

 @param	caller	The WebView that fired the event.

 @param	title	The page title.

 @param	frameName	The name of the frame that this event originated from.

</member>
        <member name="M:Awesomium.WebViewListener.onCallback(Awesomium.WebView*,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Awesomium.JSValue&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a Client callback has been invoked via Javascript from a page.

 @param	caller	The WebView that fired the event.

 @param	objectName	The name of the Javascript Object that contains the invoked callback.

 @param	callbackName	The name of the callback that was invoked (must have been previously bound via WebView::setObjectCallback).

 @param	args	The arguments passed to the callback.

</member>
        <member name="M:Awesomium.WebViewListener.onFinishLoading(Awesomium.WebView*)">
 This event is fired when all loads have finished for a WebView.

 @param	caller	The WebView that fired the event.

</member>
        <member name="M:Awesomium.WebViewListener.onBeginLoading(Awesomium.WebView*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicit">
 This event is fired when a WebView begins to actually receive data from a server.

 @param	caller	The WebView that fired the event.

 @param	url		The URL of the frame that is being loaded.

 @param	frameName	The name of the frame that this event originated from.

 @param	statusCode	The HTTP status code returned by the server.

 @param	mimeType	The mime-type of the content that is being loaded.

</member>
        <member name="M:Awesomium.WebViewListener.onBeginNavigation(Awesomium.WebView*,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a WebView begins navigating to a new URL.

 @param	caller	The WebView that fired the event.

 @param	url		The URL that is being navigated to.

 @param	frameName	The name of the frame that this event originated from.

</member>
        <member name="T:Awesomium.WebViewListener">
WebViewListener is a virtual interface that you can use to receive notifications
from a certain WebView. Simply make a class that inherits from WebViewListener
and register it via WebView::setListener.

</member>
        <member name="M:Awesomium.FutureJSValue.get">
If the internal JSValue has been computed, immediately returns
the value, else, blocks the calling thread until it has.

</member>
        <member name="M:Awesomium.JSValue.getObject">
Gets a reference to this JSValue's object value (will assert if not an object type)

Gets a constant reference to this JSValue's object value (will assert if not an object type)
</member>
        <member name="M:Awesomium.JSValue.getArray">
Gets a reference to this JSValue's array value (will assert if not an array type)

Gets a constant reference to this JSValue's array value (will assert if not an array type)
</member>
        <member name="M:Awesomium.JSValue.toBoolean">
Returns this JSValue as a boolean (converting if necessary).
</member>
        <member name="M:Awesomium.JSValue.toDouble">
Returns this JSValue as a double (converting if necessary).
</member>
        <member name="M:Awesomium.JSValue.toInteger">
Returns this JSValue as an integer (converting if necessary).
</member>
        <member name="M:Awesomium.JSValue.toString">
Returns this JSValue as a wide string (converting if necessary).
</member>
        <member name="M:Awesomium.JSValue.isNull">
Returns whether or not this JSValue is null.
</member>
        <member name="M:Awesomium.JSValue.isObject">
Returns whether or not this JSValue is an object.
</member>
        <member name="M:Awesomium.JSValue.isArray">
Returns whether or not this JSValue is an array.
</member>
        <member name="M:Awesomium.JSValue.isString">
Returns whether or not this JSValue is a string.
</member>
        <member name="M:Awesomium.JSValue.isNumber">
Returns whether or not this JSValue is a number (integer or double).
</member>
        <member name="M:Awesomium.JSValue.isDouble">
Returns whether or not this JSValue is a double.
</member>
        <member name="M:Awesomium.JSValue.isInteger">
Returns whether or not this JSValue is an integer.
</member>
        <member name="M:Awesomium.JSValue.isBoolean">
Returns whether or not this JSValue is a boolean.
</member>
        <member name="M:Awesomium.JSValue.#ctor(std.vector&lt;Awesomium.JSValue&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates a JSValue initialized with an array.
</member>
        <member name="M:Awesomium.JSValue.#ctor(std.map&lt;std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;,Awesomium.JSValue&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates a JSValue initialized with an object.
</member>
        <member name="M:Awesomium.JSValue.#ctor(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates a JSValue initialized with a wide string.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*)">
Creates a JSValue initialized with a wide string.
</member>
        <member name="M:Awesomium.JSValue.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates a JSValue initialized with an ASCII string.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Creates a JSValue initialized with an ASCII string.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.Double)">
Creates a JSValue initialized with a double.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.Int32)">
Creates a JSValue initialized with an integer.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.Boolean)">
Creates a JSValue initialized with a boolean.
</member>
        <member name="M:Awesomium.JSValue.#ctor">
Creates a null JSValue.
</member>
        <member name="T:Awesomium.JSValue">
JSValue is a class that represents a Javascript value. It can be initialized from
and converted to several types: boolean, integer, double, string

</member>
        <!-- Discarding badly formed XML document comment for member 'T:Awesomium.FutureJSValue'. -->
    </members>
</doc>