<?xml version="1.0"?>
<doc>
    <assembly>
        "AwesomiumDotNet"
    </assembly>
    <members>
        <member name="M:AwesomiumDotNet.WebCore.Resume">
            <summary>
Resumes the internal thread of the Awesomium WebCore.
</summary>
            <seealso cref="M:AwesomiumDotNet.WebCore.Pause" />
        </member>
        <member name="M:AwesomiumDotNet.WebCore.Pause">
            <summary>
Pauses the internal thread of the Awesomium WebCore.
</summary>
            <remarks>
The pause and resume functions were added as a temporary workaround
for threading issues with Flash plugins on the Mac OSX platform.
You should call WebCore::pause right before handling the message loop
in your main thread (usually via SDL_PollEvents) and immediately call
resume after.
</remarks>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.Update">
            <summary>
Updates the WebCore and allows it to conduct various operations such as the propagation
of bound JS callbacks and the invocation of any queued listener events.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCore.ArePluginsEnabled">
            <summary>
Whether or not plugins are enabled.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.SetCustomResponsePage(System.Int32,System.String)">
            <summary>
Sets a custom response page to use when a WebView encounters a certain
HTML status code from the server (such as '404 - File not found').
</summary>
            <param name="statusCode">
The status code this response page should be associated with.
See http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
</param>
            <param name="filePath">
The local page to load as a response, should be a path relative to the base directory.
</param>
        </member>
        <member name="P:AwesomiumDotNet.WebCore.PixelFormat">
            <summary>
The pixel format being used.
</summary>
        </member>
        <member name="P:AwesomiumDotNet.WebCore.BaseDirectory">
            <summary>
The current base directory.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
Creates a new WebView.
</summary>
            <param name="width">
The width of the WebView in pixels.
</param>
            <param name="height">
The height of the WebView in pixels.
</param>
            <param name="isTransparent">
Whether or not the background of a WebView should be rendered as transparent.
</param>
            <param name="enableAsyncRendering">
Enables fully-asynchronous rendering, see remarks.
</param>
            <param name="maxAsyncRenderPerSec">
The maximum times per second this WebView should asynchronously render.
</param>
            <returns>
Returns a WebView Instance.
</returns>
            <remark>
When asynchronous rendering is enabled, all rendering takes place on
another thread asynchronously. The benefit of this behavior is that you
may see a marked performance increase on machines with multi-core
processors (especially when a WebView has high-animation content).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
Creates a new WebView.
</summary>
            <param name="width">
The width of the WebView in pixels.
</param>
            <param name="height">
The height of the WebView in pixels.
</param>
            <param name="isTransparent">
Whether or not the background of a WebView should be rendered as transparent.
</param>
            <param name="enableAsyncRendering">
Enables fully-asynchronous rendering, see remarks.
</param>
            <returns>
Returns a WebView Instance.
</returns>
            <remark>
When asynchronous rendering is enabled, all rendering takes place on
another thread asynchronously. The benefit of this behavior is that you
may see a marked performance increase on machines with multi-core
processors (especially when a WebView has high-animation content).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.CreateWebView(System.Int32,System.Int32,System.Boolean)">
            <summary>
Creates a new WebView.
</summary>
            <param name="width">
The width of the WebView in pixels.
</param>
            <param name="height">
The height of the WebView in pixels.
</param>
            <param name="isTransparent">
Whether or not the background of a WebView should be rendered as transparent.
</param>
            <returns>
Returns a WebView Instance.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.CreateWebView(System.Int32,System.Int32)">
            <summary>
Creates a new WebView.
</summary>
            <param name="width">
The width of the WebView in pixels.
</param>
            <param name="height">
The height of the WebView in pixels.
</param>
            <returns>
Returns a WebView Instance.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.Dispose">
            <summary>
Destroys the WebCore singleton. (Also destroys any lingering WebViews)
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.#ctor(AwesomiumDotNet.LogLevel,System.Boolean,AwesomiumDotNet.PixelFormat)">
            <summary>
Instantiates the WebCore.
</summary>
            <param name="level">
The logging level to use (default is LogLevel.Normal).
</param>
            <param name="enablePlugins">
Whether or not to enable embedded plugins.
</param>
            <param name="pixelFormat">
The pixel-format/byte-ordering to use when rendering WebViews.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.#ctor(AwesomiumDotNet.LogLevel,System.Boolean)">
            <summary>
Instantiates the WebCore.
</summary>
            <param name="level">
The logging level to use (default is LogLevel.Normal).
</param>
            <param name="enablePlugins">
Whether or not to enable embedded plugins.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.#ctor(AwesomiumDotNet.LogLevel)">
            <summary>
Instantiates the WebCore.
</summary>
            <param name="level">
The logging level to use (default is LogLevel.Normal).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebCore.#ctor">
            <summary>
Instantiates the WebCore.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.WebCore">
            <summary>
The WebCore manages the creation of WebViews, the internal worker thread,
and various other global states that are required to embed Chromium.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.PixelFormat">
            <summary>
An enumeration of the two output pixel formats that WebView::render will use.
</summary>
        </member>
        <member name="F:AwesomiumDotNet.PixelFormat.Rgba">
            <summary> RGBA byte ordering [Red, Green, Blue, Alpha] </summary>
        </member>
        <member name="F:AwesomiumDotNet.PixelFormat.Bgra">
            <summary> BGRA byte ordering [Blue, Green, Red, Alpha] </summary>
        </member>
        <member name="T:AwesomiumDotNet.LogLevel">
            <summary>
An enumeration of the three verbosity settings for the Awesomium Log.
</summary>
        </member>
        <member name="F:AwesomiumDotNet.LogLevel.Verbose">
            <summary> Logs everything </summary>
        </member>
        <member name="F:AwesomiumDotNet.LogLevel.Normal">
            <summary> Logs only errors </summary>
        </member>
        <member name="F:AwesomiumDotNet.LogLevel.None">
            <summary> No log is created </summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetCallback(System.String)">
            <summary>
Registers a global 'Client' callback that can be invoked via
Javascript from within all pages loaded into this view.
</summary>
            <param name="name">
The name of the callback.
</param>
            <remarks>
You can invoke the callback in Javascript as:
Client.your_name_here(arg1, arg2, ...);
</remarks>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetProperty(System.String,AwesomiumDotNet.JSValue)">
            <summary>
Sets a global 'Client' property that can be accessed via Javascript from
within all pages loaded into this web-view.
</summary>
            <param name="name">
The name of the property.
</param>
            <param name="value">
The javascript-value of the property.
</param>
            <remarks>
You can access all properties you set via the 'Client' object using Javascript.
For example, if you set the property with a name of 'color' and a value of 'blue',
you could access this from the page using
Javascript: document.write("The color is " + Client.color);
</remarks>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ExecuteJavaScriptWithResult(System.String,System.String)">
            <summary>
Executes a string of Javascript in the context of the current page asynchronously with a result.
</summary>
            <param name="javaScript">
The string of Javascript to execute.
</param>
            <param name="frameName">
The name of the frame to execute in; leave this blank to execute in the main frame.
</param>
            <returns>
Returns a 'FutureJSValue' which is basically an 'IOU' for the future JSValue result.
You can obtain the actual result via FutureJSValue.Get later.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ExecuteJavaScriptWithResult(System.String)">
            <summary>
Executes a string of Javascript in the context of the current page asynchronously with a result.
</summary>
            <param name="javaScript">
The string of Javascript to execute.
</param>
            <returns>
Returns a 'FutureJSValue' which is basically an 'IOU' for the future JSValue result.
You can obtain the actual result via FutureJSValue.Get later.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ExecuteJavaScript(System.String,System.String)">
            <summary>
Executes a string of Javascript in the context of the current page asynchronously.
</summary>
            <param name="javaScript">
The string of Javascript to execute.
</param>
            <param name="frameName">
The name of the frame to execute in; leave this blank to execute in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ExecuteJavaScript(System.String)">
            <summary>
Executes a string of Javascript in the context of the current page asynchronously.
</summary>
            <param name="javaScript">
The string of Javascript to execute.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.GoToHistoryOffset(System.Int32)">
            <summary>
Navigates back/forward in history via a relative offset.
</summary>
            <param name="offset">
The relative offset in history to navigate to.
</param>
            <remarks>
For example, to go back one page:
  myView.GoToHistoryOffset(-1);
Or, to go forward one page:
  myView.GoToHistoryOffset(1);
</remarks>
        </member>
        <member name="M:AwesomiumDotNet.WebView.IsDirty">
            <summary>
Returns whether or not the current web-view is dirty and needs to be re-rendered.
</summary>
            <returns>
If the web-view is dirty, returns true, otherwise returns false.
</returns>
        </member>
        <member name="M:AwesomiumDotNet.WebView.RenderToBitmap(System.Drawing.Bitmap)">
            <summary>
Renders the WebView to an off-screen bitmap.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.RenderToBitmap(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
Renders the WebView to an off-screen bitmap.
</summary>
            <param name="width">
Width of the render.
</param>
            <param name="height">
Height of the render.
</param>
            <param name="pixelFormat">
Format of the color data. Use Imaging.PixelFormat.Format32bppArgb or Format24bppRgb
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.RenderToBitmap(System.Int32,System.Int32)">
            <summary>
Renders the WebView to an off-screen bitmap.
</summary>
            <param name="width">
Width of the render.
</param>
            <param name="height">
Height of the render.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.Int32,System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
            <param name="renderedRect">
If asynchronous rendering is not enabled,	you can provide
a pointer to a Rect to store the dimensions of the rendered area,
or rather, the dimensions of the area that actually changed
since the last render.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.IntPtr,System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
            <param name="renderedRect">
If asynchronous rendering is not enabled,	you can provide
a pointer to a Rect to store the dimensions of the rendered area,
or rather, the dimensions of the area that actually changed
since the last render.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.Byte[],System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
            <param name="renderedRect">
If asynchronous rendering is not enabled,	you can provide
a pointer to a Rect to store the dimensions of the rendered area,
or rather, the dimensions of the area that actually changed
since the last render.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.Int32,System.Int32,System.Int32)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.IntPtr,System.Int32,System.Int32)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Render(System.Byte[],System.Int32,System.Int32)">
            <summary>
Renders the WebView to an off-screen buffer.
</summary>
            <param name="destination">
The buffer to render to, its width and height should match the WebView's.
</param>
            <param name="rowSpan">
The row-span of the destination buffer (number of bytes per row).
</param>
            <param name="depth">
The depth (bytes per pixel) of the destination buffer. Valid options
include 3 (BGR/RGB) or 4 (BGRA/RGBA).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SetTransparent(System.Boolean)">
            <summary>
Sets whether or not pages should be rendered with a transparent background-color.
</summary>
            <param name="isTransparent">
Whether or not to force the background-color as transparent.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadFile(System.String,System.String)">
            <summary>
Loads a local file into the WebView asynchronously.
</summary>
            <param name="file">
The file to load.
</param>
            <param name="frameName">
The name of the frame to load the file in; leave this blank to load in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadFile(System.String)">
            <summary>
Loads a local file into the WebView asynchronously.
</summary>
            <param name="file">
The file to load.
</param>
            <remark>
The file should exist within the base directory
(specified via WebCore.BaseDirectory).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadHtml(System.String,System.String)">
            <summary>
Loads a string of HTML into the WebView asynchronously.
</summary>
            <param name="html">
The HTML string to load.
</param>
            <param name="frameName">
The name of the frame to load the HTML in; leave this blank to load in the main frame.
</param>
            <remark>
The base directory (specified via WebCore.BaseDirectory)
will be used to resolve relative URL's resources (such as images, links, etc).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadHtml(System.String)">
            <summary>
Loads a string of HTML into the WebView asynchronously.
</summary>
            <param name="html">
The HTML string to load.
</param>
            <remark>
The base directory (specified via WebCore.BaseDirectory)
will be used to resolve relative URL's resources (such as images, links, etc).
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.String,System.String,System.String,System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
            <param name="frameName">
The name of the frame to load the URL in; leave this blank to load in the main frame.
</param>
            <param name="userName">
If the URL requires authentication, the username to authorize as.
</param>
            <param name="password">
If the URL requires authentication, the password to use.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.Uri,System.String,System.String,System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
            <param name="frameName">
The name of the frame to load the URL in; leave this blank to load in the main frame.
</param>
            <param name="userName">
If the URL requires authentication, the username to authorize as.
</param>
            <param name="password">
If the URL requires authentication, the password to use.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.String,System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
            <param name="frameName">
The name of the frame to load the URL in; leave this blank to load in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.Uri,System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
            <param name="frameName">
The name of the frame to load the URL in; leave this blank to load in the main frame.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.String)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.LoadUrl(System.Uri)">
            <summary>
Loads a URL into the WebView asynchronously.
</summary>
            <param name="url">
The URL to load.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectKeyboardEvent(System.Windows.Forms.Message)">
            <summary>
Injects a keyboard event.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectKeyboardEvent(System.IntPtr,AwesomiumDotNet.WM,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Injects a keyboard event.
</summary>
            <remark>
The native Windows keyboard message should be passed.
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectKeyboardEvent(System.IntPtr,System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Injects a keyboard event.
</summary>
            <remark>
The native Windows keyboard message should be passed,
msg can be one of the WM.* values.
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseWheel(System.Int32)">
            <summary>
Injects a mouse-wheel event.
</summary>
            <param name="scrollAmount">
The amount of pixels to scroll by.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseUp(System.Windows.Forms.MouseButtons)">
            <summary>
Injects a mouse-up event.
</summary>
            <param name="button">
The button that was released.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseUp(AwesomiumDotNet.MouseButton)">
            <summary>
Injects a mouse-up event.
</summary>
            <param name="button">
The button that was released.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseDown(System.Windows.Forms.MouseButtons)">
            <summary>
Injects a mouse-down event.
</summary>
            <param name="button">
The button that was pressed.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseDown(AwesomiumDotNet.MouseButton)">
            <summary>
Injects a mouse-down event.
</summary>
            <param name="button">
The button that was pressed.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseMove(System.Drawing.Point)">
            <summary>
Injects a mouse-move event in local coordinates.
</summary>
            <param name="position">
The absolute coordinates of the mouse (localized to the WebView).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.InjectMouseMove(System.Int32,System.Int32)">
            <summary>
Injects a mouse-move event in local coordinates.
</summary>
            <param name="x">
The absolute x-coordinate of the mouse (localized to the WebView).
</param>
            <param name="y">
The absolute y-coordinate of the mouse (localized to the WebView).
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Resize(System.Int32,System.Int32)">
            <summary>
Resizes this WebView to certain dimensions.
</summary>
            <param name="width">
The width to resize to.
</param>
            <param name="height">
The height to resize to.
</param>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ResetZoom">
            <summary>
Resets the zoom level.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ZoomOut">
            <summary>
Zooms out of the page, reducing by 20%.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.ZoomIn">
            <summary>
Zooms into the page, enlarging by 20%.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.GetContentAsText(System.Int32)">
            <summary>
Retrieves the content of the current page as plain text.
</summary>
            <param name="maxChars">
The maximum number of characters to retrieve.
</param>
            <returns>
Returns the retrieved text.
</returns>
            <remark>
Warning: The performance of this function depends upon the number
of retrieved characters and the complexity of the page.
</remark>
        </member>
        <member name="M:AwesomiumDotNet.WebView.DeselectAll">
            <summary>
Deselects all items on the current page.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.SelectAll">
            <summary>
Selects all items on the current page.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Paste">
            <summary>
Invokes a 'paste' action using the system clipboard.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Cut">
            <summary>
Invokes a 'cut' action using the system clipboard.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Copy">
            <summary>
Invokes a 'copy' action using the system clipboard.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Unfocus">
            <summary>
Notifies the current page that it has lost focus.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Focus">
            <summary>
Notifies the current page that is has gained focus.
</summary>
        </member>
        <member name="M:AwesomiumDotNet.WebView.Destroy">
            <summary>
Explicitly destroys this WebView instance. If you neglect to call this,
the WebCore singleton will automatically destroy all lingering WebView instances at shutdown.
</summary>
            <remark>
This should NEVER be called directly from one of the notifications of WebViewListener.
</remark>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ReceiveTitle">
            <summary>This event is fired when a page title is received.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.FinishLoading">
            <summary>This event is fired when all loads have finished for a WebView.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ChangeTooltip">
            <summary>This event is fired when a tooltip has changed state.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ChangeTargetUrl">
            <summary>This event is fired when the target URL has changed. This is usually the result of
hovering over a link on the page.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ChangeKeyboardFocus">
            <summary>This event is fired when keyboard focus has changed.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.ChangeCursor">
            <summary>This event is fired when a cursor has changed state.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.Callback">
            <summary>This event is fired when a Client callback has been invoked via Javascript from a page.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.BeginNavigation">
            <summary>This event is fired when a WebView begins navigating to a new URL.</summary>
        </member>
        <member name="E:AwesomiumDotNet.WebView.BeginLoading">
            <summary>This event is fired when a WebView begins to actually receive data from a server.</summary>
        </member>
        <member name="T:AwesomiumDotNet.WebView">
            <summary>
A WebView is essentially a single instance of a web-browser
(created via the WebCore singleton) that you can interact with
(via input injection, javascript, etc.) and render to an off-screen buffer.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.UrlFilteringMode">
            <summary>
URL Filtering mode enumerations, used by WebView.SetUrlFilteringMode
</summary>
        </member>
        <member name="F:AwesomiumDotNet.UrlFilteringMode.None">
            <summary>
No filtering
</summary>
        </member>
        <member name="F:AwesomiumDotNet.UrlFilteringMode.Whitelist">
            <summary>
All resource requests and page navigations are DENIED 
except those that match the URL filters specified.
</summary>
        </member>
        <member name="F:AwesomiumDotNet.UrlFilteringMode.Blacklist">
            <summary>
All resource requests and page navigations are ALLOWED 
except those that match the URL filters specified.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.MouseButton">
            <summary>
Mouse button enumerations,
used with WebView.InjectMouseDown and WebView.InjectMouseUp
</summary>
        </member>
        <member name="T:AwesomiumDotNet.WM">
            <summary>
Windows keyboard messages,
used with WebView.InjectKeyboardEvent
</summary>
        </member>
        <member name="P:AwesomiumDotNet.ReceiveTitleEventArgs.FrameName">
            <summary>The name of the frame that this event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ReceiveTitleEventArgs.Title">
            <summary>The page title.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ReceiveTitleEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.FinishLoadingEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeTooltipEventArgs.Tooltip">
            <summary>The tooltip text (or, is an empty string when the tooltip should disappear).</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeTooltipEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeTargetUrlEventArgs.Url">
            <summary>The updated target URL (or empty if the target URL is cleared).</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeTargetUrlEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeKeyboardFocusEventArgs.IsFocused">
            <summary>Whether or not the keyboard is currently focused.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeKeyboardFocusEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeCursorEventArgs.Cursor">
            <summary>The cursor handle/type.</summary>
        </member>
        <member name="P:AwesomiumDotNet.ChangeCursorEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.CallbackEventArgs.Args">
            <summary>The arguments passed to the callback.</summary>
        </member>
        <member name="P:AwesomiumDotNet.CallbackEventArgs.Name">
            <summary>The name of the client callback that was invoked (specifically, "Client._this_name_here_(...)").</summary>
        </member>
        <member name="P:AwesomiumDotNet.CallbackEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginNavigationEventArgs.FrameName">
            <summary>The name of the frame that this event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginNavigationEventArgs.Url">
            <summary>The URL that is being navigated to.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginNavigationEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.MimeType">
            <summary>The mime-type of the content that is being loaded.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.StatusCode">
            <summary>The HTTP status code returned by the server.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.FrameName">
            <summary>The name of the frame that this event originated from.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.Url">
            <summary>The URL of the frame that is being loaded.</summary>
        </member>
        <member name="P:AwesomiumDotNet.BeginLoadingEventArgs.WebView">
            <summary>The WebView that the event originated from.</summary>
        </member>
        <member name="M:AwesomiumDotNet.FutureJSValue.Get">
            <summary>
If the internal JSValue has been computed, immediately returns
the value, else, blocks the calling thread until it has.
</summary>
        </member>
        <member name="T:AwesomiumDotNet.FutureJSValue">
            <summary>
FutureJSValue is a special wrapper around a JSValue that allows
asynchronous retrieval of the actual value at a later time.
If you are unfamiliar with the concept of a 'Future', please see:
http://en.wikipedia.org/wiki/Futures_and_promises
</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.ToDouble">
            <summary>Returns this JSValue as a double.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.ToInteger">
            <summary>Returns this JSValue as an integer.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.ToBoolean">
            <summary>Returns this JSValue as a boolean.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.ToString">
            <summary>Returns this JSValue as a string (converting if necessary).</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsNull">
            <summary>Returns whether or not this JSValue is null.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsString">
            <summary>Returns whether or not this JSValue is a string.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsDouble">
            <summary>Returns whether or not this JSValue is a double.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsInteger">
            <summary>Returns whether or not this JSValue is an integer.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.IsBoolean">
            <summary>Returns whether or not this JSValue is a boolean.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor(System.String)">
            <summary>Creates a JSValue initialized with a string.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor(System.Double)">
            <summary>Creates a JSValue initialized with a double.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor(System.Int32)">
            <summary>Creates a JSValue initialized with an integer.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor(System.Boolean)">
            <summary>Creates a JSValue initialized with a boolean.</summary>
        </member>
        <member name="M:AwesomiumDotNet.JSValue.#ctor">
            <summary>Creates a null JSValue.</summary>
        </member>
        <member name="T:AwesomiumDotNet.JSValue">
            <summary>
JSValue is a class that represents a Javascript value.
It can be initialized from and converted to several types:
boolean, integer, double, string
</summary>
        </member>
        <member name="M:Awesomium.WebView.setTransparent(System.Boolean)">
 Sets whether or not pages should be rendered with a transparent background-color.

 @param	isTransparent	Whether or not to force the background-color as transparent.

</member>
        <member name="M:Awesomium.WebView.focus">
Notifies the current page that is has gained focus.

</member>
        <member name="M:Awesomium.WebView.unfocus">
Notifies the current page that it has lost focus.

</member>
        <member name="M:Awesomium.WebView.resize(System.Int32,System.Int32)">
 Resizes this WebView to certain dimensions.

 @param	width	The width to resize to.
 @param	height	The height to resize to.

</member>
        <member name="M:Awesomium.WebView.resetZoom">
Resets the zoom level.

</member>
        <member name="M:Awesomium.WebView.zoomOut">
Zooms out of the page, reducing by 20%.

</member>
        <member name="M:Awesomium.WebView.zoomIn">
Zooms into the page, enlarging by 20%.

</member>
        <member name="M:Awesomium.WebView.getContentAsText(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
 Retrieves the content of the current page as plain text.

 @param	result	The wide string to store the retrieved text in.

 @param	maxChars	The maximum number of characters to retrieve.

 @note	Warning: The performance of this function depends upon the number of retrieved characters
		and the complexity of the page.

</member>
        <member name="M:Awesomium.WebView.deselectAll">
De-selects all items on the current page.

</member>
        <member name="M:Awesomium.WebView.selectAll">
Selects all items on the current page.

</member>
        <member name="M:Awesomium.WebView.paste">
Invokes a 'paste' action using the system clipboard.

</member>
        <member name="M:Awesomium.WebView.copy">
Invokes a 'copy' action using the system clipboard.

</member>
        <member name="M:Awesomium.WebView.cut">
Invokes a 'cut' action using the system clipboard.

</member>
        <member name="M:Awesomium.WebView.injectKeyboardEvent(HWND__*,System.UInt32,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong)">
 Injects a keyboard event. [Windows]

 @note	The native Windows keyboard message should be passed, valid message types include:
		- WM_KEYDOWN
		- WM_KEYUP
		- WM_SYSKEYDOWN
		- WM_SYSKEYUP
		- WM_CHAR
		- WM_IMECHAR
		- WM_SYSCHAR

</member>
        <member name="M:Awesomium.WebView.injectMouseWheel(System.Int32)">
 Injects a mouse-wheel event.

 @param	scrollAmount	The amount of pixels to scroll by.

</member>
        <member name="M:Awesomium.WebView.injectMouseUp(Awesomium.MouseButton)">
 Injects a mouse-up event.

 @param	button	The button that was released.

</member>
        <member name="M:Awesomium.WebView.injectMouseDown(Awesomium.MouseButton)">
 Injects a mouse-down event.

 @param	button	The button that was pressed.

</member>
        <member name="M:Awesomium.WebView.injectMouseMove(System.Int32,System.Int32)">
 Injects a mouse-move event in local coordinates.

 @param	x	The absolute x-coordinate of the mouse (localized to the WebView).
 @param	y	The absolute y-coordinate of the mouse (localized to the WebView).

</member>
        <member name="M:Awesomium.WebView.render(System.Byte*,System.Int32,System.Int32,Awesomium.Rect*)">
 Renders the WebView to an off-screen buffer.

 @param	destination	The buffer to render to, its width and height should match the WebView's.

 @param	destRowSpan	The row-span of the destination buffer (number of bytes per row).

 @param	destDepth	The depth (bytes per pixel) of the destination buffer. Valid options
						include 3 (BGR/RGB) or 4 (BGRA/RGBA).

 @param	renderedRect	Optional (pass 0 to ignore); if asynchronous rendering is not enabled,
							you can provide a pointer to a Rect to store the dimensions of the 
							rendered area, or rather, the dimensions of the area that actually
							changed since the last render.

</member>
        <member name="M:Awesomium.WebView.isDirty">
 Returns whether or not the current web-view is dirty and needs to be re-rendered.

 @return	If the web-view is dirty, returns true, otherwise returns false.

</member>
        <member name="M:Awesomium.WebView.setCallback(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Registers a global 'Client' callback that can be invoked via Javascript from
 within all pages loaded into this view. You will need to register a WebViewListener
 (WebView::setListener) to receieve notification of callbacks (WebViewListener::onCallback).

 @param	name	The name of the callback. You can invoke the callback in Javascript
					as: Client.your_name_here(arg1, arg2, ...);

 @note	In the future, it won't be necessary to register the callback name in advance.

</member>
        <member name="M:Awesomium.WebView.setProperty(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Awesomium.JSValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Sets a global 'Client' property that can be accessed via Javascript from
 within all pages loaded into this web-view.

 @param	name	The name of the property.
 @param	value	The javascript-value of the property.

 @note	You can access all properties you set via the 'Client' object using Javascript. For example,
		if you set the property with a name of 'color' and a value of 'blue', you could access
		this from the page using Javascript: document.write("The color is " + Client.color);

</member>
        <member name="M:Awesomium.WebView.executeJavascriptWithResult(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Executes a string of Javascript in the context of the current page asynchronously with a result.

 @param	javascript	The string of Javascript to execute.

 @param	frameName	Optional, the name of the frame to execute in; leave this blank to execute in the main frame.

 @return	Returns a 'FutureJSValue' which is basically an 'IOU' for the future JSValue result.
			You can obtain the actual result via FutureJSValue::get later.

</member>
        <member name="M:Awesomium.WebView.executeJavascript(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Executes a string of Javascript in the context of the current page asynchronously.

 @param	javascript	The string of Javascript to execute.

 @param	frameName	Optional, the name of the frame to execute in; leave this blank to execute in the main frame.

</member>
        <member name="M:Awesomium.WebView.goToHistoryOffset(System.Int32)">
 Navigates back/forward in history via a relative offset.

 @note
	For example, to go back one page:
		myView-&gt;goToHistoryOffset(-1);
	Or, to go forward one page:
		myView-&gt;goToHistoryOffset(1);

 @param	offset	The relative offset in history to navigate to.

</member>
        <member name="M:Awesomium.WebView.loadFile(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Loads a local file into the WebView asynchronously.

 @param	file	The file to load.

 @param	frameName	Optional, the name of the frame to load the file in; leave this blank to load in the main frame.

 @note	The file should exist within the base directory (specified via WebCore::setBaseDirectory).

</member>
        <member name="M:Awesomium.WebView.loadHTML(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Loads a string of HTML into the WebView asynchronously.

 @param	html	The HTML string to load.

 @param	frameName	Optional, the name of the frame to load the HTML in; leave this blank to load in the main frame.

 @note	The base directory (specified via WebCore::setBaseDirectory) will be used to resolve
		relative URL's/resources (such as images, links, etc).

</member>
        <member name="M:Awesomium.WebView.loadURL(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.Compil">
 Loads a URL into the WebView asynchronously.

 @param	url	The URL to load.

 @param	frameName	Optional, the name of the frame to load the URL in; leave this blank to load in the main frame.

 @param	username	Optional, if the URL requires authentication, the username to authorize as.

 @param	password	Optional, if the URL requires authentication, the password to use.

</member>
        <member name="M:Awesomium.WebView.getListener">
 Retrieves the current WebViewListener.

 @return	If a WebViewListener is registered, returns a pointer to the instance, otherwise returns 0.

</member>
        <member name="M:Awesomium.WebView.setListener(Awesomium.WebViewListener*)">
 Registers a WebViewListener to call upon various events (such as load completions, callbacks, title receptions,
 cursor changes, etc).

 @param	listener	The WebViewListener to register. Or, you can pass '0' to undo any current registrations.

</member>
        <member name="M:Awesomium.WebView.destroy">
 Explicitly destroys this WebView instance. If you neglect to call this, the WebCore singleton
 will automatically destroy all lingering WebView instances at shutdown.

 @note	This should NEVER be called directly from one of the notifications of WebViewListener.

</member>
        <member name="T:Awesomium.WebView">
A WebView is essentially a single instance of a web-browser (created via the WebCore singleton)
that you can interact with (via input injection, javascript, etc.) and render to an off-screen buffer.

</member>
        <member name="T:Awesomium.Rect">
A simple rectangle class, used with WebView::render

</member>
        <member name="T:Awesomium.MouseButton">
Mouse button enumerations, used with WebView::injectMouseDown 
and WebView::injectMouseUp

</member>
        <member name="M:Awesomium.WebViewListener.onChangeTargetURL(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when the target URL has changed. This is usually the result of 
 hovering over a link on the page.

 @param	url	The updated target URL (or empty if the target URL is cleared).

</member>
        <member name="M:Awesomium.WebViewListener.onChangeKeyboardFocus(System.Boolean)">
 This event is fired when keyboard focus has changed.

 @param	isFocused	Whether or not the keyboard is currently focused.

</member>
        <member name="M:Awesomium.WebViewListener.onChangeCursor(HICON__*!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a cursor has changed state. [Windows-only]

 @param	cursor	The cursor handle/type.

</member>
        <member name="M:Awesomium.WebViewListener.onChangeTooltip(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a tooltip has changed state.

 @param	tooltip		The tooltip text (or, is an empty string when the tooltip should disappear).

</member>
        <member name="M:Awesomium.WebViewListener.onReceiveTitle(std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a page title is received.

 @param	title	The page title.

 @param	frameName	The name of the frame that this event originated from.

</member>
        <member name="M:Awesomium.WebViewListener.onCallback(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;Awesomium.JSValue&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a Client callback has been invoked via Javascript from a page.

 @param	name	The name of the client callback that was invoked (specifically, "Client._this_name_here_(...)").

 @param	args	The arguments passed to the callback.

</member>
        <member name="M:Awesomium.WebViewListener.onFinishLoading">
This event is fired when all loads have finished for a WebView.

</member>
        <member name="M:Awesomium.WebViewListener.onBeginLoading(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a WebView begins to actually receive data from a server.

 @param	url		The URL of the frame that is being loaded.

 @param	frameName	The name of the frame that this event originated from.

 @param	statusCode	The HTTP status code returned by the server.

 @param	mimeType	The mime-type of the content that is being loaded.

</member>
        <member name="M:Awesomium.WebViewListener.onBeginNavigation(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This event is fired when a WebView begins navigating to a new URL.

 @param	url		The URL that is being navigated to.

 @param	frameName	The name of the frame that this event originated from.

</member>
        <member name="T:Awesomium.WebViewListener">
WebViewListener is a virtual interface that you can use to receive notifications
from a certain WebView. Simply make a class that inherits from WebViewListener
and register it via WebView::setListener.

</member>
        <member name="M:Awesomium.FutureJSValue.get">
If the internal JSValue has been computed, immediately returns
the value, else, blocks the calling thread until it has.

</member>
        <member name="M:Awesomium.JSValue.toBoolean">
Returns this JSValue as a boolean (converting if necessary).
</member>
        <member name="M:Awesomium.JSValue.toDouble">
Returns this JSValue as a double (converting if necessary).
</member>
        <member name="M:Awesomium.JSValue.toInteger">
Returns this JSValue as an integer (converting if necessary).
</member>
        <member name="M:Awesomium.JSValue.toString">
 Returns this JSValue as a string (converting if necessary).

 @note	If this JSValue is not a string, the returned reference
		is only valid until the next call to JSValue::toString.

</member>
        <member name="M:Awesomium.JSValue.isNull">
Returns whether or not this JSValue is null.
</member>
        <member name="M:Awesomium.JSValue.isString">
Returns whether or not this JSValue is a string.
</member>
        <member name="M:Awesomium.JSValue.isNumber">
Returns whether or not this JSValue is a number (integer or double).
</member>
        <member name="M:Awesomium.JSValue.isDouble">
Returns whether or not this JSValue is a double.
</member>
        <member name="M:Awesomium.JSValue.isInteger">
Returns whether or not this JSValue is an integer.
</member>
        <member name="M:Awesomium.JSValue.isBoolean">
Returns whether or not this JSValue is a boolean.
</member>
        <member name="M:Awesomium.JSValue.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Creates a JSValue initialized with a string.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
Creates a JSValue initialized with a string.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.Double)">
Creates a JSValue initialized with a double.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.Int32)">
Creates a JSValue initialized with an integer.
</member>
        <member name="M:Awesomium.JSValue.#ctor(System.Boolean)">
Creates a JSValue initialized with a boolean.
</member>
        <member name="M:Awesomium.JSValue.#ctor">
Creates a null JSValue.
</member>
        <member name="T:Awesomium.JSValue">
JSValue is a class that represents a Javascript value. It can be initialized from
and converted to several types: boolean, integer, double, string

</member>
        <!-- Discarding badly formed XML document comment for member 'T:Awesomium.FutureJSValue'. -->
    </members>
</doc>