using System;
using System.Collections.Generic;

/*
REFER TO THE SECOND LINK (NamesList.txt) TO PICK A CHARACTER. Really!
It has comments and information as to what the symbols are supposed to
represent.

This file contains strings extracted from http://www.unicode.org/Public/UNIDATA/UnicodeData.txt by running parseucd.pl.
However, refer to http://www.unicode.org/Public/UNIDATA/NamesList.txt for more
information on each character, such as description, alternate names, synonyms,
usage, etc. (And, in general, refer to that whole site.)

Where there's a comment saying "consider avoiding", that's because some
characters such as superscript numbers and letters are better represented in
Exprs in other ways. However, it's automatically generated, so it might be
wrong. See NamesList.txt for more information in such cases.

Unicode version 4.1 was current at the time of writing, though this file only
contains the low 16 bit unicode characters as that's all C# seems to support.

COPYRIGHT AND PERMISSION NOTICE

Copyright © 1991-2005 Unicode, Inc. All rights reserved. Distributed under the
Terms of Use in http://www.unicode.org/copyright.html.

Permission is hereby granted, free of charge, to any person obtaining a copy of
the Unicode data files and any associated documentation (the "Data Files") or
Unicode software and any associated documentation (the "Software") to deal in
the Data Files or Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, and/or sell copies
of the Data Files or Software, and to permit persons to whom the Data Files or
Software are furnished to do so, provided that (a) the above copyright
notice(s) and this permission notice appear with all copies of the Data Files
or Software, (b) both the above copyright notice(s) and this permission notice
appear in associated documentation, and (c) there is clear notice in each
modified Data File or in the Software as well as in the documentation
associated with the Data File(s) or Software that the data or software has been
modified.

THE DATA FILES AND SOFTWARE ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD
PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN
THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE DATA FILES OR
SOFTWARE.

Except as contained in this notice, the name of a copyright holder shall not be
used in advertising or otherwise to promote the sale, use or other dealings in
these Data Files or Software without prior written authorization of the
copyright holder.
*/

namespace starPadSDK.UnicodeNs {
	public class Unicode {
		public class A {
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ACCOUNT_OF = (char)0x2100;
			public const char ACTIVATE_ARABIC_FORM_SHAPING = (char)0x206D;
			public const char ACTIVATE_SYMMETRIC_SWAPPING = (char)0x206B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING ACUTE. </summary>
			public const char ACUTE_ACCENT = (char)0x00B4;
			public const char ACUTE_ANGLE = (char)0x299F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ADDRESSED_TO_THE_SUBJECT = (char)0x2101;
			public const char ADI_SHAKTI = (char)0x262C;
			public const char AFGHANI_SIGN = (char)0x060B;
			public const char AIRPLANE = (char)0x2708;
			/// <summary> (This is a composition; consider avoiding.) Formerly FIRST TRANSFINITE CARDINAL. </summary>
			public const char ALEF_SYMBOL = (char)0x2135;
			public const char ALEMBIC = (char)0x2697;
			public const char ALL_AROUND_PROFILE = (char)0x232E;
			public const char ALL_EQUAL_TO = (char)0x224C;
			public const char ALMOST_EQUAL_OR_EQUAL_TO = (char)0x224A;
			public const char ALMOST_EQUAL_TO = (char)0x2248;
			public const char ALMOST_EQUAL_TO_WITH_CIRCUMFLEX_ACCENT = (char)0x2A6F;
			public const char ALTERNATIVE_KEY_SYMBOL = (char)0x2387;
			public const char AMALGAMATION_OR_COPRODUCT = (char)0x2A3F;
			public const char AMPERSAND = (char)0x0026;
			public const char ANCHOR = (char)0x2693;
			public const char AND_WITH_DOT = (char)0x27D1;
			public const char ANGLE = (char)0x2220;
			public const char ANGLE_WITH_S_INSIDE = (char)0x299E;
			public const char ANGLE_WITH_UNDERBAR = (char)0x29A4;
			/// <summary> (This is a composition; consider avoiding.) Formerly ANGSTROM UNIT. </summary>
			public const char ANGSTROM_SIGN = (char)0x212B;
			public const char ANKH = (char)0x2625;
			public const char ANTICLOCKWISE_CLOSED_CIRCLE_ARROW = (char)0x2940;
			public const char ANTICLOCKWISE_CONTOUR_INTEGRAL = (char)0x2233;
			public const char ANTICLOCKWISE_GAPPED_CIRCLE_ARROW = (char)0x27F2;
			public const char ANTICLOCKWISE_INTEGRATION = (char)0x2A11;
			public const char ANTICLOCKWISE_OPEN_CIRCLE_ARROW = (char)0x21BA;
			public const char ANTICLOCKWISE_TOP_SEMICIRCLE_ARROW = (char)0x21B6;
			public const char APL_FUNCTIONAL_SYMBOL_ALPHA = (char)0x237A;
			public const char APL_FUNCTIONAL_SYMBOL_ALPHA_UNDERBAR = (char)0x2376;
			public const char APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR = (char)0x2340;
			public const char APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH = (char)0x2349;
			public const char APL_FUNCTIONAL_SYMBOL_CIRCLE_DIAERESIS = (char)0x2365;
			public const char APL_FUNCTIONAL_SYMBOL_CIRCLE_JOT = (char)0x233E;
			public const char APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR = (char)0x235F;
			public const char APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE = (char)0x233D;
			public const char APL_FUNCTIONAL_SYMBOL_CIRCLE_UNDERBAR = (char)0x235C;
			public const char APL_FUNCTIONAL_SYMBOL_COMMA_BAR = (char)0x236A;
			public const char APL_FUNCTIONAL_SYMBOL_DELTA_STILE = (char)0x234B;
			public const char APL_FUNCTIONAL_SYMBOL_DELTA_UNDERBAR = (char)0x2359;
			public const char APL_FUNCTIONAL_SYMBOL_DEL_DIAERESIS = (char)0x2362;
			public const char APL_FUNCTIONAL_SYMBOL_DEL_STILE = (char)0x2352;
			public const char APL_FUNCTIONAL_SYMBOL_DEL_TILDE = (char)0x236B;
			public const char APL_FUNCTIONAL_SYMBOL_DIAMOND_UNDERBAR = (char)0x235A;
			public const char APL_FUNCTIONAL_SYMBOL_DOWNWARDS_VANE = (char)0x2356;
			public const char APL_FUNCTIONAL_SYMBOL_DOWN_CARET_TILDE = (char)0x2371;
			public const char APL_FUNCTIONAL_SYMBOL_DOWN_SHOE_STILE = (char)0x2366;
			public const char APL_FUNCTIONAL_SYMBOL_DOWN_TACK_JOT = (char)0x234E;
			public const char APL_FUNCTIONAL_SYMBOL_DOWN_TACK_UNDERBAR = (char)0x234A;
			public const char APL_FUNCTIONAL_SYMBOL_EPSILON_UNDERBAR = (char)0x2377;
			public const char APL_FUNCTIONAL_SYMBOL_GREATER_THAN_DIAERESIS = (char)0x2369;
			public const char APL_FUNCTIONAL_SYMBOL_IOTA = (char)0x2373;
			public const char APL_FUNCTIONAL_SYMBOL_IOTA_UNDERBAR = (char)0x2378;
			public const char APL_FUNCTIONAL_SYMBOL_I_BEAM = (char)0x2336;
			public const char APL_FUNCTIONAL_SYMBOL_JOT_DIAERESIS = (char)0x2364;
			public const char APL_FUNCTIONAL_SYMBOL_JOT_UNDERBAR = (char)0x235B;
			public const char APL_FUNCTIONAL_SYMBOL_LEFTWARDS_VANE = (char)0x2345;
			public const char APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE = (char)0x2367;
			public const char APL_FUNCTIONAL_SYMBOL_OMEGA = (char)0x2375;
			public const char APL_FUNCTIONAL_SYMBOL_OMEGA_UNDERBAR = (char)0x2379;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD = (char)0x2395;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_BACKSLASH = (char)0x2342;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_CIRCLE = (char)0x233C;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_COLON = (char)0x2360;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_DEL = (char)0x2354;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_DELTA = (char)0x234D;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_DIAMOND = (char)0x233A;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE = (char)0x2339;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_DOWNWARDS_ARROW = (char)0x2357;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_DOWN_CARET = (char)0x234C;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_EQUAL = (char)0x2338;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_GREATER_THAN = (char)0x2344;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_JOT = (char)0x233B;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_LEFTWARDS_ARROW = (char)0x2347;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_LESS_THAN = (char)0x2343;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_NOT_EQUAL = (char)0x236F;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_QUESTION = (char)0x2370;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_RIGHTWARDS_ARROW = (char)0x2348;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_SLASH = (char)0x2341;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_UPWARDS_ARROW = (char)0x2350;
			public const char APL_FUNCTIONAL_SYMBOL_QUAD_UP_CARET = (char)0x2353;
			public const char APL_FUNCTIONAL_SYMBOL_QUOTE_QUAD = (char)0x235E;
			public const char APL_FUNCTIONAL_SYMBOL_QUOTE_UNDERBAR = (char)0x2358;
			public const char APL_FUNCTIONAL_SYMBOL_RHO = (char)0x2374;
			public const char APL_FUNCTIONAL_SYMBOL_RIGHTWARDS_VANE = (char)0x2346;
			public const char APL_FUNCTIONAL_SYMBOL_SEMICOLON_UNDERBAR = (char)0x236E;
			public const char APL_FUNCTIONAL_SYMBOL_SLASH_BAR = (char)0x233F;
			public const char APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD = (char)0x2337;
			public const char APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS = (char)0x2363;
			public const char APL_FUNCTIONAL_SYMBOL_STILE_TILDE = (char)0x236D;
			public const char APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS = (char)0x2368;
			public const char APL_FUNCTIONAL_SYMBOL_UPWARDS_VANE = (char)0x234F;
			public const char APL_FUNCTIONAL_SYMBOL_UP_CARET_TILDE = (char)0x2372;
			public const char APL_FUNCTIONAL_SYMBOL_UP_SHOE_JOT = (char)0x235D;
			public const char APL_FUNCTIONAL_SYMBOL_UP_TACK_DIAERESIS = (char)0x2361;
			public const char APL_FUNCTIONAL_SYMBOL_UP_TACK_JOT = (char)0x2355;
			public const char APL_FUNCTIONAL_SYMBOL_UP_TACK_OVERBAR = (char)0x2351;
			public const char APL_FUNCTIONAL_SYMBOL_ZILDE = (char)0x236C;
			/// <summary> Formerly APOSTROPHE-QUOTE. </summary>
			public const char APOSTROPHE = (char)0x0027;
			public const char APPROACHES_THE_LIMIT = (char)0x2250;
			public const char APPROXIMATELY_BUT_NOT_ACTUALLY_EQUAL_TO = (char)0x2246;
			public const char APPROXIMATELY_EQUAL_OR_EQUAL_TO = (char)0x2A70;
			public const char APPROXIMATELY_EQUAL_TO = (char)0x2245;
			public const char APPROXIMATELY_EQUAL_TO_OR_THE_IMAGE_OF = (char)0x2252;
			public const char AQUARIUS = (char)0x2652;
			public const char ARABIC_COMMA = (char)0x060C;
			/// <summary> Formerly ARABIC DAMMAH. </summary>
			public const char ARABIC_DAMMA = (char)0x064F;
			public const char ARABIC_DAMMATAN = (char)0x064C;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SPACING DAMMATAN. </summary>
			public const char ARABIC_DAMMATAN_ISOLATED_FORM = (char)0xFE72;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SPACING DAMMAH. </summary>
			public const char ARABIC_DAMMA_ISOLATED_FORM = (char)0xFE78;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC DAMMAH ON TATWEEL. </summary>
			public const char ARABIC_DAMMA_MEDIAL_FORM = (char)0xFE79;
			public const char ARABIC_DATE_SEPARATOR = (char)0x060D;
			public const char ARABIC_DECIMAL_SEPARATOR = (char)0x066B;
			public const char ARABIC_EMPTY_CENTRE_HIGH_STOP = (char)0x06EB;
			public const char ARABIC_EMPTY_CENTRE_LOW_STOP = (char)0x06EA;
			public const char ARABIC_END_OF_AYAH = (char)0x06DD;
			/// <summary> Formerly ARABIC FATHAH. </summary>
			public const char ARABIC_FATHA = (char)0x064E;
			public const char ARABIC_FATHATAN = (char)0x064B;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SPACING FATHATAN. </summary>
			public const char ARABIC_FATHATAN_ISOLATED_FORM = (char)0xFE70;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SPACING FATHAH. </summary>
			public const char ARABIC_FATHA_ISOLATED_FORM = (char)0xFE76;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC FATHAH ON TATWEEL. </summary>
			public const char ARABIC_FATHA_MEDIAL_FORM = (char)0xFE77;
			public const char ARABIC_FATHA_WITH_TWO_DOTS = (char)0x065E;
			public const char ARABIC_FIVE_POINTED_STAR = (char)0x066D;
			public const char ARABIC_FOOTNOTE_MARKER = (char)0x0602;
			/// <summary> Formerly ARABIC PERIOD. </summary>
			public const char ARABIC_FULL_STOP = (char)0x06D4;
			public const char ARABIC_HAMZA_ABOVE = (char)0x0654;
			public const char ARABIC_HAMZA_BELOW = (char)0x0655;
			public const char ARABIC_INDIC_DIGIT_EIGHT = (char)0x0668;
			public const char ARABIC_INDIC_DIGIT_FIVE = (char)0x0665;
			public const char ARABIC_INDIC_DIGIT_FOUR = (char)0x0664;
			public const char ARABIC_INDIC_DIGIT_NINE = (char)0x0669;
			public const char ARABIC_INDIC_DIGIT_ONE = (char)0x0661;
			public const char ARABIC_INDIC_DIGIT_SEVEN = (char)0x0667;
			public const char ARABIC_INDIC_DIGIT_SIX = (char)0x0666;
			public const char ARABIC_INDIC_DIGIT_THREE = (char)0x0663;
			public const char ARABIC_INDIC_DIGIT_TWO = (char)0x0662;
			public const char ARABIC_INDIC_DIGIT_ZERO = (char)0x0660;
			public const char ARABIC_INVERTED_DAMMA = (char)0x0657;
			/// <summary> Formerly ARABIC KASRAH. </summary>
			public const char ARABIC_KASRA = (char)0x0650;
			public const char ARABIC_KASRATAN = (char)0x064D;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SPACING KASRATAN. </summary>
			public const char ARABIC_KASRATAN_ISOLATED_FORM = (char)0xFE74;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SPACING KASRAH. </summary>
			public const char ARABIC_KASRA_ISOLATED_FORM = (char)0xFE7A;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC KASRAH ON TATWEEL. </summary>
			public const char ARABIC_KASRA_MEDIAL_FORM = (char)0xFE7B;
			public const char ARABIC_LETTER_AE = (char)0x06D5;
			public const char ARABIC_LETTER_AIN = (char)0x0639;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC AIN. </summary>
			public const char ARABIC_LETTER_AIN_FINAL_FORM = (char)0xFECA;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC AIN. </summary>
			public const char ARABIC_LETTER_AIN_INITIAL_FORM = (char)0xFECB;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC AIN. </summary>
			public const char ARABIC_LETTER_AIN_ISOLATED_FORM = (char)0xFEC9;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC AIN. </summary>
			public const char ARABIC_LETTER_AIN_MEDIAL_FORM = (char)0xFECC;
			public const char ARABIC_LETTER_AIN_WITH_THREE_DOTS_ABOVE = (char)0x06A0;
			public const char ARABIC_LETTER_AIN_WITH_THREE_DOTS_POINTING_DOWNWARDS_ABOVE = (char)0x075E;
			public const char ARABIC_LETTER_AIN_WITH_TWO_DOTS_ABOVE = (char)0x075D;
			public const char ARABIC_LETTER_AIN_WITH_TWO_DOTS_VERTICALLY_ABOVE = (char)0x075F;
			public const char ARABIC_LETTER_ALEF = (char)0x0627;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_FINAL_FORM = (char)0xFE8E;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_ISOLATED_FORM = (char)0xFE8D;
			/// <summary> Formerly ARABIC LETTER ALEF MAQSURAH. </summary>
			public const char ARABIC_LETTER_ALEF_MAKSURA = (char)0x0649;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC ALEF MAQSURAH. </summary>
			public const char ARABIC_LETTER_ALEF_MAKSURA_FINAL_FORM = (char)0xFEF0;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC ALEF MAQSURAH. </summary>
			public const char ARABIC_LETTER_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFEEF;
			/// <summary> Formerly ARABIC LETTER HAMZAT WASL ON ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WASLA = (char)0x0671;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_ALEF_WASLA_FINAL_FORM = (char)0xFB51;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_ALEF_WASLA_ISOLATED_FORM = (char)0xFB50;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HAMZAH ON ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_HAMZA_ABOVE = (char)0x0623;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC HAMZAH ON ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_HAMZA_ABOVE_FINAL_FORM = (char)0xFE84;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HAMZAH ON ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_HAMZA_ABOVE_ISOLATED_FORM = (char)0xFE83;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HAMZAH UNDER ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_HAMZA_BELOW = (char)0x0625;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC HAMZAH UNDER ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_HAMZA_BELOW_FINAL_FORM = (char)0xFE88;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HAMZAH UNDER ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_HAMZA_BELOW_ISOLATED_FORM = (char)0xFE87;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER MADDAH ON ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_MADDA_ABOVE = (char)0x0622;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC MADDAH ON ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_MADDA_ABOVE_FINAL_FORM = (char)0xFE82;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC MADDAH ON ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_MADDA_ABOVE_ISOLATED_FORM = (char)0xFE81;
			/// <summary> Formerly ARABIC LETTER WAVY HAMZAH ON ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_WAVY_HAMZA_ABOVE = (char)0x0672;
			/// <summary> Formerly ARABIC LETTER WAVY HAMZAH UNDER ALEF. </summary>
			public const char ARABIC_LETTER_ALEF_WITH_WAVY_HAMZA_BELOW = (char)0x0673;
			/// <summary> Formerly ARABIC LETTER BAA WITH TWO DOTS VERTICAL BELOW. </summary>
			public const char ARABIC_LETTER_BEEH = (char)0x067B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_BEEH_FINAL_FORM = (char)0xFB53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_BEEH_INITIAL_FORM = (char)0xFB54;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_BEEH_ISOLATED_FORM = (char)0xFB52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_BEEH_MEDIAL_FORM = (char)0xFB55;
			/// <summary> Formerly ARABIC LETTER BAA. </summary>
			public const char ARABIC_LETTER_BEH = (char)0x0628;
			/// <summary> Formerly ARABIC LETTER BAA WITH FOUR DOTS BELOW. </summary>
			public const char ARABIC_LETTER_BEHEH = (char)0x0680;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_BEHEH_FINAL_FORM = (char)0xFB5B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_BEHEH_INITIAL_FORM = (char)0xFB5C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_BEHEH_ISOLATED_FORM = (char)0xFB5A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_BEHEH_MEDIAL_FORM = (char)0xFB5D;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC BAA. </summary>
			public const char ARABIC_LETTER_BEH_FINAL_FORM = (char)0xFE90;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC BAA. </summary>
			public const char ARABIC_LETTER_BEH_INITIAL_FORM = (char)0xFE91;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC BAA. </summary>
			public const char ARABIC_LETTER_BEH_ISOLATED_FORM = (char)0xFE8F;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC BAA. </summary>
			public const char ARABIC_LETTER_BEH_MEDIAL_FORM = (char)0xFE92;
			public const char ARABIC_LETTER_BEH_WITH_DOT_BELOW_AND_THREE_DOTS_ABOVE = (char)0x0751;
			public const char ARABIC_LETTER_BEH_WITH_INVERTED_SMALL_V_BELOW = (char)0x0755;
			public const char ARABIC_LETTER_BEH_WITH_SMALL_V = (char)0x0756;
			public const char ARABIC_LETTER_BEH_WITH_THREE_DOTS_HORIZONTALLY_BELOW = (char)0x0750;
			public const char ARABIC_LETTER_BEH_WITH_THREE_DOTS_POINTING_UPWARDS_BELOW = (char)0x0752;
			public const char ARABIC_LETTER_BEH_WITH_THREE_DOTS_POINTING_UPWARDS_BELOW_AND_TWO_DOTS_ABOVE = (char)0x0753;
			public const char ARABIC_LETTER_BEH_WITH_TWO_DOTS_BELOW_AND_DOT_ABOVE = (char)0x0754;
			public const char ARABIC_LETTER_DAD = (char)0x0636;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC DAD. </summary>
			public const char ARABIC_LETTER_DAD_FINAL_FORM = (char)0xFEBE;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC DAD. </summary>
			public const char ARABIC_LETTER_DAD_INITIAL_FORM = (char)0xFEBF;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC DAD. </summary>
			public const char ARABIC_LETTER_DAD_ISOLATED_FORM = (char)0xFEBD;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC DAD. </summary>
			public const char ARABIC_LETTER_DAD_MEDIAL_FORM = (char)0xFEC0;
			public const char ARABIC_LETTER_DAD_WITH_DOT_BELOW = (char)0x06FB;
			/// <summary> Formerly ARABIC LETTER DAL WITH TWO DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_DAHAL = (char)0x068C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DAHAL_FINAL_FORM = (char)0xFB85;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DAHAL_ISOLATED_FORM = (char)0xFB84;
			public const char ARABIC_LETTER_DAL = (char)0x062F;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC DAL. </summary>
			public const char ARABIC_LETTER_DAL_FINAL_FORM = (char)0xFEAA;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC DAL. </summary>
			public const char ARABIC_LETTER_DAL_ISOLATED_FORM = (char)0xFEA9;
			public const char ARABIC_LETTER_DAL_WITH_DOT_BELOW = (char)0x068A;
			public const char ARABIC_LETTER_DAL_WITH_DOT_BELOW_AND_SMALL_TAH = (char)0x068B;
			public const char ARABIC_LETTER_DAL_WITH_FOUR_DOTS_ABOVE = (char)0x0690;
			public const char ARABIC_LETTER_DAL_WITH_INVERTED_SMALL_V_BELOW = (char)0x075A;
			public const char ARABIC_LETTER_DAL_WITH_INVERTED_V = (char)0x06EE;
			public const char ARABIC_LETTER_DAL_WITH_RING = (char)0x0689;
			/// <summary> Formerly ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARD. </summary>
			public const char ARABIC_LETTER_DAL_WITH_THREE_DOTS_ABOVE_DOWNWARDS = (char)0x068F;
			public const char ARABIC_LETTER_DAL_WITH_TWO_DOTS_VERTICALLY_BELOW_AND_SMALL_TAH = (char)0x0759;
			/// <summary> Formerly ARABIC LETTER DAL WITH TWO DOTS BELOW. </summary>
			public const char ARABIC_LETTER_DDAHAL = (char)0x068D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DDAHAL_FINAL_FORM = (char)0xFB83;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DDAHAL_ISOLATED_FORM = (char)0xFB82;
			/// <summary> Formerly ARABIC LETTER DAL WITH SMALL TAH. </summary>
			public const char ARABIC_LETTER_DDAL = (char)0x0688;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DDAL_FINAL_FORM = (char)0xFB89;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DDAL_ISOLATED_FORM = (char)0xFB88;
			public const char ARABIC_LETTER_DOTLESS_BEH = (char)0x066E;
			/// <summary> Formerly ARABIC LETTER DOTLESS FA. </summary>
			public const char ARABIC_LETTER_DOTLESS_FEH = (char)0x06A1;
			public const char ARABIC_LETTER_DOTLESS_QAF = (char)0x066F;
			/// <summary> Formerly ARABIC LETTER DAL WITH THREE DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_DUL = (char)0x068E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DUL_FINAL_FORM = (char)0xFB87;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DUL_ISOLATED_FORM = (char)0xFB86;
			/// <summary> Formerly ARABIC LETTER HAA WITH MIDDLE TWO DOTS VERTICAL. </summary>
			public const char ARABIC_LETTER_DYEH = (char)0x0684;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DYEH_FINAL_FORM = (char)0xFB73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DYEH_INITIAL_FORM = (char)0xFB74;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DYEH_ISOLATED_FORM = (char)0xFB72;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_DYEH_MEDIAL_FORM = (char)0xFB75;
			/// <summary> Formerly ARABIC LETTER YA WITH TWO DOTS VERTICAL BELOW. </summary>
			public const char ARABIC_LETTER_E = (char)0x06D0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_E_FINAL_FORM = (char)0xFBE5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_E_INITIAL_FORM = (char)0xFBE6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_E_ISOLATED_FORM = (char)0xFBE4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_E_MEDIAL_FORM = (char)0xFBE7;
			/// <summary> Formerly ARABIC LETTER DOTLESS YA. </summary>
			public const char ARABIC_LETTER_FARSI_YEH = (char)0x06CC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_FARSI_YEH_FINAL_FORM = (char)0xFBFD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_FARSI_YEH_INITIAL_FORM = (char)0xFBFE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_FARSI_YEH_ISOLATED_FORM = (char)0xFBFC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_FARSI_YEH_MEDIAL_FORM = (char)0xFBFF;
			/// <summary> Formerly ARABIC LETTER FA. </summary>
			public const char ARABIC_LETTER_FEH = (char)0x0641;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC FA. </summary>
			public const char ARABIC_LETTER_FEH_FINAL_FORM = (char)0xFED2;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC FA. </summary>
			public const char ARABIC_LETTER_FEH_INITIAL_FORM = (char)0xFED3;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC FA. </summary>
			public const char ARABIC_LETTER_FEH_ISOLATED_FORM = (char)0xFED1;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC FA. </summary>
			public const char ARABIC_LETTER_FEH_MEDIAL_FORM = (char)0xFED4;
			/// <summary> Formerly ARABIC LETTER FA WITH DOT BELOW. </summary>
			public const char ARABIC_LETTER_FEH_WITH_DOT_BELOW = (char)0x06A3;
			/// <summary> Formerly ARABIC LETTER FA WITH DOT MOVED BELOW. </summary>
			public const char ARABIC_LETTER_FEH_WITH_DOT_MOVED_BELOW = (char)0x06A2;
			/// <summary> Formerly ARABIC LETTER FA WITH THREE DOTS BELOW. </summary>
			public const char ARABIC_LETTER_FEH_WITH_THREE_DOTS_BELOW = (char)0x06A5;
			public const char ARABIC_LETTER_FEH_WITH_THREE_DOTS_POINTING_UPWARDS_BELOW = (char)0x0761;
			public const char ARABIC_LETTER_FEH_WITH_TWO_DOTS_BELOW = (char)0x0760;
			public const char ARABIC_LETTER_GAF = (char)0x06AF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_GAF_FINAL_FORM = (char)0xFB93;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_GAF_INITIAL_FORM = (char)0xFB94;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_GAF_ISOLATED_FORM = (char)0xFB92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_GAF_MEDIAL_FORM = (char)0xFB95;
			public const char ARABIC_LETTER_GAF_WITH_RING = (char)0x06B0;
			public const char ARABIC_LETTER_GAF_WITH_THREE_DOTS_ABOVE = (char)0x06B4;
			public const char ARABIC_LETTER_GAF_WITH_TWO_DOTS_BELOW = (char)0x06B2;
			public const char ARABIC_LETTER_GHAIN = (char)0x063A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC GHAIN. </summary>
			public const char ARABIC_LETTER_GHAIN_FINAL_FORM = (char)0xFECE;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC GHAIN. </summary>
			public const char ARABIC_LETTER_GHAIN_INITIAL_FORM = (char)0xFECF;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC GHAIN. </summary>
			public const char ARABIC_LETTER_GHAIN_ISOLATED_FORM = (char)0xFECD;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC GHAIN. </summary>
			public const char ARABIC_LETTER_GHAIN_MEDIAL_FORM = (char)0xFED0;
			public const char ARABIC_LETTER_GHAIN_WITH_DOT_BELOW = (char)0x06FC;
			/// <summary> Formerly ARABIC LETTER GAF WITH TWO DOTS VERTICAL BELOW. </summary>
			public const char ARABIC_LETTER_GUEH = (char)0x06B3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_GUEH_FINAL_FORM = (char)0xFB97;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_GUEH_INITIAL_FORM = (char)0xFB98;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_GUEH_ISOLATED_FORM = (char)0xFB96;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_GUEH_MEDIAL_FORM = (char)0xFB99;
			/// <summary> Formerly ARABIC LETTER HAA. </summary>
			public const char ARABIC_LETTER_HAH = (char)0x062D;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC HAA. </summary>
			public const char ARABIC_LETTER_HAH_FINAL_FORM = (char)0xFEA2;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC HAA. </summary>
			public const char ARABIC_LETTER_HAH_INITIAL_FORM = (char)0xFEA3;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HAA. </summary>
			public const char ARABIC_LETTER_HAH_ISOLATED_FORM = (char)0xFEA1;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC HAA. </summary>
			public const char ARABIC_LETTER_HAH_MEDIAL_FORM = (char)0xFEA4;
			/// <summary> Formerly ARABIC LETTER HAMZAH ON HAA. </summary>
			public const char ARABIC_LETTER_HAH_WITH_HAMZA_ABOVE = (char)0x0681;
			/// <summary> Formerly ARABIC LETTER HAA WITH THREE DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_HAH_WITH_THREE_DOTS_ABOVE = (char)0x0685;
			public const char ARABIC_LETTER_HAH_WITH_THREE_DOTS_POINTING_UPWARDS_BELOW = (char)0x0758;
			public const char ARABIC_LETTER_HAH_WITH_TWO_DOTS_ABOVE = (char)0x0757;
			/// <summary> Formerly ARABIC LETTER HAA WITH TWO DOTS VERTICAL ABOVE. </summary>
			public const char ARABIC_LETTER_HAH_WITH_TWO_DOTS_VERTICAL_ABOVE = (char)0x0682;
			/// <summary> Formerly ARABIC LETTER HAMZAH. </summary>
			public const char ARABIC_LETTER_HAMZA = (char)0x0621;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HAMZAH. </summary>
			public const char ARABIC_LETTER_HAMZA_ISOLATED_FORM = (char)0xFE80;
			/// <summary> Formerly ARABIC LETTER HA. </summary>
			public const char ARABIC_LETTER_HEH = (char)0x0647;
			/// <summary> Formerly ARABIC LETTER KNOTTED HA. </summary>
			public const char ARABIC_LETTER_HEH_DOACHASHMEE = (char)0x06BE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_DOACHASHMEE_FINAL_FORM = (char)0xFBAB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_DOACHASHMEE_INITIAL_FORM = (char)0xFBAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_DOACHASHMEE_ISOLATED_FORM = (char)0xFBAA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_DOACHASHMEE_MEDIAL_FORM = (char)0xFBAD;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC HA. </summary>
			public const char ARABIC_LETTER_HEH_FINAL_FORM = (char)0xFEEA;
			/// <summary> Formerly ARABIC LETTER HA GOAL. </summary>
			public const char ARABIC_LETTER_HEH_GOAL = (char)0x06C1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_GOAL_FINAL_FORM = (char)0xFBA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_GOAL_INITIAL_FORM = (char)0xFBA8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_GOAL_ISOLATED_FORM = (char)0xFBA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_GOAL_MEDIAL_FORM = (char)0xFBA9;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HAMZAH ON HA GOAL. </summary>
			public const char ARABIC_LETTER_HEH_GOAL_WITH_HAMZA_ABOVE = (char)0x06C2;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC HA. </summary>
			public const char ARABIC_LETTER_HEH_INITIAL_FORM = (char)0xFEEB;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HA. </summary>
			public const char ARABIC_LETTER_HEH_ISOLATED_FORM = (char)0xFEE9;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC HA. </summary>
			public const char ARABIC_LETTER_HEH_MEDIAL_FORM = (char)0xFEEC;
			public const char ARABIC_LETTER_HEH_WITH_INVERTED_V = (char)0x06FF;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HAMZAH ON HA. </summary>
			public const char ARABIC_LETTER_HEH_WITH_YEH_ABOVE = (char)0x06C0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_WITH_YEH_ABOVE_FINAL_FORM = (char)0xFBA5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_HEH_WITH_YEH_ABOVE_ISOLATED_FORM = (char)0xFBA4;
			/// <summary> Formerly ARABIC LETTER HIGH HAMZAH. </summary>
			public const char ARABIC_LETTER_HIGH_HAMZA = (char)0x0674;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HIGH HAMZAH ALEF. </summary>
			public const char ARABIC_LETTER_HIGH_HAMZA_ALEF = (char)0x0675;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HIGH HAMZAH WAW. </summary>
			public const char ARABIC_LETTER_HIGH_HAMZA_WAW = (char)0x0676;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HIGH HAMZAH YA. </summary>
			public const char ARABIC_LETTER_HIGH_HAMZA_YEH = (char)0x0678;
			public const char ARABIC_LETTER_JEEM = (char)0x062C;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC JEEM. </summary>
			public const char ARABIC_LETTER_JEEM_FINAL_FORM = (char)0xFE9E;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC JEEM. </summary>
			public const char ARABIC_LETTER_JEEM_INITIAL_FORM = (char)0xFE9F;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC JEEM. </summary>
			public const char ARABIC_LETTER_JEEM_ISOLATED_FORM = (char)0xFE9D;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC JEEM. </summary>
			public const char ARABIC_LETTER_JEEM_MEDIAL_FORM = (char)0xFEA0;
			/// <summary> Formerly ARABIC LETTER RA WITH THREE DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_JEH = (char)0x0698;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_JEH_FINAL_FORM = (char)0xFB8B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_JEH_ISOLATED_FORM = (char)0xFB8A;
			/// <summary> Formerly ARABIC LETTER CAF. </summary>
			public const char ARABIC_LETTER_KAF = (char)0x0643;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC CAF. </summary>
			public const char ARABIC_LETTER_KAF_FINAL_FORM = (char)0xFEDA;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC CAF. </summary>
			public const char ARABIC_LETTER_KAF_INITIAL_FORM = (char)0xFEDB;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC CAF. </summary>
			public const char ARABIC_LETTER_KAF_ISOLATED_FORM = (char)0xFED9;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC CAF. </summary>
			public const char ARABIC_LETTER_KAF_MEDIAL_FORM = (char)0xFEDC;
			/// <summary> Formerly ARABIC LETTER CAF WITH DOT ABOVE. </summary>
			public const char ARABIC_LETTER_KAF_WITH_DOT_ABOVE = (char)0x06AC;
			/// <summary> Formerly ARABIC LETTER CAF WITH RING. </summary>
			public const char ARABIC_LETTER_KAF_WITH_RING = (char)0x06AB;
			/// <summary> Formerly ARABIC LETTER CAF WITH THREE DOTS BELOW. </summary>
			public const char ARABIC_LETTER_KAF_WITH_THREE_DOTS_BELOW = (char)0x06AE;
			/// <summary> Formerly ARABIC LETTER OPEN CAF. </summary>
			public const char ARABIC_LETTER_KEHEH = (char)0x06A9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_KEHEH_FINAL_FORM = (char)0xFB8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_KEHEH_INITIAL_FORM = (char)0xFB90;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_KEHEH_ISOLATED_FORM = (char)0xFB8E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_KEHEH_MEDIAL_FORM = (char)0xFB91;
			public const char ARABIC_LETTER_KEHEH_WITH_DOT_ABOVE = (char)0x0762;
			public const char ARABIC_LETTER_KEHEH_WITH_THREE_DOTS_ABOVE = (char)0x0763;
			public const char ARABIC_LETTER_KEHEH_WITH_THREE_DOTS_POINTING_UPWARDS_BELOW = (char)0x0764;
			/// <summary> Formerly ARABIC LETTER KHAA. </summary>
			public const char ARABIC_LETTER_KHAH = (char)0x062E;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC KHAA. </summary>
			public const char ARABIC_LETTER_KHAH_FINAL_FORM = (char)0xFEA6;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC KHAA. </summary>
			public const char ARABIC_LETTER_KHAH_INITIAL_FORM = (char)0xFEA7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC KHAA. </summary>
			public const char ARABIC_LETTER_KHAH_ISOLATED_FORM = (char)0xFEA5;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC KHAA. </summary>
			public const char ARABIC_LETTER_KHAH_MEDIAL_FORM = (char)0xFEA8;
			/// <summary> Formerly ARABIC LETTER WAW WITH BAR. </summary>
			public const char ARABIC_LETTER_KIRGHIZ_OE = (char)0x06C5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_KIRGHIZ_OE_FINAL_FORM = (char)0xFBE1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_KIRGHIZ_OE_ISOLATED_FORM = (char)0xFBE0;
			/// <summary> Formerly ARABIC LETTER WAW WITH INVERTED SMALL V. </summary>
			public const char ARABIC_LETTER_KIRGHIZ_YU = (char)0x06C9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_KIRGHIZ_YU_FINAL_FORM = (char)0xFBE3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_KIRGHIZ_YU_ISOLATED_FORM = (char)0xFBE2;
			public const char ARABIC_LETTER_LAM = (char)0x0644;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC LAM. </summary>
			public const char ARABIC_LETTER_LAM_FINAL_FORM = (char)0xFEDE;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC LAM. </summary>
			public const char ARABIC_LETTER_LAM_INITIAL_FORM = (char)0xFEDF;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC LAM. </summary>
			public const char ARABIC_LETTER_LAM_ISOLATED_FORM = (char)0xFEDD;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC LAM. </summary>
			public const char ARABIC_LETTER_LAM_MEDIAL_FORM = (char)0xFEE0;
			public const char ARABIC_LETTER_LAM_WITH_BAR = (char)0x076A;
			public const char ARABIC_LETTER_LAM_WITH_DOT_ABOVE = (char)0x06B6;
			public const char ARABIC_LETTER_LAM_WITH_SMALL_V = (char)0x06B5;
			public const char ARABIC_LETTER_LAM_WITH_THREE_DOTS_ABOVE = (char)0x06B7;
			public const char ARABIC_LETTER_LAM_WITH_THREE_DOTS_BELOW = (char)0x06B8;
			public const char ARABIC_LETTER_MEEM = (char)0x0645;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC MEEM. </summary>
			public const char ARABIC_LETTER_MEEM_FINAL_FORM = (char)0xFEE2;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC MEEM. </summary>
			public const char ARABIC_LETTER_MEEM_INITIAL_FORM = (char)0xFEE3;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC MEEM. </summary>
			public const char ARABIC_LETTER_MEEM_ISOLATED_FORM = (char)0xFEE1;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC MEEM. </summary>
			public const char ARABIC_LETTER_MEEM_MEDIAL_FORM = (char)0xFEE4;
			public const char ARABIC_LETTER_MEEM_WITH_DOT_ABOVE = (char)0x0765;
			public const char ARABIC_LETTER_MEEM_WITH_DOT_BELOW = (char)0x0766;
			/// <summary> Formerly ARABIC LETTER CAF WITH THREE DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_NG = (char)0x06AD;
			/// <summary> Formerly ARABIC LETTER GAF WITH TWO DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_NGOEH = (char)0x06B1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NGOEH_FINAL_FORM = (char)0xFB9B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NGOEH_INITIAL_FORM = (char)0xFB9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NGOEH_ISOLATED_FORM = (char)0xFB9A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NGOEH_MEDIAL_FORM = (char)0xFB9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NG_FINAL_FORM = (char)0xFBD4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NG_INITIAL_FORM = (char)0xFBD5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NG_ISOLATED_FORM = (char)0xFBD3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NG_MEDIAL_FORM = (char)0xFBD6;
			public const char ARABIC_LETTER_NOON = (char)0x0646;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC NOON. </summary>
			public const char ARABIC_LETTER_NOON_FINAL_FORM = (char)0xFEE6;
			/// <summary> Formerly ARABIC LETTER DOTLESS NOON. </summary>
			public const char ARABIC_LETTER_NOON_GHUNNA = (char)0x06BA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NOON_GHUNNA_FINAL_FORM = (char)0xFB9F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NOON_GHUNNA_ISOLATED_FORM = (char)0xFB9E;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC NOON. </summary>
			public const char ARABIC_LETTER_NOON_INITIAL_FORM = (char)0xFEE7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC NOON. </summary>
			public const char ARABIC_LETTER_NOON_ISOLATED_FORM = (char)0xFEE5;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC NOON. </summary>
			public const char ARABIC_LETTER_NOON_MEDIAL_FORM = (char)0xFEE8;
			public const char ARABIC_LETTER_NOON_WITH_DOT_BELOW = (char)0x06B9;
			public const char ARABIC_LETTER_NOON_WITH_RING = (char)0x06BC;
			public const char ARABIC_LETTER_NOON_WITH_SMALL_TAH = (char)0x0768;
			public const char ARABIC_LETTER_NOON_WITH_SMALL_V = (char)0x0769;
			public const char ARABIC_LETTER_NOON_WITH_THREE_DOTS_ABOVE = (char)0x06BD;
			public const char ARABIC_LETTER_NOON_WITH_TWO_DOTS_BELOW = (char)0x0767;
			/// <summary> Formerly ARABIC LETTER HAA WITH MIDDLE TWO DOTS. </summary>
			public const char ARABIC_LETTER_NYEH = (char)0x0683;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NYEH_FINAL_FORM = (char)0xFB77;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NYEH_INITIAL_FORM = (char)0xFB78;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NYEH_ISOLATED_FORM = (char)0xFB76;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_NYEH_MEDIAL_FORM = (char)0xFB79;
			/// <summary> Formerly ARABIC LETTER WAW WITH SMALL V. </summary>
			public const char ARABIC_LETTER_OE = (char)0x06C6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_OE_FINAL_FORM = (char)0xFBDA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_OE_ISOLATED_FORM = (char)0xFBD9;
			/// <summary> Formerly ARABIC LETTER TAA WITH THREE DOTS BELOW. </summary>
			public const char ARABIC_LETTER_PEH = (char)0x067E;
			/// <summary> Formerly ARABIC LETTER FA WITH FOUR DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_PEHEH = (char)0x06A6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_PEHEH_FINAL_FORM = (char)0xFB6F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_PEHEH_INITIAL_FORM = (char)0xFB70;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_PEHEH_ISOLATED_FORM = (char)0xFB6E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_PEHEH_MEDIAL_FORM = (char)0xFB71;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_PEH_FINAL_FORM = (char)0xFB57;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_PEH_INITIAL_FORM = (char)0xFB58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_PEH_ISOLATED_FORM = (char)0xFB56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_PEH_MEDIAL_FORM = (char)0xFB59;
			public const char ARABIC_LETTER_QAF = (char)0x0642;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC QAF. </summary>
			public const char ARABIC_LETTER_QAF_FINAL_FORM = (char)0xFED6;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC QAF. </summary>
			public const char ARABIC_LETTER_QAF_INITIAL_FORM = (char)0xFED7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC QAF. </summary>
			public const char ARABIC_LETTER_QAF_ISOLATED_FORM = (char)0xFED5;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC QAF. </summary>
			public const char ARABIC_LETTER_QAF_MEDIAL_FORM = (char)0xFED8;
			public const char ARABIC_LETTER_QAF_WITH_DOT_ABOVE = (char)0x06A7;
			public const char ARABIC_LETTER_QAF_WITH_THREE_DOTS_ABOVE = (char)0x06A8;
			/// <summary> Formerly ARABIC LETTER RA. </summary>
			public const char ARABIC_LETTER_REH = (char)0x0631;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC RA. </summary>
			public const char ARABIC_LETTER_REH_FINAL_FORM = (char)0xFEAE;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC RA. </summary>
			public const char ARABIC_LETTER_REH_ISOLATED_FORM = (char)0xFEAD;
			/// <summary> Formerly ARABIC LETTER RA WITH DOT BELOW. </summary>
			public const char ARABIC_LETTER_REH_WITH_DOT_BELOW = (char)0x0694;
			/// <summary> Formerly ARABIC LETTER RA WITH DOT BELOW AND DOT ABOVE. </summary>
			public const char ARABIC_LETTER_REH_WITH_DOT_BELOW_AND_DOT_ABOVE = (char)0x0696;
			/// <summary> Formerly ARABIC LETTER RA WITH FOUR DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_REH_WITH_FOUR_DOTS_ABOVE = (char)0x0699;
			public const char ARABIC_LETTER_REH_WITH_HAMZA_ABOVE = (char)0x076C;
			public const char ARABIC_LETTER_REH_WITH_INVERTED_V = (char)0x06EF;
			/// <summary> Formerly ARABIC LETTER RA WITH RING. </summary>
			public const char ARABIC_LETTER_REH_WITH_RING = (char)0x0693;
			/// <summary> Formerly ARABIC LETTER RA WITH SMALL V. </summary>
			public const char ARABIC_LETTER_REH_WITH_SMALL_V = (char)0x0692;
			/// <summary> Formerly ARABIC LETTER RA WITH SMALL V BELOW. </summary>
			public const char ARABIC_LETTER_REH_WITH_SMALL_V_BELOW = (char)0x0695;
			public const char ARABIC_LETTER_REH_WITH_STROKE = (char)0x075B;
			/// <summary> Formerly ARABIC LETTER RA WITH TWO DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_REH_WITH_TWO_DOTS_ABOVE = (char)0x0697;
			public const char ARABIC_LETTER_REH_WITH_TWO_DOTS_VERTICALLY_ABOVE = (char)0x076B;
			/// <summary> Formerly ARABIC LETTER DOTLESS NOON WITH SMALL TAH. </summary>
			public const char ARABIC_LETTER_RNOON = (char)0x06BB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_RNOON_FINAL_FORM = (char)0xFBA1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_RNOON_INITIAL_FORM = (char)0xFBA2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_RNOON_ISOLATED_FORM = (char)0xFBA0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_RNOON_MEDIAL_FORM = (char)0xFBA3;
			/// <summary> Formerly ARABIC LETTER RA WITH SMALL TAH. </summary>
			public const char ARABIC_LETTER_RREH = (char)0x0691;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_RREH_FINAL_FORM = (char)0xFB8D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_RREH_ISOLATED_FORM = (char)0xFB8C;
			public const char ARABIC_LETTER_SAD = (char)0x0635;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC SAD. </summary>
			public const char ARABIC_LETTER_SAD_FINAL_FORM = (char)0xFEBA;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC SAD. </summary>
			public const char ARABIC_LETTER_SAD_INITIAL_FORM = (char)0xFEBB;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC SAD. </summary>
			public const char ARABIC_LETTER_SAD_ISOLATED_FORM = (char)0xFEB9;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC SAD. </summary>
			public const char ARABIC_LETTER_SAD_MEDIAL_FORM = (char)0xFEBC;
			public const char ARABIC_LETTER_SAD_WITH_THREE_DOTS_ABOVE = (char)0x069E;
			public const char ARABIC_LETTER_SAD_WITH_TWO_DOTS_BELOW = (char)0x069D;
			public const char ARABIC_LETTER_SEEN = (char)0x0633;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC SEEN. </summary>
			public const char ARABIC_LETTER_SEEN_FINAL_FORM = (char)0xFEB2;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC SEEN. </summary>
			public const char ARABIC_LETTER_SEEN_INITIAL_FORM = (char)0xFEB3;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC SEEN. </summary>
			public const char ARABIC_LETTER_SEEN_ISOLATED_FORM = (char)0xFEB1;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC SEEN. </summary>
			public const char ARABIC_LETTER_SEEN_MEDIAL_FORM = (char)0xFEB4;
			public const char ARABIC_LETTER_SEEN_WITH_DOT_BELOW_AND_DOT_ABOVE = (char)0x069A;
			public const char ARABIC_LETTER_SEEN_WITH_FOUR_DOTS_ABOVE = (char)0x075C;
			public const char ARABIC_LETTER_SEEN_WITH_THREE_DOTS_BELOW = (char)0x069B;
			public const char ARABIC_LETTER_SEEN_WITH_THREE_DOTS_BELOW_AND_THREE_DOTS_ABOVE = (char)0x069C;
			public const char ARABIC_LETTER_SEEN_WITH_TWO_DOTS_VERTICALLY_ABOVE = (char)0x076D;
			public const char ARABIC_LETTER_SHEEN = (char)0x0634;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC SHEEN. </summary>
			public const char ARABIC_LETTER_SHEEN_FINAL_FORM = (char)0xFEB6;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC SHEEN. </summary>
			public const char ARABIC_LETTER_SHEEN_INITIAL_FORM = (char)0xFEB7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC SHEEN. </summary>
			public const char ARABIC_LETTER_SHEEN_ISOLATED_FORM = (char)0xFEB5;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC SHEEN. </summary>
			public const char ARABIC_LETTER_SHEEN_MEDIAL_FORM = (char)0xFEB8;
			public const char ARABIC_LETTER_SHEEN_WITH_DOT_BELOW = (char)0x06FA;
			/// <summary> Formerly ARABIC ALEF ABOVE. </summary>
			public const char ARABIC_LETTER_SUPERSCRIPT_ALEF = (char)0x0670;
			/// <summary> Formerly ARABIC LETTER SWASH CAF. </summary>
			public const char ARABIC_LETTER_SWASH_KAF = (char)0x06AA;
			public const char ARABIC_LETTER_TAH = (char)0x0637;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC TAH. </summary>
			public const char ARABIC_LETTER_TAH_FINAL_FORM = (char)0xFEC2;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC TAH. </summary>
			public const char ARABIC_LETTER_TAH_INITIAL_FORM = (char)0xFEC3;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC TAH. </summary>
			public const char ARABIC_LETTER_TAH_ISOLATED_FORM = (char)0xFEC1;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC TAH. </summary>
			public const char ARABIC_LETTER_TAH_MEDIAL_FORM = (char)0xFEC4;
			public const char ARABIC_LETTER_TAH_WITH_THREE_DOTS_ABOVE = (char)0x069F;
			/// <summary> Formerly ARABIC LETTER HAA WITH MIDDLE THREE DOTS DOWNWARD. </summary>
			public const char ARABIC_LETTER_TCHEH = (char)0x0686;
			/// <summary> Formerly ARABIC LETTER HAA WITH MIDDLE FOUR DOTS. </summary>
			public const char ARABIC_LETTER_TCHEHEH = (char)0x0687;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TCHEHEH_FINAL_FORM = (char)0xFB7F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TCHEHEH_INITIAL_FORM = (char)0xFB80;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TCHEHEH_ISOLATED_FORM = (char)0xFB7E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TCHEHEH_MEDIAL_FORM = (char)0xFB81;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TCHEH_FINAL_FORM = (char)0xFB7B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TCHEH_INITIAL_FORM = (char)0xFB7C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TCHEH_ISOLATED_FORM = (char)0xFB7A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TCHEH_MEDIAL_FORM = (char)0xFB7D;
			public const char ARABIC_LETTER_TCHEH_WITH_DOT_ABOVE = (char)0x06BF;
			/// <summary> Formerly ARABIC LETTER TAA. </summary>
			public const char ARABIC_LETTER_TEH = (char)0x062A;
			/// <summary> Formerly ARABIC LETTER TAA WITH FOUR DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_TEHEH = (char)0x067F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TEHEH_FINAL_FORM = (char)0xFB63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TEHEH_INITIAL_FORM = (char)0xFB64;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TEHEH_ISOLATED_FORM = (char)0xFB62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TEHEH_MEDIAL_FORM = (char)0xFB65;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC TAA. </summary>
			public const char ARABIC_LETTER_TEH_FINAL_FORM = (char)0xFE96;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC TAA. </summary>
			public const char ARABIC_LETTER_TEH_INITIAL_FORM = (char)0xFE97;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC TAA. </summary>
			public const char ARABIC_LETTER_TEH_ISOLATED_FORM = (char)0xFE95;
			/// <summary> Formerly ARABIC LETTER TAA MARBUTAH. </summary>
			public const char ARABIC_LETTER_TEH_MARBUTA = (char)0x0629;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC TAA MARBUTAH. </summary>
			public const char ARABIC_LETTER_TEH_MARBUTA_FINAL_FORM = (char)0xFE94;
			/// <summary> Formerly ARABIC LETTER TAA MARBUTAH GOAL. </summary>
			public const char ARABIC_LETTER_TEH_MARBUTA_GOAL = (char)0x06C3;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC TAA MARBUTAH. </summary>
			public const char ARABIC_LETTER_TEH_MARBUTA_ISOLATED_FORM = (char)0xFE93;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC TAA. </summary>
			public const char ARABIC_LETTER_TEH_MEDIAL_FORM = (char)0xFE98;
			/// <summary> Formerly ARABIC LETTER TAA WITH RING. </summary>
			public const char ARABIC_LETTER_TEH_WITH_RING = (char)0x067C;
			/// <summary> Formerly ARABIC LETTER TAA WITH THREE DOTS ABOVE DOWNWARD. </summary>
			public const char ARABIC_LETTER_TEH_WITH_THREE_DOTS_ABOVE_DOWNWARDS = (char)0x067D;
			public const char ARABIC_LETTER_THAL = (char)0x0630;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC THAL. </summary>
			public const char ARABIC_LETTER_THAL_FINAL_FORM = (char)0xFEAC;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC THAL. </summary>
			public const char ARABIC_LETTER_THAL_ISOLATED_FORM = (char)0xFEAB;
			/// <summary> Formerly ARABIC LETTER THAA. </summary>
			public const char ARABIC_LETTER_THEH = (char)0x062B;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC THAA. </summary>
			public const char ARABIC_LETTER_THEH_FINAL_FORM = (char)0xFE9A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC THAA. </summary>
			public const char ARABIC_LETTER_THEH_INITIAL_FORM = (char)0xFE9B;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC THAA. </summary>
			public const char ARABIC_LETTER_THEH_ISOLATED_FORM = (char)0xFE99;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC THAA. </summary>
			public const char ARABIC_LETTER_THEH_MEDIAL_FORM = (char)0xFE9C;
			/// <summary> Formerly ARABIC LETTER TAA WITH SMALL TAH. </summary>
			public const char ARABIC_LETTER_TTEH = (char)0x0679;
			/// <summary> Formerly ARABIC LETTER TAA WITH TWO DOTS VERTICAL ABOVE. </summary>
			public const char ARABIC_LETTER_TTEHEH = (char)0x067A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TTEHEH_FINAL_FORM = (char)0xFB5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TTEHEH_INITIAL_FORM = (char)0xFB60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TTEHEH_ISOLATED_FORM = (char)0xFB5E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TTEHEH_MEDIAL_FORM = (char)0xFB61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TTEH_FINAL_FORM = (char)0xFB67;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TTEH_INITIAL_FORM = (char)0xFB68;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TTEH_ISOLATED_FORM = (char)0xFB66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_TTEH_MEDIAL_FORM = (char)0xFB69;
			/// <summary> Formerly ARABIC LETTER WAW WITH DAMMAH. </summary>
			public const char ARABIC_LETTER_U = (char)0x06C7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_UIGHUR_KAZAKH_KIRGHIZ_ALEF_MAKSURA_INITIAL_FORM = (char)0xFBE8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_UIGHUR_KAZAKH_KIRGHIZ_ALEF_MAKSURA_MEDIAL_FORM = (char)0xFBE9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_U_FINAL_FORM = (char)0xFBD8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_U_ISOLATED_FORM = (char)0xFBD7;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HIGH HAMZAH WAW WITH DAMMAH. </summary>
			public const char ARABIC_LETTER_U_WITH_HAMZA_ABOVE = (char)0x0677;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_U_WITH_HAMZA_ABOVE_ISOLATED_FORM = (char)0xFBDD;
			/// <summary> Formerly ARABIC LETTER WAW WITH THREE DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_VE = (char)0x06CB;
			/// <summary> Formerly ARABIC LETTER FA WITH THREE DOTS ABOVE. </summary>
			public const char ARABIC_LETTER_VEH = (char)0x06A4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_VEH_FINAL_FORM = (char)0xFB6B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_VEH_INITIAL_FORM = (char)0xFB6C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_VEH_ISOLATED_FORM = (char)0xFB6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_VEH_MEDIAL_FORM = (char)0xFB6D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_VE_FINAL_FORM = (char)0xFBDF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_VE_ISOLATED_FORM = (char)0xFBDE;
			public const char ARABIC_LETTER_WAW = (char)0x0648;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC WAW. </summary>
			public const char ARABIC_LETTER_WAW_FINAL_FORM = (char)0xFEEE;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC WAW. </summary>
			public const char ARABIC_LETTER_WAW_ISOLATED_FORM = (char)0xFEED;
			public const char ARABIC_LETTER_WAW_WITH_DOT_ABOVE = (char)0x06CF;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HAMZAH ON WAW. </summary>
			public const char ARABIC_LETTER_WAW_WITH_HAMZA_ABOVE = (char)0x0624;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC HAMZAH ON WAW. </summary>
			public const char ARABIC_LETTER_WAW_WITH_HAMZA_ABOVE_FINAL_FORM = (char)0xFE86;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HAMZAH ON WAW. </summary>
			public const char ARABIC_LETTER_WAW_WITH_HAMZA_ABOVE_ISOLATED_FORM = (char)0xFE85;
			public const char ARABIC_LETTER_WAW_WITH_RING = (char)0x06C4;
			public const char ARABIC_LETTER_WAW_WITH_TWO_DOTS_ABOVE = (char)0x06CA;
			/// <summary> Formerly ARABIC LETTER YA. </summary>
			public const char ARABIC_LETTER_YEH = (char)0x064A;
			/// <summary> Formerly ARABIC LETTER YA BARREE. </summary>
			public const char ARABIC_LETTER_YEH_BARREE = (char)0x06D2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_YEH_BARREE_FINAL_FORM = (char)0xFBAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_YEH_BARREE_ISOLATED_FORM = (char)0xFBAE;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HAMZAH ON YA BARREE. </summary>
			public const char ARABIC_LETTER_YEH_BARREE_WITH_HAMZA_ABOVE = (char)0x06D3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_YEH_BARREE_WITH_HAMZA_ABOVE_FINAL_FORM = (char)0xFBB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_YEH_BARREE_WITH_HAMZA_ABOVE_ISOLATED_FORM = (char)0xFBB0;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC YA. </summary>
			public const char ARABIC_LETTER_YEH_FINAL_FORM = (char)0xFEF2;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC YA. </summary>
			public const char ARABIC_LETTER_YEH_INITIAL_FORM = (char)0xFEF3;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC YA. </summary>
			public const char ARABIC_LETTER_YEH_ISOLATED_FORM = (char)0xFEF1;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC YA. </summary>
			public const char ARABIC_LETTER_YEH_MEDIAL_FORM = (char)0xFEF4;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER HAMZAH ON YA. </summary>
			public const char ARABIC_LETTER_YEH_WITH_HAMZA_ABOVE = (char)0x0626;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC HAMZAH ON YA. </summary>
			public const char ARABIC_LETTER_YEH_WITH_HAMZA_ABOVE_FINAL_FORM = (char)0xFE8A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC HAMZAH ON YA. </summary>
			public const char ARABIC_LETTER_YEH_WITH_HAMZA_ABOVE_INITIAL_FORM = (char)0xFE8B;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HAMZAH ON YA. </summary>
			public const char ARABIC_LETTER_YEH_WITH_HAMZA_ABOVE_ISOLATED_FORM = (char)0xFE89;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC HAMZAH ON YA. </summary>
			public const char ARABIC_LETTER_YEH_WITH_HAMZA_ABOVE_MEDIAL_FORM = (char)0xFE8C;
			/// <summary> Formerly ARABIC LETTER YA WITH SMALL V. </summary>
			public const char ARABIC_LETTER_YEH_WITH_SMALL_V = (char)0x06CE;
			/// <summary> Formerly ARABIC LETTER YA WITH TAIL. </summary>
			public const char ARABIC_LETTER_YEH_WITH_TAIL = (char)0x06CD;
			/// <summary> Formerly ARABIC LETTER YA WITH THREE DOTS BELOW. </summary>
			public const char ARABIC_LETTER_YEH_WITH_THREE_DOTS_BELOW = (char)0x06D1;
			/// <summary> Formerly ARABIC LETTER WAW WITH ALEF ABOVE. </summary>
			public const char ARABIC_LETTER_YU = (char)0x06C8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_YU_FINAL_FORM = (char)0xFBDC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LETTER_YU_ISOLATED_FORM = (char)0xFBDB;
			/// <summary> Formerly ARABIC LETTER DHAH. </summary>
			public const char ARABIC_LETTER_ZAH = (char)0x0638;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC DHAH. </summary>
			public const char ARABIC_LETTER_ZAH_FINAL_FORM = (char)0xFEC6;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR INITIAL ARABIC DHAH. </summary>
			public const char ARABIC_LETTER_ZAH_INITIAL_FORM = (char)0xFEC7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC DHAH. </summary>
			public const char ARABIC_LETTER_ZAH_ISOLATED_FORM = (char)0xFEC5;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR MEDIAL ARABIC DHAH. </summary>
			public const char ARABIC_LETTER_ZAH_MEDIAL_FORM = (char)0xFEC8;
			public const char ARABIC_LETTER_ZAIN = (char)0x0632;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC ZAIN. </summary>
			public const char ARABIC_LETTER_ZAIN_FINAL_FORM = (char)0xFEB0;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC ZAIN. </summary>
			public const char ARABIC_LETTER_ZAIN_ISOLATED_FORM = (char)0xFEAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD13;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFCF7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_JEEM_INITIAL_FORM = (char)0xFCBA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_JEEM_ISOLATED_FORM = (char)0xFC29;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_JEEM_WITH_MEEM_FINAL_FORM = (char)0xFD75;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_JEEM_WITH_MEEM_INITIAL_FORM = (char)0xFDC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_MEEM_INITIAL_FORM = (char)0xFCBB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_MEEM_ISOLATED_FORM = (char)0xFC2A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_MEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD78;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFD76;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD77;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDB6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_YEH_FINAL_FORM = (char)0xFD14;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AIN_WITH_YEH_ISOLATED_FORM = (char)0xFCF8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_AKBAR_ISOLATED_FORM = (char)0xFDF3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ALAYHE_ISOLATED_FORM = (char)0xFDF7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ALEF_MAKSURA_WITH_SUPERSCRIPT_ALEF_FINAL_FORM = (char)0xFC90;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ALEF_MAKSURA_WITH_SUPERSCRIPT_ALEF_ISOLATED_FORM = (char)0xFC5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ALEF_WITH_FATHATAN_FINAL_FORM = (char)0xFD3C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ALEF_WITH_FATHATAN_ISOLATED_FORM = (char)0xFD3D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ALLAH_ISOLATED_FORM = (char)0xFDF2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC6E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC09;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_HAH_INITIAL_FORM = (char)0xFC9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_HAH_ISOLATED_FORM = (char)0xFC06;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFDC2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_HEH_INITIAL_FORM = (char)0xFCA0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_HEH_MEDIAL_FORM = (char)0xFCE2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_JEEM_INITIAL_FORM = (char)0xFC9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_JEEM_ISOLATED_FORM = (char)0xFC05;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_KHAH_INITIAL_FORM = (char)0xFC9E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_KHAH_ISOLATED_FORM = (char)0xFC07;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_KHAH_WITH_YEH_FINAL_FORM = (char)0xFD9E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_MEEM_FINAL_FORM = (char)0xFC6C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_MEEM_INITIAL_FORM = (char)0xFC9F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_MEEM_ISOLATED_FORM = (char)0xFC08;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_MEEM_MEDIAL_FORM = (char)0xFCE1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_NOON_FINAL_FORM = (char)0xFC6D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_REH_FINAL_FORM = (char)0xFC6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_YEH_FINAL_FORM = (char)0xFC6F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_YEH_ISOLATED_FORM = (char)0xFC0A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_BEH_WITH_ZAIN_FINAL_FORM = (char)0xFC6B;
			public const char ARABIC_LIGATURE_BISMILLAH_AR_RAHMAN_AR_RAHEEM = (char)0xFDFD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD23;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFD07;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_HAH_INITIAL_FORM = (char)0xFCB5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_HAH_ISOLATED_FORM = (char)0xFC23;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_HAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD6E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFDAB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_JEEM_INITIAL_FORM = (char)0xFCB4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_JEEM_ISOLATED_FORM = (char)0xFC22;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_KHAH_INITIAL_FORM = (char)0xFCB6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_KHAH_ISOLATED_FORM = (char)0xFC24;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_KHAH_WITH_MEEM_FINAL_FORM = (char)0xFD6F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_KHAH_WITH_MEEM_INITIAL_FORM = (char)0xFD70;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_MEEM_INITIAL_FORM = (char)0xFCB7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_MEEM_ISOLATED_FORM = (char)0xFC25;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_REH_FINAL_FORM = (char)0xFD2C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_REH_ISOLATED_FORM = (char)0xFD10;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_YEH_FINAL_FORM = (char)0xFD24;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_DAD_WITH_YEH_ISOLATED_FORM = (char)0xFD08;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC7C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC31;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_HAH_INITIAL_FORM = (char)0xFCBF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_HAH_ISOLATED_FORM = (char)0xFC2E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_JEEM_INITIAL_FORM = (char)0xFCBE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_JEEM_ISOLATED_FORM = (char)0xFC2D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_KHAH_INITIAL_FORM = (char)0xFCC0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_KHAH_ISOLATED_FORM = (char)0xFC2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_KHAH_WITH_MEEM_FINAL_FORM = (char)0xFD7C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_KHAH_WITH_MEEM_INITIAL_FORM = (char)0xFD7D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_MEEM_INITIAL_FORM = (char)0xFCC1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_MEEM_ISOLATED_FORM = (char)0xFC30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDC1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_YEH_FINAL_FORM = (char)0xFC7D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_FEH_WITH_YEH_ISOLATED_FORM = (char)0xFC32;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD15;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFCF9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_JEEM_INITIAL_FORM = (char)0xFCBC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_JEEM_ISOLATED_FORM = (char)0xFC2B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_MEEM_INITIAL_FORM = (char)0xFCBD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_MEEM_ISOLATED_FORM = (char)0xFC2C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_MEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD7B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFD79;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFD7A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_YEH_FINAL_FORM = (char)0xFD16;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_GHAIN_WITH_YEH_ISOLATED_FORM = (char)0xFCFA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD1B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFCFF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_JEEM_INITIAL_FORM = (char)0xFCA9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_JEEM_ISOLATED_FORM = (char)0xFC17;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_JEEM_WITH_YEH_FINAL_FORM = (char)0xFDBF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_MEEM_INITIAL_FORM = (char)0xFCAA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_MEEM_ISOLATED_FORM = (char)0xFC18;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_MEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD5B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFD5A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_YEH_FINAL_FORM = (char)0xFD1C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HAH_WITH_YEH_ISOLATED_FORM = (char)0xFD00;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_JEEM_INITIAL_FORM = (char)0xFCD7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_JEEM_ISOLATED_FORM = (char)0xFC51;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_MEEM_INITIAL_FORM = (char)0xFCD8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_MEEM_ISOLATED_FORM = (char)0xFC52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_MEEM_WITH_JEEM_INITIAL_FORM = (char)0xFD93;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD94;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_SUPERSCRIPT_ALEF_INITIAL_FORM = (char)0xFCD9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_HEH_WITH_YEH_ISOLATED_FORM = (char)0xFC54;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER JALLAJALALOUHOU. </summary>
			public const char ARABIC_LIGATURE_JALLAJALALOUHOU = (char)0xFDFB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD1D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFD01;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_HAH_INITIAL_FORM = (char)0xFCA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_HAH_ISOLATED_FORM = (char)0xFC15;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_HAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFDA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFDBE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_MEEM_INITIAL_FORM = (char)0xFCA8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_MEEM_ISOLATED_FORM = (char)0xFC16;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_MEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFDA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_MEEM_WITH_HAH_FINAL_FORM = (char)0xFD58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_MEEM_WITH_HAH_INITIAL_FORM = (char)0xFD59;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDA5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_YEH_FINAL_FORM = (char)0xFD1E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_JEEM_WITH_YEH_ISOLATED_FORM = (char)0xFD02;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_ALEF_FINAL_FORM = (char)0xFC80;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_ALEF_ISOLATED_FORM = (char)0xFC37;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC83;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC3D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_HAH_INITIAL_FORM = (char)0xFCC5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_HAH_ISOLATED_FORM = (char)0xFC39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_JEEM_INITIAL_FORM = (char)0xFCC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_JEEM_ISOLATED_FORM = (char)0xFC38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_KHAH_INITIAL_FORM = (char)0xFCC6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_KHAH_ISOLATED_FORM = (char)0xFC3A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_LAM_FINAL_FORM = (char)0xFC81;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_LAM_INITIAL_FORM = (char)0xFCC7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_LAM_ISOLATED_FORM = (char)0xFC3B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_LAM_MEDIAL_FORM = (char)0xFCEB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_MEEM_FINAL_FORM = (char)0xFC82;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_MEEM_INITIAL_FORM = (char)0xFCC8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_MEEM_ISOLATED_FORM = (char)0xFC3C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_MEEM_MEDIAL_FORM = (char)0xFCEC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFDBB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFDC3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDB7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_YEH_FINAL_FORM = (char)0xFC84;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KAF_WITH_YEH_ISOLATED_FORM = (char)0xFC3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD1F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFD03;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_HAH_ISOLATED_FORM = (char)0xFC1A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_JEEM_INITIAL_FORM = (char)0xFCAB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_JEEM_ISOLATED_FORM = (char)0xFC19;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_MEEM_INITIAL_FORM = (char)0xFCAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_MEEM_ISOLATED_FORM = (char)0xFC1B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_YEH_FINAL_FORM = (char)0xFD20;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_KHAH_WITH_YEH_ISOLATED_FORM = (char)0xFD04;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC LIGATURE LAM ALEF. </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_FINAL_FORM = (char)0xFEFC;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC LIGATURE LAM ALEF. </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_ISOLATED_FORM = (char)0xFEFB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC86;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC43;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC HAMZAH ON LIGATURE LAM ALEF. </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_WITH_HAMZA_ABOVE_FINAL_FORM = (char)0xFEF8;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HAMZAH ON LIGATURE LAM ALEF. </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_WITH_HAMZA_ABOVE_ISOLATED_FORM = (char)0xFEF7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC HAMZAH UNDER LIGATURE LAM ALEF. </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_WITH_HAMZA_BELOW_FINAL_FORM = (char)0xFEFA;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC HAMZAH UNDER LIGATURE LAM ALEF. </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_WITH_HAMZA_BELOW_ISOLATED_FORM = (char)0xFEF9;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR FINAL ARABIC MADDAH ON LIGATURE LAM ALEF. </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_WITH_MADDA_ABOVE_FINAL_FORM = (char)0xFEF6;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR ISOLATE ARABIC MADDAH ON LIGATURE LAM ALEF. </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_ALEF_WITH_MADDA_ABOVE_ISOLATED_FORM = (char)0xFEF5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_HAH_INITIAL_FORM = (char)0xFCCA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_HAH_ISOLATED_FORM = (char)0xFC40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_HAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD82;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_HAH_WITH_MEEM_FINAL_FORM = (char)0xFD80;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_HAH_WITH_MEEM_INITIAL_FORM = (char)0xFDB5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFD81;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_HEH_INITIAL_FORM = (char)0xFCCD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_JEEM_INITIAL_FORM = (char)0xFCC9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_JEEM_ISOLATED_FORM = (char)0xFC3F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_JEEM_WITH_JEEM_FINAL_FORM = (char)0xFD84;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_JEEM_WITH_JEEM_INITIAL_FORM = (char)0xFD83;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_JEEM_WITH_MEEM_FINAL_FORM = (char)0xFDBC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_JEEM_WITH_MEEM_INITIAL_FORM = (char)0xFDBA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_JEEM_WITH_YEH_FINAL_FORM = (char)0xFDAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_KHAH_INITIAL_FORM = (char)0xFCCB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_KHAH_ISOLATED_FORM = (char)0xFC41;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_KHAH_WITH_MEEM_FINAL_FORM = (char)0xFD85;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_KHAH_WITH_MEEM_INITIAL_FORM = (char)0xFD86;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_MEEM_FINAL_FORM = (char)0xFC85;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_MEEM_INITIAL_FORM = (char)0xFCCC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_MEEM_ISOLATED_FORM = (char)0xFC42;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_MEEM_MEDIAL_FORM = (char)0xFCED;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_MEEM_WITH_HAH_FINAL_FORM = (char)0xFD87;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_MEEM_WITH_HAH_INITIAL_FORM = (char)0xFD88;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDAD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_YEH_FINAL_FORM = (char)0xFC87;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_LAM_WITH_YEH_ISOLATED_FORM = (char)0xFC44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_ALEF_FINAL_FORM = (char)0xFC88;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC49;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_HAH_INITIAL_FORM = (char)0xFCCF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_HAH_ISOLATED_FORM = (char)0xFC46;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_HAH_WITH_JEEM_INITIAL_FORM = (char)0xFD89;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_HAH_WITH_MEEM_INITIAL_FORM = (char)0xFD8A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFD8B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_JEEM_INITIAL_FORM = (char)0xFCCE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_JEEM_ISOLATED_FORM = (char)0xFC45;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_JEEM_WITH_HAH_INITIAL_FORM = (char)0xFD8C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_JEEM_WITH_KHAH_INITIAL_FORM = (char)0xFD92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_JEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD8D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_JEEM_WITH_YEH_FINAL_FORM = (char)0xFDC0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_KHAH_INITIAL_FORM = (char)0xFCD0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_KHAH_ISOLATED_FORM = (char)0xFC47;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_KHAH_WITH_JEEM_INITIAL_FORM = (char)0xFD8E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_KHAH_WITH_MEEM_INITIAL_FORM = (char)0xFD8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_KHAH_WITH_YEH_FINAL_FORM = (char)0xFDB9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFC89;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFCD1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_MEEM_ISOLATED_FORM = (char)0xFC48;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MEEM_WITH_YEH_ISOLATED_FORM = (char)0xFC4A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_MOHAMMAD_ISOLATED_FORM = (char)0xFDF4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC8E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC4F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_HAH_INITIAL_FORM = (char)0xFCD3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_HAH_ISOLATED_FORM = (char)0xFC4C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_HAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD96;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_HAH_WITH_MEEM_INITIAL_FORM = (char)0xFD95;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFDB3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_HEH_INITIAL_FORM = (char)0xFCD6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_HEH_MEDIAL_FORM = (char)0xFCEF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_JEEM_INITIAL_FORM = (char)0xFCD2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_JEEM_ISOLATED_FORM = (char)0xFC4B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_JEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD99;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_JEEM_WITH_HAH_FINAL_FORM = (char)0xFDBD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_JEEM_WITH_HAH_INITIAL_FORM = (char)0xFDB8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_JEEM_WITH_MEEM_FINAL_FORM = (char)0xFD97;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_JEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD98;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_JEEM_WITH_YEH_FINAL_FORM = (char)0xFDC7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_KHAH_INITIAL_FORM = (char)0xFCD4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_KHAH_ISOLATED_FORM = (char)0xFC4D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_MEEM_FINAL_FORM = (char)0xFC8C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_MEEM_INITIAL_FORM = (char)0xFCD5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_MEEM_ISOLATED_FORM = (char)0xFC4E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_MEEM_MEDIAL_FORM = (char)0xFCEE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_MEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD9B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFD9A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_NOON_FINAL_FORM = (char)0xFC8D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_REH_FINAL_FORM = (char)0xFC8A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_YEH_FINAL_FORM = (char)0xFC8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_YEH_ISOLATED_FORM = (char)0xFC50;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_NOON_WITH_ZAIN_FINAL_FORM = (char)0xFC8B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC7E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_HAH_INITIAL_FORM = (char)0xFCC2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_HAH_ISOLATED_FORM = (char)0xFC33;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_MEEM_INITIAL_FORM = (char)0xFCC3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_MEEM_ISOLATED_FORM = (char)0xFC34;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_MEEM_WITH_HAH_FINAL_FORM = (char)0xFD7E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_MEEM_WITH_HAH_INITIAL_FORM = (char)0xFDB4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFD7F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDB2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_YEH_FINAL_FORM = (char)0xFC7F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QAF_WITH_YEH_ISOLATED_FORM = (char)0xFC36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_QALA_USED_AS_KORANIC_STOP_SIGN_ISOLATED_FORM = (char)0xFDF1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_RASOUL_ISOLATED_FORM = (char)0xFDF6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_REH_WITH_SUPERSCRIPT_ALEF_ISOLATED_FORM = (char)0xFC5C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD21;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFD05;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_HAH_INITIAL_FORM = (char)0xFCB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_HAH_ISOLATED_FORM = (char)0xFC20;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_HAH_WITH_HAH_FINAL_FORM = (char)0xFD64;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_HAH_WITH_HAH_INITIAL_FORM = (char)0xFD65;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFDA9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_KHAH_INITIAL_FORM = (char)0xFCB2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_MEEM_INITIAL_FORM = (char)0xFCB3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_MEEM_ISOLATED_FORM = (char)0xFC21;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFD66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFDC5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_REH_FINAL_FORM = (char)0xFD2B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_REH_ISOLATED_FORM = (char)0xFD0F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_YEH_FINAL_FORM = (char)0xFD22;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SAD_WITH_YEH_ISOLATED_FORM = (char)0xFD06;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SALAM_ISOLATED_FORM = (char)0xFDF5;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC LETTER SALLALLAHOU ALAYHE WASALLAM. </summary>
			public const char ARABIC_LIGATURE_SALLALLAHOU_ALAYHE_WASALLAM = (char)0xFDFA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SALLA_ISOLATED_FORM = (char)0xFDF9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SALLA_USED_AS_KORANIC_STOP_SIGN_ISOLATED_FORM = (char)0xFDF0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD17;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFCFB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_HAH_INITIAL_FORM = (char)0xFCAE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_HAH_ISOLATED_FORM = (char)0xFC1D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_HAH_MEDIAL_FORM = (char)0xFD35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_HAH_WITH_JEEM_INITIAL_FORM = (char)0xFD5C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_HEH_INITIAL_FORM = (char)0xFD31;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_HEH_MEDIAL_FORM = (char)0xFCE8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_JEEM_INITIAL_FORM = (char)0xFCAD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_JEEM_ISOLATED_FORM = (char)0xFC1C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_JEEM_MEDIAL_FORM = (char)0xFD34;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_JEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD5E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_JEEM_WITH_HAH_INITIAL_FORM = (char)0xFD5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_KHAH_INITIAL_FORM = (char)0xFCAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_KHAH_ISOLATED_FORM = (char)0xFC1E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_KHAH_MEDIAL_FORM = (char)0xFD36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_KHAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFDA8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_KHAH_WITH_YEH_FINAL_FORM = (char)0xFDC6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_MEEM_INITIAL_FORM = (char)0xFCB0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_MEEM_ISOLATED_FORM = (char)0xFC1F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_MEEM_MEDIAL_FORM = (char)0xFCE7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_MEEM_WITH_HAH_FINAL_FORM = (char)0xFD5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_MEEM_WITH_HAH_INITIAL_FORM = (char)0xFD60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_MEEM_WITH_JEEM_INITIAL_FORM = (char)0xFD61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFD62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_REH_FINAL_FORM = (char)0xFD2A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_REH_ISOLATED_FORM = (char)0xFD0E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_YEH_FINAL_FORM = (char)0xFD18;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SEEN_WITH_YEH_ISOLATED_FORM = (char)0xFCFC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_DAMMATAN_ISOLATED_FORM = (char)0xFC5E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_DAMMA_ISOLATED_FORM = (char)0xFC61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_DAMMA_MEDIAL_FORM = (char)0xFCF3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_FATHA_ISOLATED_FORM = (char)0xFC60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_FATHA_MEDIAL_FORM = (char)0xFCF2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_KASRATAN_ISOLATED_FORM = (char)0xFC5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_KASRA_ISOLATED_FORM = (char)0xFC62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_KASRA_MEDIAL_FORM = (char)0xFCF4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHADDA_WITH_SUPERSCRIPT_ALEF_ISOLATED_FORM = (char)0xFC63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD19;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFCFD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HAH_FINAL_FORM = (char)0xFD26;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HAH_INITIAL_FORM = (char)0xFD2E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HAH_ISOLATED_FORM = (char)0xFD0A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HAH_MEDIAL_FORM = (char)0xFD38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HAH_WITH_MEEM_FINAL_FORM = (char)0xFD67;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HAH_WITH_MEEM_INITIAL_FORM = (char)0xFD68;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFDAA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HEH_INITIAL_FORM = (char)0xFD32;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_HEH_MEDIAL_FORM = (char)0xFCEA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_JEEM_FINAL_FORM = (char)0xFD25;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_JEEM_INITIAL_FORM = (char)0xFD2D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_JEEM_ISOLATED_FORM = (char)0xFD09;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_JEEM_MEDIAL_FORM = (char)0xFD37;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_JEEM_WITH_YEH_FINAL_FORM = (char)0xFD69;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_KHAH_FINAL_FORM = (char)0xFD27;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_KHAH_INITIAL_FORM = (char)0xFD2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_KHAH_ISOLATED_FORM = (char)0xFD0B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_KHAH_MEDIAL_FORM = (char)0xFD39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_MEEM_FINAL_FORM = (char)0xFD28;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_MEEM_INITIAL_FORM = (char)0xFD30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_MEEM_ISOLATED_FORM = (char)0xFD0C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_MEEM_MEDIAL_FORM = (char)0xFCE9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_MEEM_WITH_KHAH_FINAL_FORM = (char)0xFD6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_MEEM_WITH_KHAH_INITIAL_FORM = (char)0xFD6B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFD6C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD6D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_REH_FINAL_FORM = (char)0xFD29;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_REH_ISOLATED_FORM = (char)0xFD0D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_YEH_FINAL_FORM = (char)0xFD1A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_SHEEN_WITH_YEH_ISOLATED_FORM = (char)0xFCFE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFD11;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFCF5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_HAH_INITIAL_FORM = (char)0xFCB8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_HAH_ISOLATED_FORM = (char)0xFC26;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_MEEM_INITIAL_FORM = (char)0xFD33;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_MEEM_ISOLATED_FORM = (char)0xFC27;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_MEEM_MEDIAL_FORM = (char)0xFD3A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_MEEM_WITH_HAH_FINAL_FORM = (char)0xFD71;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_MEEM_WITH_HAH_INITIAL_FORM = (char)0xFD72;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFD74;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_YEH_FINAL_FORM = (char)0xFD12;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TAH_WITH_YEH_ISOLATED_FORM = (char)0xFCF6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC74;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC0F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_HAH_INITIAL_FORM = (char)0xFCA2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_HAH_ISOLATED_FORM = (char)0xFC0C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_HAH_WITH_JEEM_FINAL_FORM = (char)0xFD51;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_HAH_WITH_JEEM_INITIAL_FORM = (char)0xFD52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_HAH_WITH_MEEM_INITIAL_FORM = (char)0xFD53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_HEH_INITIAL_FORM = (char)0xFCA5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_HEH_MEDIAL_FORM = (char)0xFCE4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_JEEM_INITIAL_FORM = (char)0xFCA1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_JEEM_ISOLATED_FORM = (char)0xFC0B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_JEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFDA0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_JEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD50;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_JEEM_WITH_YEH_FINAL_FORM = (char)0xFD9F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_KHAH_INITIAL_FORM = (char)0xFCA3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_KHAH_ISOLATED_FORM = (char)0xFC0D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_KHAH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFDA2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_KHAH_WITH_MEEM_INITIAL_FORM = (char)0xFD54;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_KHAH_WITH_YEH_FINAL_FORM = (char)0xFDA1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_FINAL_FORM = (char)0xFC72;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_INITIAL_FORM = (char)0xFCA4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_ISOLATED_FORM = (char)0xFC0E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_MEDIAL_FORM = (char)0xFCE3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFDA4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_WITH_HAH_INITIAL_FORM = (char)0xFD56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_WITH_JEEM_INITIAL_FORM = (char)0xFD55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_WITH_KHAH_INITIAL_FORM = (char)0xFD57;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDA3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_NOON_FINAL_FORM = (char)0xFC73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_REH_FINAL_FORM = (char)0xFC70;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_YEH_FINAL_FORM = (char)0xFC75;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_YEH_ISOLATED_FORM = (char)0xFC10;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_TEH_WITH_ZAIN_FINAL_FORM = (char)0xFC71;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THAL_WITH_SUPERSCRIPT_ALEF_ISOLATED_FORM = (char)0xFC5B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC7A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC13;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_HEH_MEDIAL_FORM = (char)0xFCE6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_JEEM_ISOLATED_FORM = (char)0xFC11;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_MEEM_FINAL_FORM = (char)0xFC78;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_MEEM_INITIAL_FORM = (char)0xFCA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_MEEM_ISOLATED_FORM = (char)0xFC12;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_MEEM_MEDIAL_FORM = (char)0xFCE5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_NOON_FINAL_FORM = (char)0xFC79;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_REH_FINAL_FORM = (char)0xFC76;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_YEH_FINAL_FORM = (char)0xFC7B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_YEH_ISOLATED_FORM = (char)0xFC14;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_THEH_WITH_ZAIN_FINAL_FORM = (char)0xFC77;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_UIGHUR_KIRGHIZ_YEH_WITH_HAMZA_ABOVE_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFBFA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_UIGHUR_KIRGHIZ_YEH_WITH_HAMZA_ABOVE_WITH_ALEF_MAKSURA_INITIAL_FORM = (char)0xFBFB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_UIGHUR_KIRGHIZ_YEH_WITH_HAMZA_ABOVE_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFBF9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_WASALLAM_ISOLATED_FORM = (char)0xFDF8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC95;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC59;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAH_INITIAL_FORM = (char)0xFCDB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAH_ISOLATED_FORM = (char)0xFC56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAH_WITH_YEH_FINAL_FORM = (char)0xFDAE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_AE_FINAL_FORM = (char)0xFBED;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_AE_ISOLATED_FORM = (char)0xFBEC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_ALEF_FINAL_FORM = (char)0xFBEB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_ALEF_ISOLATED_FORM = (char)0xFBEA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_ALEF_MAKSURA_FINAL_FORM = (char)0xFC68;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_ALEF_MAKSURA_ISOLATED_FORM = (char)0xFC03;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_E_FINAL_FORM = (char)0xFBF7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_E_INITIAL_FORM = (char)0xFBF8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_E_ISOLATED_FORM = (char)0xFBF6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_HAH_INITIAL_FORM = (char)0xFC98;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_HAH_ISOLATED_FORM = (char)0xFC01;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_HEH_INITIAL_FORM = (char)0xFC9B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_HEH_MEDIAL_FORM = (char)0xFCE0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_JEEM_INITIAL_FORM = (char)0xFC97;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_JEEM_ISOLATED_FORM = (char)0xFC00;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_KHAH_INITIAL_FORM = (char)0xFC99;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_MEEM_FINAL_FORM = (char)0xFC66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_MEEM_INITIAL_FORM = (char)0xFC9A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_MEEM_ISOLATED_FORM = (char)0xFC02;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_MEEM_MEDIAL_FORM = (char)0xFCDF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_NOON_FINAL_FORM = (char)0xFC67;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_OE_FINAL_FORM = (char)0xFBF3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_OE_ISOLATED_FORM = (char)0xFBF2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_REH_FINAL_FORM = (char)0xFC64;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_U_FINAL_FORM = (char)0xFBF1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_U_ISOLATED_FORM = (char)0xFBF0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_WAW_FINAL_FORM = (char)0xFBEF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_WAW_ISOLATED_FORM = (char)0xFBEE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_YEH_FINAL_FORM = (char)0xFC69;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_YEH_ISOLATED_FORM = (char)0xFC04;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_YU_FINAL_FORM = (char)0xFBF5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_YU_ISOLATED_FORM = (char)0xFBF4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HAMZA_ABOVE_WITH_ZAIN_FINAL_FORM = (char)0xFC65;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HEH_INITIAL_FORM = (char)0xFCDE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_HEH_MEDIAL_FORM = (char)0xFCF1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_JEEM_INITIAL_FORM = (char)0xFCDA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_JEEM_ISOLATED_FORM = (char)0xFC55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_JEEM_WITH_YEH_FINAL_FORM = (char)0xFDAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_KHAH_INITIAL_FORM = (char)0xFCDC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_KHAH_ISOLATED_FORM = (char)0xFC57;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_MEEM_FINAL_FORM = (char)0xFC93;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_MEEM_INITIAL_FORM = (char)0xFCDD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_MEEM_ISOLATED_FORM = (char)0xFC58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_MEEM_MEDIAL_FORM = (char)0xFCF0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_MEEM_WITH_MEEM_FINAL_FORM = (char)0xFD9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_MEEM_WITH_MEEM_INITIAL_FORM = (char)0xFD9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_MEEM_WITH_YEH_FINAL_FORM = (char)0xFDB0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_NOON_FINAL_FORM = (char)0xFC94;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_REH_FINAL_FORM = (char)0xFC91;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_YEH_FINAL_FORM = (char)0xFC96;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_YEH_ISOLATED_FORM = (char)0xFC5A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_YEH_WITH_ZAIN_FINAL_FORM = (char)0xFC92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ZAH_WITH_MEEM_INITIAL_FORM = (char)0xFCB9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ZAH_WITH_MEEM_ISOLATED_FORM = (char)0xFC28;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARABIC_LIGATURE_ZAH_WITH_MEEM_MEDIAL_FORM = (char)0xFD3B;
			public const char ARABIC_MADDAH_ABOVE = (char)0x0653;
			public const char ARABIC_MARK_NOON_GHUNNA = (char)0x0658;
			public const char ARABIC_NUMBER_SIGN = (char)0x0600;
			public const char ARABIC_PERCENT_SIGN = (char)0x066A;
			public const char ARABIC_PLACE_OF_SAJDAH = (char)0x06E9;
			public const char ARABIC_POETIC_VERSE_SIGN = (char)0x060E;
			public const char ARABIC_QUESTION_MARK = (char)0x061F;
			public const char ARABIC_REVERSED_DAMMA = (char)0x065D;
			public const char ARABIC_ROUNDED_HIGH_STOP_WITH_FILLED_CENTRE = (char)0x06EC;
			public const char ARABIC_SEMICOLON = (char)0x061B;
			/// <summary> Formerly ARABIC SHADDAH. </summary>
			public const char ARABIC_SHADDA = (char)0x0651;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SPACING SHADDAH. </summary>
			public const char ARABIC_SHADDA_ISOLATED_FORM = (char)0xFE7C;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SHADDAH ON TATWEEL. </summary>
			public const char ARABIC_SHADDA_MEDIAL_FORM = (char)0xFE7D;
			public const char ARABIC_SIGN_ALAYHE_ASSALLAM = (char)0x0611;
			public const char ARABIC_SIGN_MISRA = (char)0x060F;
			public const char ARABIC_SIGN_RADI_ALLAHOU_ANHU = (char)0x0613;
			public const char ARABIC_SIGN_RAHMATULLAH_ALAYHE = (char)0x0612;
			public const char ARABIC_SIGN_SAFHA = (char)0x0603;
			public const char ARABIC_SIGN_SALLALLAHOU_ALAYHE_WASSALLAM = (char)0x0610;
			public const char ARABIC_SIGN_SANAH = (char)0x0601;
			public const char ARABIC_SIGN_SINDHI_AMPERSAND = (char)0x06FD;
			public const char ARABIC_SIGN_SINDHI_POSTPOSITION_MEN = (char)0x06FE;
			public const char ARABIC_SIGN_TAKHALLUS = (char)0x0614;
			public const char ARABIC_SMALL_HIGH_DOTLESS_HEAD_OF_KHAH = (char)0x06E1;
			public const char ARABIC_SMALL_HIGH_JEEM = (char)0x06DA;
			public const char ARABIC_SMALL_HIGH_LAM_ALEF = (char)0x06D9;
			public const char ARABIC_SMALL_HIGH_LIGATURE_QAF_WITH_LAM_WITH_ALEF_MAKSURA = (char)0x06D7;
			public const char ARABIC_SMALL_HIGH_LIGATURE_SAD_WITH_LAM_WITH_ALEF_MAKSURA = (char)0x06D6;
			public const char ARABIC_SMALL_HIGH_MADDA = (char)0x06E4;
			public const char ARABIC_SMALL_HIGH_MEEM_INITIAL_FORM = (char)0x06D8;
			public const char ARABIC_SMALL_HIGH_MEEM_ISOLATED_FORM = (char)0x06E2;
			public const char ARABIC_SMALL_HIGH_NOON = (char)0x06E8;
			public const char ARABIC_SMALL_HIGH_ROUNDED_ZERO = (char)0x06DF;
			public const char ARABIC_SMALL_HIGH_SEEN = (char)0x06DC;
			public const char ARABIC_SMALL_HIGH_TAH = (char)0x0615;
			public const char ARABIC_SMALL_HIGH_THREE_DOTS = (char)0x06DB;
			public const char ARABIC_SMALL_HIGH_UPRIGHT_RECTANGULAR_ZERO = (char)0x06E0;
			public const char ARABIC_SMALL_HIGH_YEH = (char)0x06E7;
			public const char ARABIC_SMALL_LOW_MEEM = (char)0x06ED;
			public const char ARABIC_SMALL_LOW_SEEN = (char)0x06E3;
			public const char ARABIC_SMALL_WAW = (char)0x06E5;
			public const char ARABIC_SMALL_YEH = (char)0x06E6;
			public const char ARABIC_START_OF_RUB_EL_HIZB = (char)0x06DE;
			public const char ARABIC_SUBSCRIPT_ALEF = (char)0x0656;
			public const char ARABIC_SUKUN = (char)0x0652;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SPACING SUKUN. </summary>
			public const char ARABIC_SUKUN_ISOLATED_FORM = (char)0xFE7E;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC SUKUN ON TATWEEL. </summary>
			public const char ARABIC_SUKUN_MEDIAL_FORM = (char)0xFE7F;
			public const char ARABIC_TAIL_FRAGMENT = (char)0xFE73;
			public const char ARABIC_TATWEEL = (char)0x0640;
			/// <summary> (This is a composition; consider avoiding.) Formerly ARABIC FATHATAN ON TATWEEL. </summary>
			public const char ARABIC_TATWEEL_WITH_FATHATAN_ABOVE = (char)0xFE71;
			public const char ARABIC_THOUSANDS_SEPARATOR = (char)0x066C;
			public const char ARABIC_TRIPLE_DOT_PUNCTUATION_MARK = (char)0x061E;
			public const char ARABIC_VOWEL_SIGN_DOT_BELOW = (char)0x065C;
			public const char ARABIC_VOWEL_SIGN_INVERTED_SMALL_V_ABOVE = (char)0x065B;
			public const char ARABIC_VOWEL_SIGN_SMALL_V_ABOVE = (char)0x065A;
			public const char ARABIC_ZWARAKAY = (char)0x0659;
			public const char ARC = (char)0x2312;
			public const char ARIES = (char)0x2648;
			public const char ARMENIAN_ABBREVIATION_MARK = (char)0x055F;
			/// <summary> Formerly ARMENIAN MODIFIER LETTER RIGHT HALF RING. </summary>
			public const char ARMENIAN_APOSTROPHE = (char)0x055A;
			public const char ARMENIAN_CAPITAL_LETTER_AYB = (char)0x0531;
			public const char ARMENIAN_CAPITAL_LETTER_BEN = (char)0x0532;
			public const char ARMENIAN_CAPITAL_LETTER_CA = (char)0x053E;
			public const char ARMENIAN_CAPITAL_LETTER_CHA = (char)0x0549;
			public const char ARMENIAN_CAPITAL_LETTER_CHEH = (char)0x0543;
			public const char ARMENIAN_CAPITAL_LETTER_CO = (char)0x0551;
			public const char ARMENIAN_CAPITAL_LETTER_DA = (char)0x0534;
			public const char ARMENIAN_CAPITAL_LETTER_ECH = (char)0x0535;
			public const char ARMENIAN_CAPITAL_LETTER_EH = (char)0x0537;
			public const char ARMENIAN_CAPITAL_LETTER_ET = (char)0x0538;
			public const char ARMENIAN_CAPITAL_LETTER_FEH = (char)0x0556;
			/// <summary> Formerly ARMENIAN CAPITAL LETTER LAD. </summary>
			public const char ARMENIAN_CAPITAL_LETTER_GHAD = (char)0x0542;
			public const char ARMENIAN_CAPITAL_LETTER_GIM = (char)0x0533;
			public const char ARMENIAN_CAPITAL_LETTER_HO = (char)0x0540;
			public const char ARMENIAN_CAPITAL_LETTER_INI = (char)0x053B;
			public const char ARMENIAN_CAPITAL_LETTER_JA = (char)0x0541;
			public const char ARMENIAN_CAPITAL_LETTER_JHEH = (char)0x054B;
			public const char ARMENIAN_CAPITAL_LETTER_KEH = (char)0x0554;
			public const char ARMENIAN_CAPITAL_LETTER_KEN = (char)0x053F;
			public const char ARMENIAN_CAPITAL_LETTER_LIWN = (char)0x053C;
			public const char ARMENIAN_CAPITAL_LETTER_MEN = (char)0x0544;
			public const char ARMENIAN_CAPITAL_LETTER_NOW = (char)0x0546;
			public const char ARMENIAN_CAPITAL_LETTER_OH = (char)0x0555;
			public const char ARMENIAN_CAPITAL_LETTER_PEH = (char)0x054A;
			public const char ARMENIAN_CAPITAL_LETTER_PIWR = (char)0x0553;
			public const char ARMENIAN_CAPITAL_LETTER_RA = (char)0x054C;
			public const char ARMENIAN_CAPITAL_LETTER_REH = (char)0x0550;
			public const char ARMENIAN_CAPITAL_LETTER_SEH = (char)0x054D;
			public const char ARMENIAN_CAPITAL_LETTER_SHA = (char)0x0547;
			public const char ARMENIAN_CAPITAL_LETTER_TIWN = (char)0x054F;
			public const char ARMENIAN_CAPITAL_LETTER_TO = (char)0x0539;
			public const char ARMENIAN_CAPITAL_LETTER_VEW = (char)0x054E;
			public const char ARMENIAN_CAPITAL_LETTER_VO = (char)0x0548;
			public const char ARMENIAN_CAPITAL_LETTER_XEH = (char)0x053D;
			public const char ARMENIAN_CAPITAL_LETTER_YI = (char)0x0545;
			public const char ARMENIAN_CAPITAL_LETTER_YIWN = (char)0x0552;
			public const char ARMENIAN_CAPITAL_LETTER_ZA = (char)0x0536;
			public const char ARMENIAN_CAPITAL_LETTER_ZHE = (char)0x053A;
			public const char ARMENIAN_COMMA = (char)0x055D;
			public const char ARMENIAN_EMPHASIS_MARK = (char)0x055B;
			public const char ARMENIAN_EXCLAMATION_MARK = (char)0x055C;
			/// <summary> Formerly ARMENIAN PERIOD. </summary>
			public const char ARMENIAN_FULL_STOP = (char)0x0589;
			public const char ARMENIAN_HYPHEN = (char)0x058A;
			public const char ARMENIAN_MODIFIER_LETTER_LEFT_HALF_RING = (char)0x0559;
			public const char ARMENIAN_QUESTION_MARK = (char)0x055E;
			public const char ARMENIAN_SMALL_LETTER_AYB = (char)0x0561;
			public const char ARMENIAN_SMALL_LETTER_BEN = (char)0x0562;
			public const char ARMENIAN_SMALL_LETTER_CA = (char)0x056E;
			public const char ARMENIAN_SMALL_LETTER_CHA = (char)0x0579;
			public const char ARMENIAN_SMALL_LETTER_CHEH = (char)0x0573;
			public const char ARMENIAN_SMALL_LETTER_CO = (char)0x0581;
			public const char ARMENIAN_SMALL_LETTER_DA = (char)0x0564;
			public const char ARMENIAN_SMALL_LETTER_ECH = (char)0x0565;
			public const char ARMENIAN_SMALL_LETTER_EH = (char)0x0567;
			public const char ARMENIAN_SMALL_LETTER_ET = (char)0x0568;
			public const char ARMENIAN_SMALL_LETTER_FEH = (char)0x0586;
			/// <summary> Formerly ARMENIAN SMALL LETTER LAD. </summary>
			public const char ARMENIAN_SMALL_LETTER_GHAD = (char)0x0572;
			public const char ARMENIAN_SMALL_LETTER_GIM = (char)0x0563;
			public const char ARMENIAN_SMALL_LETTER_HO = (char)0x0570;
			public const char ARMENIAN_SMALL_LETTER_INI = (char)0x056B;
			public const char ARMENIAN_SMALL_LETTER_JA = (char)0x0571;
			public const char ARMENIAN_SMALL_LETTER_JHEH = (char)0x057B;
			public const char ARMENIAN_SMALL_LETTER_KEH = (char)0x0584;
			public const char ARMENIAN_SMALL_LETTER_KEN = (char)0x056F;
			public const char ARMENIAN_SMALL_LETTER_LIWN = (char)0x056C;
			public const char ARMENIAN_SMALL_LETTER_MEN = (char)0x0574;
			public const char ARMENIAN_SMALL_LETTER_NOW = (char)0x0576;
			public const char ARMENIAN_SMALL_LETTER_OH = (char)0x0585;
			public const char ARMENIAN_SMALL_LETTER_PEH = (char)0x057A;
			public const char ARMENIAN_SMALL_LETTER_PIWR = (char)0x0583;
			public const char ARMENIAN_SMALL_LETTER_RA = (char)0x057C;
			public const char ARMENIAN_SMALL_LETTER_REH = (char)0x0580;
			public const char ARMENIAN_SMALL_LETTER_SEH = (char)0x057D;
			public const char ARMENIAN_SMALL_LETTER_SHA = (char)0x0577;
			public const char ARMENIAN_SMALL_LETTER_TIWN = (char)0x057F;
			public const char ARMENIAN_SMALL_LETTER_TO = (char)0x0569;
			public const char ARMENIAN_SMALL_LETTER_VEW = (char)0x057E;
			public const char ARMENIAN_SMALL_LETTER_VO = (char)0x0578;
			public const char ARMENIAN_SMALL_LETTER_XEH = (char)0x056D;
			public const char ARMENIAN_SMALL_LETTER_YI = (char)0x0575;
			public const char ARMENIAN_SMALL_LETTER_YIWN = (char)0x0582;
			public const char ARMENIAN_SMALL_LETTER_ZA = (char)0x0566;
			public const char ARMENIAN_SMALL_LETTER_ZHE = (char)0x056A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARMENIAN_SMALL_LIGATURE_ECH_YIWN = (char)0x0587;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARMENIAN_SMALL_LIGATURE_MEN_ECH = (char)0xFB14;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARMENIAN_SMALL_LIGATURE_MEN_INI = (char)0xFB15;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARMENIAN_SMALL_LIGATURE_MEN_NOW = (char)0xFB13;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARMENIAN_SMALL_LIGATURE_MEN_XEH = (char)0xFB17;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ARMENIAN_SMALL_LIGATURE_VEW_NOW = (char)0xFB16;
			public const char ARROW_POINTING_DOWNWARDS_THEN_CURVING_LEFTWARDS = (char)0x2936;
			public const char ARROW_POINTING_DOWNWARDS_THEN_CURVING_RIGHTWARDS = (char)0x2937;
			public const char ARROW_POINTING_RIGHTWARDS_THEN_CURVING_DOWNWARDS = (char)0x2935;
			public const char ARROW_POINTING_RIGHTWARDS_THEN_CURVING_UPWARDS = (char)0x2934;
			public const char ASCENDING_NODE = (char)0x260A;
			public const char ASSERTION = (char)0x22A6;
			public const char ASTERISK = (char)0x002A;
			public const char ASTERISK_OPERATOR = (char)0x2217;
			public const char ASTERISM = (char)0x2042;
			public const char ASYMPTOTICALLY_EQUAL_TO = (char)0x2243;
			public const char ATOM_SYMBOL = (char)0x269B;
			public const char AUSTRAL_SIGN = (char)0x20B3;
		}
		public class B {
			/// <summary> Formerly BACK-TILTED SHADOWED WHITE RIGHT ARROW. </summary>
			public const char BACK_TILTED_SHADOWED_WHITE_RIGHTWARDS_ARROW = (char)0x27AB;
			public const char BALLOON_SPOKED_ASTERISK = (char)0x2749;
			public const char BALLOT_BOX = (char)0x2610;
			public const char BALLOT_BOX_WITH_CHECK = (char)0x2611;
			public const char BALLOT_BOX_WITH_X = (char)0x2612;
			public const char BALLOT_X = (char)0x2717;
			/// <summary> Formerly BARRED EIGHTH NOTES. </summary>
			public const char BEAMED_EIGHTH_NOTES = (char)0x266B;
			/// <summary> Formerly BARRED SIXTEENTH NOTES. </summary>
			public const char BEAMED_SIXTEENTH_NOTES = (char)0x266C;
			public const char BECAUSE = (char)0x2235;
			public const char BELL_SYMBOL = (char)0x237E;
			public const char BENGALI_AU_LENGTH_MARK = (char)0x09D7;
			public const char BENGALI_CURRENCY_DENOMINATOR_SIXTEEN = (char)0x09F9;
			public const char BENGALI_CURRENCY_NUMERATOR_FOUR = (char)0x09F7;
			public const char BENGALI_CURRENCY_NUMERATOR_ONE = (char)0x09F4;
			public const char BENGALI_CURRENCY_NUMERATOR_ONE_LESS_THAN_THE_DENOMINATOR = (char)0x09F8;
			public const char BENGALI_CURRENCY_NUMERATOR_THREE = (char)0x09F6;
			public const char BENGALI_CURRENCY_NUMERATOR_TWO = (char)0x09F5;
			public const char BENGALI_DIGIT_EIGHT = (char)0x09EE;
			public const char BENGALI_DIGIT_FIVE = (char)0x09EB;
			public const char BENGALI_DIGIT_FOUR = (char)0x09EA;
			public const char BENGALI_DIGIT_NINE = (char)0x09EF;
			public const char BENGALI_DIGIT_ONE = (char)0x09E7;
			public const char BENGALI_DIGIT_SEVEN = (char)0x09ED;
			public const char BENGALI_DIGIT_SIX = (char)0x09EC;
			public const char BENGALI_DIGIT_THREE = (char)0x09E9;
			public const char BENGALI_DIGIT_TWO = (char)0x09E8;
			public const char BENGALI_DIGIT_ZERO = (char)0x09E6;
			public const char BENGALI_ISSHAR = (char)0x09FA;
			public const char BENGALI_LETTER_A = (char)0x0985;
			public const char BENGALI_LETTER_AA = (char)0x0986;
			public const char BENGALI_LETTER_AI = (char)0x0990;
			public const char BENGALI_LETTER_AU = (char)0x0994;
			public const char BENGALI_LETTER_BA = (char)0x09AC;
			public const char BENGALI_LETTER_BHA = (char)0x09AD;
			public const char BENGALI_LETTER_CA = (char)0x099A;
			public const char BENGALI_LETTER_CHA = (char)0x099B;
			public const char BENGALI_LETTER_DA = (char)0x09A6;
			public const char BENGALI_LETTER_DDA = (char)0x09A1;
			public const char BENGALI_LETTER_DDHA = (char)0x09A2;
			public const char BENGALI_LETTER_DHA = (char)0x09A7;
			public const char BENGALI_LETTER_E = (char)0x098F;
			public const char BENGALI_LETTER_GA = (char)0x0997;
			public const char BENGALI_LETTER_GHA = (char)0x0998;
			public const char BENGALI_LETTER_HA = (char)0x09B9;
			public const char BENGALI_LETTER_I = (char)0x0987;
			public const char BENGALI_LETTER_II = (char)0x0988;
			public const char BENGALI_LETTER_JA = (char)0x099C;
			public const char BENGALI_LETTER_JHA = (char)0x099D;
			public const char BENGALI_LETTER_KA = (char)0x0995;
			public const char BENGALI_LETTER_KHA = (char)0x0996;
			public const char BENGALI_LETTER_KHANDA_TA = (char)0x09CE;
			public const char BENGALI_LETTER_LA = (char)0x09B2;
			public const char BENGALI_LETTER_MA = (char)0x09AE;
			public const char BENGALI_LETTER_NA = (char)0x09A8;
			public const char BENGALI_LETTER_NGA = (char)0x0999;
			public const char BENGALI_LETTER_NNA = (char)0x09A3;
			public const char BENGALI_LETTER_NYA = (char)0x099E;
			public const char BENGALI_LETTER_O = (char)0x0993;
			public const char BENGALI_LETTER_PA = (char)0x09AA;
			public const char BENGALI_LETTER_PHA = (char)0x09AB;
			public const char BENGALI_LETTER_RA = (char)0x09B0;
			/// <summary> Formerly BENGALI LETTER VA WITH LOWER DIAGONAL. </summary>
			public const char BENGALI_LETTER_RA_WITH_LOWER_DIAGONAL = (char)0x09F1;
			public const char BENGALI_LETTER_RA_WITH_MIDDLE_DIAGONAL = (char)0x09F0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char BENGALI_LETTER_RHA = (char)0x09DD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char BENGALI_LETTER_RRA = (char)0x09DC;
			public const char BENGALI_LETTER_SA = (char)0x09B8;
			public const char BENGALI_LETTER_SHA = (char)0x09B6;
			public const char BENGALI_LETTER_SSA = (char)0x09B7;
			public const char BENGALI_LETTER_TA = (char)0x09A4;
			public const char BENGALI_LETTER_THA = (char)0x09A5;
			public const char BENGALI_LETTER_TTA = (char)0x099F;
			public const char BENGALI_LETTER_TTHA = (char)0x09A0;
			public const char BENGALI_LETTER_U = (char)0x0989;
			public const char BENGALI_LETTER_UU = (char)0x098A;
			public const char BENGALI_LETTER_VOCALIC_L = (char)0x098C;
			public const char BENGALI_LETTER_VOCALIC_LL = (char)0x09E1;
			public const char BENGALI_LETTER_VOCALIC_R = (char)0x098B;
			public const char BENGALI_LETTER_VOCALIC_RR = (char)0x09E0;
			public const char BENGALI_LETTER_YA = (char)0x09AF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char BENGALI_LETTER_YYA = (char)0x09DF;
			public const char BENGALI_RUPEE_MARK = (char)0x09F2;
			public const char BENGALI_RUPEE_SIGN = (char)0x09F3;
			public const char BENGALI_SIGN_ANUSVARA = (char)0x0982;
			public const char BENGALI_SIGN_AVAGRAHA = (char)0x09BD;
			public const char BENGALI_SIGN_CANDRABINDU = (char)0x0981;
			public const char BENGALI_SIGN_NUKTA = (char)0x09BC;
			public const char BENGALI_SIGN_VIRAMA = (char)0x09CD;
			public const char BENGALI_SIGN_VISARGA = (char)0x0983;
			public const char BENGALI_VOWEL_SIGN_AA = (char)0x09BE;
			public const char BENGALI_VOWEL_SIGN_AI = (char)0x09C8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char BENGALI_VOWEL_SIGN_AU = (char)0x09CC;
			public const char BENGALI_VOWEL_SIGN_E = (char)0x09C7;
			public const char BENGALI_VOWEL_SIGN_I = (char)0x09BF;
			public const char BENGALI_VOWEL_SIGN_II = (char)0x09C0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char BENGALI_VOWEL_SIGN_O = (char)0x09CB;
			public const char BENGALI_VOWEL_SIGN_U = (char)0x09C1;
			public const char BENGALI_VOWEL_SIGN_UU = (char)0x09C2;
			public const char BENGALI_VOWEL_SIGN_VOCALIC_L = (char)0x09E2;
			public const char BENGALI_VOWEL_SIGN_VOCALIC_LL = (char)0x09E3;
			public const char BENGALI_VOWEL_SIGN_VOCALIC_R = (char)0x09C3;
			public const char BENGALI_VOWEL_SIGN_VOCALIC_RR = (char)0x09C4;
			public const char BENZENE_RING = (char)0x232C;
			public const char BETWEEN = (char)0x226C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SECOND TRANSFINITE CARDINAL. </summary>
			public const char BET_SYMBOL = (char)0x2136;
			public const char BIG_REVERSE_SOLIDUS = (char)0x29F9;
			public const char BIG_SOLIDUS = (char)0x29F8;
			public const char BIOHAZARD_SIGN = (char)0x2623;
			public const char BLACK_BOWTIE = (char)0x29D3;
			/// <summary> Formerly BLACK CENTER WHITE STAR. </summary>
			public const char BLACK_CENTRE_WHITE_STAR = (char)0x272C;
			public const char BLACK_CHESS_BISHOP = (char)0x265D;
			public const char BLACK_CHESS_KING = (char)0x265A;
			public const char BLACK_CHESS_KNIGHT = (char)0x265E;
			public const char BLACK_CHESS_PAWN = (char)0x265F;
			public const char BLACK_CHESS_QUEEN = (char)0x265B;
			public const char BLACK_CHESS_ROOK = (char)0x265C;
			public const char BLACK_CIRCLE = (char)0x25CF;
			public const char BLACK_CIRCLE_WITH_DOWN_ARROW = (char)0x29ED;
			public const char BLACK_CIRCLE_WITH_TWO_WHITE_DOTS = (char)0x2689;
			public const char BLACK_CIRCLE_WITH_WHITE_DOT_RIGHT = (char)0x2688;
			public const char BLACK_CLUB_SUIT = (char)0x2663;
			public const char BLACK_DIAMOND = (char)0x25C6;
			public const char BLACK_DIAMOND_MINUS_WHITE_X = (char)0x2756;
			public const char BLACK_DIAMOND_SUIT = (char)0x2666;
			public const char BLACK_DIAMOND_WITH_DOWN_ARROW = (char)0x29EA;
			/// <summary> Formerly BLACK DOWN POINTING SMALL TRIANGLE. </summary>
			public const char BLACK_DOWN_POINTING_SMALL_TRIANGLE = (char)0x25BE;
			/// <summary> Formerly BLACK DOWN POINTING TRIANGLE. </summary>
			public const char BLACK_DOWN_POINTING_TRIANGLE = (char)0x25BC;
			/// <summary> Formerly BLACK-FEATHERED UPPER RIGHT ARROW. </summary>
			public const char BLACK_FEATHERED_NORTH_EAST_ARROW = (char)0x27B6;
			/// <summary> Formerly BLACK-FEATHERED RIGHT ARROW. </summary>
			public const char BLACK_FEATHERED_RIGHTWARDS_ARROW = (char)0x27B5;
			/// <summary> Formerly BLACK-FEATHERED LOWER RIGHT ARROW. </summary>
			public const char BLACK_FEATHERED_SOUTH_EAST_ARROW = (char)0x27B4;
			public const char BLACK_FLAG = (char)0x2691;
			public const char BLACK_FLORETTE = (char)0x273F;
			public const char BLACK_FOUR_POINTED_STAR = (char)0x2726;
			public const char BLACK_HEART_SUIT = (char)0x2665;
			public const char BLACK_HOURGLASS = (char)0x29D7;
			public const char BLACK_LEFTWARDS_BULLET = (char)0x204C;
			public const char BLACK_LEFT_POINTING_INDEX = (char)0x261A;
			/// <summary> Formerly BLACK LEFT POINTING POINTER. </summary>
			public const char BLACK_LEFT_POINTING_POINTER = (char)0x25C4;
			/// <summary> Formerly BLACK LEFT POINTING SMALL TRIANGLE. </summary>
			public const char BLACK_LEFT_POINTING_SMALL_TRIANGLE = (char)0x25C2;
			/// <summary> Formerly BLACK LEFT POINTING TRIANGLE. </summary>
			public const char BLACK_LEFT_POINTING_TRIANGLE = (char)0x25C0;
			/// <summary> (This is a composition; consider avoiding.) Formerly BLACK-LETTER C. </summary>
			public const char BLACK_LETTER_CAPITAL_C = (char)0x212D;
			/// <summary> (This is a composition; consider avoiding.) Formerly BLACK-LETTER H. </summary>
			public const char BLACK_LETTER_CAPITAL_H = (char)0x210C;
			/// <summary> (This is a composition; consider avoiding.) Formerly BLACK-LETTER I. </summary>
			public const char BLACK_LETTER_CAPITAL_I = (char)0x2111;
			/// <summary> (This is a composition; consider avoiding.) Formerly BLACK-LETTER R. </summary>
			public const char BLACK_LETTER_CAPITAL_R = (char)0x211C;
			/// <summary> (This is a composition; consider avoiding.) Formerly BLACK-LETTER Z. </summary>
			public const char BLACK_LETTER_CAPITAL_Z = (char)0x2128;
			public const char BLACK_LOWER_LEFT_TRIANGLE = (char)0x25E3;
			public const char BLACK_LOWER_RIGHT_TRIANGLE = (char)0x25E2;
			public const char BLACK_LOZENGE = (char)0x29EB;
			public const char BLACK_MEDIUM_SMALL_SQUARE = (char)0x25FE;
			public const char BLACK_MEDIUM_SQUARE = (char)0x25FC;
			public const char BLACK_NIB = (char)0x2712;
			public const char BLACK_PARALLELOGRAM = (char)0x25B0;
			public const char BLACK_RECTANGLE = (char)0x25AC;
			/// <summary> Formerly BLACK RIGHT ARROW. </summary>
			public const char BLACK_RIGHTWARDS_ARROW = (char)0x27A1;
			/// <summary> Formerly BLACK RIGHT ARROWHEAD. </summary>
			public const char BLACK_RIGHTWARDS_ARROWHEAD = (char)0x27A4;
			public const char BLACK_RIGHTWARDS_BULLET = (char)0x204D;
			public const char BLACK_RIGHT_POINTING_INDEX = (char)0x261B;
			/// <summary> Formerly BLACK RIGHT POINTING POINTER. </summary>
			public const char BLACK_RIGHT_POINTING_POINTER = (char)0x25BA;
			/// <summary> Formerly BLACK RIGHT POINTING SMALL TRIANGLE. </summary>
			public const char BLACK_RIGHT_POINTING_SMALL_TRIANGLE = (char)0x25B8;
			/// <summary> Formerly BLACK RIGHT POINTING TRIANGLE. </summary>
			public const char BLACK_RIGHT_POINTING_TRIANGLE = (char)0x25B6;
			public const char BLACK_SCISSORS = (char)0x2702;
			public const char BLACK_SHOGI_PIECE = (char)0x2617;
			public const char BLACK_SMALL_SQUARE = (char)0x25AA;
			public const char BLACK_SMILING_FACE = (char)0x263B;
			public const char BLACK_SPADE_SUIT = (char)0x2660;
			public const char BLACK_SQUARE = (char)0x25A0;
			public const char BLACK_STAR = (char)0x2605;
			public const char BLACK_SUN_WITH_RAYS = (char)0x2600;
			public const char BLACK_TELEPHONE = (char)0x260E;
			public const char BLACK_UNIVERSAL_RECYCLING_SYMBOL = (char)0x267B;
			public const char BLACK_UPPER_LEFT_TRIANGLE = (char)0x25E4;
			public const char BLACK_UPPER_RIGHT_TRIANGLE = (char)0x25E5;
			/// <summary> Formerly BLACK UP POINTING SMALL TRIANGLE. </summary>
			public const char BLACK_UP_POINTING_SMALL_TRIANGLE = (char)0x25B4;
			/// <summary> Formerly BLACK UP POINTING TRIANGLE. </summary>
			public const char BLACK_UP_POINTING_TRIANGLE = (char)0x25B2;
			public const char BLACK_VERTICAL_RECTANGLE = (char)0x25AE;
			/// <summary> Formerly BLANK. </summary>
			public const char BLANK_SYMBOL = (char)0x2422;
			public const char BOPOMOFO_FINAL_LETTER_H = (char)0x31B7;
			public const char BOPOMOFO_FINAL_LETTER_K = (char)0x31B6;
			public const char BOPOMOFO_FINAL_LETTER_P = (char)0x31B4;
			public const char BOPOMOFO_FINAL_LETTER_T = (char)0x31B5;
			public const char BOPOMOFO_LETTER_A = (char)0x311A;
			public const char BOPOMOFO_LETTER_AI = (char)0x311E;
			public const char BOPOMOFO_LETTER_AINN = (char)0x31AE;
			public const char BOPOMOFO_LETTER_AM = (char)0x31B0;
			public const char BOPOMOFO_LETTER_AN = (char)0x3122;
			public const char BOPOMOFO_LETTER_ANG = (char)0x3124;
			public const char BOPOMOFO_LETTER_ANN = (char)0x31A9;
			public const char BOPOMOFO_LETTER_AU = (char)0x3120;
			public const char BOPOMOFO_LETTER_AUNN = (char)0x31AF;
			public const char BOPOMOFO_LETTER_B = (char)0x3105;
			public const char BOPOMOFO_LETTER_BU = (char)0x31A0;
			public const char BOPOMOFO_LETTER_C = (char)0x3118;
			public const char BOPOMOFO_LETTER_CH = (char)0x3114;
			public const char BOPOMOFO_LETTER_D = (char)0x3109;
			public const char BOPOMOFO_LETTER_E = (char)0x311C;
			public const char BOPOMOFO_LETTER_EE = (char)0x31A4;
			public const char BOPOMOFO_LETTER_EH = (char)0x311D;
			public const char BOPOMOFO_LETTER_EI = (char)0x311F;
			public const char BOPOMOFO_LETTER_EN = (char)0x3123;
			public const char BOPOMOFO_LETTER_ENG = (char)0x3125;
			public const char BOPOMOFO_LETTER_ENN = (char)0x31A5;
			public const char BOPOMOFO_LETTER_ER = (char)0x3126;
			public const char BOPOMOFO_LETTER_F = (char)0x3108;
			public const char BOPOMOFO_LETTER_G = (char)0x310D;
			public const char BOPOMOFO_LETTER_GN = (char)0x312C;
			public const char BOPOMOFO_LETTER_GU = (char)0x31A3;
			public const char BOPOMOFO_LETTER_H = (char)0x310F;
			public const char BOPOMOFO_LETTER_I = (char)0x3127;
			public const char BOPOMOFO_LETTER_IM = (char)0x31AC;
			public const char BOPOMOFO_LETTER_INN = (char)0x31AA;
			public const char BOPOMOFO_LETTER_INNN = (char)0x31B3;
			public const char BOPOMOFO_LETTER_IR = (char)0x31A8;
			public const char BOPOMOFO_LETTER_IU = (char)0x3129;
			public const char BOPOMOFO_LETTER_J = (char)0x3110;
			public const char BOPOMOFO_LETTER_JI = (char)0x31A2;
			public const char BOPOMOFO_LETTER_K = (char)0x310E;
			public const char BOPOMOFO_LETTER_L = (char)0x310C;
			public const char BOPOMOFO_LETTER_M = (char)0x3107;
			public const char BOPOMOFO_LETTER_N = (char)0x310B;
			public const char BOPOMOFO_LETTER_NG = (char)0x312B;
			public const char BOPOMOFO_LETTER_NGG = (char)0x31AD;
			public const char BOPOMOFO_LETTER_O = (char)0x311B;
			public const char BOPOMOFO_LETTER_OM = (char)0x31B1;
			public const char BOPOMOFO_LETTER_ONG = (char)0x31B2;
			public const char BOPOMOFO_LETTER_ONN = (char)0x31A7;
			public const char BOPOMOFO_LETTER_OO = (char)0x31A6;
			public const char BOPOMOFO_LETTER_OU = (char)0x3121;
			public const char BOPOMOFO_LETTER_P = (char)0x3106;
			public const char BOPOMOFO_LETTER_Q = (char)0x3111;
			public const char BOPOMOFO_LETTER_R = (char)0x3116;
			public const char BOPOMOFO_LETTER_S = (char)0x3119;
			public const char BOPOMOFO_LETTER_SH = (char)0x3115;
			public const char BOPOMOFO_LETTER_T = (char)0x310A;
			public const char BOPOMOFO_LETTER_U = (char)0x3128;
			public const char BOPOMOFO_LETTER_UNN = (char)0x31AB;
			public const char BOPOMOFO_LETTER_V = (char)0x312A;
			public const char BOPOMOFO_LETTER_X = (char)0x3112;
			public const char BOPOMOFO_LETTER_Z = (char)0x3117;
			public const char BOPOMOFO_LETTER_ZH = (char)0x3113;
			public const char BOPOMOFO_LETTER_ZI = (char)0x31A1;
			public const char BOTTOM_ARC_ANTICLOCKWISE_ARROW = (char)0x293B;
			public const char BOTTOM_HALF_INTEGRAL = (char)0x2321;
			public const char BOTTOM_LEFT_CORNER = (char)0x231E;
			public const char BOTTOM_LEFT_CROP = (char)0x230D;
			public const char BOTTOM_RIGHT_CORNER = (char)0x231F;
			public const char BOTTOM_RIGHT_CROP = (char)0x230C;
			public const char BOTTOM_SQUARE_BRACKET = (char)0x23B5;
			public const char BOTTOM_SQUARE_BRACKET_OVER_TOP_SQUARE_BRACKET = (char)0x23B6;
			public const char BOWTIE = (char)0x22C8;
			public const char BOWTIE_WITH_LEFT_HALF_BLACK = (char)0x29D1;
			public const char BOWTIE_WITH_RIGHT_HALF_BLACK = (char)0x29D2;
			/// <summary> Formerly FORMS DOUBLE DOWN AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_DOUBLE_DOWN_AND_HORIZONTAL = (char)0x2566;
			/// <summary> Formerly FORMS DOUBLE DOWN AND LEFT. </summary>
			public const char BOX_DRAWINGS_DOUBLE_DOWN_AND_LEFT = (char)0x2557;
			/// <summary> Formerly FORMS DOUBLE DOWN AND RIGHT. </summary>
			public const char BOX_DRAWINGS_DOUBLE_DOWN_AND_RIGHT = (char)0x2554;
			/// <summary> Formerly FORMS DOUBLE HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_DOUBLE_HORIZONTAL = (char)0x2550;
			/// <summary> Formerly FORMS DOUBLE UP AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_DOUBLE_UP_AND_HORIZONTAL = (char)0x2569;
			/// <summary> Formerly FORMS DOUBLE UP AND LEFT. </summary>
			public const char BOX_DRAWINGS_DOUBLE_UP_AND_LEFT = (char)0x255D;
			/// <summary> Formerly FORMS DOUBLE UP AND RIGHT. </summary>
			public const char BOX_DRAWINGS_DOUBLE_UP_AND_RIGHT = (char)0x255A;
			/// <summary> Formerly FORMS DOUBLE VERTICAL. </summary>
			public const char BOX_DRAWINGS_DOUBLE_VERTICAL = (char)0x2551;
			/// <summary> Formerly FORMS DOUBLE VERTICAL AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_DOUBLE_VERTICAL_AND_HORIZONTAL = (char)0x256C;
			/// <summary> Formerly FORMS DOUBLE VERTICAL AND LEFT. </summary>
			public const char BOX_DRAWINGS_DOUBLE_VERTICAL_AND_LEFT = (char)0x2563;
			/// <summary> Formerly FORMS DOUBLE VERTICAL AND RIGHT. </summary>
			public const char BOX_DRAWINGS_DOUBLE_VERTICAL_AND_RIGHT = (char)0x2560;
			/// <summary> Formerly FORMS DOWN DOUBLE AND HORIZONTAL SINGLE. </summary>
			public const char BOX_DRAWINGS_DOWN_DOUBLE_AND_HORIZONTAL_SINGLE = (char)0x2565;
			/// <summary> Formerly FORMS DOWN DOUBLE AND LEFT SINGLE. </summary>
			public const char BOX_DRAWINGS_DOWN_DOUBLE_AND_LEFT_SINGLE = (char)0x2556;
			/// <summary> Formerly FORMS DOWN DOUBLE AND RIGHT SINGLE. </summary>
			public const char BOX_DRAWINGS_DOWN_DOUBLE_AND_RIGHT_SINGLE = (char)0x2553;
			/// <summary> Formerly FORMS DOWN HEAVY AND HORIZONTAL LIGHT. </summary>
			public const char BOX_DRAWINGS_DOWN_HEAVY_AND_HORIZONTAL_LIGHT = (char)0x2530;
			/// <summary> Formerly FORMS DOWN HEAVY AND LEFT LIGHT. </summary>
			public const char BOX_DRAWINGS_DOWN_HEAVY_AND_LEFT_LIGHT = (char)0x2512;
			/// <summary> Formerly FORMS DOWN HEAVY AND LEFT UP LIGHT. </summary>
			public const char BOX_DRAWINGS_DOWN_HEAVY_AND_LEFT_UP_LIGHT = (char)0x2527;
			/// <summary> Formerly FORMS DOWN HEAVY AND RIGHT LIGHT. </summary>
			public const char BOX_DRAWINGS_DOWN_HEAVY_AND_RIGHT_LIGHT = (char)0x250E;
			/// <summary> Formerly FORMS DOWN HEAVY AND RIGHT UP LIGHT. </summary>
			public const char BOX_DRAWINGS_DOWN_HEAVY_AND_RIGHT_UP_LIGHT = (char)0x251F;
			/// <summary> Formerly FORMS DOWN HEAVY AND UP HORIZONTAL LIGHT. </summary>
			public const char BOX_DRAWINGS_DOWN_HEAVY_AND_UP_HORIZONTAL_LIGHT = (char)0x2541;
			/// <summary> Formerly FORMS DOWN LIGHT AND HORIZONTAL HEAVY. </summary>
			public const char BOX_DRAWINGS_DOWN_LIGHT_AND_HORIZONTAL_HEAVY = (char)0x252F;
			/// <summary> Formerly FORMS DOWN LIGHT AND LEFT HEAVY. </summary>
			public const char BOX_DRAWINGS_DOWN_LIGHT_AND_LEFT_HEAVY = (char)0x2511;
			/// <summary> Formerly FORMS DOWN LIGHT AND LEFT UP HEAVY. </summary>
			public const char BOX_DRAWINGS_DOWN_LIGHT_AND_LEFT_UP_HEAVY = (char)0x2529;
			/// <summary> Formerly FORMS DOWN LIGHT AND RIGHT HEAVY. </summary>
			public const char BOX_DRAWINGS_DOWN_LIGHT_AND_RIGHT_HEAVY = (char)0x250D;
			/// <summary> Formerly FORMS DOWN LIGHT AND RIGHT UP HEAVY. </summary>
			public const char BOX_DRAWINGS_DOWN_LIGHT_AND_RIGHT_UP_HEAVY = (char)0x2521;
			/// <summary> Formerly FORMS DOWN LIGHT AND UP HORIZONTAL HEAVY. </summary>
			public const char BOX_DRAWINGS_DOWN_LIGHT_AND_UP_HORIZONTAL_HEAVY = (char)0x2547;
			/// <summary> Formerly FORMS DOWN SINGLE AND HORIZONTAL DOUBLE. </summary>
			public const char BOX_DRAWINGS_DOWN_SINGLE_AND_HORIZONTAL_DOUBLE = (char)0x2564;
			/// <summary> Formerly FORMS DOWN SINGLE AND LEFT DOUBLE. </summary>
			public const char BOX_DRAWINGS_DOWN_SINGLE_AND_LEFT_DOUBLE = (char)0x2555;
			/// <summary> Formerly FORMS DOWN SINGLE AND RIGHT DOUBLE. </summary>
			public const char BOX_DRAWINGS_DOWN_SINGLE_AND_RIGHT_DOUBLE = (char)0x2552;
			/// <summary> Formerly FORMS HEAVY DOUBLE DASH HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_DOUBLE_DASH_HORIZONTAL = (char)0x254D;
			/// <summary> Formerly FORMS HEAVY DOUBLE DASH VERTICAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_DOUBLE_DASH_VERTICAL = (char)0x254F;
			/// <summary> Formerly FORMS HEAVY DOWN. </summary>
			public const char BOX_DRAWINGS_HEAVY_DOWN = (char)0x257B;
			/// <summary> Formerly FORMS HEAVY DOWN AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_DOWN_AND_HORIZONTAL = (char)0x2533;
			/// <summary> Formerly FORMS HEAVY DOWN AND LEFT. </summary>
			public const char BOX_DRAWINGS_HEAVY_DOWN_AND_LEFT = (char)0x2513;
			/// <summary> Formerly FORMS HEAVY DOWN AND RIGHT. </summary>
			public const char BOX_DRAWINGS_HEAVY_DOWN_AND_RIGHT = (char)0x250F;
			/// <summary> Formerly FORMS HEAVY HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_HORIZONTAL = (char)0x2501;
			/// <summary> Formerly FORMS HEAVY LEFT. </summary>
			public const char BOX_DRAWINGS_HEAVY_LEFT = (char)0x2578;
			/// <summary> Formerly FORMS HEAVY LEFT AND LIGHT RIGHT. </summary>
			public const char BOX_DRAWINGS_HEAVY_LEFT_AND_LIGHT_RIGHT = (char)0x257E;
			/// <summary> Formerly FORMS HEAVY QUADRUPLE DASH HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_QUADRUPLE_DASH_HORIZONTAL = (char)0x2509;
			/// <summary> Formerly FORMS HEAVY QUADRUPLE DASH VERTICAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_QUADRUPLE_DASH_VERTICAL = (char)0x250B;
			/// <summary> Formerly FORMS HEAVY RIGHT. </summary>
			public const char BOX_DRAWINGS_HEAVY_RIGHT = (char)0x257A;
			/// <summary> Formerly FORMS HEAVY TRIPLE DASH HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_TRIPLE_DASH_HORIZONTAL = (char)0x2505;
			/// <summary> Formerly FORMS HEAVY TRIPLE DASH VERTICAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_TRIPLE_DASH_VERTICAL = (char)0x2507;
			/// <summary> Formerly FORMS HEAVY UP. </summary>
			public const char BOX_DRAWINGS_HEAVY_UP = (char)0x2579;
			/// <summary> Formerly FORMS HEAVY UP AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_UP_AND_HORIZONTAL = (char)0x253B;
			/// <summary> Formerly FORMS HEAVY UP AND LEFT. </summary>
			public const char BOX_DRAWINGS_HEAVY_UP_AND_LEFT = (char)0x251B;
			/// <summary> Formerly FORMS HEAVY UP AND LIGHT DOWN. </summary>
			public const char BOX_DRAWINGS_HEAVY_UP_AND_LIGHT_DOWN = (char)0x257F;
			/// <summary> Formerly FORMS HEAVY UP AND RIGHT. </summary>
			public const char BOX_DRAWINGS_HEAVY_UP_AND_RIGHT = (char)0x2517;
			/// <summary> Formerly FORMS HEAVY VERTICAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_VERTICAL = (char)0x2503;
			/// <summary> Formerly FORMS HEAVY VERTICAL AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_HEAVY_VERTICAL_AND_HORIZONTAL = (char)0x254B;
			/// <summary> Formerly FORMS HEAVY VERTICAL AND LEFT. </summary>
			public const char BOX_DRAWINGS_HEAVY_VERTICAL_AND_LEFT = (char)0x252B;
			/// <summary> Formerly FORMS HEAVY VERTICAL AND RIGHT. </summary>
			public const char BOX_DRAWINGS_HEAVY_VERTICAL_AND_RIGHT = (char)0x2523;
			/// <summary> Formerly FORMS LEFT DOWN HEAVY AND RIGHT UP LIGHT. </summary>
			public const char BOX_DRAWINGS_LEFT_DOWN_HEAVY_AND_RIGHT_UP_LIGHT = (char)0x2545;
			/// <summary> Formerly FORMS LEFT HEAVY AND RIGHT DOWN LIGHT. </summary>
			public const char BOX_DRAWINGS_LEFT_HEAVY_AND_RIGHT_DOWN_LIGHT = (char)0x252D;
			/// <summary> Formerly FORMS LEFT HEAVY AND RIGHT UP LIGHT. </summary>
			public const char BOX_DRAWINGS_LEFT_HEAVY_AND_RIGHT_UP_LIGHT = (char)0x2535;
			/// <summary> Formerly FORMS LEFT HEAVY AND RIGHT VERTICAL LIGHT. </summary>
			public const char BOX_DRAWINGS_LEFT_HEAVY_AND_RIGHT_VERTICAL_LIGHT = (char)0x253D;
			/// <summary> Formerly FORMS LEFT LIGHT AND RIGHT DOWN HEAVY. </summary>
			public const char BOX_DRAWINGS_LEFT_LIGHT_AND_RIGHT_DOWN_HEAVY = (char)0x2532;
			/// <summary> Formerly FORMS LEFT LIGHT AND RIGHT UP HEAVY. </summary>
			public const char BOX_DRAWINGS_LEFT_LIGHT_AND_RIGHT_UP_HEAVY = (char)0x253A;
			/// <summary> Formerly FORMS LEFT LIGHT AND RIGHT VERTICAL HEAVY. </summary>
			public const char BOX_DRAWINGS_LEFT_LIGHT_AND_RIGHT_VERTICAL_HEAVY = (char)0x254A;
			/// <summary> Formerly FORMS LEFT UP HEAVY AND RIGHT DOWN LIGHT. </summary>
			public const char BOX_DRAWINGS_LEFT_UP_HEAVY_AND_RIGHT_DOWN_LIGHT = (char)0x2543;
			/// <summary> Formerly FORMS LIGHT ARC DOWN AND LEFT. </summary>
			public const char BOX_DRAWINGS_LIGHT_ARC_DOWN_AND_LEFT = (char)0x256E;
			/// <summary> Formerly FORMS LIGHT ARC DOWN AND RIGHT. </summary>
			public const char BOX_DRAWINGS_LIGHT_ARC_DOWN_AND_RIGHT = (char)0x256D;
			/// <summary> Formerly FORMS LIGHT ARC UP AND LEFT. </summary>
			public const char BOX_DRAWINGS_LIGHT_ARC_UP_AND_LEFT = (char)0x256F;
			/// <summary> Formerly FORMS LIGHT ARC UP AND RIGHT. </summary>
			public const char BOX_DRAWINGS_LIGHT_ARC_UP_AND_RIGHT = (char)0x2570;
			/// <summary> Formerly FORMS LIGHT DIAGONAL CROSS. </summary>
			public const char BOX_DRAWINGS_LIGHT_DIAGONAL_CROSS = (char)0x2573;
			/// <summary> Formerly FORMS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT. </summary>
			public const char BOX_DRAWINGS_LIGHT_DIAGONAL_UPPER_LEFT_TO_LOWER_RIGHT = (char)0x2572;
			/// <summary> Formerly FORMS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT. </summary>
			public const char BOX_DRAWINGS_LIGHT_DIAGONAL_UPPER_RIGHT_TO_LOWER_LEFT = (char)0x2571;
			/// <summary> Formerly FORMS LIGHT DOUBLE DASH HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_DOUBLE_DASH_HORIZONTAL = (char)0x254C;
			/// <summary> Formerly FORMS LIGHT DOUBLE DASH VERTICAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_DOUBLE_DASH_VERTICAL = (char)0x254E;
			/// <summary> Formerly FORMS LIGHT DOWN. </summary>
			public const char BOX_DRAWINGS_LIGHT_DOWN = (char)0x2577;
			/// <summary> Formerly FORMS LIGHT DOWN AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_DOWN_AND_HORIZONTAL = (char)0x252C;
			/// <summary> Formerly FORMS LIGHT DOWN AND LEFT. </summary>
			public const char BOX_DRAWINGS_LIGHT_DOWN_AND_LEFT = (char)0x2510;
			/// <summary> Formerly FORMS LIGHT DOWN AND RIGHT. </summary>
			public const char BOX_DRAWINGS_LIGHT_DOWN_AND_RIGHT = (char)0x250C;
			/// <summary> Formerly FORMS LIGHT HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_HORIZONTAL = (char)0x2500;
			/// <summary> Formerly FORMS LIGHT LEFT. </summary>
			public const char BOX_DRAWINGS_LIGHT_LEFT = (char)0x2574;
			/// <summary> Formerly FORMS LIGHT LEFT AND HEAVY RIGHT. </summary>
			public const char BOX_DRAWINGS_LIGHT_LEFT_AND_HEAVY_RIGHT = (char)0x257C;
			/// <summary> Formerly FORMS LIGHT QUADRUPLE DASH HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_QUADRUPLE_DASH_HORIZONTAL = (char)0x2508;
			/// <summary> Formerly FORMS LIGHT QUADRUPLE DASH VERTICAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_QUADRUPLE_DASH_VERTICAL = (char)0x250A;
			/// <summary> Formerly FORMS LIGHT RIGHT. </summary>
			public const char BOX_DRAWINGS_LIGHT_RIGHT = (char)0x2576;
			/// <summary> Formerly FORMS LIGHT TRIPLE DASH HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_TRIPLE_DASH_HORIZONTAL = (char)0x2504;
			/// <summary> Formerly FORMS LIGHT TRIPLE DASH VERTICAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_TRIPLE_DASH_VERTICAL = (char)0x2506;
			/// <summary> Formerly FORMS LIGHT UP. </summary>
			public const char BOX_DRAWINGS_LIGHT_UP = (char)0x2575;
			/// <summary> Formerly FORMS LIGHT UP AND HEAVY DOWN. </summary>
			public const char BOX_DRAWINGS_LIGHT_UP_AND_HEAVY_DOWN = (char)0x257D;
			/// <summary> Formerly FORMS LIGHT UP AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_UP_AND_HORIZONTAL = (char)0x2534;
			/// <summary> Formerly FORMS LIGHT UP AND LEFT. </summary>
			public const char BOX_DRAWINGS_LIGHT_UP_AND_LEFT = (char)0x2518;
			/// <summary> Formerly FORMS LIGHT UP AND RIGHT. </summary>
			public const char BOX_DRAWINGS_LIGHT_UP_AND_RIGHT = (char)0x2514;
			/// <summary> Formerly FORMS LIGHT VERTICAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_VERTICAL = (char)0x2502;
			/// <summary> Formerly FORMS LIGHT VERTICAL AND HORIZONTAL. </summary>
			public const char BOX_DRAWINGS_LIGHT_VERTICAL_AND_HORIZONTAL = (char)0x253C;
			/// <summary> Formerly FORMS LIGHT VERTICAL AND LEFT. </summary>
			public const char BOX_DRAWINGS_LIGHT_VERTICAL_AND_LEFT = (char)0x2524;
			/// <summary> Formerly FORMS LIGHT VERTICAL AND RIGHT. </summary>
			public const char BOX_DRAWINGS_LIGHT_VERTICAL_AND_RIGHT = (char)0x251C;
			/// <summary> Formerly FORMS RIGHT DOWN HEAVY AND LEFT UP LIGHT. </summary>
			public const char BOX_DRAWINGS_RIGHT_DOWN_HEAVY_AND_LEFT_UP_LIGHT = (char)0x2546;
			/// <summary> Formerly FORMS RIGHT HEAVY AND LEFT DOWN LIGHT. </summary>
			public const char BOX_DRAWINGS_RIGHT_HEAVY_AND_LEFT_DOWN_LIGHT = (char)0x252E;
			/// <summary> Formerly FORMS RIGHT HEAVY AND LEFT UP LIGHT. </summary>
			public const char BOX_DRAWINGS_RIGHT_HEAVY_AND_LEFT_UP_LIGHT = (char)0x2536;
			/// <summary> Formerly FORMS RIGHT HEAVY AND LEFT VERTICAL LIGHT. </summary>
			public const char BOX_DRAWINGS_RIGHT_HEAVY_AND_LEFT_VERTICAL_LIGHT = (char)0x253E;
			/// <summary> Formerly FORMS RIGHT LIGHT AND LEFT DOWN HEAVY. </summary>
			public const char BOX_DRAWINGS_RIGHT_LIGHT_AND_LEFT_DOWN_HEAVY = (char)0x2531;
			/// <summary> Formerly FORMS RIGHT LIGHT AND LEFT UP HEAVY. </summary>
			public const char BOX_DRAWINGS_RIGHT_LIGHT_AND_LEFT_UP_HEAVY = (char)0x2539;
			/// <summary> Formerly FORMS RIGHT LIGHT AND LEFT VERTICAL HEAVY. </summary>
			public const char BOX_DRAWINGS_RIGHT_LIGHT_AND_LEFT_VERTICAL_HEAVY = (char)0x2549;
			/// <summary> Formerly FORMS RIGHT UP HEAVY AND LEFT DOWN LIGHT. </summary>
			public const char BOX_DRAWINGS_RIGHT_UP_HEAVY_AND_LEFT_DOWN_LIGHT = (char)0x2544;
			/// <summary> Formerly FORMS UP DOUBLE AND HORIZONTAL SINGLE. </summary>
			public const char BOX_DRAWINGS_UP_DOUBLE_AND_HORIZONTAL_SINGLE = (char)0x2568;
			/// <summary> Formerly FORMS UP DOUBLE AND LEFT SINGLE. </summary>
			public const char BOX_DRAWINGS_UP_DOUBLE_AND_LEFT_SINGLE = (char)0x255C;
			/// <summary> Formerly FORMS UP DOUBLE AND RIGHT SINGLE. </summary>
			public const char BOX_DRAWINGS_UP_DOUBLE_AND_RIGHT_SINGLE = (char)0x2559;
			/// <summary> Formerly FORMS UP HEAVY AND DOWN HORIZONTAL LIGHT. </summary>
			public const char BOX_DRAWINGS_UP_HEAVY_AND_DOWN_HORIZONTAL_LIGHT = (char)0x2540;
			/// <summary> Formerly FORMS UP HEAVY AND HORIZONTAL LIGHT. </summary>
			public const char BOX_DRAWINGS_UP_HEAVY_AND_HORIZONTAL_LIGHT = (char)0x2538;
			/// <summary> Formerly FORMS UP HEAVY AND LEFT DOWN LIGHT. </summary>
			public const char BOX_DRAWINGS_UP_HEAVY_AND_LEFT_DOWN_LIGHT = (char)0x2526;
			/// <summary> Formerly FORMS UP HEAVY AND LEFT LIGHT. </summary>
			public const char BOX_DRAWINGS_UP_HEAVY_AND_LEFT_LIGHT = (char)0x251A;
			/// <summary> Formerly FORMS UP HEAVY AND RIGHT DOWN LIGHT. </summary>
			public const char BOX_DRAWINGS_UP_HEAVY_AND_RIGHT_DOWN_LIGHT = (char)0x251E;
			/// <summary> Formerly FORMS UP HEAVY AND RIGHT LIGHT. </summary>
			public const char BOX_DRAWINGS_UP_HEAVY_AND_RIGHT_LIGHT = (char)0x2516;
			/// <summary> Formerly FORMS UP LIGHT AND DOWN HORIZONTAL HEAVY. </summary>
			public const char BOX_DRAWINGS_UP_LIGHT_AND_DOWN_HORIZONTAL_HEAVY = (char)0x2548;
			/// <summary> Formerly FORMS UP LIGHT AND HORIZONTAL HEAVY. </summary>
			public const char BOX_DRAWINGS_UP_LIGHT_AND_HORIZONTAL_HEAVY = (char)0x2537;
			/// <summary> Formerly FORMS UP LIGHT AND LEFT DOWN HEAVY. </summary>
			public const char BOX_DRAWINGS_UP_LIGHT_AND_LEFT_DOWN_HEAVY = (char)0x252A;
			/// <summary> Formerly FORMS UP LIGHT AND LEFT HEAVY. </summary>
			public const char BOX_DRAWINGS_UP_LIGHT_AND_LEFT_HEAVY = (char)0x2519;
			/// <summary> Formerly FORMS UP LIGHT AND RIGHT DOWN HEAVY. </summary>
			public const char BOX_DRAWINGS_UP_LIGHT_AND_RIGHT_DOWN_HEAVY = (char)0x2522;
			/// <summary> Formerly FORMS UP LIGHT AND RIGHT HEAVY. </summary>
			public const char BOX_DRAWINGS_UP_LIGHT_AND_RIGHT_HEAVY = (char)0x2515;
			/// <summary> Formerly FORMS UP SINGLE AND HORIZONTAL DOUBLE. </summary>
			public const char BOX_DRAWINGS_UP_SINGLE_AND_HORIZONTAL_DOUBLE = (char)0x2567;
			/// <summary> Formerly FORMS UP SINGLE AND LEFT DOUBLE. </summary>
			public const char BOX_DRAWINGS_UP_SINGLE_AND_LEFT_DOUBLE = (char)0x255B;
			/// <summary> Formerly FORMS UP SINGLE AND RIGHT DOUBLE. </summary>
			public const char BOX_DRAWINGS_UP_SINGLE_AND_RIGHT_DOUBLE = (char)0x2558;
			/// <summary> Formerly FORMS VERTICAL DOUBLE AND HORIZONTAL SINGLE. </summary>
			public const char BOX_DRAWINGS_VERTICAL_DOUBLE_AND_HORIZONTAL_SINGLE = (char)0x256B;
			/// <summary> Formerly FORMS VERTICAL DOUBLE AND LEFT SINGLE. </summary>
			public const char BOX_DRAWINGS_VERTICAL_DOUBLE_AND_LEFT_SINGLE = (char)0x2562;
			/// <summary> Formerly FORMS VERTICAL DOUBLE AND RIGHT SINGLE. </summary>
			public const char BOX_DRAWINGS_VERTICAL_DOUBLE_AND_RIGHT_SINGLE = (char)0x255F;
			/// <summary> Formerly FORMS VERTICAL HEAVY AND HORIZONTAL LIGHT. </summary>
			public const char BOX_DRAWINGS_VERTICAL_HEAVY_AND_HORIZONTAL_LIGHT = (char)0x2542;
			/// <summary> Formerly FORMS VERTICAL HEAVY AND LEFT LIGHT. </summary>
			public const char BOX_DRAWINGS_VERTICAL_HEAVY_AND_LEFT_LIGHT = (char)0x2528;
			/// <summary> Formerly FORMS VERTICAL HEAVY AND RIGHT LIGHT. </summary>
			public const char BOX_DRAWINGS_VERTICAL_HEAVY_AND_RIGHT_LIGHT = (char)0x2520;
			/// <summary> Formerly FORMS VERTICAL LIGHT AND HORIZONTAL HEAVY. </summary>
			public const char BOX_DRAWINGS_VERTICAL_LIGHT_AND_HORIZONTAL_HEAVY = (char)0x253F;
			/// <summary> Formerly FORMS VERTICAL LIGHT AND LEFT HEAVY. </summary>
			public const char BOX_DRAWINGS_VERTICAL_LIGHT_AND_LEFT_HEAVY = (char)0x2525;
			/// <summary> Formerly FORMS VERTICAL LIGHT AND RIGHT HEAVY. </summary>
			public const char BOX_DRAWINGS_VERTICAL_LIGHT_AND_RIGHT_HEAVY = (char)0x251D;
			/// <summary> Formerly FORMS VERTICAL SINGLE AND HORIZONTAL DOUBLE. </summary>
			public const char BOX_DRAWINGS_VERTICAL_SINGLE_AND_HORIZONTAL_DOUBLE = (char)0x256A;
			/// <summary> Formerly FORMS VERTICAL SINGLE AND LEFT DOUBLE. </summary>
			public const char BOX_DRAWINGS_VERTICAL_SINGLE_AND_LEFT_DOUBLE = (char)0x2561;
			/// <summary> Formerly FORMS VERTICAL SINGLE AND RIGHT DOUBLE. </summary>
			public const char BOX_DRAWINGS_VERTICAL_SINGLE_AND_RIGHT_DOUBLE = (char)0x255E;
			public const char BRAILLE_PATTERN_BLANK = (char)0x2800;
			public const char BRAILLE_PATTERN_DOTS_1 = (char)0x2801;
			public const char BRAILLE_PATTERN_DOTS_12 = (char)0x2803;
			public const char BRAILLE_PATTERN_DOTS_123 = (char)0x2807;
			public const char BRAILLE_PATTERN_DOTS_1234 = (char)0x280F;
			public const char BRAILLE_PATTERN_DOTS_12345 = (char)0x281F;
			public const char BRAILLE_PATTERN_DOTS_123456 = (char)0x283F;
			public const char BRAILLE_PATTERN_DOTS_1234567 = (char)0x287F;
			public const char BRAILLE_PATTERN_DOTS_12345678 = (char)0x28FF;
			public const char BRAILLE_PATTERN_DOTS_1234568 = (char)0x28BF;
			public const char BRAILLE_PATTERN_DOTS_123457 = (char)0x285F;
			public const char BRAILLE_PATTERN_DOTS_1234578 = (char)0x28DF;
			public const char BRAILLE_PATTERN_DOTS_123458 = (char)0x289F;
			public const char BRAILLE_PATTERN_DOTS_12346 = (char)0x282F;
			public const char BRAILLE_PATTERN_DOTS_123467 = (char)0x286F;
			public const char BRAILLE_PATTERN_DOTS_1234678 = (char)0x28EF;
			public const char BRAILLE_PATTERN_DOTS_123468 = (char)0x28AF;
			public const char BRAILLE_PATTERN_DOTS_12347 = (char)0x284F;
			public const char BRAILLE_PATTERN_DOTS_123478 = (char)0x28CF;
			public const char BRAILLE_PATTERN_DOTS_12348 = (char)0x288F;
			public const char BRAILLE_PATTERN_DOTS_1235 = (char)0x2817;
			public const char BRAILLE_PATTERN_DOTS_12356 = (char)0x2837;
			public const char BRAILLE_PATTERN_DOTS_123567 = (char)0x2877;
			public const char BRAILLE_PATTERN_DOTS_1235678 = (char)0x28F7;
			public const char BRAILLE_PATTERN_DOTS_123568 = (char)0x28B7;
			public const char BRAILLE_PATTERN_DOTS_12357 = (char)0x2857;
			public const char BRAILLE_PATTERN_DOTS_123578 = (char)0x28D7;
			public const char BRAILLE_PATTERN_DOTS_12358 = (char)0x2897;
			public const char BRAILLE_PATTERN_DOTS_1236 = (char)0x2827;
			public const char BRAILLE_PATTERN_DOTS_12367 = (char)0x2867;
			public const char BRAILLE_PATTERN_DOTS_123678 = (char)0x28E7;
			public const char BRAILLE_PATTERN_DOTS_12368 = (char)0x28A7;
			public const char BRAILLE_PATTERN_DOTS_1237 = (char)0x2847;
			public const char BRAILLE_PATTERN_DOTS_12378 = (char)0x28C7;
			public const char BRAILLE_PATTERN_DOTS_1238 = (char)0x2887;
			public const char BRAILLE_PATTERN_DOTS_124 = (char)0x280B;
			public const char BRAILLE_PATTERN_DOTS_1245 = (char)0x281B;
			public const char BRAILLE_PATTERN_DOTS_12456 = (char)0x283B;
			public const char BRAILLE_PATTERN_DOTS_124567 = (char)0x287B;
			public const char BRAILLE_PATTERN_DOTS_1245678 = (char)0x28FB;
			public const char BRAILLE_PATTERN_DOTS_124568 = (char)0x28BB;
			public const char BRAILLE_PATTERN_DOTS_12457 = (char)0x285B;
			public const char BRAILLE_PATTERN_DOTS_124578 = (char)0x28DB;
			public const char BRAILLE_PATTERN_DOTS_12458 = (char)0x289B;
			public const char BRAILLE_PATTERN_DOTS_1246 = (char)0x282B;
			public const char BRAILLE_PATTERN_DOTS_12467 = (char)0x286B;
			public const char BRAILLE_PATTERN_DOTS_124678 = (char)0x28EB;
			public const char BRAILLE_PATTERN_DOTS_12468 = (char)0x28AB;
			public const char BRAILLE_PATTERN_DOTS_1247 = (char)0x284B;
			public const char BRAILLE_PATTERN_DOTS_12478 = (char)0x28CB;
			public const char BRAILLE_PATTERN_DOTS_1248 = (char)0x288B;
			public const char BRAILLE_PATTERN_DOTS_125 = (char)0x2813;
			public const char BRAILLE_PATTERN_DOTS_1256 = (char)0x2833;
			public const char BRAILLE_PATTERN_DOTS_12567 = (char)0x2873;
			public const char BRAILLE_PATTERN_DOTS_125678 = (char)0x28F3;
			public const char BRAILLE_PATTERN_DOTS_12568 = (char)0x28B3;
			public const char BRAILLE_PATTERN_DOTS_1257 = (char)0x2853;
			public const char BRAILLE_PATTERN_DOTS_12578 = (char)0x28D3;
			public const char BRAILLE_PATTERN_DOTS_1258 = (char)0x2893;
			public const char BRAILLE_PATTERN_DOTS_126 = (char)0x2823;
			public const char BRAILLE_PATTERN_DOTS_1267 = (char)0x2863;
			public const char BRAILLE_PATTERN_DOTS_12678 = (char)0x28E3;
			public const char BRAILLE_PATTERN_DOTS_1268 = (char)0x28A3;
			public const char BRAILLE_PATTERN_DOTS_127 = (char)0x2843;
			public const char BRAILLE_PATTERN_DOTS_1278 = (char)0x28C3;
			public const char BRAILLE_PATTERN_DOTS_128 = (char)0x2883;
			public const char BRAILLE_PATTERN_DOTS_13 = (char)0x2805;
			public const char BRAILLE_PATTERN_DOTS_134 = (char)0x280D;
			public const char BRAILLE_PATTERN_DOTS_1345 = (char)0x281D;
			public const char BRAILLE_PATTERN_DOTS_13456 = (char)0x283D;
			public const char BRAILLE_PATTERN_DOTS_134567 = (char)0x287D;
			public const char BRAILLE_PATTERN_DOTS_1345678 = (char)0x28FD;
			public const char BRAILLE_PATTERN_DOTS_134568 = (char)0x28BD;
			public const char BRAILLE_PATTERN_DOTS_13457 = (char)0x285D;
			public const char BRAILLE_PATTERN_DOTS_134578 = (char)0x28DD;
			public const char BRAILLE_PATTERN_DOTS_13458 = (char)0x289D;
			public const char BRAILLE_PATTERN_DOTS_1346 = (char)0x282D;
			public const char BRAILLE_PATTERN_DOTS_13467 = (char)0x286D;
			public const char BRAILLE_PATTERN_DOTS_134678 = (char)0x28ED;
			public const char BRAILLE_PATTERN_DOTS_13468 = (char)0x28AD;
			public const char BRAILLE_PATTERN_DOTS_1347 = (char)0x284D;
			public const char BRAILLE_PATTERN_DOTS_13478 = (char)0x28CD;
			public const char BRAILLE_PATTERN_DOTS_1348 = (char)0x288D;
			public const char BRAILLE_PATTERN_DOTS_135 = (char)0x2815;
			public const char BRAILLE_PATTERN_DOTS_1356 = (char)0x2835;
			public const char BRAILLE_PATTERN_DOTS_13567 = (char)0x2875;
			public const char BRAILLE_PATTERN_DOTS_135678 = (char)0x28F5;
			public const char BRAILLE_PATTERN_DOTS_13568 = (char)0x28B5;
			public const char BRAILLE_PATTERN_DOTS_1357 = (char)0x2855;
			public const char BRAILLE_PATTERN_DOTS_13578 = (char)0x28D5;
			public const char BRAILLE_PATTERN_DOTS_1358 = (char)0x2895;
			public const char BRAILLE_PATTERN_DOTS_136 = (char)0x2825;
			public const char BRAILLE_PATTERN_DOTS_1367 = (char)0x2865;
			public const char BRAILLE_PATTERN_DOTS_13678 = (char)0x28E5;
			public const char BRAILLE_PATTERN_DOTS_1368 = (char)0x28A5;
			public const char BRAILLE_PATTERN_DOTS_137 = (char)0x2845;
			public const char BRAILLE_PATTERN_DOTS_1378 = (char)0x28C5;
			public const char BRAILLE_PATTERN_DOTS_138 = (char)0x2885;
			public const char BRAILLE_PATTERN_DOTS_14 = (char)0x2809;
			public const char BRAILLE_PATTERN_DOTS_145 = (char)0x2819;
			public const char BRAILLE_PATTERN_DOTS_1456 = (char)0x2839;
			public const char BRAILLE_PATTERN_DOTS_14567 = (char)0x2879;
			public const char BRAILLE_PATTERN_DOTS_145678 = (char)0x28F9;
			public const char BRAILLE_PATTERN_DOTS_14568 = (char)0x28B9;
			public const char BRAILLE_PATTERN_DOTS_1457 = (char)0x2859;
			public const char BRAILLE_PATTERN_DOTS_14578 = (char)0x28D9;
			public const char BRAILLE_PATTERN_DOTS_1458 = (char)0x2899;
			public const char BRAILLE_PATTERN_DOTS_146 = (char)0x2829;
			public const char BRAILLE_PATTERN_DOTS_1467 = (char)0x2869;
			public const char BRAILLE_PATTERN_DOTS_14678 = (char)0x28E9;
			public const char BRAILLE_PATTERN_DOTS_1468 = (char)0x28A9;
			public const char BRAILLE_PATTERN_DOTS_147 = (char)0x2849;
			public const char BRAILLE_PATTERN_DOTS_1478 = (char)0x28C9;
			public const char BRAILLE_PATTERN_DOTS_148 = (char)0x2889;
			public const char BRAILLE_PATTERN_DOTS_15 = (char)0x2811;
			public const char BRAILLE_PATTERN_DOTS_156 = (char)0x2831;
			public const char BRAILLE_PATTERN_DOTS_1567 = (char)0x2871;
			public const char BRAILLE_PATTERN_DOTS_15678 = (char)0x28F1;
			public const char BRAILLE_PATTERN_DOTS_1568 = (char)0x28B1;
			public const char BRAILLE_PATTERN_DOTS_157 = (char)0x2851;
			public const char BRAILLE_PATTERN_DOTS_1578 = (char)0x28D1;
			public const char BRAILLE_PATTERN_DOTS_158 = (char)0x2891;
			public const char BRAILLE_PATTERN_DOTS_16 = (char)0x2821;
			public const char BRAILLE_PATTERN_DOTS_167 = (char)0x2861;
			public const char BRAILLE_PATTERN_DOTS_1678 = (char)0x28E1;
			public const char BRAILLE_PATTERN_DOTS_168 = (char)0x28A1;
			public const char BRAILLE_PATTERN_DOTS_17 = (char)0x2841;
			public const char BRAILLE_PATTERN_DOTS_178 = (char)0x28C1;
			public const char BRAILLE_PATTERN_DOTS_18 = (char)0x2881;
			public const char BRAILLE_PATTERN_DOTS_2 = (char)0x2802;
			public const char BRAILLE_PATTERN_DOTS_23 = (char)0x2806;
			public const char BRAILLE_PATTERN_DOTS_234 = (char)0x280E;
			public const char BRAILLE_PATTERN_DOTS_2345 = (char)0x281E;
			public const char BRAILLE_PATTERN_DOTS_23456 = (char)0x283E;
			public const char BRAILLE_PATTERN_DOTS_234567 = (char)0x287E;
			public const char BRAILLE_PATTERN_DOTS_2345678 = (char)0x28FE;
			public const char BRAILLE_PATTERN_DOTS_234568 = (char)0x28BE;
			public const char BRAILLE_PATTERN_DOTS_23457 = (char)0x285E;
			public const char BRAILLE_PATTERN_DOTS_234578 = (char)0x28DE;
			public const char BRAILLE_PATTERN_DOTS_23458 = (char)0x289E;
			public const char BRAILLE_PATTERN_DOTS_2346 = (char)0x282E;
			public const char BRAILLE_PATTERN_DOTS_23467 = (char)0x286E;
			public const char BRAILLE_PATTERN_DOTS_234678 = (char)0x28EE;
			public const char BRAILLE_PATTERN_DOTS_23468 = (char)0x28AE;
			public const char BRAILLE_PATTERN_DOTS_2347 = (char)0x284E;
			public const char BRAILLE_PATTERN_DOTS_23478 = (char)0x28CE;
			public const char BRAILLE_PATTERN_DOTS_2348 = (char)0x288E;
			public const char BRAILLE_PATTERN_DOTS_235 = (char)0x2816;
			public const char BRAILLE_PATTERN_DOTS_2356 = (char)0x2836;
			public const char BRAILLE_PATTERN_DOTS_23567 = (char)0x2876;
			public const char BRAILLE_PATTERN_DOTS_235678 = (char)0x28F6;
			public const char BRAILLE_PATTERN_DOTS_23568 = (char)0x28B6;
			public const char BRAILLE_PATTERN_DOTS_2357 = (char)0x2856;
			public const char BRAILLE_PATTERN_DOTS_23578 = (char)0x28D6;
			public const char BRAILLE_PATTERN_DOTS_2358 = (char)0x2896;
			public const char BRAILLE_PATTERN_DOTS_236 = (char)0x2826;
			public const char BRAILLE_PATTERN_DOTS_2367 = (char)0x2866;
			public const char BRAILLE_PATTERN_DOTS_23678 = (char)0x28E6;
			public const char BRAILLE_PATTERN_DOTS_2368 = (char)0x28A6;
			public const char BRAILLE_PATTERN_DOTS_237 = (char)0x2846;
			public const char BRAILLE_PATTERN_DOTS_2378 = (char)0x28C6;
			public const char BRAILLE_PATTERN_DOTS_238 = (char)0x2886;
			public const char BRAILLE_PATTERN_DOTS_24 = (char)0x280A;
			public const char BRAILLE_PATTERN_DOTS_245 = (char)0x281A;
			public const char BRAILLE_PATTERN_DOTS_2456 = (char)0x283A;
			public const char BRAILLE_PATTERN_DOTS_24567 = (char)0x287A;
			public const char BRAILLE_PATTERN_DOTS_245678 = (char)0x28FA;
			public const char BRAILLE_PATTERN_DOTS_24568 = (char)0x28BA;
			public const char BRAILLE_PATTERN_DOTS_2457 = (char)0x285A;
			public const char BRAILLE_PATTERN_DOTS_24578 = (char)0x28DA;
			public const char BRAILLE_PATTERN_DOTS_2458 = (char)0x289A;
			public const char BRAILLE_PATTERN_DOTS_246 = (char)0x282A;
			public const char BRAILLE_PATTERN_DOTS_2467 = (char)0x286A;
			public const char BRAILLE_PATTERN_DOTS_24678 = (char)0x28EA;
			public const char BRAILLE_PATTERN_DOTS_2468 = (char)0x28AA;
			public const char BRAILLE_PATTERN_DOTS_247 = (char)0x284A;
			public const char BRAILLE_PATTERN_DOTS_2478 = (char)0x28CA;
			public const char BRAILLE_PATTERN_DOTS_248 = (char)0x288A;
			public const char BRAILLE_PATTERN_DOTS_25 = (char)0x2812;
			public const char BRAILLE_PATTERN_DOTS_256 = (char)0x2832;
			public const char BRAILLE_PATTERN_DOTS_2567 = (char)0x2872;
			public const char BRAILLE_PATTERN_DOTS_25678 = (char)0x28F2;
			public const char BRAILLE_PATTERN_DOTS_2568 = (char)0x28B2;
			public const char BRAILLE_PATTERN_DOTS_257 = (char)0x2852;
			public const char BRAILLE_PATTERN_DOTS_2578 = (char)0x28D2;
			public const char BRAILLE_PATTERN_DOTS_258 = (char)0x2892;
			public const char BRAILLE_PATTERN_DOTS_26 = (char)0x2822;
			public const char BRAILLE_PATTERN_DOTS_267 = (char)0x2862;
			public const char BRAILLE_PATTERN_DOTS_2678 = (char)0x28E2;
			public const char BRAILLE_PATTERN_DOTS_268 = (char)0x28A2;
			public const char BRAILLE_PATTERN_DOTS_27 = (char)0x2842;
			public const char BRAILLE_PATTERN_DOTS_278 = (char)0x28C2;
			public const char BRAILLE_PATTERN_DOTS_28 = (char)0x2882;
			public const char BRAILLE_PATTERN_DOTS_3 = (char)0x2804;
			public const char BRAILLE_PATTERN_DOTS_34 = (char)0x280C;
			public const char BRAILLE_PATTERN_DOTS_345 = (char)0x281C;
			public const char BRAILLE_PATTERN_DOTS_3456 = (char)0x283C;
			public const char BRAILLE_PATTERN_DOTS_34567 = (char)0x287C;
			public const char BRAILLE_PATTERN_DOTS_345678 = (char)0x28FC;
			public const char BRAILLE_PATTERN_DOTS_34568 = (char)0x28BC;
			public const char BRAILLE_PATTERN_DOTS_3457 = (char)0x285C;
			public const char BRAILLE_PATTERN_DOTS_34578 = (char)0x28DC;
			public const char BRAILLE_PATTERN_DOTS_3458 = (char)0x289C;
			public const char BRAILLE_PATTERN_DOTS_346 = (char)0x282C;
			public const char BRAILLE_PATTERN_DOTS_3467 = (char)0x286C;
			public const char BRAILLE_PATTERN_DOTS_34678 = (char)0x28EC;
			public const char BRAILLE_PATTERN_DOTS_3468 = (char)0x28AC;
			public const char BRAILLE_PATTERN_DOTS_347 = (char)0x284C;
			public const char BRAILLE_PATTERN_DOTS_3478 = (char)0x28CC;
			public const char BRAILLE_PATTERN_DOTS_348 = (char)0x288C;
			public const char BRAILLE_PATTERN_DOTS_35 = (char)0x2814;
			public const char BRAILLE_PATTERN_DOTS_356 = (char)0x2834;
			public const char BRAILLE_PATTERN_DOTS_3567 = (char)0x2874;
			public const char BRAILLE_PATTERN_DOTS_35678 = (char)0x28F4;
			public const char BRAILLE_PATTERN_DOTS_3568 = (char)0x28B4;
			public const char BRAILLE_PATTERN_DOTS_357 = (char)0x2854;
			public const char BRAILLE_PATTERN_DOTS_3578 = (char)0x28D4;
			public const char BRAILLE_PATTERN_DOTS_358 = (char)0x2894;
			public const char BRAILLE_PATTERN_DOTS_36 = (char)0x2824;
			public const char BRAILLE_PATTERN_DOTS_367 = (char)0x2864;
			public const char BRAILLE_PATTERN_DOTS_3678 = (char)0x28E4;
			public const char BRAILLE_PATTERN_DOTS_368 = (char)0x28A4;
			public const char BRAILLE_PATTERN_DOTS_37 = (char)0x2844;
			public const char BRAILLE_PATTERN_DOTS_378 = (char)0x28C4;
			public const char BRAILLE_PATTERN_DOTS_38 = (char)0x2884;
			public const char BRAILLE_PATTERN_DOTS_4 = (char)0x2808;
			public const char BRAILLE_PATTERN_DOTS_45 = (char)0x2818;
			public const char BRAILLE_PATTERN_DOTS_456 = (char)0x2838;
			public const char BRAILLE_PATTERN_DOTS_4567 = (char)0x2878;
			public const char BRAILLE_PATTERN_DOTS_45678 = (char)0x28F8;
			public const char BRAILLE_PATTERN_DOTS_4568 = (char)0x28B8;
			public const char BRAILLE_PATTERN_DOTS_457 = (char)0x2858;
			public const char BRAILLE_PATTERN_DOTS_4578 = (char)0x28D8;
			public const char BRAILLE_PATTERN_DOTS_458 = (char)0x2898;
			public const char BRAILLE_PATTERN_DOTS_46 = (char)0x2828;
			public const char BRAILLE_PATTERN_DOTS_467 = (char)0x2868;
			public const char BRAILLE_PATTERN_DOTS_4678 = (char)0x28E8;
			public const char BRAILLE_PATTERN_DOTS_468 = (char)0x28A8;
			public const char BRAILLE_PATTERN_DOTS_47 = (char)0x2848;
			public const char BRAILLE_PATTERN_DOTS_478 = (char)0x28C8;
			public const char BRAILLE_PATTERN_DOTS_48 = (char)0x2888;
			public const char BRAILLE_PATTERN_DOTS_5 = (char)0x2810;
			public const char BRAILLE_PATTERN_DOTS_56 = (char)0x2830;
			public const char BRAILLE_PATTERN_DOTS_567 = (char)0x2870;
			public const char BRAILLE_PATTERN_DOTS_5678 = (char)0x28F0;
			public const char BRAILLE_PATTERN_DOTS_568 = (char)0x28B0;
			public const char BRAILLE_PATTERN_DOTS_57 = (char)0x2850;
			public const char BRAILLE_PATTERN_DOTS_578 = (char)0x28D0;
			public const char BRAILLE_PATTERN_DOTS_58 = (char)0x2890;
			public const char BRAILLE_PATTERN_DOTS_6 = (char)0x2820;
			public const char BRAILLE_PATTERN_DOTS_67 = (char)0x2860;
			public const char BRAILLE_PATTERN_DOTS_678 = (char)0x28E0;
			public const char BRAILLE_PATTERN_DOTS_68 = (char)0x28A0;
			public const char BRAILLE_PATTERN_DOTS_7 = (char)0x2840;
			public const char BRAILLE_PATTERN_DOTS_78 = (char)0x28C0;
			public const char BRAILLE_PATTERN_DOTS_8 = (char)0x2880;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING BREVE. </summary>
			public const char BREVE = (char)0x02D8;
			/// <summary> Formerly BROKEN VERTICAL BAR. </summary>
			public const char BROKEN_BAR = (char)0x00A6;
			public const char BROKEN_CIRCLE_WITH_NORTHWEST_ARROW = (char)0x238B;
			public const char BUGINESE_END_OF_SECTION = (char)0x1A1F;
			public const char BUGINESE_LETTER_A = (char)0x1A15;
			public const char BUGINESE_LETTER_BA = (char)0x1A05;
			public const char BUGINESE_LETTER_CA = (char)0x1A0C;
			public const char BUGINESE_LETTER_DA = (char)0x1A09;
			public const char BUGINESE_LETTER_GA = (char)0x1A01;
			public const char BUGINESE_LETTER_HA = (char)0x1A16;
			public const char BUGINESE_LETTER_JA = (char)0x1A0D;
			public const char BUGINESE_LETTER_KA = (char)0x1A00;
			public const char BUGINESE_LETTER_LA = (char)0x1A12;
			public const char BUGINESE_LETTER_MA = (char)0x1A06;
			public const char BUGINESE_LETTER_MPA = (char)0x1A07;
			public const char BUGINESE_LETTER_NA = (char)0x1A0A;
			public const char BUGINESE_LETTER_NGA = (char)0x1A02;
			public const char BUGINESE_LETTER_NGKA = (char)0x1A03;
			public const char BUGINESE_LETTER_NRA = (char)0x1A0B;
			public const char BUGINESE_LETTER_NYA = (char)0x1A0E;
			public const char BUGINESE_LETTER_NYCA = (char)0x1A0F;
			public const char BUGINESE_LETTER_PA = (char)0x1A04;
			public const char BUGINESE_LETTER_RA = (char)0x1A11;
			public const char BUGINESE_LETTER_SA = (char)0x1A14;
			public const char BUGINESE_LETTER_TA = (char)0x1A08;
			public const char BUGINESE_LETTER_VA = (char)0x1A13;
			public const char BUGINESE_LETTER_YA = (char)0x1A10;
			public const char BUGINESE_PALLAWA = (char)0x1A1E;
			public const char BUGINESE_VOWEL_SIGN_AE = (char)0x1A1B;
			public const char BUGINESE_VOWEL_SIGN_E = (char)0x1A19;
			public const char BUGINESE_VOWEL_SIGN_I = (char)0x1A17;
			public const char BUGINESE_VOWEL_SIGN_O = (char)0x1A1A;
			public const char BUGINESE_VOWEL_SIGN_U = (char)0x1A18;
			public const char BUHID_LETTER_A = (char)0x1740;
			public const char BUHID_LETTER_BA = (char)0x174A;
			public const char BUHID_LETTER_DA = (char)0x1747;
			public const char BUHID_LETTER_GA = (char)0x1744;
			public const char BUHID_LETTER_HA = (char)0x1751;
			public const char BUHID_LETTER_I = (char)0x1741;
			public const char BUHID_LETTER_KA = (char)0x1743;
			public const char BUHID_LETTER_LA = (char)0x174E;
			public const char BUHID_LETTER_MA = (char)0x174B;
			public const char BUHID_LETTER_NA = (char)0x1748;
			public const char BUHID_LETTER_NGA = (char)0x1745;
			public const char BUHID_LETTER_PA = (char)0x1749;
			public const char BUHID_LETTER_RA = (char)0x174D;
			public const char BUHID_LETTER_SA = (char)0x1750;
			public const char BUHID_LETTER_TA = (char)0x1746;
			public const char BUHID_LETTER_U = (char)0x1742;
			public const char BUHID_LETTER_WA = (char)0x174F;
			public const char BUHID_LETTER_YA = (char)0x174C;
			public const char BUHID_VOWEL_SIGN_I = (char)0x1752;
			public const char BUHID_VOWEL_SIGN_U = (char)0x1753;
			public const char BULLET = (char)0x2022;
			public const char BULLET_OPERATOR = (char)0x2219;
			public const char BULLSEYE = (char)0x25CE;
		}
		public class C {
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CADA_UNA = (char)0x2106;
			public const char CADUCEUS = (char)0x2624;
			public const char CANADIAN_SYLLABICS_A = (char)0x140A;
			public const char CANADIAN_SYLLABICS_AA = (char)0x140B;
			public const char CANADIAN_SYLLABICS_AAI = (char)0x1402;
			public const char CANADIAN_SYLLABICS_AI = (char)0x141C;
			public const char CANADIAN_SYLLABICS_AIVILIK_B = (char)0x15AF;
			public const char CANADIAN_SYLLABICS_AN = (char)0x142E;
			public const char CANADIAN_SYLLABICS_ATHAPASCAN_M = (char)0x14BE;
			public const char CANADIAN_SYLLABICS_ATHAPASCAN_S = (char)0x1506;
			public const char CANADIAN_SYLLABICS_BIBLE_CREE_Y = (char)0x153F;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_A = (char)0x15B3;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_E = (char)0x15B0;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_I = (char)0x15B1;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_KA = (char)0x15BF;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_KE = (char)0x15BC;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_KI = (char)0x15BD;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_KO = (char)0x15BE;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_NA = (char)0x15BB;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_NE = (char)0x15B8;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_NI = (char)0x15B9;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_NO = (char)0x15BA;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_O = (char)0x15B2;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_S = (char)0x1508;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_WA = (char)0x15B7;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_WE = (char)0x15B4;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_WI = (char)0x15B5;
			public const char CANADIAN_SYLLABICS_BLACKFOOT_WO = (char)0x15B6;
			public const char CANADIAN_SYLLABICS_C = (char)0x14A1;
			public const char CANADIAN_SYLLABICS_CA = (char)0x1490;
			public const char CANADIAN_SYLLABICS_CAA = (char)0x1491;
			public const char CANADIAN_SYLLABICS_CAAI = (char)0x148A;
			public const char CANADIAN_SYLLABICS_CARRIER_CHA = (char)0x1666;
			public const char CANADIAN_SYLLABICS_CARRIER_CHE = (char)0x1663;
			public const char CANADIAN_SYLLABICS_CARRIER_CHEE = (char)0x1664;
			public const char CANADIAN_SYLLABICS_CARRIER_CHI = (char)0x1665;
			public const char CANADIAN_SYLLABICS_CARRIER_CHO = (char)0x1662;
			public const char CANADIAN_SYLLABICS_CARRIER_CHU = (char)0x1661;
			public const char CANADIAN_SYLLABICS_CARRIER_DEE = (char)0x1453;
			public const char CANADIAN_SYLLABICS_CARRIER_DI = (char)0x1454;
			public const char CANADIAN_SYLLABICS_CARRIER_DLA = (char)0x162D;
			public const char CANADIAN_SYLLABICS_CARRIER_DLE = (char)0x162A;
			public const char CANADIAN_SYLLABICS_CARRIER_DLEE = (char)0x162B;
			public const char CANADIAN_SYLLABICS_CARRIER_DLI = (char)0x162C;
			public const char CANADIAN_SYLLABICS_CARRIER_DLO = (char)0x1629;
			public const char CANADIAN_SYLLABICS_CARRIER_DLU = (char)0x1628;
			public const char CANADIAN_SYLLABICS_CARRIER_DZA = (char)0x164D;
			public const char CANADIAN_SYLLABICS_CARRIER_DZE = (char)0x164A;
			public const char CANADIAN_SYLLABICS_CARRIER_DZEE = (char)0x164B;
			public const char CANADIAN_SYLLABICS_CARRIER_DZI = (char)0x164C;
			public const char CANADIAN_SYLLABICS_CARRIER_DZO = (char)0x1649;
			public const char CANADIAN_SYLLABICS_CARRIER_DZU = (char)0x1648;
			public const char CANADIAN_SYLLABICS_CARRIER_EE = (char)0x1408;
			public const char CANADIAN_SYLLABICS_CARRIER_GA = (char)0x15F4;
			public const char CANADIAN_SYLLABICS_CARRIER_GE = (char)0x15F1;
			public const char CANADIAN_SYLLABICS_CARRIER_GEE = (char)0x15F2;
			public const char CANADIAN_SYLLABICS_CARRIER_GHA = (char)0x15C9;
			public const char CANADIAN_SYLLABICS_CARRIER_GHE = (char)0x15C6;
			public const char CANADIAN_SYLLABICS_CARRIER_GHEE = (char)0x15C7;
			public const char CANADIAN_SYLLABICS_CARRIER_GHI = (char)0x15C8;
			public const char CANADIAN_SYLLABICS_CARRIER_GHO = (char)0x15C5;
			public const char CANADIAN_SYLLABICS_CARRIER_GHU = (char)0x15C4;
			public const char CANADIAN_SYLLABICS_CARRIER_GI = (char)0x15F3;
			public const char CANADIAN_SYLLABICS_CARRIER_GO = (char)0x15F0;
			public const char CANADIAN_SYLLABICS_CARRIER_GU = (char)0x15EF;
			public const char CANADIAN_SYLLABICS_CARRIER_H = (char)0x144B;
			public const char CANADIAN_SYLLABICS_CARRIER_HEE = (char)0x1436;
			public const char CANADIAN_SYLLABICS_CARRIER_HI = (char)0x1437;
			public const char CANADIAN_SYLLABICS_CARRIER_HWA = (char)0x15DB;
			public const char CANADIAN_SYLLABICS_CARRIER_HWE = (char)0x15D8;
			public const char CANADIAN_SYLLABICS_CARRIER_HWEE = (char)0x15D9;
			public const char CANADIAN_SYLLABICS_CARRIER_HWI = (char)0x15DA;
			public const char CANADIAN_SYLLABICS_CARRIER_HWO = (char)0x15D7;
			public const char CANADIAN_SYLLABICS_CARRIER_HWU = (char)0x15D6;
			public const char CANADIAN_SYLLABICS_CARRIER_I = (char)0x1409;
			public const char CANADIAN_SYLLABICS_CARRIER_INITIAL_Z = (char)0x1647;
			public const char CANADIAN_SYLLABICS_CARRIER_JA = (char)0x161B;
			public const char CANADIAN_SYLLABICS_CARRIER_JE = (char)0x1617;
			public const char CANADIAN_SYLLABICS_CARRIER_JEE = (char)0x1618;
			public const char CANADIAN_SYLLABICS_CARRIER_JI = (char)0x1619;
			public const char CANADIAN_SYLLABICS_CARRIER_JJA = (char)0x1621;
			public const char CANADIAN_SYLLABICS_CARRIER_JJE = (char)0x161E;
			public const char CANADIAN_SYLLABICS_CARRIER_JJEE = (char)0x161F;
			public const char CANADIAN_SYLLABICS_CARRIER_JJI = (char)0x1620;
			public const char CANADIAN_SYLLABICS_CARRIER_JJO = (char)0x161D;
			public const char CANADIAN_SYLLABICS_CARRIER_JJU = (char)0x161C;
			public const char CANADIAN_SYLLABICS_CARRIER_JO = (char)0x1616;
			public const char CANADIAN_SYLLABICS_CARRIER_JU = (char)0x1614;
			public const char CANADIAN_SYLLABICS_CARRIER_KHA = (char)0x15FA;
			public const char CANADIAN_SYLLABICS_CARRIER_KHE = (char)0x15F7;
			public const char CANADIAN_SYLLABICS_CARRIER_KHEE = (char)0x15F8;
			public const char CANADIAN_SYLLABICS_CARRIER_KHI = (char)0x15F9;
			public const char CANADIAN_SYLLABICS_CARRIER_KHO = (char)0x15F6;
			public const char CANADIAN_SYLLABICS_CARRIER_KHU = (char)0x15F5;
			public const char CANADIAN_SYLLABICS_CARRIER_KK = (char)0x1601;
			public const char CANADIAN_SYLLABICS_CARRIER_KKA = (char)0x1600;
			public const char CANADIAN_SYLLABICS_CARRIER_KKE = (char)0x15FD;
			public const char CANADIAN_SYLLABICS_CARRIER_KKEE = (char)0x15FE;
			public const char CANADIAN_SYLLABICS_CARRIER_KKI = (char)0x15FF;
			public const char CANADIAN_SYLLABICS_CARRIER_KKO = (char)0x15FC;
			public const char CANADIAN_SYLLABICS_CARRIER_KKU = (char)0x15FB;
			public const char CANADIAN_SYLLABICS_CARRIER_LA = (char)0x1627;
			public const char CANADIAN_SYLLABICS_CARRIER_LE = (char)0x1624;
			public const char CANADIAN_SYLLABICS_CARRIER_LEE = (char)0x1625;
			public const char CANADIAN_SYLLABICS_CARRIER_LHA = (char)0x1633;
			public const char CANADIAN_SYLLABICS_CARRIER_LHE = (char)0x1630;
			public const char CANADIAN_SYLLABICS_CARRIER_LHEE = (char)0x1631;
			public const char CANADIAN_SYLLABICS_CARRIER_LHI = (char)0x1632;
			public const char CANADIAN_SYLLABICS_CARRIER_LHO = (char)0x162F;
			public const char CANADIAN_SYLLABICS_CARRIER_LHU = (char)0x162E;
			public const char CANADIAN_SYLLABICS_CARRIER_LI = (char)0x1626;
			public const char CANADIAN_SYLLABICS_CARRIER_LO = (char)0x1623;
			public const char CANADIAN_SYLLABICS_CARRIER_LU = (char)0x1622;
			public const char CANADIAN_SYLLABICS_CARRIER_MA = (char)0x160D;
			public const char CANADIAN_SYLLABICS_CARRIER_ME = (char)0x160A;
			public const char CANADIAN_SYLLABICS_CARRIER_MEE = (char)0x160B;
			public const char CANADIAN_SYLLABICS_CARRIER_MI = (char)0x160C;
			public const char CANADIAN_SYLLABICS_CARRIER_MO = (char)0x1609;
			public const char CANADIAN_SYLLABICS_CARRIER_MU = (char)0x1608;
			public const char CANADIAN_SYLLABICS_CARRIER_NA = (char)0x1607;
			public const char CANADIAN_SYLLABICS_CARRIER_NE = (char)0x1604;
			public const char CANADIAN_SYLLABICS_CARRIER_NEE = (char)0x1605;
			public const char CANADIAN_SYLLABICS_CARRIER_NG = (char)0x14D1;
			public const char CANADIAN_SYLLABICS_CARRIER_NI = (char)0x1606;
			public const char CANADIAN_SYLLABICS_CARRIER_NO = (char)0x1603;
			public const char CANADIAN_SYLLABICS_CARRIER_NU = (char)0x1602;
			public const char CANADIAN_SYLLABICS_CARRIER_P = (char)0x15EE;
			public const char CANADIAN_SYLLABICS_CARRIER_PA = (char)0x15ED;
			public const char CANADIAN_SYLLABICS_CARRIER_PE = (char)0x15EA;
			public const char CANADIAN_SYLLABICS_CARRIER_PEE = (char)0x15EB;
			public const char CANADIAN_SYLLABICS_CARRIER_PI = (char)0x15EC;
			public const char CANADIAN_SYLLABICS_CARRIER_PO = (char)0x15E9;
			public const char CANADIAN_SYLLABICS_CARRIER_PU = (char)0x15E8;
			public const char CANADIAN_SYLLABICS_CARRIER_RA = (char)0x15CF;
			public const char CANADIAN_SYLLABICS_CARRIER_RE = (char)0x15CC;
			public const char CANADIAN_SYLLABICS_CARRIER_REE = (char)0x15CD;
			public const char CANADIAN_SYLLABICS_CARRIER_RI = (char)0x15CE;
			public const char CANADIAN_SYLLABICS_CARRIER_RO = (char)0x15CB;
			public const char CANADIAN_SYLLABICS_CARRIER_RU = (char)0x15CA;
			public const char CANADIAN_SYLLABICS_CARRIER_SA = (char)0x1653;
			public const char CANADIAN_SYLLABICS_CARRIER_SE = (char)0x1650;
			public const char CANADIAN_SYLLABICS_CARRIER_SEE = (char)0x1651;
			public const char CANADIAN_SYLLABICS_CARRIER_SH = (char)0x165A;
			public const char CANADIAN_SYLLABICS_CARRIER_SHA = (char)0x1659;
			public const char CANADIAN_SYLLABICS_CARRIER_SHE = (char)0x1656;
			public const char CANADIAN_SYLLABICS_CARRIER_SHEE = (char)0x1657;
			public const char CANADIAN_SYLLABICS_CARRIER_SHI = (char)0x1658;
			public const char CANADIAN_SYLLABICS_CARRIER_SHO = (char)0x1655;
			public const char CANADIAN_SYLLABICS_CARRIER_SHU = (char)0x1654;
			public const char CANADIAN_SYLLABICS_CARRIER_SI = (char)0x1652;
			public const char CANADIAN_SYLLABICS_CARRIER_SO = (char)0x164F;
			public const char CANADIAN_SYLLABICS_CARRIER_SU = (char)0x164E;
			public const char CANADIAN_SYLLABICS_CARRIER_THA = (char)0x15E1;
			public const char CANADIAN_SYLLABICS_CARRIER_THE = (char)0x15DE;
			public const char CANADIAN_SYLLABICS_CARRIER_THEE = (char)0x15DF;
			public const char CANADIAN_SYLLABICS_CARRIER_THI = (char)0x15E0;
			public const char CANADIAN_SYLLABICS_CARRIER_THO = (char)0x15DD;
			public const char CANADIAN_SYLLABICS_CARRIER_THU = (char)0x15DC;
			public const char CANADIAN_SYLLABICS_CARRIER_TLA = (char)0x163F;
			public const char CANADIAN_SYLLABICS_CARRIER_TLE = (char)0x163C;
			public const char CANADIAN_SYLLABICS_CARRIER_TLEE = (char)0x163D;
			public const char CANADIAN_SYLLABICS_CARRIER_TLHA = (char)0x1639;
			public const char CANADIAN_SYLLABICS_CARRIER_TLHE = (char)0x1636;
			public const char CANADIAN_SYLLABICS_CARRIER_TLHEE = (char)0x1637;
			public const char CANADIAN_SYLLABICS_CARRIER_TLHI = (char)0x1638;
			public const char CANADIAN_SYLLABICS_CARRIER_TLHO = (char)0x1635;
			public const char CANADIAN_SYLLABICS_CARRIER_TLHU = (char)0x1634;
			public const char CANADIAN_SYLLABICS_CARRIER_TLI = (char)0x163E;
			public const char CANADIAN_SYLLABICS_CARRIER_TLO = (char)0x163B;
			public const char CANADIAN_SYLLABICS_CARRIER_TLU = (char)0x163A;
			public const char CANADIAN_SYLLABICS_CARRIER_TSA = (char)0x1660;
			public const char CANADIAN_SYLLABICS_CARRIER_TSE = (char)0x165D;
			public const char CANADIAN_SYLLABICS_CARRIER_TSEE = (char)0x165E;
			public const char CANADIAN_SYLLABICS_CARRIER_TSI = (char)0x165F;
			public const char CANADIAN_SYLLABICS_CARRIER_TSO = (char)0x165C;
			public const char CANADIAN_SYLLABICS_CARRIER_TSU = (char)0x165B;
			public const char CANADIAN_SYLLABICS_CARRIER_TTA = (char)0x15E7;
			public const char CANADIAN_SYLLABICS_CARRIER_TTE = (char)0x15E4;
			public const char CANADIAN_SYLLABICS_CARRIER_TTEE = (char)0x15E5;
			public const char CANADIAN_SYLLABICS_CARRIER_TTI = (char)0x15E6;
			public const char CANADIAN_SYLLABICS_CARRIER_TTO = (char)0x15E3;
			public const char CANADIAN_SYLLABICS_CARRIER_TTSA = (char)0x166C;
			public const char CANADIAN_SYLLABICS_CARRIER_TTSE = (char)0x1669;
			public const char CANADIAN_SYLLABICS_CARRIER_TTSEE = (char)0x166A;
			public const char CANADIAN_SYLLABICS_CARRIER_TTSI = (char)0x166B;
			public const char CANADIAN_SYLLABICS_CARRIER_TTSO = (char)0x1668;
			public const char CANADIAN_SYLLABICS_CARRIER_TTSU = (char)0x1667;
			public const char CANADIAN_SYLLABICS_CARRIER_TTU = (char)0x15E2;
			public const char CANADIAN_SYLLABICS_CARRIER_WA = (char)0x15D5;
			public const char CANADIAN_SYLLABICS_CARRIER_WE = (char)0x15D2;
			public const char CANADIAN_SYLLABICS_CARRIER_WEE = (char)0x15D3;
			public const char CANADIAN_SYLLABICS_CARRIER_WI = (char)0x15D4;
			public const char CANADIAN_SYLLABICS_CARRIER_WO = (char)0x15D1;
			public const char CANADIAN_SYLLABICS_CARRIER_WU = (char)0x15D0;
			public const char CANADIAN_SYLLABICS_CARRIER_YA = (char)0x1613;
			public const char CANADIAN_SYLLABICS_CARRIER_YE = (char)0x1610;
			public const char CANADIAN_SYLLABICS_CARRIER_YEE = (char)0x1611;
			public const char CANADIAN_SYLLABICS_CARRIER_YI = (char)0x1612;
			public const char CANADIAN_SYLLABICS_CARRIER_YO = (char)0x160F;
			public const char CANADIAN_SYLLABICS_CARRIER_YU = (char)0x160E;
			public const char CANADIAN_SYLLABICS_CARRIER_Z = (char)0x1646;
			public const char CANADIAN_SYLLABICS_CARRIER_ZA = (char)0x1645;
			public const char CANADIAN_SYLLABICS_CARRIER_ZE = (char)0x1642;
			public const char CANADIAN_SYLLABICS_CARRIER_ZEE = (char)0x1643;
			public const char CANADIAN_SYLLABICS_CARRIER_ZI = (char)0x1644;
			public const char CANADIAN_SYLLABICS_CARRIER_ZO = (char)0x1641;
			public const char CANADIAN_SYLLABICS_CARRIER_ZU = (char)0x1640;
			public const char CANADIAN_SYLLABICS_CE = (char)0x1489;
			public const char CANADIAN_SYLLABICS_CHI_SIGN = (char)0x166D;
			public const char CANADIAN_SYLLABICS_CI = (char)0x148B;
			public const char CANADIAN_SYLLABICS_CII = (char)0x148C;
			public const char CANADIAN_SYLLABICS_CO = (char)0x148D;
			public const char CANADIAN_SYLLABICS_COO = (char)0x148E;
			public const char CANADIAN_SYLLABICS_CWA = (char)0x149C;
			public const char CANADIAN_SYLLABICS_CWAA = (char)0x149E;
			public const char CANADIAN_SYLLABICS_CWE = (char)0x1492;
			public const char CANADIAN_SYLLABICS_CWI = (char)0x1494;
			public const char CANADIAN_SYLLABICS_CWII = (char)0x1496;
			public const char CANADIAN_SYLLABICS_CWO = (char)0x1498;
			public const char CANADIAN_SYLLABICS_CWOO = (char)0x149A;
			public const char CANADIAN_SYLLABICS_E = (char)0x1401;
			public const char CANADIAN_SYLLABICS_EN = (char)0x142B;
			public const char CANADIAN_SYLLABICS_F = (char)0x155D;
			public const char CANADIAN_SYLLABICS_FA = (char)0x1559;
			public const char CANADIAN_SYLLABICS_FAA = (char)0x155A;
			public const char CANADIAN_SYLLABICS_FAAI = (char)0x1554;
			public const char CANADIAN_SYLLABICS_FE = (char)0x1553;
			public const char CANADIAN_SYLLABICS_FI = (char)0x1555;
			public const char CANADIAN_SYLLABICS_FII = (char)0x1556;
			public const char CANADIAN_SYLLABICS_FINAL_ACUTE = (char)0x141F;
			public const char CANADIAN_SYLLABICS_FINAL_BOTTOM_HALF_RING = (char)0x1421;
			public const char CANADIAN_SYLLABICS_FINAL_DOUBLE_ACUTE = (char)0x1425;
			public const char CANADIAN_SYLLABICS_FINAL_DOUBLE_SHORT_VERTICAL_STROKES = (char)0x1426;
			public const char CANADIAN_SYLLABICS_FINAL_DOWN_TACK = (char)0x142A;
			public const char CANADIAN_SYLLABICS_FINAL_GRAVE = (char)0x1420;
			public const char CANADIAN_SYLLABICS_FINAL_MIDDLE_DOT = (char)0x1427;
			public const char CANADIAN_SYLLABICS_FINAL_PLUS = (char)0x1429;
			public const char CANADIAN_SYLLABICS_FINAL_RIGHT_HALF_RING = (char)0x1423;
			public const char CANADIAN_SYLLABICS_FINAL_RING = (char)0x1424;
			public const char CANADIAN_SYLLABICS_FINAL_SHORT_HORIZONTAL_STROKE = (char)0x1428;
			public const char CANADIAN_SYLLABICS_FINAL_TOP_HALF_RING = (char)0x1422;
			public const char CANADIAN_SYLLABICS_FO = (char)0x1557;
			public const char CANADIAN_SYLLABICS_FOO = (char)0x1558;
			public const char CANADIAN_SYLLABICS_FULL_STOP = (char)0x166E;
			public const char CANADIAN_SYLLABICS_FWAA = (char)0x155B;
			public const char CANADIAN_SYLLABICS_GLOTTAL_STOP = (char)0x141E;
			public const char CANADIAN_SYLLABICS_HK = (char)0x157D;
			public const char CANADIAN_SYLLABICS_I = (char)0x1403;
			public const char CANADIAN_SYLLABICS_II = (char)0x1404;
			public const char CANADIAN_SYLLABICS_IN = (char)0x142C;
			public const char CANADIAN_SYLLABICS_K = (char)0x1483;
			public const char CANADIAN_SYLLABICS_KA = (char)0x1472;
			public const char CANADIAN_SYLLABICS_KAA = (char)0x1473;
			public const char CANADIAN_SYLLABICS_KAAI = (char)0x146C;
			public const char CANADIAN_SYLLABICS_KE = (char)0x146B;
			public const char CANADIAN_SYLLABICS_KI = (char)0x146D;
			public const char CANADIAN_SYLLABICS_KII = (char)0x146E;
			public const char CANADIAN_SYLLABICS_KO = (char)0x146F;
			public const char CANADIAN_SYLLABICS_KOO = (char)0x1470;
			public const char CANADIAN_SYLLABICS_KW = (char)0x1484;
			public const char CANADIAN_SYLLABICS_KWA = (char)0x147E;
			public const char CANADIAN_SYLLABICS_KWAA = (char)0x1480;
			public const char CANADIAN_SYLLABICS_KWE = (char)0x1474;
			public const char CANADIAN_SYLLABICS_KWI = (char)0x1476;
			public const char CANADIAN_SYLLABICS_KWII = (char)0x1478;
			public const char CANADIAN_SYLLABICS_KWO = (char)0x147A;
			public const char CANADIAN_SYLLABICS_KWOO = (char)0x147C;
			public const char CANADIAN_SYLLABICS_L = (char)0x14EA;
			public const char CANADIAN_SYLLABICS_LA = (char)0x14DA;
			public const char CANADIAN_SYLLABICS_LAA = (char)0x14DB;
			public const char CANADIAN_SYLLABICS_LAAI = (char)0x14D4;
			public const char CANADIAN_SYLLABICS_LE = (char)0x14D3;
			public const char CANADIAN_SYLLABICS_LH = (char)0x15A6;
			public const char CANADIAN_SYLLABICS_LHA = (char)0x15A4;
			public const char CANADIAN_SYLLABICS_LHAA = (char)0x15A5;
			public const char CANADIAN_SYLLABICS_LHI = (char)0x15A0;
			public const char CANADIAN_SYLLABICS_LHII = (char)0x15A1;
			public const char CANADIAN_SYLLABICS_LHO = (char)0x15A2;
			public const char CANADIAN_SYLLABICS_LHOO = (char)0x15A3;
			public const char CANADIAN_SYLLABICS_LI = (char)0x14D5;
			public const char CANADIAN_SYLLABICS_LII = (char)0x14D6;
			public const char CANADIAN_SYLLABICS_LO = (char)0x14D7;
			public const char CANADIAN_SYLLABICS_LOO = (char)0x14D8;
			public const char CANADIAN_SYLLABICS_LWA = (char)0x14E6;
			public const char CANADIAN_SYLLABICS_LWAA = (char)0x14E8;
			public const char CANADIAN_SYLLABICS_LWE = (char)0x14DC;
			public const char CANADIAN_SYLLABICS_LWI = (char)0x14DE;
			public const char CANADIAN_SYLLABICS_LWII = (char)0x14E0;
			public const char CANADIAN_SYLLABICS_LWO = (char)0x14E2;
			public const char CANADIAN_SYLLABICS_LWOO = (char)0x14E4;
			public const char CANADIAN_SYLLABICS_M = (char)0x14BB;
			public const char CANADIAN_SYLLABICS_MA = (char)0x14AA;
			public const char CANADIAN_SYLLABICS_MAA = (char)0x14AB;
			public const char CANADIAN_SYLLABICS_MAAI = (char)0x14A4;
			public const char CANADIAN_SYLLABICS_ME = (char)0x14A3;
			public const char CANADIAN_SYLLABICS_MEDIAL_L = (char)0x14EC;
			public const char CANADIAN_SYLLABICS_MEDIAL_R = (char)0x1552;
			public const char CANADIAN_SYLLABICS_MH = (char)0x14BD;
			public const char CANADIAN_SYLLABICS_MI = (char)0x14A5;
			public const char CANADIAN_SYLLABICS_MII = (char)0x14A6;
			public const char CANADIAN_SYLLABICS_MO = (char)0x14A7;
			public const char CANADIAN_SYLLABICS_MOO = (char)0x14A8;
			public const char CANADIAN_SYLLABICS_MOOSE_CREE_SK = (char)0x1509;
			public const char CANADIAN_SYLLABICS_MWA = (char)0x14B6;
			public const char CANADIAN_SYLLABICS_MWAA = (char)0x14B8;
			public const char CANADIAN_SYLLABICS_MWE = (char)0x14AC;
			public const char CANADIAN_SYLLABICS_MWI = (char)0x14AE;
			public const char CANADIAN_SYLLABICS_MWII = (char)0x14B0;
			public const char CANADIAN_SYLLABICS_MWO = (char)0x14B2;
			public const char CANADIAN_SYLLABICS_MWOO = (char)0x14B4;
			public const char CANADIAN_SYLLABICS_N = (char)0x14D0;
			public const char CANADIAN_SYLLABICS_NA = (char)0x14C7;
			public const char CANADIAN_SYLLABICS_NAA = (char)0x14C8;
			public const char CANADIAN_SYLLABICS_NAAI = (char)0x14C1;
			public const char CANADIAN_SYLLABICS_NASKAPI_CWAA = (char)0x14A0;
			public const char CANADIAN_SYLLABICS_NASKAPI_KWAA = (char)0x1482;
			public const char CANADIAN_SYLLABICS_NASKAPI_MWAA = (char)0x14BA;
			public const char CANADIAN_SYLLABICS_NASKAPI_NWAA = (char)0x14CF;
			public const char CANADIAN_SYLLABICS_NASKAPI_SCWA = (char)0x150F;
			public const char CANADIAN_SYLLABICS_NASKAPI_SKW = (char)0x150A;
			public const char CANADIAN_SYLLABICS_NASKAPI_SKWA = (char)0x150E;
			public const char CANADIAN_SYLLABICS_NASKAPI_SPWA = (char)0x150C;
			public const char CANADIAN_SYLLABICS_NASKAPI_STWA = (char)0x150D;
			public const char CANADIAN_SYLLABICS_NASKAPI_SWAA = (char)0x1504;
			public const char CANADIAN_SYLLABICS_NASKAPI_S_W = (char)0x150B;
			public const char CANADIAN_SYLLABICS_NASKAPI_TWAA = (char)0x1465;
			public const char CANADIAN_SYLLABICS_NASKAPI_WAA = (char)0x141B;
			public const char CANADIAN_SYLLABICS_NASKAPI_WOO = (char)0x1416;
			public const char CANADIAN_SYLLABICS_NASKAPI_YWAA = (char)0x153D;
			public const char CANADIAN_SYLLABICS_NE = (char)0x14C0;
			public const char CANADIAN_SYLLABICS_NG = (char)0x1595;
			public const char CANADIAN_SYLLABICS_NGA = (char)0x1593;
			public const char CANADIAN_SYLLABICS_NGAA = (char)0x1594;
			public const char CANADIAN_SYLLABICS_NGAAI = (char)0x158E;
			public const char CANADIAN_SYLLABICS_NGAI = (char)0x1670;
			public const char CANADIAN_SYLLABICS_NGI = (char)0x158F;
			public const char CANADIAN_SYLLABICS_NGII = (char)0x1590;
			public const char CANADIAN_SYLLABICS_NGO = (char)0x1591;
			public const char CANADIAN_SYLLABICS_NGOO = (char)0x1592;
			public const char CANADIAN_SYLLABICS_NH = (char)0x14D2;
			public const char CANADIAN_SYLLABICS_NI = (char)0x14C2;
			public const char CANADIAN_SYLLABICS_NII = (char)0x14C3;
			public const char CANADIAN_SYLLABICS_NNG = (char)0x1596;
			public const char CANADIAN_SYLLABICS_NNGA = (char)0x1675;
			public const char CANADIAN_SYLLABICS_NNGAA = (char)0x1676;
			public const char CANADIAN_SYLLABICS_NNGI = (char)0x1671;
			public const char CANADIAN_SYLLABICS_NNGII = (char)0x1672;
			public const char CANADIAN_SYLLABICS_NNGO = (char)0x1673;
			public const char CANADIAN_SYLLABICS_NNGOO = (char)0x1674;
			public const char CANADIAN_SYLLABICS_NO = (char)0x14C4;
			public const char CANADIAN_SYLLABICS_NOO = (char)0x14C5;
			public const char CANADIAN_SYLLABICS_NUNAVIK_H = (char)0x157B;
			public const char CANADIAN_SYLLABICS_NUNAVIK_HA = (char)0x1579;
			public const char CANADIAN_SYLLABICS_NUNAVIK_HAA = (char)0x157A;
			public const char CANADIAN_SYLLABICS_NUNAVIK_HE = (char)0x1574;
			public const char CANADIAN_SYLLABICS_NUNAVIK_HI = (char)0x1575;
			public const char CANADIAN_SYLLABICS_NUNAVIK_HII = (char)0x1576;
			public const char CANADIAN_SYLLABICS_NUNAVIK_HO = (char)0x1577;
			public const char CANADIAN_SYLLABICS_NUNAVIK_HOO = (char)0x1578;
			public const char CANADIAN_SYLLABICS_NUNAVUT_H = (char)0x157C;
			public const char CANADIAN_SYLLABICS_NWA = (char)0x14CB;
			public const char CANADIAN_SYLLABICS_NWAA = (char)0x14CD;
			public const char CANADIAN_SYLLABICS_NWE = (char)0x14C9;
			public const char CANADIAN_SYLLABICS_N_CREE_THE = (char)0x155F;
			public const char CANADIAN_SYLLABICS_N_CREE_THI = (char)0x1561;
			public const char CANADIAN_SYLLABICS_N_CREE_THII = (char)0x1563;
			public const char CANADIAN_SYLLABICS_O = (char)0x1405;
			public const char CANADIAN_SYLLABICS_ON = (char)0x142D;
			public const char CANADIAN_SYLLABICS_OO = (char)0x1406;
			public const char CANADIAN_SYLLABICS_P = (char)0x1449;
			public const char CANADIAN_SYLLABICS_PA = (char)0x1438;
			public const char CANADIAN_SYLLABICS_PAA = (char)0x1439;
			public const char CANADIAN_SYLLABICS_PAAI = (char)0x1430;
			public const char CANADIAN_SYLLABICS_PE = (char)0x142F;
			public const char CANADIAN_SYLLABICS_PI = (char)0x1431;
			public const char CANADIAN_SYLLABICS_PII = (char)0x1432;
			public const char CANADIAN_SYLLABICS_PO = (char)0x1433;
			public const char CANADIAN_SYLLABICS_POO = (char)0x1434;
			public const char CANADIAN_SYLLABICS_PWA = (char)0x1444;
			public const char CANADIAN_SYLLABICS_PWAA = (char)0x1446;
			public const char CANADIAN_SYLLABICS_PWE = (char)0x143A;
			public const char CANADIAN_SYLLABICS_PWI = (char)0x143C;
			public const char CANADIAN_SYLLABICS_PWII = (char)0x143E;
			public const char CANADIAN_SYLLABICS_PWO = (char)0x1440;
			public const char CANADIAN_SYLLABICS_PWOO = (char)0x1442;
			public const char CANADIAN_SYLLABICS_Q = (char)0x1585;
			public const char CANADIAN_SYLLABICS_QA = (char)0x1583;
			public const char CANADIAN_SYLLABICS_QAA = (char)0x1584;
			public const char CANADIAN_SYLLABICS_QAAI = (char)0x157E;
			public const char CANADIAN_SYLLABICS_QAI = (char)0x166F;
			public const char CANADIAN_SYLLABICS_QI = (char)0x157F;
			public const char CANADIAN_SYLLABICS_QII = (char)0x1580;
			public const char CANADIAN_SYLLABICS_QO = (char)0x1581;
			public const char CANADIAN_SYLLABICS_QOO = (char)0x1582;
			public const char CANADIAN_SYLLABICS_R = (char)0x1550;
			public const char CANADIAN_SYLLABICS_RA = (char)0x154B;
			public const char CANADIAN_SYLLABICS_RAA = (char)0x154C;
			public const char CANADIAN_SYLLABICS_RAAI = (char)0x1545;
			public const char CANADIAN_SYLLABICS_RE = (char)0x1542;
			public const char CANADIAN_SYLLABICS_RI = (char)0x1546;
			public const char CANADIAN_SYLLABICS_RII = (char)0x1547;
			public const char CANADIAN_SYLLABICS_RO = (char)0x1548;
			public const char CANADIAN_SYLLABICS_ROO = (char)0x1549;
			public const char CANADIAN_SYLLABICS_RWAA = (char)0x154E;
			public const char CANADIAN_SYLLABICS_R_CREE_RE = (char)0x1543;
			public const char CANADIAN_SYLLABICS_S = (char)0x1505;
			public const char CANADIAN_SYLLABICS_SA = (char)0x14F4;
			public const char CANADIAN_SYLLABICS_SAA = (char)0x14F5;
			public const char CANADIAN_SYLLABICS_SAAI = (char)0x14EE;
			public const char CANADIAN_SYLLABICS_SAYISI_HA = (char)0x15C3;
			public const char CANADIAN_SYLLABICS_SAYISI_HE = (char)0x15C0;
			public const char CANADIAN_SYLLABICS_SAYISI_HI = (char)0x15C1;
			public const char CANADIAN_SYLLABICS_SAYISI_HO = (char)0x15C2;
			public const char CANADIAN_SYLLABICS_SAYISI_JI = (char)0x161A;
			public const char CANADIAN_SYLLABICS_SAYISI_JU = (char)0x1615;
			public const char CANADIAN_SYLLABICS_SAYISI_M = (char)0x14BF;
			public const char CANADIAN_SYLLABICS_SAYISI_SHA = (char)0x159A;
			public const char CANADIAN_SYLLABICS_SAYISI_SHE = (char)0x1597;
			public const char CANADIAN_SYLLABICS_SAYISI_SHI = (char)0x1598;
			public const char CANADIAN_SYLLABICS_SAYISI_SHO = (char)0x1599;
			public const char CANADIAN_SYLLABICS_SAYISI_TH = (char)0x14A2;
			public const char CANADIAN_SYLLABICS_SAYISI_YI = (char)0x1541;
			public const char CANADIAN_SYLLABICS_SE = (char)0x14ED;
			public const char CANADIAN_SYLLABICS_SH = (char)0x1525;
			public const char CANADIAN_SYLLABICS_SHA = (char)0x1515;
			public const char CANADIAN_SYLLABICS_SHAA = (char)0x1516;
			public const char CANADIAN_SYLLABICS_SHE = (char)0x1510;
			public const char CANADIAN_SYLLABICS_SHI = (char)0x1511;
			public const char CANADIAN_SYLLABICS_SHII = (char)0x1512;
			public const char CANADIAN_SYLLABICS_SHO = (char)0x1513;
			public const char CANADIAN_SYLLABICS_SHOO = (char)0x1514;
			public const char CANADIAN_SYLLABICS_SHWA = (char)0x1521;
			public const char CANADIAN_SYLLABICS_SHWAA = (char)0x1523;
			public const char CANADIAN_SYLLABICS_SHWE = (char)0x1517;
			public const char CANADIAN_SYLLABICS_SHWI = (char)0x1519;
			public const char CANADIAN_SYLLABICS_SHWII = (char)0x151B;
			public const char CANADIAN_SYLLABICS_SHWO = (char)0x151D;
			public const char CANADIAN_SYLLABICS_SHWOO = (char)0x151F;
			public const char CANADIAN_SYLLABICS_SI = (char)0x14EF;
			public const char CANADIAN_SYLLABICS_SII = (char)0x14F0;
			public const char CANADIAN_SYLLABICS_SO = (char)0x14F1;
			public const char CANADIAN_SYLLABICS_SOO = (char)0x14F2;
			public const char CANADIAN_SYLLABICS_SOUTH_SLAVEY_KAH = (char)0x1488;
			public const char CANADIAN_SYLLABICS_SOUTH_SLAVEY_KEH = (char)0x1485;
			public const char CANADIAN_SYLLABICS_SOUTH_SLAVEY_KIH = (char)0x1486;
			public const char CANADIAN_SYLLABICS_SOUTH_SLAVEY_KOH = (char)0x1487;
			public const char CANADIAN_SYLLABICS_SW = (char)0x1507;
			public const char CANADIAN_SYLLABICS_SWA = (char)0x1500;
			public const char CANADIAN_SYLLABICS_SWAA = (char)0x1502;
			public const char CANADIAN_SYLLABICS_SWE = (char)0x14F6;
			public const char CANADIAN_SYLLABICS_SWI = (char)0x14F8;
			public const char CANADIAN_SYLLABICS_SWII = (char)0x14FA;
			public const char CANADIAN_SYLLABICS_SWO = (char)0x14FC;
			public const char CANADIAN_SYLLABICS_SWOO = (char)0x14FE;
			public const char CANADIAN_SYLLABICS_T = (char)0x1466;
			public const char CANADIAN_SYLLABICS_TA = (char)0x1455;
			public const char CANADIAN_SYLLABICS_TAA = (char)0x1456;
			public const char CANADIAN_SYLLABICS_TAAI = (char)0x144D;
			public const char CANADIAN_SYLLABICS_TE = (char)0x144C;
			public const char CANADIAN_SYLLABICS_TH = (char)0x156A;
			public const char CANADIAN_SYLLABICS_THA = (char)0x1566;
			public const char CANADIAN_SYLLABICS_THAA = (char)0x1567;
			public const char CANADIAN_SYLLABICS_THE = (char)0x155E;
			public const char CANADIAN_SYLLABICS_THI = (char)0x1560;
			public const char CANADIAN_SYLLABICS_THII = (char)0x1562;
			public const char CANADIAN_SYLLABICS_THO = (char)0x1564;
			public const char CANADIAN_SYLLABICS_THOO = (char)0x1565;
			public const char CANADIAN_SYLLABICS_THWAA = (char)0x1568;
			public const char CANADIAN_SYLLABICS_TH_CREE_TH = (char)0x15AE;
			public const char CANADIAN_SYLLABICS_TH_CREE_THA = (char)0x15AC;
			public const char CANADIAN_SYLLABICS_TH_CREE_THAA = (char)0x15AD;
			public const char CANADIAN_SYLLABICS_TH_CREE_THE = (char)0x15A7;
			public const char CANADIAN_SYLLABICS_TH_CREE_THI = (char)0x15A8;
			public const char CANADIAN_SYLLABICS_TH_CREE_THII = (char)0x15A9;
			public const char CANADIAN_SYLLABICS_TH_CREE_THO = (char)0x15AA;
			public const char CANADIAN_SYLLABICS_TH_CREE_THOO = (char)0x15AB;
			public const char CANADIAN_SYLLABICS_TI = (char)0x144E;
			public const char CANADIAN_SYLLABICS_TII = (char)0x144F;
			public const char CANADIAN_SYLLABICS_TLHA = (char)0x1589;
			public const char CANADIAN_SYLLABICS_TLHE = (char)0x1586;
			public const char CANADIAN_SYLLABICS_TLHI = (char)0x1587;
			public const char CANADIAN_SYLLABICS_TLHO = (char)0x1588;
			public const char CANADIAN_SYLLABICS_TO = (char)0x1450;
			public const char CANADIAN_SYLLABICS_TOO = (char)0x1451;
			public const char CANADIAN_SYLLABICS_TTA = (char)0x146A;
			public const char CANADIAN_SYLLABICS_TTE = (char)0x1467;
			public const char CANADIAN_SYLLABICS_TTH = (char)0x156F;
			public const char CANADIAN_SYLLABICS_TTHA = (char)0x156E;
			public const char CANADIAN_SYLLABICS_TTHE = (char)0x156B;
			public const char CANADIAN_SYLLABICS_TTHI = (char)0x156C;
			public const char CANADIAN_SYLLABICS_TTHO = (char)0x156D;
			public const char CANADIAN_SYLLABICS_TTI = (char)0x1468;
			public const char CANADIAN_SYLLABICS_TTO = (char)0x1469;
			public const char CANADIAN_SYLLABICS_TWA = (char)0x1461;
			public const char CANADIAN_SYLLABICS_TWAA = (char)0x1463;
			public const char CANADIAN_SYLLABICS_TWE = (char)0x1457;
			public const char CANADIAN_SYLLABICS_TWI = (char)0x1459;
			public const char CANADIAN_SYLLABICS_TWII = (char)0x145B;
			public const char CANADIAN_SYLLABICS_TWO = (char)0x145D;
			public const char CANADIAN_SYLLABICS_TWOO = (char)0x145F;
			public const char CANADIAN_SYLLABICS_TYA = (char)0x1573;
			public const char CANADIAN_SYLLABICS_TYE = (char)0x1570;
			public const char CANADIAN_SYLLABICS_TYI = (char)0x1571;
			public const char CANADIAN_SYLLABICS_TYO = (char)0x1572;
			public const char CANADIAN_SYLLABICS_WA = (char)0x1417;
			public const char CANADIAN_SYLLABICS_WAA = (char)0x1419;
			public const char CANADIAN_SYLLABICS_WE = (char)0x140C;
			public const char CANADIAN_SYLLABICS_WEST_CREE_CWA = (char)0x149D;
			public const char CANADIAN_SYLLABICS_WEST_CREE_CWAA = (char)0x149F;
			public const char CANADIAN_SYLLABICS_WEST_CREE_CWE = (char)0x1493;
			public const char CANADIAN_SYLLABICS_WEST_CREE_CWI = (char)0x1495;
			public const char CANADIAN_SYLLABICS_WEST_CREE_CWII = (char)0x1497;
			public const char CANADIAN_SYLLABICS_WEST_CREE_CWO = (char)0x1499;
			public const char CANADIAN_SYLLABICS_WEST_CREE_CWOO = (char)0x149B;
			public const char CANADIAN_SYLLABICS_WEST_CREE_FWAA = (char)0x155C;
			public const char CANADIAN_SYLLABICS_WEST_CREE_KWA = (char)0x147F;
			public const char CANADIAN_SYLLABICS_WEST_CREE_KWAA = (char)0x1481;
			public const char CANADIAN_SYLLABICS_WEST_CREE_KWE = (char)0x1475;
			public const char CANADIAN_SYLLABICS_WEST_CREE_KWI = (char)0x1477;
			public const char CANADIAN_SYLLABICS_WEST_CREE_KWII = (char)0x1479;
			public const char CANADIAN_SYLLABICS_WEST_CREE_KWO = (char)0x147B;
			public const char CANADIAN_SYLLABICS_WEST_CREE_KWOO = (char)0x147D;
			public const char CANADIAN_SYLLABICS_WEST_CREE_L = (char)0x14EB;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LA = (char)0x154D;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LE = (char)0x1544;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LO = (char)0x154A;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LWA = (char)0x14E7;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LWAA = (char)0x14E9;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LWE = (char)0x14DD;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LWI = (char)0x14DF;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LWII = (char)0x14E1;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LWO = (char)0x14E3;
			public const char CANADIAN_SYLLABICS_WEST_CREE_LWOO = (char)0x14E5;
			public const char CANADIAN_SYLLABICS_WEST_CREE_M = (char)0x14BC;
			public const char CANADIAN_SYLLABICS_WEST_CREE_MWA = (char)0x14B7;
			public const char CANADIAN_SYLLABICS_WEST_CREE_MWAA = (char)0x14B9;
			public const char CANADIAN_SYLLABICS_WEST_CREE_MWE = (char)0x14AD;
			public const char CANADIAN_SYLLABICS_WEST_CREE_MWI = (char)0x14AF;
			public const char CANADIAN_SYLLABICS_WEST_CREE_MWII = (char)0x14B1;
			public const char CANADIAN_SYLLABICS_WEST_CREE_MWO = (char)0x14B3;
			public const char CANADIAN_SYLLABICS_WEST_CREE_MWOO = (char)0x14B5;
			public const char CANADIAN_SYLLABICS_WEST_CREE_NWA = (char)0x14CC;
			public const char CANADIAN_SYLLABICS_WEST_CREE_NWAA = (char)0x14CE;
			public const char CANADIAN_SYLLABICS_WEST_CREE_NWE = (char)0x14CA;
			public const char CANADIAN_SYLLABICS_WEST_CREE_P = (char)0x144A;
			public const char CANADIAN_SYLLABICS_WEST_CREE_PWA = (char)0x1445;
			public const char CANADIAN_SYLLABICS_WEST_CREE_PWAA = (char)0x1447;
			public const char CANADIAN_SYLLABICS_WEST_CREE_PWE = (char)0x143B;
			public const char CANADIAN_SYLLABICS_WEST_CREE_PWI = (char)0x143D;
			public const char CANADIAN_SYLLABICS_WEST_CREE_PWII = (char)0x143F;
			public const char CANADIAN_SYLLABICS_WEST_CREE_PWO = (char)0x1441;
			public const char CANADIAN_SYLLABICS_WEST_CREE_PWOO = (char)0x1443;
			public const char CANADIAN_SYLLABICS_WEST_CREE_R = (char)0x1551;
			public const char CANADIAN_SYLLABICS_WEST_CREE_RA = (char)0x158D;
			public const char CANADIAN_SYLLABICS_WEST_CREE_RE = (char)0x158A;
			public const char CANADIAN_SYLLABICS_WEST_CREE_RI = (char)0x158B;
			public const char CANADIAN_SYLLABICS_WEST_CREE_RO = (char)0x158C;
			public const char CANADIAN_SYLLABICS_WEST_CREE_RWAA = (char)0x154F;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SHWA = (char)0x1522;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SHWAA = (char)0x1524;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SHWE = (char)0x1518;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SHWI = (char)0x151A;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SHWII = (char)0x151C;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SHWO = (char)0x151E;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SHWOO = (char)0x1520;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SWA = (char)0x1501;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SWAA = (char)0x1503;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SWE = (char)0x14F7;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SWI = (char)0x14F9;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SWII = (char)0x14FB;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SWO = (char)0x14FD;
			public const char CANADIAN_SYLLABICS_WEST_CREE_SWOO = (char)0x14FF;
			public const char CANADIAN_SYLLABICS_WEST_CREE_THWAA = (char)0x1569;
			public const char CANADIAN_SYLLABICS_WEST_CREE_TWA = (char)0x1462;
			public const char CANADIAN_SYLLABICS_WEST_CREE_TWAA = (char)0x1464;
			public const char CANADIAN_SYLLABICS_WEST_CREE_TWE = (char)0x1458;
			public const char CANADIAN_SYLLABICS_WEST_CREE_TWI = (char)0x145A;
			public const char CANADIAN_SYLLABICS_WEST_CREE_TWII = (char)0x145C;
			public const char CANADIAN_SYLLABICS_WEST_CREE_TWO = (char)0x145E;
			public const char CANADIAN_SYLLABICS_WEST_CREE_TWOO = (char)0x1460;
			public const char CANADIAN_SYLLABICS_WEST_CREE_WA = (char)0x1418;
			public const char CANADIAN_SYLLABICS_WEST_CREE_WAA = (char)0x141A;
			public const char CANADIAN_SYLLABICS_WEST_CREE_WE = (char)0x140D;
			public const char CANADIAN_SYLLABICS_WEST_CREE_WI = (char)0x140F;
			public const char CANADIAN_SYLLABICS_WEST_CREE_WII = (char)0x1411;
			public const char CANADIAN_SYLLABICS_WEST_CREE_WO = (char)0x1413;
			public const char CANADIAN_SYLLABICS_WEST_CREE_WOO = (char)0x1415;
			public const char CANADIAN_SYLLABICS_WEST_CREE_Y = (char)0x1540;
			public const char CANADIAN_SYLLABICS_WEST_CREE_YWA = (char)0x153A;
			public const char CANADIAN_SYLLABICS_WEST_CREE_YWAA = (char)0x153C;
			public const char CANADIAN_SYLLABICS_WEST_CREE_YWE = (char)0x1530;
			public const char CANADIAN_SYLLABICS_WEST_CREE_YWI = (char)0x1532;
			public const char CANADIAN_SYLLABICS_WEST_CREE_YWII = (char)0x1534;
			public const char CANADIAN_SYLLABICS_WEST_CREE_YWO = (char)0x1536;
			public const char CANADIAN_SYLLABICS_WEST_CREE_YWOO = (char)0x1538;
			public const char CANADIAN_SYLLABICS_WI = (char)0x140E;
			public const char CANADIAN_SYLLABICS_WII = (char)0x1410;
			public const char CANADIAN_SYLLABICS_WO = (char)0x1412;
			public const char CANADIAN_SYLLABICS_WOO = (char)0x1414;
			public const char CANADIAN_SYLLABICS_WOODS_CREE_TH = (char)0x159F;
			public const char CANADIAN_SYLLABICS_WOODS_CREE_THA = (char)0x159E;
			public const char CANADIAN_SYLLABICS_WOODS_CREE_THE = (char)0x159B;
			public const char CANADIAN_SYLLABICS_WOODS_CREE_THI = (char)0x159C;
			public const char CANADIAN_SYLLABICS_WOODS_CREE_THO = (char)0x159D;
			public const char CANADIAN_SYLLABICS_Y = (char)0x153E;
			public const char CANADIAN_SYLLABICS_YA = (char)0x152D;
			public const char CANADIAN_SYLLABICS_YAA = (char)0x152E;
			public const char CANADIAN_SYLLABICS_YAAI = (char)0x1527;
			public const char CANADIAN_SYLLABICS_YE = (char)0x1526;
			public const char CANADIAN_SYLLABICS_YI = (char)0x1528;
			public const char CANADIAN_SYLLABICS_YII = (char)0x1529;
			public const char CANADIAN_SYLLABICS_YO = (char)0x152A;
			public const char CANADIAN_SYLLABICS_YOO = (char)0x152B;
			public const char CANADIAN_SYLLABICS_YWA = (char)0x1539;
			public const char CANADIAN_SYLLABICS_YWAA = (char)0x153B;
			public const char CANADIAN_SYLLABICS_YWE = (char)0x152F;
			public const char CANADIAN_SYLLABICS_YWI = (char)0x1531;
			public const char CANADIAN_SYLLABICS_YWII = (char)0x1533;
			public const char CANADIAN_SYLLABICS_YWO = (char)0x1535;
			public const char CANADIAN_SYLLABICS_YWOO = (char)0x1537;
			public const char CANADIAN_SYLLABICS_Y_CREE_COO = (char)0x148F;
			public const char CANADIAN_SYLLABICS_Y_CREE_KOO = (char)0x1471;
			public const char CANADIAN_SYLLABICS_Y_CREE_LOO = (char)0x14D9;
			public const char CANADIAN_SYLLABICS_Y_CREE_MOO = (char)0x14A9;
			public const char CANADIAN_SYLLABICS_Y_CREE_NOO = (char)0x14C6;
			public const char CANADIAN_SYLLABICS_Y_CREE_OO = (char)0x1407;
			public const char CANADIAN_SYLLABICS_Y_CREE_POO = (char)0x1435;
			public const char CANADIAN_SYLLABICS_Y_CREE_PWAA = (char)0x1448;
			public const char CANADIAN_SYLLABICS_Y_CREE_SOO = (char)0x14F3;
			public const char CANADIAN_SYLLABICS_Y_CREE_TOO = (char)0x1452;
			public const char CANADIAN_SYLLABICS_Y_CREE_W = (char)0x141D;
			public const char CANADIAN_SYLLABICS_Y_CREE_YOO = (char)0x152C;
			public const char CANCER = (char)0x264B;
			public const char CAPRICORN = (char)0x2651;
			public const char CARET = (char)0x2038;
			public const char CARET_INSERTION_POINT = (char)0x2041;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CARE_OF = (char)0x2105;
			/// <summary> Formerly MODIFIER LETTER HACEK. </summary>
			public const char CARON = (char)0x02C7;
			public const char CAUTION_SIGN = (char)0x2621;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING CEDILLA. </summary>
			public const char CEDILLA = (char)0x00B8;
			public const char CEDI_SIGN = (char)0x20B5;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING CENTERLINE UNDERSCORE. </summary>
			public const char CENTRELINE_LOW_LINE = (char)0xFE4E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING CENTERLINE OVERSCORE. </summary>
			public const char CENTRELINE_OVERLINE = (char)0xFE4A;
			/// <summary> Formerly C L SYMBOL. </summary>
			public const char CENTRE_LINE_SYMBOL = (char)0x2104;
			public const char CENT_SIGN = (char)0x00A2;
			public const char CHARACTER_TIE = (char)0x2040;
			public const char CHECK_MARK = (char)0x2713;
			public const char CHEROKEE_LETTER_A = (char)0x13A0;
			public const char CHEROKEE_LETTER_DA = (char)0x13D3;
			public const char CHEROKEE_LETTER_DE = (char)0x13D5;
			public const char CHEROKEE_LETTER_DI = (char)0x13D7;
			public const char CHEROKEE_LETTER_DLA = (char)0x13DC;
			public const char CHEROKEE_LETTER_DO = (char)0x13D9;
			public const char CHEROKEE_LETTER_DU = (char)0x13DA;
			public const char CHEROKEE_LETTER_DV = (char)0x13DB;
			public const char CHEROKEE_LETTER_E = (char)0x13A1;
			public const char CHEROKEE_LETTER_GA = (char)0x13A6;
			public const char CHEROKEE_LETTER_GE = (char)0x13A8;
			public const char CHEROKEE_LETTER_GI = (char)0x13A9;
			public const char CHEROKEE_LETTER_GO = (char)0x13AA;
			public const char CHEROKEE_LETTER_GU = (char)0x13AB;
			public const char CHEROKEE_LETTER_GV = (char)0x13AC;
			public const char CHEROKEE_LETTER_HA = (char)0x13AD;
			public const char CHEROKEE_LETTER_HE = (char)0x13AE;
			public const char CHEROKEE_LETTER_HI = (char)0x13AF;
			public const char CHEROKEE_LETTER_HNA = (char)0x13BF;
			public const char CHEROKEE_LETTER_HO = (char)0x13B0;
			public const char CHEROKEE_LETTER_HU = (char)0x13B1;
			public const char CHEROKEE_LETTER_HV = (char)0x13B2;
			public const char CHEROKEE_LETTER_I = (char)0x13A2;
			public const char CHEROKEE_LETTER_KA = (char)0x13A7;
			public const char CHEROKEE_LETTER_LA = (char)0x13B3;
			public const char CHEROKEE_LETTER_LE = (char)0x13B4;
			public const char CHEROKEE_LETTER_LI = (char)0x13B5;
			public const char CHEROKEE_LETTER_LO = (char)0x13B6;
			public const char CHEROKEE_LETTER_LU = (char)0x13B7;
			public const char CHEROKEE_LETTER_LV = (char)0x13B8;
			public const char CHEROKEE_LETTER_MA = (char)0x13B9;
			public const char CHEROKEE_LETTER_ME = (char)0x13BA;
			public const char CHEROKEE_LETTER_MI = (char)0x13BB;
			public const char CHEROKEE_LETTER_MO = (char)0x13BC;
			public const char CHEROKEE_LETTER_MU = (char)0x13BD;
			public const char CHEROKEE_LETTER_NA = (char)0x13BE;
			public const char CHEROKEE_LETTER_NAH = (char)0x13C0;
			public const char CHEROKEE_LETTER_NE = (char)0x13C1;
			public const char CHEROKEE_LETTER_NI = (char)0x13C2;
			public const char CHEROKEE_LETTER_NO = (char)0x13C3;
			public const char CHEROKEE_LETTER_NU = (char)0x13C4;
			public const char CHEROKEE_LETTER_NV = (char)0x13C5;
			public const char CHEROKEE_LETTER_O = (char)0x13A3;
			public const char CHEROKEE_LETTER_QUA = (char)0x13C6;
			public const char CHEROKEE_LETTER_QUE = (char)0x13C7;
			public const char CHEROKEE_LETTER_QUI = (char)0x13C8;
			public const char CHEROKEE_LETTER_QUO = (char)0x13C9;
			public const char CHEROKEE_LETTER_QUU = (char)0x13CA;
			public const char CHEROKEE_LETTER_QUV = (char)0x13CB;
			public const char CHEROKEE_LETTER_S = (char)0x13CD;
			public const char CHEROKEE_LETTER_SA = (char)0x13CC;
			public const char CHEROKEE_LETTER_SE = (char)0x13CE;
			public const char CHEROKEE_LETTER_SI = (char)0x13CF;
			public const char CHEROKEE_LETTER_SO = (char)0x13D0;
			public const char CHEROKEE_LETTER_SU = (char)0x13D1;
			public const char CHEROKEE_LETTER_SV = (char)0x13D2;
			public const char CHEROKEE_LETTER_TA = (char)0x13D4;
			public const char CHEROKEE_LETTER_TE = (char)0x13D6;
			public const char CHEROKEE_LETTER_TI = (char)0x13D8;
			public const char CHEROKEE_LETTER_TLA = (char)0x13DD;
			public const char CHEROKEE_LETTER_TLE = (char)0x13DE;
			public const char CHEROKEE_LETTER_TLI = (char)0x13DF;
			public const char CHEROKEE_LETTER_TLO = (char)0x13E0;
			public const char CHEROKEE_LETTER_TLU = (char)0x13E1;
			public const char CHEROKEE_LETTER_TLV = (char)0x13E2;
			public const char CHEROKEE_LETTER_TSA = (char)0x13E3;
			public const char CHEROKEE_LETTER_TSE = (char)0x13E4;
			public const char CHEROKEE_LETTER_TSI = (char)0x13E5;
			public const char CHEROKEE_LETTER_TSO = (char)0x13E6;
			public const char CHEROKEE_LETTER_TSU = (char)0x13E7;
			public const char CHEROKEE_LETTER_TSV = (char)0x13E8;
			public const char CHEROKEE_LETTER_U = (char)0x13A4;
			public const char CHEROKEE_LETTER_V = (char)0x13A5;
			public const char CHEROKEE_LETTER_WA = (char)0x13E9;
			public const char CHEROKEE_LETTER_WE = (char)0x13EA;
			public const char CHEROKEE_LETTER_WI = (char)0x13EB;
			public const char CHEROKEE_LETTER_WO = (char)0x13EC;
			public const char CHEROKEE_LETTER_WU = (char)0x13ED;
			public const char CHEROKEE_LETTER_WV = (char)0x13EE;
			public const char CHEROKEE_LETTER_YA = (char)0x13EF;
			public const char CHEROKEE_LETTER_YE = (char)0x13F0;
			public const char CHEROKEE_LETTER_YI = (char)0x13F1;
			public const char CHEROKEE_LETTER_YO = (char)0x13F2;
			public const char CHEROKEE_LETTER_YU = (char)0x13F3;
			public const char CHEROKEE_LETTER_YV = (char)0x13F4;
			public const char CHI_RHO = (char)0x2627;
			public const char CIRCLED_ANTICLOCKWISE_ROTATED_DIVISION_SIGN = (char)0x29BC;
			public const char CIRCLED_ASTERISK_OPERATOR = (char)0x229B;
			public const char CIRCLED_BULLET = (char)0x29BF;
			public const char CIRCLED_DASH = (char)0x229D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_EIGHT = (char)0x2467;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_FIVE = (char)0x2464;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_FOUR = (char)0x2463;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_NINE = (char)0x2468;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_ONE = (char)0x2460;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_SEVEN = (char)0x2466;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_SIX = (char)0x2465;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_THREE = (char)0x2462;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_TWO = (char)0x2461;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_DIGIT_ZERO = (char)0x24EA;
			public const char CIRCLED_DIVISION_SIGN = (char)0x2A38;
			public const char CIRCLED_DIVISION_SLASH = (char)0x2298;
			public const char CIRCLED_DOT_OPERATOR = (char)0x2299;
			public const char CIRCLED_EQUALS = (char)0x229C;
			public const char CIRCLED_GREATER_THAN = (char)0x29C1;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL CIEUC. </summary>
			public const char CIRCLED_HANGUL_CHIEUCH = (char)0x3269;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL CA. </summary>
			public const char CIRCLED_HANGUL_CHIEUCH_A = (char)0x3277;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL JIEUJ. </summary>
			public const char CIRCLED_HANGUL_CIEUC = (char)0x3268;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL JA. </summary>
			public const char CIRCLED_HANGUL_CIEUC_A = (char)0x3276;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_HANGUL_HIEUH = (char)0x326D;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL HA. </summary>
			public const char CIRCLED_HANGUL_HIEUH_A = (char)0x327B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_HANGUL_IEUNG = (char)0x3267;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL A. </summary>
			public const char CIRCLED_HANGUL_IEUNG_A = (char)0x3275;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_HANGUL_IEUNG_U = (char)0x327E;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL KIYEOK. </summary>
			public const char CIRCLED_HANGUL_KHIEUKH = (char)0x326A;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL KA. </summary>
			public const char CIRCLED_HANGUL_KHIEUKH_A = (char)0x3278;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL GIYEOG. </summary>
			public const char CIRCLED_HANGUL_KIYEOK = (char)0x3260;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL GA. </summary>
			public const char CIRCLED_HANGUL_KIYEOK_A = (char)0x326E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_HANGUL_MIEUM = (char)0x3264;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL MA. </summary>
			public const char CIRCLED_HANGUL_MIEUM_A = (char)0x3272;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_HANGUL_NIEUN = (char)0x3261;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL NA. </summary>
			public const char CIRCLED_HANGUL_NIEUN_A = (char)0x326F;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL PIEUP. </summary>
			public const char CIRCLED_HANGUL_PHIEUPH = (char)0x326C;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL PA. </summary>
			public const char CIRCLED_HANGUL_PHIEUPH_A = (char)0x327A;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL BIEUB. </summary>
			public const char CIRCLED_HANGUL_PIEUP = (char)0x3265;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL BA. </summary>
			public const char CIRCLED_HANGUL_PIEUP_A = (char)0x3273;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL LIEUL. </summary>
			public const char CIRCLED_HANGUL_RIEUL = (char)0x3263;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL LA. </summary>
			public const char CIRCLED_HANGUL_RIEUL_A = (char)0x3271;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_HANGUL_SIOS = (char)0x3266;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL SA. </summary>
			public const char CIRCLED_HANGUL_SIOS_A = (char)0x3274;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL TIEUT. </summary>
			public const char CIRCLED_HANGUL_THIEUTH = (char)0x326B;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL TA. </summary>
			public const char CIRCLED_HANGUL_THIEUTH_A = (char)0x3279;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL DIGEUD. </summary>
			public const char CIRCLED_HANGUL_TIKEUT = (char)0x3262;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED HANGUL DA. </summary>
			public const char CIRCLED_HANGUL_TIKEUT_A = (char)0x3270;
			/// <summary> Formerly CIRCLED HEAVY WHITE RIGHT ARROW. </summary>
			public const char CIRCLED_HEAVY_WHITE_RIGHTWARDS_ARROW = (char)0x27B2;
			public const char CIRCLED_HORIZONTAL_BAR_WITH_NOTCH = (char)0x2389;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_ALLIANCE = (char)0x32AF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_ATTENTION = (char)0x329F;
			/// <summary> (This is a composition; consider avoiding.) Formerly CIRCLED IDEOGRAPH CENTER. </summary>
			public const char CIRCLED_IDEOGRAPH_CENTRE = (char)0x32A5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_CONGRATULATION = (char)0x3297;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_COPY = (char)0x32A2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_CORRECT = (char)0x32A3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_EARTH = (char)0x328F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_EIGHT = (char)0x3287;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_ENTERPRISE = (char)0x32AD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_EXCELLENT = (char)0x329D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_FEMALE = (char)0x329B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_FINANCIAL = (char)0x3296;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_FIRE = (char)0x328B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_FIVE = (char)0x3284;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_FOUR = (char)0x3283;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_HAVE = (char)0x3292;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_HIGH = (char)0x32A4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_ITEM = (char)0x32A0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_LABOR = (char)0x3298;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_LEFT = (char)0x32A7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_LOW = (char)0x32A6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_MALE = (char)0x329A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_MEDICINE = (char)0x32A9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_METAL = (char)0x328E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_MOON = (char)0x328A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_NAME = (char)0x3294;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_NIGHT = (char)0x32B0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_NINE = (char)0x3288;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_ONE = (char)0x3280;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_PRINT = (char)0x329E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_RELIGION = (char)0x32AA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_RESOURCE = (char)0x32AE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_REST = (char)0x32A1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_RIGHT = (char)0x32A8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_SECRET = (char)0x3299;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_SEVEN = (char)0x3286;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_SIX = (char)0x3285;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_SOCIETY = (char)0x3293;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_SPECIAL = (char)0x3295;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_STOCK = (char)0x3291;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_STUDY = (char)0x32AB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_SUITABLE = (char)0x329C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_SUN = (char)0x3290;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_SUPERVISE = (char)0x32AC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_TEN = (char)0x3289;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_THREE = (char)0x3282;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_TWO = (char)0x3281;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_WATER = (char)0x328C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_IDEOGRAPH_WOOD = (char)0x328D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_A = (char)0x32D0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_E = (char)0x32D3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_HA = (char)0x32E9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_HE = (char)0x32EC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_HI = (char)0x32EA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_HO = (char)0x32ED;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_HU = (char)0x32EB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_I = (char)0x32D1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_KA = (char)0x32D5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_KE = (char)0x32D8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_KI = (char)0x32D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_KO = (char)0x32D9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_KU = (char)0x32D7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_MA = (char)0x32EE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_ME = (char)0x32F1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_MI = (char)0x32EF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_MO = (char)0x32F2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_MU = (char)0x32F0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_NA = (char)0x32E4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_NE = (char)0x32E7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_NI = (char)0x32E5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_NO = (char)0x32E8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_NU = (char)0x32E6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_O = (char)0x32D4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_RA = (char)0x32F6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_RE = (char)0x32F9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_RI = (char)0x32F7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_RO = (char)0x32FA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_RU = (char)0x32F8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_SA = (char)0x32DA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_SE = (char)0x32DD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_SI = (char)0x32DB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_SO = (char)0x32DE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_SU = (char)0x32DC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_TA = (char)0x32DF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_TE = (char)0x32E2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_TI = (char)0x32E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_TO = (char)0x32E3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_TU = (char)0x32E1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_U = (char)0x32D2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_WA = (char)0x32FB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_WE = (char)0x32FD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_WI = (char)0x32FC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_WO = (char)0x32FE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_YA = (char)0x32F3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_YO = (char)0x32F5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KATAKANA_YU = (char)0x32F4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KOREAN_CHARACTER_CHAMKO = (char)0x327C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_KOREAN_CHARACTER_JUEUI = (char)0x327D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_A = (char)0x24B6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_B = (char)0x24B7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_C = (char)0x24B8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_D = (char)0x24B9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_E = (char)0x24BA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_F = (char)0x24BB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_G = (char)0x24BC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_H = (char)0x24BD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_I = (char)0x24BE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_J = (char)0x24BF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_K = (char)0x24C0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_L = (char)0x24C1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_M = (char)0x24C2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_N = (char)0x24C3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_O = (char)0x24C4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_P = (char)0x24C5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_Q = (char)0x24C6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_R = (char)0x24C7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_S = (char)0x24C8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_T = (char)0x24C9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_U = (char)0x24CA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_V = (char)0x24CB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_W = (char)0x24CC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_X = (char)0x24CD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_Y = (char)0x24CE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_CAPITAL_LETTER_Z = (char)0x24CF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_A = (char)0x24D0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_B = (char)0x24D1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_C = (char)0x24D2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_D = (char)0x24D3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_E = (char)0x24D4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_F = (char)0x24D5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_G = (char)0x24D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_H = (char)0x24D7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_I = (char)0x24D8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_J = (char)0x24D9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_K = (char)0x24DA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_L = (char)0x24DB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_M = (char)0x24DC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_N = (char)0x24DD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_O = (char)0x24DE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_P = (char)0x24DF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_Q = (char)0x24E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_R = (char)0x24E1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_S = (char)0x24E2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_T = (char)0x24E3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_U = (char)0x24E4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_V = (char)0x24E5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_W = (char)0x24E6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_X = (char)0x24E7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_Y = (char)0x24E8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_LATIN_SMALL_LETTER_Z = (char)0x24E9;
			public const char CIRCLED_LESS_THAN = (char)0x29C0;
			public const char CIRCLED_MINUS = (char)0x2296;
			public const char CIRCLED_MULTIPLICATION_SIGN_WITH_CIRCUMFLEX_ACCENT = (char)0x2A36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_EIGHTEEN = (char)0x2471;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_ELEVEN = (char)0x246A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FIFTEEN = (char)0x246E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FIFTY = (char)0x32BF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY = (char)0x32B5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_EIGHT = (char)0x32BD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_FIVE = (char)0x32BA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_FOUR = (char)0x32B9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_NINE = (char)0x32BE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_ONE = (char)0x32B6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_SEVEN = (char)0x32BC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_SIX = (char)0x32BB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_THREE = (char)0x32B8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FORTY_TWO = (char)0x32B7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_FOURTEEN = (char)0x246D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_NINETEEN = (char)0x2472;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_SEVENTEEN = (char)0x2470;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_SIXTEEN = (char)0x246F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TEN = (char)0x2469;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTEEN = (char)0x246C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY = (char)0x325A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_EIGHT = (char)0x32B3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_FIVE = (char)0x325F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_FOUR = (char)0x325E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_NINE = (char)0x32B4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_ONE = (char)0x325B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_SEVEN = (char)0x32B2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_SIX = (char)0x32B1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_THREE = (char)0x325D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_THIRTY_TWO = (char)0x325C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWELVE = (char)0x246B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY = (char)0x2473;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_EIGHT = (char)0x3258;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_FIVE = (char)0x3255;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_FOUR = (char)0x3254;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_NINE = (char)0x3259;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_ONE = (char)0x3251;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_SEVEN = (char)0x3257;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_SIX = (char)0x3256;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_THREE = (char)0x3253;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_NUMBER_TWENTY_TWO = (char)0x3252;
			/// <summary> Formerly CIRCLED OPEN CENTER EIGHT POINTED STAR. </summary>
			public const char CIRCLED_OPEN_CENTRE_EIGHT_POINTED_STAR = (char)0x2742;
			public const char CIRCLED_PARALLEL = (char)0x29B7;
			public const char CIRCLED_PERPENDICULAR = (char)0x29B9;
			public const char CIRCLED_PLUS = (char)0x2295;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CIRCLED_POSTAL_MARK = (char)0x3036;
			public const char CIRCLED_REVERSE_SOLIDUS = (char)0x29B8;
			public const char CIRCLED_RING_OPERATOR = (char)0x229A;
			public const char CIRCLED_TIMES = (char)0x2297;
			public const char CIRCLED_TRIANGLE_DOWN = (char)0x238A;
			public const char CIRCLED_VERTICAL_BAR = (char)0x29B6;
			public const char CIRCLED_WHITE_BULLET = (char)0x29BE;
			public const char CIRCLED_WHITE_STAR = (char)0x272A;
			public const char CIRCLE_DIVIDED_BY_HORIZONTAL_BAR_AND_TOP_HALF_DIVIDED_BY_VERTICAL_BAR = (char)0x29BA;
			public const char CIRCLE_WITH_ALL_BUT_UPPER_LEFT_QUADRANT_BLACK = (char)0x25D5;
			public const char CIRCLE_WITH_HORIZONTAL_BAR = (char)0x29B5;
			public const char CIRCLE_WITH_LEFT_HALF_BLACK = (char)0x25D0;
			public const char CIRCLE_WITH_LOWER_HALF_BLACK = (char)0x25D2;
			public const char CIRCLE_WITH_RIGHT_HALF_BLACK = (char)0x25D1;
			public const char CIRCLE_WITH_SMALL_CIRCLE_TO_THE_RIGHT = (char)0x29C2;
			public const char CIRCLE_WITH_SUPERIMPOSED_X = (char)0x29BB;
			public const char CIRCLE_WITH_TWO_HORIZONTAL_STROKES_TO_THE_RIGHT = (char)0x29C3;
			public const char CIRCLE_WITH_UPPER_HALF_BLACK = (char)0x25D3;
			public const char CIRCLE_WITH_UPPER_RIGHT_QUADRANT_BLACK = (char)0x25D4;
			public const char CIRCLE_WITH_VERTICAL_FILL = (char)0x25CD;
			public const char CIRCULATION_FUNCTION = (char)0x2A10;
			/// <summary> Formerly SPACING CIRCUMFLEX. </summary>
			public const char CIRCUMFLEX_ACCENT = (char)0x005E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F900 = (char)0xF900;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F901 = (char)0xF901;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F902 = (char)0xF902;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F903 = (char)0xF903;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F904 = (char)0xF904;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F905 = (char)0xF905;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F906 = (char)0xF906;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F907 = (char)0xF907;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F908 = (char)0xF908;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F909 = (char)0xF909;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F90A = (char)0xF90A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F90B = (char)0xF90B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F90C = (char)0xF90C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F90D = (char)0xF90D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F90E = (char)0xF90E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F90F = (char)0xF90F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F910 = (char)0xF910;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F911 = (char)0xF911;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F912 = (char)0xF912;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F913 = (char)0xF913;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F914 = (char)0xF914;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F915 = (char)0xF915;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F916 = (char)0xF916;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F917 = (char)0xF917;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F918 = (char)0xF918;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F919 = (char)0xF919;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F91A = (char)0xF91A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F91B = (char)0xF91B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F91C = (char)0xF91C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F91D = (char)0xF91D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F91E = (char)0xF91E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F91F = (char)0xF91F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F920 = (char)0xF920;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F921 = (char)0xF921;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F922 = (char)0xF922;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F923 = (char)0xF923;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F924 = (char)0xF924;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F925 = (char)0xF925;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F926 = (char)0xF926;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F927 = (char)0xF927;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F928 = (char)0xF928;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F929 = (char)0xF929;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F92A = (char)0xF92A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F92B = (char)0xF92B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F92C = (char)0xF92C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F92D = (char)0xF92D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F92E = (char)0xF92E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F92F = (char)0xF92F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F930 = (char)0xF930;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F931 = (char)0xF931;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F932 = (char)0xF932;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F933 = (char)0xF933;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F934 = (char)0xF934;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F935 = (char)0xF935;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F936 = (char)0xF936;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F937 = (char)0xF937;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F938 = (char)0xF938;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F939 = (char)0xF939;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F93A = (char)0xF93A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F93B = (char)0xF93B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F93C = (char)0xF93C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F93D = (char)0xF93D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F93E = (char)0xF93E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F93F = (char)0xF93F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F940 = (char)0xF940;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F941 = (char)0xF941;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F942 = (char)0xF942;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F943 = (char)0xF943;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F944 = (char)0xF944;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F945 = (char)0xF945;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F946 = (char)0xF946;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F947 = (char)0xF947;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F948 = (char)0xF948;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F949 = (char)0xF949;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F94A = (char)0xF94A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F94B = (char)0xF94B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F94C = (char)0xF94C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F94D = (char)0xF94D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F94E = (char)0xF94E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F94F = (char)0xF94F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F950 = (char)0xF950;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F951 = (char)0xF951;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F952 = (char)0xF952;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F953 = (char)0xF953;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F954 = (char)0xF954;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F955 = (char)0xF955;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F956 = (char)0xF956;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F957 = (char)0xF957;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F958 = (char)0xF958;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F959 = (char)0xF959;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F95A = (char)0xF95A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F95B = (char)0xF95B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F95C = (char)0xF95C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F95D = (char)0xF95D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F95E = (char)0xF95E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F95F = (char)0xF95F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F960 = (char)0xF960;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F961 = (char)0xF961;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F962 = (char)0xF962;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F963 = (char)0xF963;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F964 = (char)0xF964;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F965 = (char)0xF965;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F966 = (char)0xF966;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F967 = (char)0xF967;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F968 = (char)0xF968;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F969 = (char)0xF969;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F96A = (char)0xF96A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F96B = (char)0xF96B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F96C = (char)0xF96C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F96D = (char)0xF96D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F96E = (char)0xF96E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F96F = (char)0xF96F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F970 = (char)0xF970;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F971 = (char)0xF971;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F972 = (char)0xF972;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F973 = (char)0xF973;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F974 = (char)0xF974;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F975 = (char)0xF975;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F976 = (char)0xF976;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F977 = (char)0xF977;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F978 = (char)0xF978;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F979 = (char)0xF979;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F97A = (char)0xF97A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F97B = (char)0xF97B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F97C = (char)0xF97C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F97D = (char)0xF97D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F97E = (char)0xF97E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F97F = (char)0xF97F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F980 = (char)0xF980;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F981 = (char)0xF981;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F982 = (char)0xF982;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F983 = (char)0xF983;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F984 = (char)0xF984;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F985 = (char)0xF985;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F986 = (char)0xF986;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F987 = (char)0xF987;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F988 = (char)0xF988;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F989 = (char)0xF989;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F98A = (char)0xF98A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F98B = (char)0xF98B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F98C = (char)0xF98C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F98D = (char)0xF98D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F98E = (char)0xF98E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F98F = (char)0xF98F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F990 = (char)0xF990;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F991 = (char)0xF991;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F992 = (char)0xF992;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F993 = (char)0xF993;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F994 = (char)0xF994;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F995 = (char)0xF995;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F996 = (char)0xF996;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F997 = (char)0xF997;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F998 = (char)0xF998;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F999 = (char)0xF999;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F99A = (char)0xF99A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F99B = (char)0xF99B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F99C = (char)0xF99C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F99D = (char)0xF99D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F99E = (char)0xF99E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F99F = (char)0xF99F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A0 = (char)0xF9A0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A1 = (char)0xF9A1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A2 = (char)0xF9A2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A3 = (char)0xF9A3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A4 = (char)0xF9A4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A5 = (char)0xF9A5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A6 = (char)0xF9A6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A7 = (char)0xF9A7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A8 = (char)0xF9A8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9A9 = (char)0xF9A9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9AA = (char)0xF9AA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9AB = (char)0xF9AB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9AC = (char)0xF9AC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9AD = (char)0xF9AD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9AE = (char)0xF9AE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9AF = (char)0xF9AF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B0 = (char)0xF9B0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B1 = (char)0xF9B1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B2 = (char)0xF9B2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B3 = (char)0xF9B3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B4 = (char)0xF9B4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B5 = (char)0xF9B5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B6 = (char)0xF9B6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B7 = (char)0xF9B7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B8 = (char)0xF9B8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9B9 = (char)0xF9B9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9BA = (char)0xF9BA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9BB = (char)0xF9BB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9BC = (char)0xF9BC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9BD = (char)0xF9BD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9BE = (char)0xF9BE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9BF = (char)0xF9BF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C0 = (char)0xF9C0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C1 = (char)0xF9C1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C2 = (char)0xF9C2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C3 = (char)0xF9C3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C4 = (char)0xF9C4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C5 = (char)0xF9C5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C6 = (char)0xF9C6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C7 = (char)0xF9C7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C8 = (char)0xF9C8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9C9 = (char)0xF9C9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9CA = (char)0xF9CA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9CB = (char)0xF9CB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9CC = (char)0xF9CC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9CD = (char)0xF9CD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9CE = (char)0xF9CE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9CF = (char)0xF9CF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D0 = (char)0xF9D0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D1 = (char)0xF9D1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D2 = (char)0xF9D2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D3 = (char)0xF9D3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D4 = (char)0xF9D4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D5 = (char)0xF9D5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D6 = (char)0xF9D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D7 = (char)0xF9D7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D8 = (char)0xF9D8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9D9 = (char)0xF9D9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9DA = (char)0xF9DA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9DB = (char)0xF9DB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9DC = (char)0xF9DC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9DD = (char)0xF9DD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9DE = (char)0xF9DE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9DF = (char)0xF9DF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E0 = (char)0xF9E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E1 = (char)0xF9E1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E2 = (char)0xF9E2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E3 = (char)0xF9E3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E4 = (char)0xF9E4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E5 = (char)0xF9E5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E6 = (char)0xF9E6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E7 = (char)0xF9E7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E8 = (char)0xF9E8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9E9 = (char)0xF9E9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9EA = (char)0xF9EA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9EB = (char)0xF9EB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9EC = (char)0xF9EC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9ED = (char)0xF9ED;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9EE = (char)0xF9EE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9EF = (char)0xF9EF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F0 = (char)0xF9F0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F1 = (char)0xF9F1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F2 = (char)0xF9F2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F3 = (char)0xF9F3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F4 = (char)0xF9F4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F5 = (char)0xF9F5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F6 = (char)0xF9F6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F7 = (char)0xF9F7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F8 = (char)0xF9F8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9F9 = (char)0xF9F9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9FA = (char)0xF9FA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9FB = (char)0xF9FB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9FC = (char)0xF9FC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9FD = (char)0xF9FD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9FE = (char)0xF9FE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_F9FF = (char)0xF9FF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA00 = (char)0xFA00;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA01 = (char)0xFA01;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA02 = (char)0xFA02;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA03 = (char)0xFA03;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA04 = (char)0xFA04;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA05 = (char)0xFA05;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA06 = (char)0xFA06;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA07 = (char)0xFA07;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA08 = (char)0xFA08;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA09 = (char)0xFA09;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA0A = (char)0xFA0A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA0B = (char)0xFA0B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA0C = (char)0xFA0C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA0D = (char)0xFA0D;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA0E = (char)0xFA0E;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA0F = (char)0xFA0F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA10 = (char)0xFA10;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA11 = (char)0xFA11;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA12 = (char)0xFA12;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA13 = (char)0xFA13;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA14 = (char)0xFA14;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA15 = (char)0xFA15;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA16 = (char)0xFA16;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA17 = (char)0xFA17;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA18 = (char)0xFA18;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA19 = (char)0xFA19;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA1A = (char)0xFA1A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA1B = (char)0xFA1B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA1C = (char)0xFA1C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA1D = (char)0xFA1D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA1E = (char)0xFA1E;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA1F = (char)0xFA1F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA20 = (char)0xFA20;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA21 = (char)0xFA21;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA22 = (char)0xFA22;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA23 = (char)0xFA23;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA24 = (char)0xFA24;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA25 = (char)0xFA25;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA26 = (char)0xFA26;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA27 = (char)0xFA27;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA28 = (char)0xFA28;
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA29 = (char)0xFA29;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA2A = (char)0xFA2A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA2B = (char)0xFA2B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA2C = (char)0xFA2C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA2D = (char)0xFA2D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA30 = (char)0xFA30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA31 = (char)0xFA31;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA32 = (char)0xFA32;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA33 = (char)0xFA33;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA34 = (char)0xFA34;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA35 = (char)0xFA35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA36 = (char)0xFA36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA37 = (char)0xFA37;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA38 = (char)0xFA38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA39 = (char)0xFA39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA3A = (char)0xFA3A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA3B = (char)0xFA3B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA3C = (char)0xFA3C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA3D = (char)0xFA3D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA3E = (char)0xFA3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA3F = (char)0xFA3F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA40 = (char)0xFA40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA41 = (char)0xFA41;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA42 = (char)0xFA42;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA43 = (char)0xFA43;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA44 = (char)0xFA44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA45 = (char)0xFA45;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA46 = (char)0xFA46;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA47 = (char)0xFA47;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA48 = (char)0xFA48;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA49 = (char)0xFA49;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA4A = (char)0xFA4A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA4B = (char)0xFA4B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA4C = (char)0xFA4C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA4D = (char)0xFA4D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA4E = (char)0xFA4E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA4F = (char)0xFA4F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA50 = (char)0xFA50;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA51 = (char)0xFA51;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA52 = (char)0xFA52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA53 = (char)0xFA53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA54 = (char)0xFA54;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA55 = (char)0xFA55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA56 = (char)0xFA56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA57 = (char)0xFA57;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA58 = (char)0xFA58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA59 = (char)0xFA59;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA5A = (char)0xFA5A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA5B = (char)0xFA5B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA5C = (char)0xFA5C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA5D = (char)0xFA5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA5E = (char)0xFA5E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA5F = (char)0xFA5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA60 = (char)0xFA60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA61 = (char)0xFA61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA62 = (char)0xFA62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA63 = (char)0xFA63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA64 = (char)0xFA64;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA65 = (char)0xFA65;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA66 = (char)0xFA66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA67 = (char)0xFA67;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA68 = (char)0xFA68;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA69 = (char)0xFA69;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA6A = (char)0xFA6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA70 = (char)0xFA70;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA71 = (char)0xFA71;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA72 = (char)0xFA72;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA73 = (char)0xFA73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA74 = (char)0xFA74;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA75 = (char)0xFA75;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA76 = (char)0xFA76;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA77 = (char)0xFA77;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA78 = (char)0xFA78;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA79 = (char)0xFA79;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA7A = (char)0xFA7A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA7B = (char)0xFA7B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA7C = (char)0xFA7C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA7D = (char)0xFA7D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA7E = (char)0xFA7E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA7F = (char)0xFA7F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA80 = (char)0xFA80;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA81 = (char)0xFA81;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA82 = (char)0xFA82;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA83 = (char)0xFA83;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA84 = (char)0xFA84;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA85 = (char)0xFA85;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA86 = (char)0xFA86;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA87 = (char)0xFA87;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA88 = (char)0xFA88;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA89 = (char)0xFA89;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA8A = (char)0xFA8A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA8B = (char)0xFA8B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA8C = (char)0xFA8C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA8D = (char)0xFA8D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA8E = (char)0xFA8E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA8F = (char)0xFA8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA90 = (char)0xFA90;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA91 = (char)0xFA91;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA92 = (char)0xFA92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA93 = (char)0xFA93;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA94 = (char)0xFA94;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA95 = (char)0xFA95;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA96 = (char)0xFA96;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA97 = (char)0xFA97;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA98 = (char)0xFA98;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA99 = (char)0xFA99;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA9A = (char)0xFA9A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA9B = (char)0xFA9B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA9C = (char)0xFA9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA9D = (char)0xFA9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA9E = (char)0xFA9E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FA9F = (char)0xFA9F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA0 = (char)0xFAA0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA1 = (char)0xFAA1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA2 = (char)0xFAA2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA3 = (char)0xFAA3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA4 = (char)0xFAA4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA5 = (char)0xFAA5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA6 = (char)0xFAA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA7 = (char)0xFAA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA8 = (char)0xFAA8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAA9 = (char)0xFAA9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAAA = (char)0xFAAA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAAB = (char)0xFAAB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAAC = (char)0xFAAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAAD = (char)0xFAAD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAAE = (char)0xFAAE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAAF = (char)0xFAAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB0 = (char)0xFAB0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB1 = (char)0xFAB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB2 = (char)0xFAB2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB3 = (char)0xFAB3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB4 = (char)0xFAB4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB5 = (char)0xFAB5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB6 = (char)0xFAB6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB7 = (char)0xFAB7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB8 = (char)0xFAB8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAB9 = (char)0xFAB9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FABA = (char)0xFABA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FABB = (char)0xFABB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FABC = (char)0xFABC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FABD = (char)0xFABD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FABE = (char)0xFABE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FABF = (char)0xFABF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC0 = (char)0xFAC0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC1 = (char)0xFAC1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC2 = (char)0xFAC2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC3 = (char)0xFAC3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC4 = (char)0xFAC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC5 = (char)0xFAC5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC6 = (char)0xFAC6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC7 = (char)0xFAC7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC8 = (char)0xFAC8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAC9 = (char)0xFAC9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FACA = (char)0xFACA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FACB = (char)0xFACB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FACC = (char)0xFACC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FACD = (char)0xFACD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FACE = (char)0xFACE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FACF = (char)0xFACF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD0 = (char)0xFAD0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD1 = (char)0xFAD1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD2 = (char)0xFAD2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD3 = (char)0xFAD3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD4 = (char)0xFAD4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD5 = (char)0xFAD5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD6 = (char)0xFAD6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD7 = (char)0xFAD7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD8 = (char)0xFAD8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_COMPATIBILITY_IDEOGRAPH_FAD9 = (char)0xFAD9;
			public const char CJK_RADICAL_BAMBOO = (char)0x2EAE;
			public const char CJK_RADICAL_BLUE = (char)0x2ED8;
			public const char CJK_RADICAL_BOLT_OF_CLOTH = (char)0x2EAA;
			public const char CJK_RADICAL_BONE = (char)0x2EE3;
			public const char CJK_RADICAL_BOX = (char)0x2E86;
			public const char CJK_RADICAL_BRUSH_ONE = (char)0x2EBA;
			public const char CJK_RADICAL_BRUSH_TWO = (char)0x2EBB;
			public const char CJK_RADICAL_CHOKE = (char)0x2E9B;
			public const char CJK_RADICAL_CITY = (char)0x2ECF;
			public const char CJK_RADICAL_CIVILIAN = (char)0x2EA0;
			public const char CJK_RADICAL_CLIFF = (char)0x2E81;
			public const char CJK_RADICAL_CLOTHES = (char)0x2EC2;
			public const char CJK_RADICAL_COW = (char)0x2EA7;
			public const char CJK_RADICAL_C_SIMPLIFIED_BIRD = (char)0x2EE6;
			public const char CJK_RADICAL_C_SIMPLIFIED_CART = (char)0x2ECB;
			public const char CJK_RADICAL_C_SIMPLIFIED_DRAGON = (char)0x2EF0;
			public const char CJK_RADICAL_C_SIMPLIFIED_EAT = (char)0x2EE0;
			public const char CJK_RADICAL_C_SIMPLIFIED_EVEN = (char)0x2EEC;
			public const char CJK_RADICAL_C_SIMPLIFIED_FISH = (char)0x2EE5;
			public const char CJK_RADICAL_C_SIMPLIFIED_FLY = (char)0x2EDC;
			public const char CJK_RADICAL_C_SIMPLIFIED_FROG = (char)0x2EEA;
			public const char CJK_RADICAL_C_SIMPLIFIED_GATE = (char)0x2ED4;
			public const char CJK_RADICAL_C_SIMPLIFIED_GOLD = (char)0x2ED0;
			public const char CJK_RADICAL_C_SIMPLIFIED_HORSE = (char)0x2EE2;
			public const char CJK_RADICAL_C_SIMPLIFIED_LEAF = (char)0x2EDA;
			public const char CJK_RADICAL_C_SIMPLIFIED_LONG = (char)0x2ED3;
			public const char CJK_RADICAL_C_SIMPLIFIED_SALT = (char)0x2EE7;
			public const char CJK_RADICAL_C_SIMPLIFIED_SEE = (char)0x2EC5;
			public const char CJK_RADICAL_C_SIMPLIFIED_SHELL = (char)0x2EC9;
			public const char CJK_RADICAL_C_SIMPLIFIED_SILK = (char)0x2EB0;
			public const char CJK_RADICAL_C_SIMPLIFIED_SPEECH = (char)0x2EC8;
			public const char CJK_RADICAL_C_SIMPLIFIED_TANNED_LEATHER = (char)0x2ED9;
			public const char CJK_RADICAL_C_SIMPLIFIED_TOOTH = (char)0x2EEE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_RADICAL_C_SIMPLIFIED_TURTLE = (char)0x2EF3;
			public const char CJK_RADICAL_C_SIMPLIFIED_WIND = (char)0x2EDB;
			public const char CJK_RADICAL_DEATH = (char)0x2E9E;
			public const char CJK_RADICAL_DIVINATION = (char)0x2E8A;
			public const char CJK_RADICAL_DOG = (char)0x2EA8;
			public const char CJK_RADICAL_EAT_ONE = (char)0x2EDD;
			public const char CJK_RADICAL_EAT_THREE = (char)0x2EDF;
			public const char CJK_RADICAL_EAT_TWO = (char)0x2EDE;
			public const char CJK_RADICAL_EWE = (char)0x2EB8;
			public const char CJK_RADICAL_EYE = (char)0x2EAB;
			public const char CJK_RADICAL_FIRE = (char)0x2EA3;
			public const char CJK_RADICAL_FOOT = (char)0x2ECA;
			public const char CJK_RADICAL_GHOST = (char)0x2EE4;
			public const char CJK_RADICAL_GRASS_ONE = (char)0x2EBE;
			public const char CJK_RADICAL_GRASS_THREE = (char)0x2EC0;
			public const char CJK_RADICAL_GRASS_TWO = (char)0x2EBF;
			public const char CJK_RADICAL_HAND = (char)0x2E98;
			public const char CJK_RADICAL_HEAD = (char)0x2EE1;
			public const char CJK_RADICAL_HEART_ONE = (char)0x2E96;
			public const char CJK_RADICAL_HEART_TWO = (char)0x2E97;
			public const char CJK_RADICAL_HORN = (char)0x2EC7;
			public const char CJK_RADICAL_JADE = (char)0x2EA9;
			public const char CJK_RADICAL_J_SIMPLIFIED_DRAGON = (char)0x2EEF;
			public const char CJK_RADICAL_J_SIMPLIFIED_EVEN = (char)0x2EEB;
			public const char CJK_RADICAL_J_SIMPLIFIED_TOOTH = (char)0x2EED;
			public const char CJK_RADICAL_J_SIMPLIFIED_TURTLE = (char)0x2EF2;
			public const char CJK_RADICAL_KNIFE_ONE = (char)0x2E88;
			public const char CJK_RADICAL_KNIFE_TWO = (char)0x2E89;
			public const char CJK_RADICAL_LAME_FOUR = (char)0x2E91;
			public const char CJK_RADICAL_LAME_ONE = (char)0x2E8E;
			public const char CJK_RADICAL_LAME_THREE = (char)0x2E90;
			public const char CJK_RADICAL_LAME_TWO = (char)0x2E8F;
			public const char CJK_RADICAL_LONG_ONE = (char)0x2ED1;
			public const char CJK_RADICAL_LONG_TWO = (char)0x2ED2;
			public const char CJK_RADICAL_MEAT = (char)0x2EBC;
			public const char CJK_RADICAL_MESH = (char)0x2EB5;
			public const char CJK_RADICAL_MOON = (char)0x2E9D;
			public const char CJK_RADICAL_MORTAR = (char)0x2EBD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CJK_RADICAL_MOTHER = (char)0x2E9F;
			public const char CJK_RADICAL_MOUND_ONE = (char)0x2ED5;
			public const char CJK_RADICAL_MOUND_TWO = (char)0x2ED6;
			public const char CJK_RADICAL_NET_FOUR = (char)0x2EB4;
			public const char CJK_RADICAL_NET_ONE = (char)0x2EB1;
			public const char CJK_RADICAL_NET_THREE = (char)0x2EB3;
			public const char CJK_RADICAL_NET_TWO = (char)0x2EB2;
			public const char CJK_RADICAL_OLD = (char)0x2EB9;
			public const char CJK_RADICAL_PAW_ONE = (char)0x2EA4;
			public const char CJK_RADICAL_PAW_TWO = (char)0x2EA5;
			public const char CJK_RADICAL_PERSON = (char)0x2E85;
			public const char CJK_RADICAL_RAIN = (char)0x2ED7;
			public const char CJK_RADICAL_RAM = (char)0x2EB7;
			public const char CJK_RADICAL_RAP = (char)0x2E99;
			public const char CJK_RADICAL_REPEAT = (char)0x2E80;
			public const char CJK_RADICAL_SEAL = (char)0x2E8B;
			public const char CJK_RADICAL_SECOND_ONE = (char)0x2E82;
			public const char CJK_RADICAL_SECOND_THREE = (char)0x2E84;
			public const char CJK_RADICAL_SECOND_TWO = (char)0x2E83;
			public const char CJK_RADICAL_SHEEP = (char)0x2EB6;
			public const char CJK_RADICAL_SILK = (char)0x2EAF;
			public const char CJK_RADICAL_SIMPLIFIED_HALF_TREE_TRUNK = (char)0x2EA6;
			public const char CJK_RADICAL_SIMPLIFIED_HORN = (char)0x2EC6;
			public const char CJK_RADICAL_SIMPLIFIED_WALK = (char)0x2ECC;
			public const char CJK_RADICAL_SIMPLIFIED_WHEAT = (char)0x2EE8;
			public const char CJK_RADICAL_SIMPLIFIED_YELLOW = (char)0x2EE9;
			public const char CJK_RADICAL_SMALL_ONE = (char)0x2E8C;
			public const char CJK_RADICAL_SMALL_TWO = (char)0x2E8D;
			public const char CJK_RADICAL_SNAKE = (char)0x2E92;
			public const char CJK_RADICAL_SNOUT_ONE = (char)0x2E94;
			public const char CJK_RADICAL_SNOUT_TWO = (char)0x2E95;
			public const char CJK_RADICAL_SPIRIT_ONE = (char)0x2EAC;
			public const char CJK_RADICAL_SPIRIT_TWO = (char)0x2EAD;
			public const char CJK_RADICAL_SUN = (char)0x2E9C;
			public const char CJK_RADICAL_TABLE = (char)0x2E87;
			public const char CJK_RADICAL_THREAD = (char)0x2E93;
			public const char CJK_RADICAL_TIGER = (char)0x2EC1;
			public const char CJK_RADICAL_TURTLE = (char)0x2EF1;
			public const char CJK_RADICAL_WALK_ONE = (char)0x2ECD;
			public const char CJK_RADICAL_WALK_TWO = (char)0x2ECE;
			public const char CJK_RADICAL_WATER_ONE = (char)0x2EA1;
			public const char CJK_RADICAL_WATER_TWO = (char)0x2EA2;
			public const char CJK_RADICAL_WEST_ONE = (char)0x2EC3;
			public const char CJK_RADICAL_WEST_TWO = (char)0x2EC4;
			public const char CJK_STROKE_BXG = (char)0x31C3;
			public const char CJK_STROKE_HP = (char)0x31C7;
			public const char CJK_STROKE_HPWG = (char)0x31CC;
			public const char CJK_STROKE_HZG = (char)0x31C6;
			public const char CJK_STROKE_HZT = (char)0x31CA;
			public const char CJK_STROKE_HZW = (char)0x31CD;
			public const char CJK_STROKE_HZWG = (char)0x31C8;
			public const char CJK_STROKE_HZZ = (char)0x31C5;
			public const char CJK_STROKE_HZZP = (char)0x31CB;
			public const char CJK_STROKE_HZZZ = (char)0x31CE;
			public const char CJK_STROKE_N = (char)0x31CF;
			public const char CJK_STROKE_SW = (char)0x31C4;
			public const char CJK_STROKE_SZWG = (char)0x31C9;
			public const char CJK_STROKE_T = (char)0x31C0;
			public const char CJK_STROKE_WG = (char)0x31C1;
			public const char CJK_STROKE_XG = (char)0x31C2;
			public const char CLEAR_SCREEN_SYMBOL = (char)0x239A;
			public const char CLOCKWISE_CLOSED_CIRCLE_ARROW = (char)0x2941;
			public const char CLOCKWISE_CONTOUR_INTEGRAL = (char)0x2232;
			public const char CLOCKWISE_GAPPED_CIRCLE_ARROW = (char)0x27F3;
			public const char CLOCKWISE_INTEGRAL = (char)0x2231;
			public const char CLOCKWISE_OPEN_CIRCLE_ARROW = (char)0x21BB;
			public const char CLOCKWISE_TOP_SEMICIRCLE_ARROW = (char)0x21B7;
			public const char CLOSED_INTERSECTION_WITH_SERIFS = (char)0x2A4D;
			public const char CLOSED_SUBSET = (char)0x2ACF;
			public const char CLOSED_SUBSET_OR_EQUAL_TO = (char)0x2AD1;
			public const char CLOSED_SUPERSET = (char)0x2AD0;
			public const char CLOSED_SUPERSET_OR_EQUAL_TO = (char)0x2AD2;
			public const char CLOSED_UNION_WITH_SERIFS = (char)0x2A4C;
			public const char CLOSED_UNION_WITH_SERIFS_AND_SMASH_PRODUCT = (char)0x2A50;
			public const char CLOSE_UP = (char)0x2050;
			public const char CLOUD = (char)0x2601;
			public const char COFFIN = (char)0x26B0;
			public const char COLON = (char)0x003A;
			/// <summary> Formerly COLON EQUAL. </summary>
			public const char COLON_EQUALS = (char)0x2254;
			public const char COLON_SIGN = (char)0x20A1;
			/// <summary> Formerly NON-SPACING ACUTE. </summary>
			public const char COMBINING_ACUTE_ACCENT = (char)0x0301;
			/// <summary> Formerly NON-SPACING ACUTE BELOW. </summary>
			public const char COMBINING_ACUTE_ACCENT_BELOW = (char)0x0317;
			/// <summary> (This is a composition; consider avoiding.) Formerly NON-SPACING ACUTE TONE MARK. </summary>
			public const char COMBINING_ACUTE_TONE_MARK = (char)0x0341;
			public const char COMBINING_ALMOST_EQUAL_TO_ABOVE = (char)0x034C;
			public const char COMBINING_ANNUITY_SYMBOL = (char)0x20E7;
			/// <summary> Formerly NON-SPACING ANTICLOCKWISE ARROW ABOVE. </summary>
			public const char COMBINING_ANTICLOCKWISE_ARROW_ABOVE = (char)0x20D4;
			/// <summary> Formerly NON-SPACING ANTICLOCKWISE RING OVERLAY. </summary>
			public const char COMBINING_ANTICLOCKWISE_RING_OVERLAY = (char)0x20DA;
			public const char COMBINING_ASTERISK_BELOW = (char)0x0359;
			/// <summary> Formerly NON-SPACING BREVE. </summary>
			public const char COMBINING_BREVE = (char)0x0306;
			/// <summary> Formerly NON-SPACING BREVE BELOW. </summary>
			public const char COMBINING_BREVE_BELOW = (char)0x032E;
			public const char COMBINING_BRIDGE_ABOVE = (char)0x0346;
			/// <summary> Formerly NON-SPACING BRIDGE BELOW. </summary>
			public const char COMBINING_BRIDGE_BELOW = (char)0x032A;
			/// <summary> Formerly NON-SPACING CANDRABINDU. </summary>
			public const char COMBINING_CANDRABINDU = (char)0x0310;
			/// <summary> Formerly NON-SPACING HACEK. </summary>
			public const char COMBINING_CARON = (char)0x030C;
			/// <summary> Formerly NON-SPACING HACEK BELOW. </summary>
			public const char COMBINING_CARON_BELOW = (char)0x032C;
			/// <summary> Formerly NON-SPACING CEDILLA. </summary>
			public const char COMBINING_CEDILLA = (char)0x0327;
			/// <summary> Formerly NON-SPACING CIRCUMFLEX. </summary>
			public const char COMBINING_CIRCUMFLEX_ACCENT = (char)0x0302;
			/// <summary> Formerly NON-SPACING CIRCUMFLEX BELOW. </summary>
			public const char COMBINING_CIRCUMFLEX_ACCENT_BELOW = (char)0x032D;
			/// <summary> Formerly NON-SPACING CLOCKWISE ARROW ABOVE. </summary>
			public const char COMBINING_CLOCKWISE_ARROW_ABOVE = (char)0x20D5;
			/// <summary> Formerly NON-SPACING CLOCKWISE RING OVERLAY. </summary>
			public const char COMBINING_CLOCKWISE_RING_OVERLAY = (char)0x20D9;
			/// <summary> Formerly NON-SPACING COMMA ABOVE. </summary>
			public const char COMBINING_COMMA_ABOVE = (char)0x0313;
			/// <summary> Formerly NON-SPACING COMMA ABOVE RIGHT. </summary>
			public const char COMBINING_COMMA_ABOVE_RIGHT = (char)0x0315;
			/// <summary> Formerly NON-SPACING COMMA BELOW. </summary>
			public const char COMBINING_COMMA_BELOW = (char)0x0326;
			/// <summary> Formerly CYRILLIC NON-SPACING DASIA PNEUMATA. </summary>
			public const char COMBINING_CYRILLIC_DASIA_PNEUMATA = (char)0x0485;
			public const char COMBINING_CYRILLIC_HUNDRED_THOUSANDS_SIGN = (char)0x0488;
			public const char COMBINING_CYRILLIC_MILLIONS_SIGN = (char)0x0489;
			/// <summary> Formerly CYRILLIC NON-SPACING PALATALIZATION. </summary>
			public const char COMBINING_CYRILLIC_PALATALIZATION = (char)0x0484;
			/// <summary> Formerly CYRILLIC NON-SPACING PSILI PNEUMATA. </summary>
			public const char COMBINING_CYRILLIC_PSILI_PNEUMATA = (char)0x0486;
			/// <summary> Formerly CYRILLIC NON-SPACING TITLO. </summary>
			public const char COMBINING_CYRILLIC_TITLO = (char)0x0483;
			/// <summary> Formerly NON-SPACING DIAERESIS. </summary>
			public const char COMBINING_DIAERESIS = (char)0x0308;
			/// <summary> Formerly NON-SPACING DOUBLE DOT BELOW. </summary>
			public const char COMBINING_DIAERESIS_BELOW = (char)0x0324;
			public const char COMBINING_DOTTED_ACUTE_ACCENT = (char)0x1DC1;
			public const char COMBINING_DOTTED_GRAVE_ACCENT = (char)0x1DC0;
			/// <summary> Formerly NON-SPACING DOT ABOVE. </summary>
			public const char COMBINING_DOT_ABOVE = (char)0x0307;
			public const char COMBINING_DOT_ABOVE_RIGHT = (char)0x0358;
			/// <summary> Formerly NON-SPACING DOT BELOW. </summary>
			public const char COMBINING_DOT_BELOW = (char)0x0323;
			/// <summary> Formerly NON-SPACING DOUBLE ACUTE. </summary>
			public const char COMBINING_DOUBLE_ACUTE_ACCENT = (char)0x030B;
			public const char COMBINING_DOUBLE_BREVE = (char)0x035D;
			public const char COMBINING_DOUBLE_BREVE_BELOW = (char)0x035C;
			/// <summary> Formerly NON-SPACING DOUBLE GRAVE. </summary>
			public const char COMBINING_DOUBLE_GRAVE_ACCENT = (char)0x030F;
			public const char COMBINING_DOUBLE_INVERTED_BREVE = (char)0x0361;
			/// <summary> Formerly NON-SPACING DOUBLE UNDERSCORE. </summary>
			public const char COMBINING_DOUBLE_LOW_LINE = (char)0x0333;
			public const char COMBINING_DOUBLE_MACRON = (char)0x035E;
			public const char COMBINING_DOUBLE_MACRON_BELOW = (char)0x035F;
			/// <summary> Formerly NON-SPACING DOUBLE OVERSCORE. </summary>
			public const char COMBINING_DOUBLE_OVERLINE = (char)0x033F;
			public const char COMBINING_DOUBLE_RIGHTWARDS_ARROW_BELOW = (char)0x0362;
			public const char COMBINING_DOUBLE_RING_BELOW = (char)0x035A;
			public const char COMBINING_DOUBLE_TILDE = (char)0x0360;
			public const char COMBINING_DOUBLE_TILDE_LEFT_HALF = (char)0xFE22;
			public const char COMBINING_DOUBLE_TILDE_RIGHT_HALF = (char)0xFE23;
			/// <summary> Formerly NON-SPACING DOUBLE VERTICAL LINE ABOVE. </summary>
			public const char COMBINING_DOUBLE_VERTICAL_LINE_ABOVE = (char)0x030E;
			public const char COMBINING_DOUBLE_VERTICAL_LINE_BELOW = (char)0x0348;
			public const char COMBINING_DOUBLE_VERTICAL_STROKE_OVERLAY = (char)0x20E6;
			/// <summary> Formerly NON-SPACING DOWN TACK BELOW. </summary>
			public const char COMBINING_DOWN_TACK_BELOW = (char)0x031E;
			/// <summary> Formerly ENCLOSING CIRCLE. </summary>
			public const char COMBINING_ENCLOSING_CIRCLE = (char)0x20DD;
			/// <summary> Formerly ENCLOSING CIRCLE SLASH. </summary>
			public const char COMBINING_ENCLOSING_CIRCLE_BACKSLASH = (char)0x20E0;
			/// <summary> Formerly ENCLOSING DIAMOND. </summary>
			public const char COMBINING_ENCLOSING_DIAMOND = (char)0x20DF;
			public const char COMBINING_ENCLOSING_KEYCAP = (char)0x20E3;
			public const char COMBINING_ENCLOSING_SCREEN = (char)0x20E2;
			/// <summary> Formerly ENCLOSING SQUARE. </summary>
			public const char COMBINING_ENCLOSING_SQUARE = (char)0x20DE;
			public const char COMBINING_ENCLOSING_UPWARD_POINTING_TRIANGLE = (char)0x20E4;
			public const char COMBINING_EQUALS_SIGN_BELOW = (char)0x0347;
			public const char COMBINING_FERMATA = (char)0x0352;
			/// <summary> Formerly NON-SPACING FOUR DOTS ABOVE. </summary>
			public const char COMBINING_FOUR_DOTS_ABOVE = (char)0x20DC;
			public const char COMBINING_GRAPHEME_JOINER = (char)0x034F;
			/// <summary> Formerly NON-SPACING GRAVE. </summary>
			public const char COMBINING_GRAVE_ACCENT = (char)0x0300;
			/// <summary> Formerly NON-SPACING GRAVE BELOW. </summary>
			public const char COMBINING_GRAVE_ACCENT_BELOW = (char)0x0316;
			/// <summary> (This is a composition; consider avoiding.) Formerly NON-SPACING GRAVE TONE MARK. </summary>
			public const char COMBINING_GRAVE_TONE_MARK = (char)0x0340;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK NON-SPACING DIAERESIS TONOS. </summary>
			public const char COMBINING_GREEK_DIALYTIKA_TONOS = (char)0x0344;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char COMBINING_GREEK_KORONIS = (char)0x0343;
			public const char COMBINING_GREEK_PERISPOMENI = (char)0x0342;
			/// <summary> Formerly GREEK NON-SPACING IOTA BELOW. </summary>
			public const char COMBINING_GREEK_YPOGEGRAMMENI = (char)0x0345;
			public const char COMBINING_HOMOTHETIC_ABOVE = (char)0x034B;
			/// <summary> Formerly NON-SPACING HOOK ABOVE. </summary>
			public const char COMBINING_HOOK_ABOVE = (char)0x0309;
			/// <summary> Formerly NON-SPACING HORN. </summary>
			public const char COMBINING_HORN = (char)0x031B;
			/// <summary> Formerly NON-SPACING INVERTED BREVE. </summary>
			public const char COMBINING_INVERTED_BREVE = (char)0x0311;
			/// <summary> Formerly NON-SPACING INVERTED BREVE BELOW. </summary>
			public const char COMBINING_INVERTED_BREVE_BELOW = (char)0x032F;
			/// <summary> Formerly NON-SPACING INVERTED BRIDGE BELOW. </summary>
			public const char COMBINING_INVERTED_BRIDGE_BELOW = (char)0x033A;
			/// <summary> Formerly NON-SPACING INVERTED DOUBLE ARCH BELOW. </summary>
			public const char COMBINING_INVERTED_DOUBLE_ARCH_BELOW = (char)0x032B;
			/// <summary> Formerly NON-SPACING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK. </summary>
			public const char COMBINING_KATAKANA_HIRAGANA_SEMI_VOICED_SOUND_MARK = (char)0x309A;
			/// <summary> Formerly NON-SPACING KATAKANA-HIRAGANA VOICED SOUND MARK. </summary>
			public const char COMBINING_KATAKANA_HIRAGANA_VOICED_SOUND_MARK = (char)0x3099;
			public const char COMBINING_LATIN_SMALL_LETTER_A = (char)0x0363;
			public const char COMBINING_LATIN_SMALL_LETTER_C = (char)0x0368;
			public const char COMBINING_LATIN_SMALL_LETTER_D = (char)0x0369;
			public const char COMBINING_LATIN_SMALL_LETTER_E = (char)0x0364;
			public const char COMBINING_LATIN_SMALL_LETTER_H = (char)0x036A;
			public const char COMBINING_LATIN_SMALL_LETTER_I = (char)0x0365;
			public const char COMBINING_LATIN_SMALL_LETTER_M = (char)0x036B;
			public const char COMBINING_LATIN_SMALL_LETTER_O = (char)0x0366;
			public const char COMBINING_LATIN_SMALL_LETTER_R = (char)0x036C;
			public const char COMBINING_LATIN_SMALL_LETTER_T = (char)0x036D;
			public const char COMBINING_LATIN_SMALL_LETTER_U = (char)0x0367;
			public const char COMBINING_LATIN_SMALL_LETTER_V = (char)0x036E;
			public const char COMBINING_LATIN_SMALL_LETTER_X = (char)0x036F;
			public const char COMBINING_LEFTWARDS_ARROW_OVERLAY = (char)0x20EA;
			/// <summary> Formerly NON-SPACING LEFT ANGLE ABOVE. </summary>
			public const char COMBINING_LEFT_ANGLE_ABOVE = (char)0x031A;
			public const char COMBINING_LEFT_ANGLE_BELOW = (char)0x0349;
			public const char COMBINING_LEFT_ARROWHEAD_BELOW = (char)0x0354;
			/// <summary> Formerly NON-SPACING LEFT ARROW ABOVE. </summary>
			public const char COMBINING_LEFT_ARROW_ABOVE = (char)0x20D6;
			public const char COMBINING_LEFT_HALF_RING_ABOVE = (char)0x0351;
			/// <summary> Formerly NON-SPACING LEFT HALF RING BELOW. </summary>
			public const char COMBINING_LEFT_HALF_RING_BELOW = (char)0x031C;
			/// <summary> Formerly NON-SPACING LEFT HARPOON ABOVE. </summary>
			public const char COMBINING_LEFT_HARPOON_ABOVE = (char)0x20D0;
			/// <summary> Formerly NON-SPACING LEFT RIGHT ARROW ABOVE. </summary>
			public const char COMBINING_LEFT_RIGHT_ARROW_ABOVE = (char)0x20E1;
			public const char COMBINING_LEFT_RIGHT_ARROW_BELOW = (char)0x034D;
			/// <summary> Formerly NON-SPACING LEFT TACK BELOW. </summary>
			public const char COMBINING_LEFT_TACK_BELOW = (char)0x0318;
			public const char COMBINING_LIGATURE_LEFT_HALF = (char)0xFE20;
			public const char COMBINING_LIGATURE_RIGHT_HALF = (char)0xFE21;
			public const char COMBINING_LONG_DOUBLE_SOLIDUS_OVERLAY = (char)0x20EB;
			/// <summary> Formerly NON-SPACING LONG SLASH OVERLAY. </summary>
			public const char COMBINING_LONG_SOLIDUS_OVERLAY = (char)0x0338;
			/// <summary> Formerly NON-SPACING LONG BAR OVERLAY. </summary>
			public const char COMBINING_LONG_STROKE_OVERLAY = (char)0x0336;
			/// <summary> Formerly NON-SPACING LONG VERTICAL BAR OVERLAY. </summary>
			public const char COMBINING_LONG_VERTICAL_LINE_OVERLAY = (char)0x20D2;
			/// <summary> Formerly NON-SPACING UNDERSCORE. </summary>
			public const char COMBINING_LOW_LINE = (char)0x0332;
			/// <summary> Formerly NON-SPACING MACRON. </summary>
			public const char COMBINING_MACRON = (char)0x0304;
			/// <summary> Formerly NON-SPACING MACRON BELOW. </summary>
			public const char COMBINING_MACRON_BELOW = (char)0x0331;
			/// <summary> Formerly NON-SPACING MINUS SIGN BELOW. </summary>
			public const char COMBINING_MINUS_SIGN_BELOW = (char)0x0320;
			public const char COMBINING_NOT_TILDE_ABOVE = (char)0x034A;
			/// <summary> Formerly NON-SPACING OGONEK. </summary>
			public const char COMBINING_OGONEK = (char)0x0328;
			/// <summary> Formerly NON-SPACING OVERSCORE. </summary>
			public const char COMBINING_OVERLINE = (char)0x0305;
			/// <summary> Formerly NON-SPACING PALATALIZED HOOK BELOW. </summary>
			public const char COMBINING_PALATALIZED_HOOK_BELOW = (char)0x0321;
			/// <summary> Formerly NON-SPACING PLUS SIGN BELOW. </summary>
			public const char COMBINING_PLUS_SIGN_BELOW = (char)0x031F;
			/// <summary> Formerly NON-SPACING RETROFLEX HOOK BELOW. </summary>
			public const char COMBINING_RETROFLEX_HOOK_BELOW = (char)0x0322;
			/// <summary> Formerly NON-SPACING REVERSED COMMA ABOVE. </summary>
			public const char COMBINING_REVERSED_COMMA_ABOVE = (char)0x0314;
			public const char COMBINING_REVERSE_SOLIDUS_OVERLAY = (char)0x20E5;
			public const char COMBINING_RIGHT_ARROWHEAD_ABOVE = (char)0x0350;
			public const char COMBINING_RIGHT_ARROWHEAD_AND_UP_ARROWHEAD_BELOW = (char)0x0356;
			public const char COMBINING_RIGHT_ARROWHEAD_BELOW = (char)0x0355;
			/// <summary> Formerly NON-SPACING RIGHT ARROW ABOVE. </summary>
			public const char COMBINING_RIGHT_ARROW_ABOVE = (char)0x20D7;
			public const char COMBINING_RIGHT_HALF_RING_ABOVE = (char)0x0357;
			/// <summary> Formerly NON-SPACING RIGHT HALF RING BELOW. </summary>
			public const char COMBINING_RIGHT_HALF_RING_BELOW = (char)0x0339;
			/// <summary> Formerly NON-SPACING RIGHT HARPOON ABOVE. </summary>
			public const char COMBINING_RIGHT_HARPOON_ABOVE = (char)0x20D1;
			/// <summary> Formerly NON-SPACING RIGHT TACK BELOW. </summary>
			public const char COMBINING_RIGHT_TACK_BELOW = (char)0x0319;
			/// <summary> Formerly NON-SPACING RING ABOVE. </summary>
			public const char COMBINING_RING_ABOVE = (char)0x030A;
			/// <summary> Formerly NON-SPACING RING BELOW. </summary>
			public const char COMBINING_RING_BELOW = (char)0x0325;
			/// <summary> Formerly NON-SPACING RING OVERLAY. </summary>
			public const char COMBINING_RING_OVERLAY = (char)0x20D8;
			/// <summary> Formerly NON-SPACING SEAGULL BELOW. </summary>
			public const char COMBINING_SEAGULL_BELOW = (char)0x033C;
			/// <summary> Formerly NON-SPACING SHORT SLASH OVERLAY. </summary>
			public const char COMBINING_SHORT_SOLIDUS_OVERLAY = (char)0x0337;
			/// <summary> Formerly NON-SPACING SHORT BAR OVERLAY. </summary>
			public const char COMBINING_SHORT_STROKE_OVERLAY = (char)0x0335;
			/// <summary> Formerly NON-SPACING SHORT VERTICAL BAR OVERLAY. </summary>
			public const char COMBINING_SHORT_VERTICAL_LINE_OVERLAY = (char)0x20D3;
			public const char COMBINING_SNAKE_BELOW = (char)0x1DC2;
			/// <summary> Formerly NON-SPACING SQUARE BELOW. </summary>
			public const char COMBINING_SQUARE_BELOW = (char)0x033B;
			public const char COMBINING_SUSPENSION_MARK = (char)0x1DC3;
			/// <summary> Formerly NON-SPACING THREE DOTS ABOVE. </summary>
			public const char COMBINING_THREE_DOTS_ABOVE = (char)0x20DB;
			/// <summary> Formerly NON-SPACING TILDE. </summary>
			public const char COMBINING_TILDE = (char)0x0303;
			/// <summary> Formerly NON-SPACING TILDE BELOW. </summary>
			public const char COMBINING_TILDE_BELOW = (char)0x0330;
			/// <summary> Formerly NON-SPACING TILDE OVERLAY. </summary>
			public const char COMBINING_TILDE_OVERLAY = (char)0x0334;
			public const char COMBINING_TRIPLE_UNDERDOT = (char)0x20E8;
			/// <summary> Formerly NON-SPACING TURNED COMMA ABOVE. </summary>
			public const char COMBINING_TURNED_COMMA_ABOVE = (char)0x0312;
			public const char COMBINING_UPWARDS_ARROW_BELOW = (char)0x034E;
			/// <summary> Formerly NON-SPACING UP TACK BELOW. </summary>
			public const char COMBINING_UP_TACK_BELOW = (char)0x031D;
			/// <summary> Formerly NON-SPACING VERTICAL LINE ABOVE. </summary>
			public const char COMBINING_VERTICAL_LINE_ABOVE = (char)0x030D;
			/// <summary> Formerly NON-SPACING VERTICAL LINE BELOW. </summary>
			public const char COMBINING_VERTICAL_LINE_BELOW = (char)0x0329;
			/// <summary> Formerly NON-SPACING VERTICAL TILDE. </summary>
			public const char COMBINING_VERTICAL_TILDE = (char)0x033E;
			public const char COMBINING_WIDE_BRIDGE_ABOVE = (char)0x20E9;
			/// <summary> Formerly NON-SPACING X ABOVE. </summary>
			public const char COMBINING_X_ABOVE = (char)0x033D;
			public const char COMBINING_X_BELOW = (char)0x0353;
			public const char COMBINING_ZIGZAG_ABOVE = (char)0x035B;
			public const char COMET = (char)0x2604;
			public const char COMMA = (char)0x002C;
			public const char COMMERCIAL_AT = (char)0x0040;
			public const char COMMERCIAL_MINUS_SIGN = (char)0x2052;
			public const char COMPLEMENT = (char)0x2201;
			public const char COMPOSITION_SYMBOL = (char)0x2384;
			public const char CONGRUENT_WITH_DOT_ABOVE = (char)0x2A6D;
			public const char CONICAL_TAPER = (char)0x2332;
			public const char CONJUNCTION = (char)0x260C;
			public const char CONTAINS_AS_MEMBER = (char)0x220B;
			public const char CONTAINS_AS_NORMAL_SUBGROUP = (char)0x22B3;
			public const char CONTAINS_AS_NORMAL_SUBGROUP_OR_EQUAL_TO = (char)0x22B5;
			public const char CONTAINS_WITH_LONG_HORIZONTAL_STROKE = (char)0x22FA;
			public const char CONTAINS_WITH_OVERBAR = (char)0x22FD;
			public const char CONTAINS_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE = (char)0x22FB;
			public const char CONTINUOUS_UNDERLINE_SYMBOL = (char)0x2381;
			public const char CONTOUR_INTEGRAL = (char)0x222E;
			public const char COPTIC_CAPITAL_LETTER_AKHMIMIC_KHEI = (char)0x2CC8;
			public const char COPTIC_CAPITAL_LETTER_ALFA = (char)0x2C80;
			public const char COPTIC_CAPITAL_LETTER_CROSSED_SHEI = (char)0x2CC2;
			public const char COPTIC_CAPITAL_LETTER_CRYPTOGRAMMIC_EIE = (char)0x2CB6;
			public const char COPTIC_CAPITAL_LETTER_CRYPTOGRAMMIC_NI = (char)0x2CBC;
			public const char COPTIC_CAPITAL_LETTER_DALDA = (char)0x2C86;
			/// <summary> Formerly GREEK CAPITAL LETTER DEI. </summary>
			public const char COPTIC_CAPITAL_LETTER_DEI = (char)0x03EE;
			public const char COPTIC_CAPITAL_LETTER_DIALECT_P_ALEF = (char)0x2CB2;
			public const char COPTIC_CAPITAL_LETTER_DIALECT_P_HORI = (char)0x2CCA;
			public const char COPTIC_CAPITAL_LETTER_DIALECT_P_KAPA = (char)0x2CB8;
			public const char COPTIC_CAPITAL_LETTER_DIALECT_P_NI = (char)0x2CBA;
			public const char COPTIC_CAPITAL_LETTER_EIE = (char)0x2C88;
			/// <summary> Formerly GREEK CAPITAL LETTER FEI. </summary>
			public const char COPTIC_CAPITAL_LETTER_FEI = (char)0x03E4;
			public const char COPTIC_CAPITAL_LETTER_FI = (char)0x2CAA;
			public const char COPTIC_CAPITAL_LETTER_GAMMA = (char)0x2C84;
			/// <summary> Formerly GREEK CAPITAL LETTER GANGIA. </summary>
			public const char COPTIC_CAPITAL_LETTER_GANGIA = (char)0x03EA;
			public const char COPTIC_CAPITAL_LETTER_HATE = (char)0x2C8E;
			/// <summary> Formerly GREEK CAPITAL LETTER HORI. </summary>
			public const char COPTIC_CAPITAL_LETTER_HORI = (char)0x03E8;
			public const char COPTIC_CAPITAL_LETTER_IAUDA = (char)0x2C92;
			public const char COPTIC_CAPITAL_LETTER_KAPA = (char)0x2C94;
			/// <summary> Formerly GREEK CAPITAL LETTER KHEI. </summary>
			public const char COPTIC_CAPITAL_LETTER_KHEI = (char)0x03E6;
			public const char COPTIC_CAPITAL_LETTER_KHI = (char)0x2CAC;
			public const char COPTIC_CAPITAL_LETTER_KSI = (char)0x2C9C;
			public const char COPTIC_CAPITAL_LETTER_LAULA = (char)0x2C96;
			public const char COPTIC_CAPITAL_LETTER_L_SHAPED_HA = (char)0x2CD0;
			public const char COPTIC_CAPITAL_LETTER_MI = (char)0x2C98;
			public const char COPTIC_CAPITAL_LETTER_NI = (char)0x2C9A;
			public const char COPTIC_CAPITAL_LETTER_O = (char)0x2C9E;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_AIN = (char)0x2CB4;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_DJA = (char)0x2CD8;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_ESH = (char)0x2CC6;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_GANGIA = (char)0x2CD6;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_HA = (char)0x2CCE;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_HAT = (char)0x2CD4;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_HEI = (char)0x2CD2;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_HORI = (char)0x2CCC;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_OOU = (char)0x2CBE;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_SHEI = (char)0x2CC4;
			public const char COPTIC_CAPITAL_LETTER_OLD_COPTIC_SHIMA = (char)0x2CDA;
			public const char COPTIC_CAPITAL_LETTER_OLD_NUBIAN_NGI = (char)0x2CDE;
			public const char COPTIC_CAPITAL_LETTER_OLD_NUBIAN_NYI = (char)0x2CE0;
			public const char COPTIC_CAPITAL_LETTER_OLD_NUBIAN_SHIMA = (char)0x2CDC;
			public const char COPTIC_CAPITAL_LETTER_OLD_NUBIAN_WAU = (char)0x2CE2;
			public const char COPTIC_CAPITAL_LETTER_OOU = (char)0x2CB0;
			public const char COPTIC_CAPITAL_LETTER_PI = (char)0x2CA0;
			public const char COPTIC_CAPITAL_LETTER_PSI = (char)0x2CAE;
			public const char COPTIC_CAPITAL_LETTER_RO = (char)0x2CA2;
			public const char COPTIC_CAPITAL_LETTER_SAMPI = (char)0x2CC0;
			/// <summary> Formerly GREEK CAPITAL LETTER SHEI. </summary>
			public const char COPTIC_CAPITAL_LETTER_SHEI = (char)0x03E2;
			/// <summary> Formerly GREEK CAPITAL LETTER SHIMA. </summary>
			public const char COPTIC_CAPITAL_LETTER_SHIMA = (char)0x03EC;
			public const char COPTIC_CAPITAL_LETTER_SIMA = (char)0x2CA4;
			public const char COPTIC_CAPITAL_LETTER_SOU = (char)0x2C8A;
			public const char COPTIC_CAPITAL_LETTER_TAU = (char)0x2CA6;
			public const char COPTIC_CAPITAL_LETTER_THETHE = (char)0x2C90;
			public const char COPTIC_CAPITAL_LETTER_UA = (char)0x2CA8;
			public const char COPTIC_CAPITAL_LETTER_VIDA = (char)0x2C82;
			public const char COPTIC_CAPITAL_LETTER_ZATA = (char)0x2C8C;
			public const char COPTIC_FRACTION_ONE_HALF = (char)0x2CFD;
			public const char COPTIC_FULL_STOP = (char)0x2CFE;
			public const char COPTIC_MORPHOLOGICAL_DIVIDER = (char)0x2CFF;
			public const char COPTIC_OLD_NUBIAN_DIRECT_QUESTION_MARK = (char)0x2CFA;
			public const char COPTIC_OLD_NUBIAN_FULL_STOP = (char)0x2CF9;
			public const char COPTIC_OLD_NUBIAN_INDIRECT_QUESTION_MARK = (char)0x2CFB;
			public const char COPTIC_OLD_NUBIAN_VERSE_DIVIDER = (char)0x2CFC;
			public const char COPTIC_SMALL_LETTER_AKHMIMIC_KHEI = (char)0x2CC9;
			public const char COPTIC_SMALL_LETTER_ALFA = (char)0x2C81;
			public const char COPTIC_SMALL_LETTER_CROSSED_SHEI = (char)0x2CC3;
			public const char COPTIC_SMALL_LETTER_CRYPTOGRAMMIC_EIE = (char)0x2CB7;
			public const char COPTIC_SMALL_LETTER_CRYPTOGRAMMIC_NI = (char)0x2CBD;
			public const char COPTIC_SMALL_LETTER_DALDA = (char)0x2C87;
			/// <summary> Formerly GREEK SMALL LETTER DEI. </summary>
			public const char COPTIC_SMALL_LETTER_DEI = (char)0x03EF;
			public const char COPTIC_SMALL_LETTER_DIALECT_P_ALEF = (char)0x2CB3;
			public const char COPTIC_SMALL_LETTER_DIALECT_P_HORI = (char)0x2CCB;
			public const char COPTIC_SMALL_LETTER_DIALECT_P_KAPA = (char)0x2CB9;
			public const char COPTIC_SMALL_LETTER_DIALECT_P_NI = (char)0x2CBB;
			public const char COPTIC_SMALL_LETTER_EIE = (char)0x2C89;
			/// <summary> Formerly GREEK SMALL LETTER FEI. </summary>
			public const char COPTIC_SMALL_LETTER_FEI = (char)0x03E5;
			public const char COPTIC_SMALL_LETTER_FI = (char)0x2CAB;
			public const char COPTIC_SMALL_LETTER_GAMMA = (char)0x2C85;
			/// <summary> Formerly GREEK SMALL LETTER GANGIA. </summary>
			public const char COPTIC_SMALL_LETTER_GANGIA = (char)0x03EB;
			public const char COPTIC_SMALL_LETTER_HATE = (char)0x2C8F;
			/// <summary> Formerly GREEK SMALL LETTER HORI. </summary>
			public const char COPTIC_SMALL_LETTER_HORI = (char)0x03E9;
			public const char COPTIC_SMALL_LETTER_IAUDA = (char)0x2C93;
			public const char COPTIC_SMALL_LETTER_KAPA = (char)0x2C95;
			/// <summary> Formerly GREEK SMALL LETTER KHEI. </summary>
			public const char COPTIC_SMALL_LETTER_KHEI = (char)0x03E7;
			public const char COPTIC_SMALL_LETTER_KHI = (char)0x2CAD;
			public const char COPTIC_SMALL_LETTER_KSI = (char)0x2C9D;
			public const char COPTIC_SMALL_LETTER_LAULA = (char)0x2C97;
			public const char COPTIC_SMALL_LETTER_L_SHAPED_HA = (char)0x2CD1;
			public const char COPTIC_SMALL_LETTER_MI = (char)0x2C99;
			public const char COPTIC_SMALL_LETTER_NI = (char)0x2C9B;
			public const char COPTIC_SMALL_LETTER_O = (char)0x2C9F;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_AIN = (char)0x2CB5;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_DJA = (char)0x2CD9;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_ESH = (char)0x2CC7;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_GANGIA = (char)0x2CD7;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_HA = (char)0x2CCF;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_HAT = (char)0x2CD5;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_HEI = (char)0x2CD3;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_HORI = (char)0x2CCD;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_OOU = (char)0x2CBF;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_SHEI = (char)0x2CC5;
			public const char COPTIC_SMALL_LETTER_OLD_COPTIC_SHIMA = (char)0x2CDB;
			public const char COPTIC_SMALL_LETTER_OLD_NUBIAN_NGI = (char)0x2CDF;
			public const char COPTIC_SMALL_LETTER_OLD_NUBIAN_NYI = (char)0x2CE1;
			public const char COPTIC_SMALL_LETTER_OLD_NUBIAN_SHIMA = (char)0x2CDD;
			public const char COPTIC_SMALL_LETTER_OLD_NUBIAN_WAU = (char)0x2CE3;
			public const char COPTIC_SMALL_LETTER_OOU = (char)0x2CB1;
			public const char COPTIC_SMALL_LETTER_PI = (char)0x2CA1;
			public const char COPTIC_SMALL_LETTER_PSI = (char)0x2CAF;
			public const char COPTIC_SMALL_LETTER_RO = (char)0x2CA3;
			public const char COPTIC_SMALL_LETTER_SAMPI = (char)0x2CC1;
			/// <summary> Formerly GREEK SMALL LETTER SHEI. </summary>
			public const char COPTIC_SMALL_LETTER_SHEI = (char)0x03E3;
			/// <summary> Formerly GREEK SMALL LETTER SHIMA. </summary>
			public const char COPTIC_SMALL_LETTER_SHIMA = (char)0x03ED;
			public const char COPTIC_SMALL_LETTER_SIMA = (char)0x2CA5;
			public const char COPTIC_SMALL_LETTER_SOU = (char)0x2C8B;
			public const char COPTIC_SMALL_LETTER_TAU = (char)0x2CA7;
			public const char COPTIC_SMALL_LETTER_THETHE = (char)0x2C91;
			public const char COPTIC_SMALL_LETTER_UA = (char)0x2CA9;
			public const char COPTIC_SMALL_LETTER_VIDA = (char)0x2C83;
			public const char COPTIC_SMALL_LETTER_ZATA = (char)0x2C8D;
			public const char COPTIC_SYMBOL_KAI = (char)0x2CE4;
			public const char COPTIC_SYMBOL_KHI_RO = (char)0x2CE9;
			public const char COPTIC_SYMBOL_MI_RO = (char)0x2CE5;
			public const char COPTIC_SYMBOL_PI_RO = (char)0x2CE6;
			public const char COPTIC_SYMBOL_SHIMA_SIMA = (char)0x2CEA;
			public const char COPTIC_SYMBOL_STAUROS = (char)0x2CE7;
			public const char COPTIC_SYMBOL_TAU_RO = (char)0x2CE8;
			public const char COPYRIGHT_SIGN = (char)0x00A9;
			public const char CORRESPONDS_TO = (char)0x2258;
			public const char COUNTERBORE = (char)0x2334;
			public const char COUNTERSINK = (char)0x2335;
			public const char CROSSED_SWORDS = (char)0x2694;
			public const char CROSS_OF_JERUSALEM = (char)0x2629;
			public const char CROSS_OF_LORRAINE = (char)0x2628;
			public const char CRUZEIRO_SIGN = (char)0x20A2;
			public const char CUBE_ROOT = (char)0x221B;
			public const char CURLY_BRACKET_EXTENSION = (char)0x23AA;
			public const char CURLY_LOGICAL_AND = (char)0x22CF;
			public const char CURLY_LOGICAL_OR = (char)0x22CE;
			public const char CURRENCY_SIGN = (char)0x00A4;
			public const char CURVED_STEM_PARAGRAPH_SIGN_ORNAMENT = (char)0x2761;
			public const char CYLINDRICITY = (char)0x232D;
			public const char CYRILLIC_CAPITAL_LETTER_A = (char)0x0410;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER IE HOOK. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ABKHASIAN_CHE = (char)0x04BC;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER IE HOOK OGONEK. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ABKHASIAN_CHE_WITH_DESCENDER = (char)0x04BE;
			public const char CYRILLIC_CAPITAL_LETTER_ABKHASIAN_DZE = (char)0x04E0;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER O HOOK. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ABKHASIAN_HA = (char)0x04A8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_A_WITH_BREVE = (char)0x04D0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_A_WITH_DIAERESIS = (char)0x04D2;
			public const char CYRILLIC_CAPITAL_LETTER_BARRED_O = (char)0x04E8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_BARRED_O_WITH_DIAERESIS = (char)0x04EA;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER REVERSED GE KA. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_BASHKIR_KA = (char)0x04A0;
			public const char CYRILLIC_CAPITAL_LETTER_BE = (char)0x0411;
			public const char CYRILLIC_CAPITAL_LETTER_BIG_YUS = (char)0x046A;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER I. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_BYELORUSSIAN_UKRAINIAN_I = (char)0x0406;
			public const char CYRILLIC_CAPITAL_LETTER_CHE = (char)0x0427;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER CHE WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_CHE_WITH_DESCENDER = (char)0x04B6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_CHE_WITH_DIAERESIS = (char)0x04F4;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER CHE VERTICAL BAR. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_CHE_WITH_VERTICAL_STROKE = (char)0x04B8;
			public const char CYRILLIC_CAPITAL_LETTER_DE = (char)0x0414;
			public const char CYRILLIC_CAPITAL_LETTER_DJE = (char)0x0402;
			public const char CYRILLIC_CAPITAL_LETTER_DZE = (char)0x0405;
			public const char CYRILLIC_CAPITAL_LETTER_DZHE = (char)0x040F;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER REVERSED E. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_E = (char)0x042D;
			public const char CYRILLIC_CAPITAL_LETTER_EF = (char)0x0424;
			public const char CYRILLIC_CAPITAL_LETTER_EL = (char)0x041B;
			public const char CYRILLIC_CAPITAL_LETTER_EL_WITH_TAIL = (char)0x04C5;
			public const char CYRILLIC_CAPITAL_LETTER_EM = (char)0x041C;
			public const char CYRILLIC_CAPITAL_LETTER_EM_WITH_TAIL = (char)0x04CD;
			public const char CYRILLIC_CAPITAL_LETTER_EN = (char)0x041D;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER EN WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_EN_WITH_DESCENDER = (char)0x04A2;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER EN HOOK. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_EN_WITH_HOOK = (char)0x04C7;
			public const char CYRILLIC_CAPITAL_LETTER_EN_WITH_TAIL = (char)0x04C9;
			public const char CYRILLIC_CAPITAL_LETTER_ER = (char)0x0420;
			public const char CYRILLIC_CAPITAL_LETTER_ER_WITH_TICK = (char)0x048E;
			public const char CYRILLIC_CAPITAL_LETTER_ES = (char)0x0421;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER ES CEDILLA. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ES_WITH_DESCENDER = (char)0x04AA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_E_WITH_DIAERESIS = (char)0x04EC;
			public const char CYRILLIC_CAPITAL_LETTER_FITA = (char)0x0472;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER GE. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_GHE = (char)0x0413;
			public const char CYRILLIC_CAPITAL_LETTER_GHE_WITH_DESCENDER = (char)0x04F6;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER GE HOOK. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_GHE_WITH_MIDDLE_HOOK = (char)0x0494;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER GE BAR. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_GHE_WITH_STROKE = (char)0x0492;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER GE WITH UPTURN. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_GHE_WITH_UPTURN = (char)0x0490;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_GJE = (char)0x0403;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER KHA. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_HA = (char)0x0425;
			public const char CYRILLIC_CAPITAL_LETTER_HARD_SIGN = (char)0x042A;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER KHA WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_HA_WITH_DESCENDER = (char)0x04B2;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER II. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_I = (char)0x0418;
			public const char CYRILLIC_CAPITAL_LETTER_IE = (char)0x0415;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_IE_WITH_BREVE = (char)0x04D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_IE_WITH_GRAVE = (char)0x0400;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_IO = (char)0x0401;
			public const char CYRILLIC_CAPITAL_LETTER_IOTIFIED_BIG_YUS = (char)0x046C;
			public const char CYRILLIC_CAPITAL_LETTER_IOTIFIED_E = (char)0x0464;
			public const char CYRILLIC_CAPITAL_LETTER_IOTIFIED_LITTLE_YUS = (char)0x0468;
			public const char CYRILLIC_CAPITAL_LETTER_IZHITSA = (char)0x0474;
			/// <summary> (This is a composition; consider avoiding.) Formerly CYRILLIC CAPITAL LETTER IZHITSA DOUBLE GRAVE. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_IZHITSA_WITH_DOUBLE_GRAVE_ACCENT = (char)0x0476;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_I_WITH_DIAERESIS = (char)0x04E4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_I_WITH_GRAVE = (char)0x040D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_I_WITH_MACRON = (char)0x04E2;
			public const char CYRILLIC_CAPITAL_LETTER_JE = (char)0x0408;
			public const char CYRILLIC_CAPITAL_LETTER_KA = (char)0x041A;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER KA WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_KA_WITH_DESCENDER = (char)0x049A;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER KA HOOK. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_KA_WITH_HOOK = (char)0x04C3;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER KA BAR. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_KA_WITH_STROKE = (char)0x049E;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER KA VERTICAL BAR. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_KA_WITH_VERTICAL_STROKE = (char)0x049C;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER CHE WITH LEFT DESCENDER. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_KHAKASSIAN_CHE = (char)0x04CB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_KJE = (char)0x040C;
			public const char CYRILLIC_CAPITAL_LETTER_KOMI_DE = (char)0x0500;
			public const char CYRILLIC_CAPITAL_LETTER_KOMI_DJE = (char)0x0502;
			public const char CYRILLIC_CAPITAL_LETTER_KOMI_DZJE = (char)0x0506;
			public const char CYRILLIC_CAPITAL_LETTER_KOMI_LJE = (char)0x0508;
			public const char CYRILLIC_CAPITAL_LETTER_KOMI_NJE = (char)0x050A;
			public const char CYRILLIC_CAPITAL_LETTER_KOMI_SJE = (char)0x050C;
			public const char CYRILLIC_CAPITAL_LETTER_KOMI_TJE = (char)0x050E;
			public const char CYRILLIC_CAPITAL_LETTER_KOMI_ZJE = (char)0x0504;
			public const char CYRILLIC_CAPITAL_LETTER_KOPPA = (char)0x0480;
			public const char CYRILLIC_CAPITAL_LETTER_KSI = (char)0x046E;
			public const char CYRILLIC_CAPITAL_LETTER_LITTLE_YUS = (char)0x0466;
			public const char CYRILLIC_CAPITAL_LETTER_LJE = (char)0x0409;
			public const char CYRILLIC_CAPITAL_LETTER_NJE = (char)0x040A;
			public const char CYRILLIC_CAPITAL_LETTER_O = (char)0x041E;
			public const char CYRILLIC_CAPITAL_LETTER_OMEGA = (char)0x0460;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER OMEGA TITLO. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_OMEGA_WITH_TITLO = (char)0x047C;
			public const char CYRILLIC_CAPITAL_LETTER_OT = (char)0x047E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_O_WITH_DIAERESIS = (char)0x04E6;
			public const char CYRILLIC_CAPITAL_LETTER_PE = (char)0x041F;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER PE HOOK. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_PE_WITH_MIDDLE_HOOK = (char)0x04A6;
			public const char CYRILLIC_CAPITAL_LETTER_PSI = (char)0x0470;
			public const char CYRILLIC_CAPITAL_LETTER_ROUND_OMEGA = (char)0x047A;
			public const char CYRILLIC_CAPITAL_LETTER_SCHWA = (char)0x04D8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_SCHWA_WITH_DIAERESIS = (char)0x04DA;
			public const char CYRILLIC_CAPITAL_LETTER_SEMISOFT_SIGN = (char)0x048C;
			public const char CYRILLIC_CAPITAL_LETTER_SHA = (char)0x0428;
			public const char CYRILLIC_CAPITAL_LETTER_SHCHA = (char)0x0429;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER H. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_SHHA = (char)0x04BA;
			/// <summary> (This is a composition; consider avoiding.) Formerly CYRILLIC CAPITAL LETTER SHORT II. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_SHORT_I = (char)0x0419;
			public const char CYRILLIC_CAPITAL_LETTER_SHORT_I_WITH_TAIL = (char)0x048A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_SHORT_U = (char)0x040E;
			public const char CYRILLIC_CAPITAL_LETTER_SOFT_SIGN = (char)0x042C;
			public const char CYRILLIC_CAPITAL_LETTER_STRAIGHT_U = (char)0x04AE;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER STRAIGHT U BAR. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_STRAIGHT_U_WITH_STROKE = (char)0x04B0;
			public const char CYRILLIC_CAPITAL_LETTER_TE = (char)0x0422;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER TE WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_TE_WITH_DESCENDER = (char)0x04AC;
			public const char CYRILLIC_CAPITAL_LETTER_TSE = (char)0x0426;
			public const char CYRILLIC_CAPITAL_LETTER_TSHE = (char)0x040B;
			public const char CYRILLIC_CAPITAL_LETTER_U = (char)0x0423;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER UK DIGRAPH. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_UK = (char)0x0478;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER E. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_UKRAINIAN_IE = (char)0x0404;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_U_WITH_DIAERESIS = (char)0x04F0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE = (char)0x04F2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_U_WITH_MACRON = (char)0x04EE;
			public const char CYRILLIC_CAPITAL_LETTER_VE = (char)0x0412;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER IA. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_YA = (char)0x042F;
			public const char CYRILLIC_CAPITAL_LETTER_YAT = (char)0x0462;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER YERI. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_YERU = (char)0x042B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_YERU_WITH_DIAERESIS = (char)0x04F8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_YI = (char)0x0407;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER IU. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_YU = (char)0x042E;
			public const char CYRILLIC_CAPITAL_LETTER_ZE = (char)0x0417;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER ZE CEDILLA. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ZE_WITH_DESCENDER = (char)0x0498;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ZE_WITH_DIAERESIS = (char)0x04DE;
			public const char CYRILLIC_CAPITAL_LETTER_ZHE = (char)0x0416;
			/// <summary> (This is a composition; consider avoiding.) Formerly CYRILLIC CAPITAL LETTER SHORT ZHE. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ZHE_WITH_BREVE = (char)0x04C1;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER ZHE WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ZHE_WITH_DESCENDER = (char)0x0496;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_CAPITAL_LETTER_ZHE_WITH_DIAERESIS = (char)0x04DC;
			public const char CYRILLIC_CAPITAL_LIGATURE_A_IE = (char)0x04D4;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER EN GE. </summary>
			public const char CYRILLIC_CAPITAL_LIGATURE_EN_GHE = (char)0x04A4;
			/// <summary> Formerly CYRILLIC CAPITAL LETTER TE TSE. </summary>
			public const char CYRILLIC_CAPITAL_LIGATURE_TE_TSE = (char)0x04B4;
			/// <summary> Formerly CYRILLIC LETTER I. </summary>
			public const char CYRILLIC_LETTER_PALOCHKA = (char)0x04C0;
			public const char CYRILLIC_LETTER_SMALL_CAPITAL_EL = (char)0x1D2B;
			public const char CYRILLIC_SMALL_LETTER_A = (char)0x0430;
			/// <summary> Formerly CYRILLIC SMALL LETTER IE HOOK. </summary>
			public const char CYRILLIC_SMALL_LETTER_ABKHASIAN_CHE = (char)0x04BD;
			/// <summary> Formerly CYRILLIC SMALL LETTER IE HOOK OGONEK. </summary>
			public const char CYRILLIC_SMALL_LETTER_ABKHASIAN_CHE_WITH_DESCENDER = (char)0x04BF;
			public const char CYRILLIC_SMALL_LETTER_ABKHASIAN_DZE = (char)0x04E1;
			/// <summary> Formerly CYRILLIC SMALL LETTER O HOOK. </summary>
			public const char CYRILLIC_SMALL_LETTER_ABKHASIAN_HA = (char)0x04A9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_A_WITH_BREVE = (char)0x04D1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_A_WITH_DIAERESIS = (char)0x04D3;
			public const char CYRILLIC_SMALL_LETTER_BARRED_O = (char)0x04E9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_BARRED_O_WITH_DIAERESIS = (char)0x04EB;
			/// <summary> Formerly CYRILLIC SMALL LETTER REVERSED GE KA. </summary>
			public const char CYRILLIC_SMALL_LETTER_BASHKIR_KA = (char)0x04A1;
			public const char CYRILLIC_SMALL_LETTER_BE = (char)0x0431;
			public const char CYRILLIC_SMALL_LETTER_BIG_YUS = (char)0x046B;
			/// <summary> Formerly CYRILLIC SMALL LETTER I. </summary>
			public const char CYRILLIC_SMALL_LETTER_BYELORUSSIAN_UKRAINIAN_I = (char)0x0456;
			public const char CYRILLIC_SMALL_LETTER_CHE = (char)0x0447;
			/// <summary> Formerly CYRILLIC SMALL LETTER CHE WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_SMALL_LETTER_CHE_WITH_DESCENDER = (char)0x04B7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_CHE_WITH_DIAERESIS = (char)0x04F5;
			/// <summary> Formerly CYRILLIC SMALL LETTER CHE VERTICAL BAR. </summary>
			public const char CYRILLIC_SMALL_LETTER_CHE_WITH_VERTICAL_STROKE = (char)0x04B9;
			public const char CYRILLIC_SMALL_LETTER_DE = (char)0x0434;
			public const char CYRILLIC_SMALL_LETTER_DJE = (char)0x0452;
			public const char CYRILLIC_SMALL_LETTER_DZE = (char)0x0455;
			public const char CYRILLIC_SMALL_LETTER_DZHE = (char)0x045F;
			/// <summary> Formerly CYRILLIC SMALL LETTER REVERSED E. </summary>
			public const char CYRILLIC_SMALL_LETTER_E = (char)0x044D;
			public const char CYRILLIC_SMALL_LETTER_EF = (char)0x0444;
			public const char CYRILLIC_SMALL_LETTER_EL = (char)0x043B;
			public const char CYRILLIC_SMALL_LETTER_EL_WITH_TAIL = (char)0x04C6;
			public const char CYRILLIC_SMALL_LETTER_EM = (char)0x043C;
			public const char CYRILLIC_SMALL_LETTER_EM_WITH_TAIL = (char)0x04CE;
			public const char CYRILLIC_SMALL_LETTER_EN = (char)0x043D;
			/// <summary> Formerly CYRILLIC SMALL LETTER EN WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_SMALL_LETTER_EN_WITH_DESCENDER = (char)0x04A3;
			/// <summary> Formerly CYRILLIC SMALL LETTER EN HOOK. </summary>
			public const char CYRILLIC_SMALL_LETTER_EN_WITH_HOOK = (char)0x04C8;
			public const char CYRILLIC_SMALL_LETTER_EN_WITH_TAIL = (char)0x04CA;
			public const char CYRILLIC_SMALL_LETTER_ER = (char)0x0440;
			public const char CYRILLIC_SMALL_LETTER_ER_WITH_TICK = (char)0x048F;
			public const char CYRILLIC_SMALL_LETTER_ES = (char)0x0441;
			/// <summary> Formerly CYRILLIC SMALL LETTER ES CEDILLA. </summary>
			public const char CYRILLIC_SMALL_LETTER_ES_WITH_DESCENDER = (char)0x04AB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_E_WITH_DIAERESIS = (char)0x04ED;
			public const char CYRILLIC_SMALL_LETTER_FITA = (char)0x0473;
			/// <summary> Formerly CYRILLIC SMALL LETTER GE. </summary>
			public const char CYRILLIC_SMALL_LETTER_GHE = (char)0x0433;
			public const char CYRILLIC_SMALL_LETTER_GHE_WITH_DESCENDER = (char)0x04F7;
			/// <summary> Formerly CYRILLIC SMALL LETTER GE HOOK. </summary>
			public const char CYRILLIC_SMALL_LETTER_GHE_WITH_MIDDLE_HOOK = (char)0x0495;
			/// <summary> Formerly CYRILLIC SMALL LETTER GE BAR. </summary>
			public const char CYRILLIC_SMALL_LETTER_GHE_WITH_STROKE = (char)0x0493;
			/// <summary> Formerly CYRILLIC SMALL LETTER GE WITH UPTURN. </summary>
			public const char CYRILLIC_SMALL_LETTER_GHE_WITH_UPTURN = (char)0x0491;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_GJE = (char)0x0453;
			/// <summary> Formerly CYRILLIC SMALL LETTER KHA. </summary>
			public const char CYRILLIC_SMALL_LETTER_HA = (char)0x0445;
			public const char CYRILLIC_SMALL_LETTER_HARD_SIGN = (char)0x044A;
			/// <summary> Formerly CYRILLIC SMALL LETTER KHA WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_SMALL_LETTER_HA_WITH_DESCENDER = (char)0x04B3;
			/// <summary> Formerly CYRILLIC SMALL LETTER II. </summary>
			public const char CYRILLIC_SMALL_LETTER_I = (char)0x0438;
			public const char CYRILLIC_SMALL_LETTER_IE = (char)0x0435;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_IE_WITH_BREVE = (char)0x04D7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_IE_WITH_GRAVE = (char)0x0450;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_IO = (char)0x0451;
			public const char CYRILLIC_SMALL_LETTER_IOTIFIED_BIG_YUS = (char)0x046D;
			public const char CYRILLIC_SMALL_LETTER_IOTIFIED_E = (char)0x0465;
			public const char CYRILLIC_SMALL_LETTER_IOTIFIED_LITTLE_YUS = (char)0x0469;
			public const char CYRILLIC_SMALL_LETTER_IZHITSA = (char)0x0475;
			/// <summary> (This is a composition; consider avoiding.) Formerly CYRILLIC SMALL LETTER IZHITSA DOUBLE GRAVE. </summary>
			public const char CYRILLIC_SMALL_LETTER_IZHITSA_WITH_DOUBLE_GRAVE_ACCENT = (char)0x0477;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_I_WITH_DIAERESIS = (char)0x04E5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_I_WITH_GRAVE = (char)0x045D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_I_WITH_MACRON = (char)0x04E3;
			public const char CYRILLIC_SMALL_LETTER_JE = (char)0x0458;
			public const char CYRILLIC_SMALL_LETTER_KA = (char)0x043A;
			/// <summary> Formerly CYRILLIC SMALL LETTER KA WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_SMALL_LETTER_KA_WITH_DESCENDER = (char)0x049B;
			/// <summary> Formerly CYRILLIC SMALL LETTER KA HOOK. </summary>
			public const char CYRILLIC_SMALL_LETTER_KA_WITH_HOOK = (char)0x04C4;
			/// <summary> Formerly CYRILLIC SMALL LETTER KA BAR. </summary>
			public const char CYRILLIC_SMALL_LETTER_KA_WITH_STROKE = (char)0x049F;
			/// <summary> Formerly CYRILLIC SMALL LETTER KA VERTICAL BAR. </summary>
			public const char CYRILLIC_SMALL_LETTER_KA_WITH_VERTICAL_STROKE = (char)0x049D;
			/// <summary> Formerly CYRILLIC SMALL LETTER CHE WITH LEFT DESCENDER. </summary>
			public const char CYRILLIC_SMALL_LETTER_KHAKASSIAN_CHE = (char)0x04CC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_KJE = (char)0x045C;
			public const char CYRILLIC_SMALL_LETTER_KOMI_DE = (char)0x0501;
			public const char CYRILLIC_SMALL_LETTER_KOMI_DJE = (char)0x0503;
			public const char CYRILLIC_SMALL_LETTER_KOMI_DZJE = (char)0x0507;
			public const char CYRILLIC_SMALL_LETTER_KOMI_LJE = (char)0x0509;
			public const char CYRILLIC_SMALL_LETTER_KOMI_NJE = (char)0x050B;
			public const char CYRILLIC_SMALL_LETTER_KOMI_SJE = (char)0x050D;
			public const char CYRILLIC_SMALL_LETTER_KOMI_TJE = (char)0x050F;
			public const char CYRILLIC_SMALL_LETTER_KOMI_ZJE = (char)0x0505;
			public const char CYRILLIC_SMALL_LETTER_KOPPA = (char)0x0481;
			public const char CYRILLIC_SMALL_LETTER_KSI = (char)0x046F;
			public const char CYRILLIC_SMALL_LETTER_LITTLE_YUS = (char)0x0467;
			public const char CYRILLIC_SMALL_LETTER_LJE = (char)0x0459;
			public const char CYRILLIC_SMALL_LETTER_NJE = (char)0x045A;
			public const char CYRILLIC_SMALL_LETTER_O = (char)0x043E;
			public const char CYRILLIC_SMALL_LETTER_OMEGA = (char)0x0461;
			/// <summary> Formerly CYRILLIC SMALL LETTER OMEGA TITLO. </summary>
			public const char CYRILLIC_SMALL_LETTER_OMEGA_WITH_TITLO = (char)0x047D;
			public const char CYRILLIC_SMALL_LETTER_OT = (char)0x047F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_O_WITH_DIAERESIS = (char)0x04E7;
			public const char CYRILLIC_SMALL_LETTER_PE = (char)0x043F;
			/// <summary> Formerly CYRILLIC SMALL LETTER PE HOOK. </summary>
			public const char CYRILLIC_SMALL_LETTER_PE_WITH_MIDDLE_HOOK = (char)0x04A7;
			public const char CYRILLIC_SMALL_LETTER_PSI = (char)0x0471;
			public const char CYRILLIC_SMALL_LETTER_ROUND_OMEGA = (char)0x047B;
			public const char CYRILLIC_SMALL_LETTER_SCHWA = (char)0x04D9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_SCHWA_WITH_DIAERESIS = (char)0x04DB;
			public const char CYRILLIC_SMALL_LETTER_SEMISOFT_SIGN = (char)0x048D;
			public const char CYRILLIC_SMALL_LETTER_SHA = (char)0x0448;
			public const char CYRILLIC_SMALL_LETTER_SHCHA = (char)0x0449;
			/// <summary> Formerly CYRILLIC SMALL LETTER H. </summary>
			public const char CYRILLIC_SMALL_LETTER_SHHA = (char)0x04BB;
			/// <summary> (This is a composition; consider avoiding.) Formerly CYRILLIC SMALL LETTER SHORT II. </summary>
			public const char CYRILLIC_SMALL_LETTER_SHORT_I = (char)0x0439;
			public const char CYRILLIC_SMALL_LETTER_SHORT_I_WITH_TAIL = (char)0x048B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_SHORT_U = (char)0x045E;
			public const char CYRILLIC_SMALL_LETTER_SOFT_SIGN = (char)0x044C;
			public const char CYRILLIC_SMALL_LETTER_STRAIGHT_U = (char)0x04AF;
			/// <summary> Formerly CYRILLIC SMALL LETTER STRAIGHT U BAR. </summary>
			public const char CYRILLIC_SMALL_LETTER_STRAIGHT_U_WITH_STROKE = (char)0x04B1;
			public const char CYRILLIC_SMALL_LETTER_TE = (char)0x0442;
			/// <summary> Formerly CYRILLIC SMALL LETTER TE WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_SMALL_LETTER_TE_WITH_DESCENDER = (char)0x04AD;
			public const char CYRILLIC_SMALL_LETTER_TSE = (char)0x0446;
			public const char CYRILLIC_SMALL_LETTER_TSHE = (char)0x045B;
			public const char CYRILLIC_SMALL_LETTER_U = (char)0x0443;
			/// <summary> Formerly CYRILLIC SMALL LETTER UK DIGRAPH. </summary>
			public const char CYRILLIC_SMALL_LETTER_UK = (char)0x0479;
			/// <summary> Formerly CYRILLIC SMALL LETTER E. </summary>
			public const char CYRILLIC_SMALL_LETTER_UKRAINIAN_IE = (char)0x0454;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_U_WITH_DIAERESIS = (char)0x04F1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_U_WITH_DOUBLE_ACUTE = (char)0x04F3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_U_WITH_MACRON = (char)0x04EF;
			public const char CYRILLIC_SMALL_LETTER_VE = (char)0x0432;
			/// <summary> Formerly CYRILLIC SMALL LETTER IA. </summary>
			public const char CYRILLIC_SMALL_LETTER_YA = (char)0x044F;
			public const char CYRILLIC_SMALL_LETTER_YAT = (char)0x0463;
			/// <summary> Formerly CYRILLIC SMALL LETTER YERI. </summary>
			public const char CYRILLIC_SMALL_LETTER_YERU = (char)0x044B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_YERU_WITH_DIAERESIS = (char)0x04F9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_YI = (char)0x0457;
			/// <summary> Formerly CYRILLIC SMALL LETTER IU. </summary>
			public const char CYRILLIC_SMALL_LETTER_YU = (char)0x044E;
			public const char CYRILLIC_SMALL_LETTER_ZE = (char)0x0437;
			/// <summary> Formerly CYRILLIC SMALL LETTER ZE CEDILLA. </summary>
			public const char CYRILLIC_SMALL_LETTER_ZE_WITH_DESCENDER = (char)0x0499;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_ZE_WITH_DIAERESIS = (char)0x04DF;
			public const char CYRILLIC_SMALL_LETTER_ZHE = (char)0x0436;
			/// <summary> (This is a composition; consider avoiding.) Formerly CYRILLIC SMALL LETTER SHORT ZHE. </summary>
			public const char CYRILLIC_SMALL_LETTER_ZHE_WITH_BREVE = (char)0x04C2;
			/// <summary> Formerly CYRILLIC SMALL LETTER ZHE WITH RIGHT DESCENDER. </summary>
			public const char CYRILLIC_SMALL_LETTER_ZHE_WITH_DESCENDER = (char)0x0497;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char CYRILLIC_SMALL_LETTER_ZHE_WITH_DIAERESIS = (char)0x04DD;
			public const char CYRILLIC_SMALL_LIGATURE_A_IE = (char)0x04D5;
			/// <summary> Formerly CYRILLIC SMALL LETTER EN GE. </summary>
			public const char CYRILLIC_SMALL_LIGATURE_EN_GHE = (char)0x04A5;
			/// <summary> Formerly CYRILLIC SMALL LETTER TE TSE. </summary>
			public const char CYRILLIC_SMALL_LIGATURE_TE_TSE = (char)0x04B5;
			public const char CYRILLIC_THOUSANDS_SIGN = (char)0x0482;
		}
		public class D {
			public const char DAGGER = (char)0x2020;
			/// <summary> (This is a composition; consider avoiding.) Formerly FOURTH TRANSFINITE CARDINAL. </summary>
			public const char DALET_SYMBOL = (char)0x2138;
			public const char DARK_SHADE = (char)0x2593;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING DASHED UNDERSCORE. </summary>
			public const char DASHED_LOW_LINE = (char)0xFE4D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING DASHED OVERSCORE. </summary>
			public const char DASHED_OVERLINE = (char)0xFE49;
			/// <summary> Formerly DASHED TRIANGLE-HEADED RIGHT ARROW. </summary>
			public const char DASHED_TRIANGLE_HEADED_RIGHTWARDS_ARROW = (char)0x279F;
			public const char DECIMAL_SEPARATOR_KEY_SYMBOL = (char)0x2396;
			/// <summary> (This is a composition; consider avoiding.) Formerly DEGREES CENTIGRADE. </summary>
			public const char DEGREE_CELSIUS = (char)0x2103;
			/// <summary> (This is a composition; consider avoiding.) Formerly DEGREES FAHRENHEIT. </summary>
			public const char DEGREE_FAHRENHEIT = (char)0x2109;
			public const char DEGREE_SIGN = (char)0x00B0;
			public const char DELTA_EQUAL_TO = (char)0x225C;
			public const char DENTISTRY_SYMBOL_LIGHT_DOWN_AND_HORIZONTAL = (char)0x23C9;
			public const char DENTISTRY_SYMBOL_LIGHT_DOWN_AND_HORIZONTAL_WITH_CIRCLE = (char)0x23C1;
			public const char DENTISTRY_SYMBOL_LIGHT_DOWN_AND_HORIZONTAL_WITH_TRIANGLE = (char)0x23C4;
			public const char DENTISTRY_SYMBOL_LIGHT_DOWN_AND_HORIZONTAL_WITH_WAVE = (char)0x23C7;
			public const char DENTISTRY_SYMBOL_LIGHT_UP_AND_HORIZONTAL = (char)0x23CA;
			public const char DENTISTRY_SYMBOL_LIGHT_UP_AND_HORIZONTAL_WITH_CIRCLE = (char)0x23C2;
			public const char DENTISTRY_SYMBOL_LIGHT_UP_AND_HORIZONTAL_WITH_TRIANGLE = (char)0x23C5;
			public const char DENTISTRY_SYMBOL_LIGHT_UP_AND_HORIZONTAL_WITH_WAVE = (char)0x23C8;
			public const char DENTISTRY_SYMBOL_LIGHT_VERTICAL_AND_BOTTOM_LEFT = (char)0x23CC;
			public const char DENTISTRY_SYMBOL_LIGHT_VERTICAL_AND_BOTTOM_RIGHT = (char)0x23BF;
			public const char DENTISTRY_SYMBOL_LIGHT_VERTICAL_AND_TOP_LEFT = (char)0x23CB;
			public const char DENTISTRY_SYMBOL_LIGHT_VERTICAL_AND_TOP_RIGHT = (char)0x23BE;
			public const char DENTISTRY_SYMBOL_LIGHT_VERTICAL_AND_WAVE = (char)0x23C6;
			public const char DENTISTRY_SYMBOL_LIGHT_VERTICAL_WITH_CIRCLE = (char)0x23C0;
			public const char DENTISTRY_SYMBOL_LIGHT_VERTICAL_WITH_TRIANGLE = (char)0x23C3;
			public const char DESCENDING_NODE = (char)0x260B;
			public const char DEVANAGARI_ABBREVIATION_SIGN = (char)0x0970;
			public const char DEVANAGARI_ACUTE_ACCENT = (char)0x0954;
			public const char DEVANAGARI_DANDA = (char)0x0964;
			public const char DEVANAGARI_DIGIT_EIGHT = (char)0x096E;
			public const char DEVANAGARI_DIGIT_FIVE = (char)0x096B;
			public const char DEVANAGARI_DIGIT_FOUR = (char)0x096A;
			public const char DEVANAGARI_DIGIT_NINE = (char)0x096F;
			public const char DEVANAGARI_DIGIT_ONE = (char)0x0967;
			public const char DEVANAGARI_DIGIT_SEVEN = (char)0x096D;
			public const char DEVANAGARI_DIGIT_SIX = (char)0x096C;
			public const char DEVANAGARI_DIGIT_THREE = (char)0x0969;
			public const char DEVANAGARI_DIGIT_TWO = (char)0x0968;
			public const char DEVANAGARI_DIGIT_ZERO = (char)0x0966;
			public const char DEVANAGARI_DOUBLE_DANDA = (char)0x0965;
			public const char DEVANAGARI_GRAVE_ACCENT = (char)0x0953;
			public const char DEVANAGARI_LETTER_A = (char)0x0905;
			public const char DEVANAGARI_LETTER_AA = (char)0x0906;
			public const char DEVANAGARI_LETTER_AI = (char)0x0910;
			public const char DEVANAGARI_LETTER_AU = (char)0x0914;
			public const char DEVANAGARI_LETTER_BA = (char)0x092C;
			public const char DEVANAGARI_LETTER_BHA = (char)0x092D;
			public const char DEVANAGARI_LETTER_CA = (char)0x091A;
			public const char DEVANAGARI_LETTER_CANDRA_E = (char)0x090D;
			public const char DEVANAGARI_LETTER_CANDRA_O = (char)0x0911;
			public const char DEVANAGARI_LETTER_CHA = (char)0x091B;
			public const char DEVANAGARI_LETTER_DA = (char)0x0926;
			public const char DEVANAGARI_LETTER_DDA = (char)0x0921;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_DDDHA = (char)0x095C;
			public const char DEVANAGARI_LETTER_DDHA = (char)0x0922;
			public const char DEVANAGARI_LETTER_DHA = (char)0x0927;
			public const char DEVANAGARI_LETTER_E = (char)0x090F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_FA = (char)0x095E;
			public const char DEVANAGARI_LETTER_GA = (char)0x0917;
			public const char DEVANAGARI_LETTER_GHA = (char)0x0918;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_GHHA = (char)0x095A;
			public const char DEVANAGARI_LETTER_GLOTTAL_STOP = (char)0x097D;
			public const char DEVANAGARI_LETTER_HA = (char)0x0939;
			public const char DEVANAGARI_LETTER_I = (char)0x0907;
			public const char DEVANAGARI_LETTER_II = (char)0x0908;
			public const char DEVANAGARI_LETTER_JA = (char)0x091C;
			public const char DEVANAGARI_LETTER_JHA = (char)0x091D;
			public const char DEVANAGARI_LETTER_KA = (char)0x0915;
			public const char DEVANAGARI_LETTER_KHA = (char)0x0916;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_KHHA = (char)0x0959;
			public const char DEVANAGARI_LETTER_LA = (char)0x0932;
			public const char DEVANAGARI_LETTER_LLA = (char)0x0933;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_LLLA = (char)0x0934;
			public const char DEVANAGARI_LETTER_MA = (char)0x092E;
			public const char DEVANAGARI_LETTER_NA = (char)0x0928;
			public const char DEVANAGARI_LETTER_NGA = (char)0x0919;
			public const char DEVANAGARI_LETTER_NNA = (char)0x0923;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_NNNA = (char)0x0929;
			public const char DEVANAGARI_LETTER_NYA = (char)0x091E;
			public const char DEVANAGARI_LETTER_O = (char)0x0913;
			public const char DEVANAGARI_LETTER_PA = (char)0x092A;
			public const char DEVANAGARI_LETTER_PHA = (char)0x092B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_QA = (char)0x0958;
			public const char DEVANAGARI_LETTER_RA = (char)0x0930;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_RHA = (char)0x095D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_RRA = (char)0x0931;
			public const char DEVANAGARI_LETTER_SA = (char)0x0938;
			public const char DEVANAGARI_LETTER_SHA = (char)0x0936;
			public const char DEVANAGARI_LETTER_SHORT_A = (char)0x0904;
			public const char DEVANAGARI_LETTER_SHORT_E = (char)0x090E;
			public const char DEVANAGARI_LETTER_SHORT_O = (char)0x0912;
			public const char DEVANAGARI_LETTER_SSA = (char)0x0937;
			public const char DEVANAGARI_LETTER_TA = (char)0x0924;
			public const char DEVANAGARI_LETTER_THA = (char)0x0925;
			public const char DEVANAGARI_LETTER_TTA = (char)0x091F;
			public const char DEVANAGARI_LETTER_TTHA = (char)0x0920;
			public const char DEVANAGARI_LETTER_U = (char)0x0909;
			public const char DEVANAGARI_LETTER_UU = (char)0x090A;
			public const char DEVANAGARI_LETTER_VA = (char)0x0935;
			public const char DEVANAGARI_LETTER_VOCALIC_L = (char)0x090C;
			public const char DEVANAGARI_LETTER_VOCALIC_LL = (char)0x0961;
			public const char DEVANAGARI_LETTER_VOCALIC_R = (char)0x090B;
			public const char DEVANAGARI_LETTER_VOCALIC_RR = (char)0x0960;
			public const char DEVANAGARI_LETTER_YA = (char)0x092F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_YYA = (char)0x095F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DEVANAGARI_LETTER_ZA = (char)0x095B;
			public const char DEVANAGARI_OM = (char)0x0950;
			public const char DEVANAGARI_SIGN_ANUSVARA = (char)0x0902;
			public const char DEVANAGARI_SIGN_AVAGRAHA = (char)0x093D;
			public const char DEVANAGARI_SIGN_CANDRABINDU = (char)0x0901;
			public const char DEVANAGARI_SIGN_NUKTA = (char)0x093C;
			public const char DEVANAGARI_SIGN_VIRAMA = (char)0x094D;
			public const char DEVANAGARI_SIGN_VISARGA = (char)0x0903;
			public const char DEVANAGARI_STRESS_SIGN_ANUDATTA = (char)0x0952;
			public const char DEVANAGARI_STRESS_SIGN_UDATTA = (char)0x0951;
			public const char DEVANAGARI_VOWEL_SIGN_AA = (char)0x093E;
			public const char DEVANAGARI_VOWEL_SIGN_AI = (char)0x0948;
			public const char DEVANAGARI_VOWEL_SIGN_AU = (char)0x094C;
			public const char DEVANAGARI_VOWEL_SIGN_CANDRA_E = (char)0x0945;
			public const char DEVANAGARI_VOWEL_SIGN_CANDRA_O = (char)0x0949;
			public const char DEVANAGARI_VOWEL_SIGN_E = (char)0x0947;
			public const char DEVANAGARI_VOWEL_SIGN_I = (char)0x093F;
			public const char DEVANAGARI_VOWEL_SIGN_II = (char)0x0940;
			public const char DEVANAGARI_VOWEL_SIGN_O = (char)0x094B;
			public const char DEVANAGARI_VOWEL_SIGN_SHORT_E = (char)0x0946;
			public const char DEVANAGARI_VOWEL_SIGN_SHORT_O = (char)0x094A;
			public const char DEVANAGARI_VOWEL_SIGN_U = (char)0x0941;
			public const char DEVANAGARI_VOWEL_SIGN_UU = (char)0x0942;
			public const char DEVANAGARI_VOWEL_SIGN_VOCALIC_L = (char)0x0962;
			public const char DEVANAGARI_VOWEL_SIGN_VOCALIC_LL = (char)0x0963;
			public const char DEVANAGARI_VOWEL_SIGN_VOCALIC_R = (char)0x0943;
			public const char DEVANAGARI_VOWEL_SIGN_VOCALIC_RR = (char)0x0944;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING DIAERESIS. </summary>
			public const char DIAERESIS = (char)0x00A8;
			public const char DIAMETER_SIGN = (char)0x2300;
			public const char DIAMOND_OPERATOR = (char)0x22C4;
			public const char DIE_FACE_1 = (char)0x2680;
			public const char DIE_FACE_2 = (char)0x2681;
			public const char DIE_FACE_3 = (char)0x2682;
			public const char DIE_FACE_4 = (char)0x2683;
			public const char DIE_FACE_5 = (char)0x2684;
			public const char DIE_FACE_6 = (char)0x2685;
			public const char DIFFERENCE_BETWEEN = (char)0x224F;
			public const char DIGIT_EIGHT = (char)0x0038;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT EIGHT PERIOD. </summary>
			public const char DIGIT_EIGHT_FULL_STOP = (char)0x248F;
			public const char DIGIT_FIVE = (char)0x0035;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT FIVE PERIOD. </summary>
			public const char DIGIT_FIVE_FULL_STOP = (char)0x248C;
			public const char DIGIT_FOUR = (char)0x0034;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT FOUR PERIOD. </summary>
			public const char DIGIT_FOUR_FULL_STOP = (char)0x248B;
			public const char DIGIT_NINE = (char)0x0039;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT NINE PERIOD. </summary>
			public const char DIGIT_NINE_FULL_STOP = (char)0x2490;
			public const char DIGIT_ONE = (char)0x0031;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT ONE PERIOD. </summary>
			public const char DIGIT_ONE_FULL_STOP = (char)0x2488;
			public const char DIGIT_SEVEN = (char)0x0037;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT SEVEN PERIOD. </summary>
			public const char DIGIT_SEVEN_FULL_STOP = (char)0x248E;
			public const char DIGIT_SIX = (char)0x0036;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT SIX PERIOD. </summary>
			public const char DIGIT_SIX_FULL_STOP = (char)0x248D;
			public const char DIGIT_THREE = (char)0x0033;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT THREE PERIOD. </summary>
			public const char DIGIT_THREE_FULL_STOP = (char)0x248A;
			public const char DIGIT_TWO = (char)0x0032;
			/// <summary> (This is a composition; consider avoiding.) Formerly DIGIT TWO PERIOD. </summary>
			public const char DIGIT_TWO_FULL_STOP = (char)0x2489;
			public const char DIGIT_ZERO = (char)0x0030;
			public const char DIGRAM_FOR_GREATER_YANG = (char)0x268C;
			public const char DIGRAM_FOR_GREATER_YIN = (char)0x268F;
			public const char DIGRAM_FOR_LESSER_YANG = (char)0x268E;
			public const char DIGRAM_FOR_LESSER_YIN = (char)0x268D;
			public const char DIMENSION_ORIGIN = (char)0x2331;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT EIGHT. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_EIGHT = (char)0x2787;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT FIVE. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_FIVE = (char)0x2784;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT FOUR. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_FOUR = (char)0x2783;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT NINE. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_NINE = (char)0x2788;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT ONE. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_ONE = (char)0x2780;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT SEVEN. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_SEVEN = (char)0x2786;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT SIX. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_SIX = (char)0x2785;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT THREE. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_THREE = (char)0x2782;
			/// <summary> Formerly CIRCLED SANS-SERIF DIGIT TWO. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_DIGIT_TWO = (char)0x2781;
			/// <summary> Formerly CIRCLED SANS-SERIF NUMBER TEN. </summary>
			public const char DINGBAT_CIRCLED_SANS_SERIF_NUMBER_TEN = (char)0x2789;
			/// <summary> Formerly INVERSE CIRCLED DIGIT EIGHT. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_EIGHT = (char)0x277D;
			/// <summary> Formerly INVERSE CIRCLED DIGIT FIVE. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_FIVE = (char)0x277A;
			/// <summary> Formerly INVERSE CIRCLED DIGIT FOUR. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_FOUR = (char)0x2779;
			/// <summary> Formerly INVERSE CIRCLED DIGIT NINE. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_NINE = (char)0x277E;
			/// <summary> Formerly INVERSE CIRCLED DIGIT ONE. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_ONE = (char)0x2776;
			/// <summary> Formerly INVERSE CIRCLED DIGIT SEVEN. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_SEVEN = (char)0x277C;
			/// <summary> Formerly INVERSE CIRCLED DIGIT SIX. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_SIX = (char)0x277B;
			/// <summary> Formerly INVERSE CIRCLED DIGIT THREE. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_THREE = (char)0x2778;
			/// <summary> Formerly INVERSE CIRCLED DIGIT TWO. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_DIGIT_TWO = (char)0x2777;
			/// <summary> Formerly INVERSE CIRCLED NUMBER TEN. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_NUMBER_TEN = (char)0x277F;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT EIGHT. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_EIGHT = (char)0x2791;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT FIVE. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_FIVE = (char)0x278E;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT FOUR. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_FOUR = (char)0x278D;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT NINE. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_NINE = (char)0x2792;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT ONE. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_ONE = (char)0x278A;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT SEVEN. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_SEVEN = (char)0x2790;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT SIX. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_SIX = (char)0x278F;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT THREE. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_THREE = (char)0x278C;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF DIGIT TWO. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_DIGIT_TWO = (char)0x278B;
			/// <summary> Formerly INVERSE CIRCLED SANS-SERIF NUMBER TEN. </summary>
			public const char DINGBAT_NEGATIVE_CIRCLED_SANS_SERIF_NUMBER_TEN = (char)0x2793;
			public const char DIRECT_CURRENT_SYMBOL_FORM_TWO = (char)0x2393;
			public const char DISCONTINUOUS_UNDERLINE_SYMBOL = (char)0x2382;
			public const char DITTO_MARK = (char)0x3003;
			public const char DIVIDES = (char)0x2223;
			public const char DIVISION_SIGN = (char)0x00F7;
			public const char DIVISION_SLASH = (char)0x2215;
			public const char DIVISION_TIMES = (char)0x22C7;
			public const char DIVORCE_SYMBOL = (char)0x26AE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_CONTAIN_AS_MEMBER = (char)0x220C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_CONTAIN_AS_NORMAL_SUBGROUP = (char)0x22EB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_CONTAIN_AS_NORMAL_SUBGROUP_OR_EQUAL = (char)0x22ED;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_DIVIDE = (char)0x2224;
			public const char DOES_NOT_DIVIDE_WITH_REVERSED_NEGATION_SLASH = (char)0x2AEE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_FORCE = (char)0x22AE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_PRECEDE = (char)0x2280;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_PRECEDE_OR_EQUAL = (char)0x22E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_PROVE = (char)0x22AC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_SUCCEED = (char)0x2281;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOES_NOT_SUCCEED_OR_EQUAL = (char)0x22E1;
			public const char DOLLAR_SIGN = (char)0x0024;
			public const char DONG_SIGN = (char)0x20AB;
			public const char DOTTED_CIRCLE = (char)0x25CC;
			public const char DOTTED_CROSS = (char)0x205C;
			public const char DOTTED_FENCE = (char)0x2999;
			public const char DOTTED_OBELOS = (char)0x2E13;
			public const char DOTTED_RIGHT_POINTING_ANGLE = (char)0x2E16;
			public const char DOTTED_TRANSPOSITION_MARKER = (char)0x2E08;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING DOT ABOVE. </summary>
			public const char DOT_ABOVE = (char)0x02D9;
			public const char DOT_MINUS = (char)0x2238;
			public const char DOT_OPERATOR = (char)0x22C5;
			public const char DOT_PLUS = (char)0x2214;
			public const char DOUBLED_FEMALE_SIGN = (char)0x26A2;
			public const char DOUBLED_MALE_SIGN = (char)0x26A3;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING DOUBLE ACUTE. </summary>
			public const char DOUBLE_ACUTE_ACCENT = (char)0x02DD;
			public const char DOUBLE_CIRCLED_DIGIT_EIGHT = (char)0x24FC;
			public const char DOUBLE_CIRCLED_DIGIT_FIVE = (char)0x24F9;
			public const char DOUBLE_CIRCLED_DIGIT_FOUR = (char)0x24F8;
			public const char DOUBLE_CIRCLED_DIGIT_NINE = (char)0x24FD;
			public const char DOUBLE_CIRCLED_DIGIT_ONE = (char)0x24F5;
			public const char DOUBLE_CIRCLED_DIGIT_SEVEN = (char)0x24FB;
			public const char DOUBLE_CIRCLED_DIGIT_SIX = (char)0x24FA;
			public const char DOUBLE_CIRCLED_DIGIT_THREE = (char)0x24F7;
			public const char DOUBLE_CIRCLED_DIGIT_TWO = (char)0x24F6;
			public const char DOUBLE_CIRCLED_NUMBER_TEN = (char)0x24FE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_COLON_EQUAL = (char)0x2A74;
			public const char DOUBLE_DAGGER = (char)0x2021;
			public const char DOUBLE_DOWN_TACK = (char)0x2AEA;
			public const char DOUBLE_ENDED_MULTIMAP = (char)0x29DF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_EXCLAMATION_MARK = (char)0x203C;
			/// <summary> Formerly DOUBLE REVERSED COMMA QUOTATION MARK. </summary>
			public const char DOUBLE_HIGH_REVERSED_9_QUOTATION_MARK = (char)0x201F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_INTEGRAL = (char)0x222C;
			public const char DOUBLE_INTERSECTION = (char)0x22D2;
			public const char DOUBLE_LEFT_ARC_GREATER_THAN_BRACKET = (char)0x2995;
			public const char DOUBLE_LINE_EQUAL_TO_OR_GREATER_THAN = (char)0x2A9A;
			public const char DOUBLE_LINE_EQUAL_TO_OR_LESS_THAN = (char)0x2A99;
			public const char DOUBLE_LINE_SLANTED_EQUAL_TO_OR_GREATER_THAN = (char)0x2A9C;
			public const char DOUBLE_LINE_SLANTED_EQUAL_TO_OR_LESS_THAN = (char)0x2A9B;
			public const char DOUBLE_LINE_SLANTED_GREATER_THAN_OR_EQUAL_TO = (char)0x2AFA;
			public const char DOUBLE_LINE_SLANTED_LESS_THAN_OR_EQUAL_TO = (char)0x2AF9;
			public const char DOUBLE_LOGICAL_AND = (char)0x2A53;
			public const char DOUBLE_LOGICAL_OR = (char)0x2A54;
			/// <summary> Formerly LOW DOUBLE COMMA QUOTATION MARK. </summary>
			public const char DOUBLE_LOW_9_QUOTATION_MARK = (char)0x201E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING DOUBLE UNDERSCORE. </summary>
			public const char DOUBLE_LOW_LINE = (char)0x2017;
			public const char DOUBLE_NESTED_GREATER_THAN = (char)0x2AA2;
			public const char DOUBLE_NESTED_LESS_THAN = (char)0x2AA1;
			public const char DOUBLE_NESTED_LESS_THAN_WITH_UNDERBAR = (char)0x2AA3;
			public const char DOUBLE_OBLIQUE_HYPHEN = (char)0x2E17;
			public const char DOUBLE_PLUS = (char)0x29FA;
			public const char DOUBLE_PRECEDES = (char)0x2ABB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_PRIME = (char)0x2033;
			public const char DOUBLE_PRIME_QUOTATION_MARK = (char)0x301E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_QUESTION_MARK = (char)0x2047;
			public const char DOUBLE_RIGHT_ARC_LESS_THAN_BRACKET = (char)0x2996;
			public const char DOUBLE_SOLIDUS_OPERATOR = (char)0x2AFD;
			public const char DOUBLE_SQUARE_INTERSECTION = (char)0x2A4E;
			public const char DOUBLE_SQUARE_UNION = (char)0x2A4F;
			public const char DOUBLE_STROKE_NOT_SIGN = (char)0x2AEC;
			/// <summary> (This is a composition; consider avoiding.) Formerly DOUBLE-STRUCK C. </summary>
			public const char DOUBLE_STRUCK_CAPITAL_C = (char)0x2102;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_CAPITAL_GAMMA = (char)0x213E;
			/// <summary> (This is a composition; consider avoiding.) Formerly DOUBLE-STRUCK H. </summary>
			public const char DOUBLE_STRUCK_CAPITAL_H = (char)0x210D;
			/// <summary> (This is a composition; consider avoiding.) Formerly DOUBLE-STRUCK N. </summary>
			public const char DOUBLE_STRUCK_CAPITAL_N = (char)0x2115;
			/// <summary> (This is a composition; consider avoiding.) Formerly DOUBLE-STRUCK P. </summary>
			public const char DOUBLE_STRUCK_CAPITAL_P = (char)0x2119;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_CAPITAL_PI = (char)0x213F;
			/// <summary> (This is a composition; consider avoiding.) Formerly DOUBLE-STRUCK Q. </summary>
			public const char DOUBLE_STRUCK_CAPITAL_Q = (char)0x211A;
			/// <summary> (This is a composition; consider avoiding.) Formerly DOUBLE-STRUCK R. </summary>
			public const char DOUBLE_STRUCK_CAPITAL_R = (char)0x211D;
			/// <summary> (This is a composition; consider avoiding.) Formerly DOUBLE-STRUCK Z. </summary>
			public const char DOUBLE_STRUCK_CAPITAL_Z = (char)0x2124;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_ITALIC_CAPITAL_D = (char)0x2145;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_ITALIC_SMALL_D = (char)0x2146;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_ITALIC_SMALL_E = (char)0x2147;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_ITALIC_SMALL_I = (char)0x2148;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_ITALIC_SMALL_J = (char)0x2149;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_N_ARY_SUMMATION = (char)0x2140;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_SMALL_GAMMA = (char)0x213D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char DOUBLE_STRUCK_SMALL_PI = (char)0x213C;
			public const char DOUBLE_SUBSET = (char)0x22D0;
			public const char DOUBLE_SUCCEEDS = (char)0x2ABC;
			public const char DOUBLE_SUPERSET = (char)0x22D1;
			public const char DOUBLE_UNION = (char)0x22D3;
			public const char DOUBLE_UP_TACK = (char)0x2AEB;
			public const char DOUBLE_VERTICAL_BAR_DOUBLE_LEFT_TURNSTILE = (char)0x2AE5;
			public const char DOUBLE_VERTICAL_BAR_DOUBLE_RIGHT_TURNSTILE = (char)0x22AB;
			public const char DOUBLE_VERTICAL_BAR_LEFT_TURNSTILE = (char)0x2AE3;
			/// <summary> Formerly DOUBLE VERTICAL BAR. </summary>
			public const char DOUBLE_VERTICAL_LINE = (char)0x2016;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING DOUBLE WAVY OVERSCORE. </summary>
			public const char DOUBLE_WAVY_OVERLINE = (char)0xFE4C;
			public const char DOWNWARDS_ANCORA = (char)0x2E14;
			/// <summary> Formerly DOWN ARROW. </summary>
			public const char DOWNWARDS_ARROW = (char)0x2193;
			/// <summary> Formerly DOWN ARROW FROM BAR. </summary>
			public const char DOWNWARDS_ARROW_FROM_BAR = (char)0x21A7;
			public const char DOWNWARDS_ARROW_LEFTWARDS_OF_UPWARDS_ARROW = (char)0x21F5;
			public const char DOWNWARDS_ARROW_TO_BAR = (char)0x2913;
			/// <summary> Formerly DOWN ARROW WITH CORNER LEFT. </summary>
			public const char DOWNWARDS_ARROW_WITH_CORNER_LEFTWARDS = (char)0x21B5;
			/// <summary> Formerly DOWN ARROW WITH DOUBLE STROKE. </summary>
			public const char DOWNWARDS_ARROW_WITH_DOUBLE_STROKE = (char)0x21DF;
			public const char DOWNWARDS_ARROW_WITH_HORIZONTAL_STROKE = (char)0x2908;
			/// <summary> Formerly DOWN ARROW WITH TIP LEFT. </summary>
			public const char DOWNWARDS_ARROW_WITH_TIP_LEFTWARDS = (char)0x21B2;
			/// <summary> Formerly DOWN ARROW WITH TIP RIGHT. </summary>
			public const char DOWNWARDS_ARROW_WITH_TIP_RIGHTWARDS = (char)0x21B3;
			public const char DOWNWARDS_BLACK_ARROW = (char)0x2B07;
			/// <summary> Formerly DOWN DASHED ARROW. </summary>
			public const char DOWNWARDS_DASHED_ARROW = (char)0x21E3;
			/// <summary> Formerly DOWN DOUBLE ARROW. </summary>
			public const char DOWNWARDS_DOUBLE_ARROW = (char)0x21D3;
			/// <summary> Formerly DOWN HARPOON WITH BARB LEFT. </summary>
			public const char DOWNWARDS_HARPOON_WITH_BARB_LEFTWARDS = (char)0x21C3;
			public const char DOWNWARDS_HARPOON_WITH_BARB_LEFT_BESIDE_DOWNWARDS_HARPOON_WITH_BARB_RIGHT = (char)0x2965;
			public const char DOWNWARDS_HARPOON_WITH_BARB_LEFT_BESIDE_UPWARDS_HARPOON_WITH_BARB_RIGHT = (char)0x296F;
			public const char DOWNWARDS_HARPOON_WITH_BARB_LEFT_FROM_BAR = (char)0x2961;
			public const char DOWNWARDS_HARPOON_WITH_BARB_LEFT_TO_BAR = (char)0x2959;
			/// <summary> Formerly DOWN HARPOON WITH BARB RIGHT. </summary>
			public const char DOWNWARDS_HARPOON_WITH_BARB_RIGHTWARDS = (char)0x21C2;
			public const char DOWNWARDS_HARPOON_WITH_BARB_RIGHT_FROM_BAR = (char)0x295D;
			public const char DOWNWARDS_HARPOON_WITH_BARB_RIGHT_TO_BAR = (char)0x2955;
			/// <summary> Formerly DOWN PAIRED ARROWS. </summary>
			public const char DOWNWARDS_PAIRED_ARROWS = (char)0x21CA;
			public const char DOWNWARDS_QUADRUPLE_ARROW = (char)0x27F1;
			public const char DOWNWARDS_TRIPLE_ARROW = (char)0x290B;
			/// <summary> Formerly DOWN TWO HEADED ARROW. </summary>
			public const char DOWNWARDS_TWO_HEADED_ARROW = (char)0x21A1;
			/// <summary> Formerly WHITE DOWN ARROW. </summary>
			public const char DOWNWARDS_WHITE_ARROW = (char)0x21E9;
			/// <summary> Formerly DOWN ZIGZAG ARROW. </summary>
			public const char DOWNWARDS_ZIGZAG_ARROW = (char)0x21AF;
			public const char DOWN_ARROWHEAD = (char)0x2304;
			public const char DOWN_FISH_TAIL = (char)0x297F;
			public const char DOWN_POINTING_TRIANGLE_WITH_LEFT_HALF_BLACK = (char)0x29E8;
			public const char DOWN_POINTING_TRIANGLE_WITH_RIGHT_HALF_BLACK = (char)0x29E9;
			public const char DOWN_RIGHT_DIAGONAL_ELLIPSIS = (char)0x22F1;
			public const char DOWN_TACK = (char)0x22A4;
			public const char DOWN_TACK_WITH_CIRCLE_BELOW = (char)0x2AF1;
			public const char DRACHMA_SIGN = (char)0x20AF;
			/// <summary> Formerly DRAFTING POINT RIGHT ARROW. </summary>
			public const char DRAFTING_POINT_RIGHTWARDS_ARROW = (char)0x279B;
		}
		public class E {
			public const char EARTH = (char)0x2641;
			public const char EARTH_GROUND = (char)0x23DA;
			public const char EAST_SYRIAC_CROSS = (char)0x2671;
			public const char EDITORIAL_CORONIS = (char)0x2E0E;
			public const char EIGHTH_NOTE = (char)0x266A;
			public const char EIGHT_PETALLED_OUTLINED_BLACK_FLORETTE = (char)0x2741;
			public const char EIGHT_POINTED_BLACK_STAR = (char)0x2734;
			public const char EIGHT_POINTED_PINWHEEL_STAR = (char)0x2735;
			public const char EIGHT_POINTED_RECTILINEAR_BLACK_STAR = (char)0x2737;
			public const char EIGHT_SPOKED_ASTERISK = (char)0x2733;
			public const char EIGHT_TEARDROP_SPOKED_PROPELLER_ASTERISK = (char)0x274A;
			public const char EJECT_SYMBOL = (char)0x23CF;
			public const char ELECTRIC_ARROW = (char)0x2301;
			public const char ELEMENT_OF = (char)0x2208;
			public const char ELEMENT_OF_OPENING_DOWNWARDS = (char)0x2AD9;
			public const char ELEMENT_OF_OPENING_UPWARDS = (char)0x27D2;
			public const char ELEMENT_OF_WITH_DOT_ABOVE = (char)0x22F5;
			public const char ELEMENT_OF_WITH_LONG_HORIZONTAL_STROKE = (char)0x22F2;
			public const char ELEMENT_OF_WITH_OVERBAR = (char)0x22F6;
			public const char ELEMENT_OF_WITH_TWO_HORIZONTAL_STROKES = (char)0x22F9;
			public const char ELEMENT_OF_WITH_UNDERBAR = (char)0x22F8;
			public const char ELEMENT_OF_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE = (char)0x22F3;
			public const char EMPHASIS_SYMBOL = (char)0x2383;
			public const char EMPTY_SET = (char)0x2205;
			public const char EMPTY_SET_WITH_LEFT_ARROW_ABOVE = (char)0x29B4;
			public const char EMPTY_SET_WITH_OVERBAR = (char)0x29B1;
			public const char EMPTY_SET_WITH_RIGHT_ARROW_ABOVE = (char)0x29B3;
			public const char EMPTY_SET_WITH_SMALL_CIRCLE_ABOVE = (char)0x29B2;
			public const char EM_DASH = (char)0x2014;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char EM_QUAD = (char)0x2001;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char EM_SPACE = (char)0x2003;
			public const char END_OF_PROOF = (char)0x220E;
			public const char ENTER_SYMBOL = (char)0x2386;
			public const char ENVELOPE = (char)0x2709;
			public const char EN_DASH = (char)0x2013;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char EN_QUAD = (char)0x2000;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char EN_SPACE = (char)0x2002;
			/// <summary> Formerly EQUAL COLON. </summary>
			public const char EQUALS_COLON = (char)0x2255;
			public const char EQUALS_SIGN = (char)0x003D;
			public const char EQUALS_SIGN_ABOVE_PLUS_SIGN = (char)0x2A71;
			public const char EQUALS_SIGN_ABOVE_RIGHTWARDS_ARROW = (char)0x2971;
			public const char EQUALS_SIGN_ABOVE_TILDE_OPERATOR = (char)0x2A73;
			public const char EQUALS_SIGN_AND_SLANTED_PARALLEL = (char)0x29E3;
			public const char EQUALS_SIGN_AND_SLANTED_PARALLEL_WITH_TILDE_ABOVE = (char)0x29E4;
			public const char EQUALS_SIGN_WITH_BUMPY_ABOVE = (char)0x2AAE;
			public const char EQUALS_SIGN_WITH_DOT_BELOW = (char)0x2A66;
			public const char EQUALS_SIGN_WITH_TWO_DOTS_ABOVE_AND_TWO_DOTS_BELOW = (char)0x2A77;
			public const char EQUALS_WITH_ASTERISK = (char)0x2A6E;
			public const char EQUAL_AND_PARALLEL_TO = (char)0x22D5;
			public const char EQUAL_TO_BY_DEFINITION = (char)0x225D;
			/// <summary> Formerly EQUAL TO OR GREATER THAN. </summary>
			public const char EQUAL_TO_OR_GREATER_THAN = (char)0x22DD;
			/// <summary> Formerly EQUAL TO OR LESS THAN. </summary>
			public const char EQUAL_TO_OR_LESS_THAN = (char)0x22DC;
			public const char EQUAL_TO_OR_PRECEDES = (char)0x22DE;
			public const char EQUAL_TO_OR_SUCCEEDS = (char)0x22DF;
			public const char EQUIANGULAR_TO = (char)0x225A;
			public const char EQUIVALENT_TO = (char)0x224D;
			public const char EQUIVALENT_WITH_FOUR_DOTS_ABOVE = (char)0x2A78;
			/// <summary> Formerly DELETE TO THE LEFT KEY. </summary>
			public const char ERASE_TO_THE_LEFT = (char)0x232B;
			/// <summary> Formerly DELETE TO THE RIGHT KEY. </summary>
			public const char ERASE_TO_THE_RIGHT = (char)0x2326;
			public const char ERROR_BARRED_BLACK_CIRCLE = (char)0x29F3;
			public const char ERROR_BARRED_BLACK_DIAMOND = (char)0x29F1;
			public const char ERROR_BARRED_BLACK_SQUARE = (char)0x29EF;
			public const char ERROR_BARRED_WHITE_CIRCLE = (char)0x29F2;
			public const char ERROR_BARRED_WHITE_DIAMOND = (char)0x29F0;
			public const char ERROR_BARRED_WHITE_SQUARE = (char)0x29EE;
			public const char ESTIMATED_SYMBOL = (char)0x212E;
			public const char ESTIMATES = (char)0x2259;
			public const char ETHIOPIC_COLON = (char)0x1365;
			public const char ETHIOPIC_COMBINING_GEMINATION_MARK = (char)0x135F;
			public const char ETHIOPIC_COMMA = (char)0x1363;
			public const char ETHIOPIC_DIGIT_EIGHT = (char)0x1370;
			public const char ETHIOPIC_DIGIT_FIVE = (char)0x136D;
			public const char ETHIOPIC_DIGIT_FOUR = (char)0x136C;
			public const char ETHIOPIC_DIGIT_NINE = (char)0x1371;
			public const char ETHIOPIC_DIGIT_ONE = (char)0x1369;
			public const char ETHIOPIC_DIGIT_SEVEN = (char)0x136F;
			public const char ETHIOPIC_DIGIT_SIX = (char)0x136E;
			public const char ETHIOPIC_DIGIT_THREE = (char)0x136B;
			public const char ETHIOPIC_DIGIT_TWO = (char)0x136A;
			public const char ETHIOPIC_FULL_STOP = (char)0x1362;
			public const char ETHIOPIC_NUMBER_EIGHTY = (char)0x1379;
			public const char ETHIOPIC_NUMBER_FIFTY = (char)0x1376;
			public const char ETHIOPIC_NUMBER_FORTY = (char)0x1375;
			public const char ETHIOPIC_NUMBER_HUNDRED = (char)0x137B;
			public const char ETHIOPIC_NUMBER_NINETY = (char)0x137A;
			public const char ETHIOPIC_NUMBER_SEVENTY = (char)0x1378;
			public const char ETHIOPIC_NUMBER_SIXTY = (char)0x1377;
			public const char ETHIOPIC_NUMBER_TEN = (char)0x1372;
			public const char ETHIOPIC_NUMBER_TEN_THOUSAND = (char)0x137C;
			public const char ETHIOPIC_NUMBER_THIRTY = (char)0x1374;
			public const char ETHIOPIC_NUMBER_TWENTY = (char)0x1373;
			public const char ETHIOPIC_PARAGRAPH_SEPARATOR = (char)0x1368;
			public const char ETHIOPIC_PREFACE_COLON = (char)0x1366;
			public const char ETHIOPIC_QUESTION_MARK = (char)0x1367;
			public const char ETHIOPIC_SECTION_MARK = (char)0x1360;
			public const char ETHIOPIC_SEMICOLON = (char)0x1364;
			public const char ETHIOPIC_SYLLABLE_BA = (char)0x1260;
			public const char ETHIOPIC_SYLLABLE_BAA = (char)0x1263;
			public const char ETHIOPIC_SYLLABLE_BE = (char)0x1265;
			public const char ETHIOPIC_SYLLABLE_BEE = (char)0x1264;
			public const char ETHIOPIC_SYLLABLE_BI = (char)0x1262;
			public const char ETHIOPIC_SYLLABLE_BO = (char)0x1266;
			public const char ETHIOPIC_SYLLABLE_BOA = (char)0x2D85;
			public const char ETHIOPIC_SYLLABLE_BU = (char)0x1261;
			public const char ETHIOPIC_SYLLABLE_BWA = (char)0x1267;
			public const char ETHIOPIC_SYLLABLE_BWE = (char)0x1387;
			public const char ETHIOPIC_SYLLABLE_BWEE = (char)0x1386;
			public const char ETHIOPIC_SYLLABLE_BWI = (char)0x1385;
			public const char ETHIOPIC_SYLLABLE_CA = (char)0x1278;
			public const char ETHIOPIC_SYLLABLE_CAA = (char)0x127B;
			public const char ETHIOPIC_SYLLABLE_CCA = (char)0x2DA8;
			public const char ETHIOPIC_SYLLABLE_CCAA = (char)0x2DAB;
			public const char ETHIOPIC_SYLLABLE_CCE = (char)0x2DAD;
			public const char ETHIOPIC_SYLLABLE_CCEE = (char)0x2DAC;
			public const char ETHIOPIC_SYLLABLE_CCHA = (char)0x2DB8;
			public const char ETHIOPIC_SYLLABLE_CCHAA = (char)0x2DBB;
			public const char ETHIOPIC_SYLLABLE_CCHE = (char)0x2DBD;
			public const char ETHIOPIC_SYLLABLE_CCHEE = (char)0x2DBC;
			public const char ETHIOPIC_SYLLABLE_CCHI = (char)0x2DBA;
			public const char ETHIOPIC_SYLLABLE_CCHO = (char)0x2DBE;
			public const char ETHIOPIC_SYLLABLE_CCHU = (char)0x2DB9;
			public const char ETHIOPIC_SYLLABLE_CCI = (char)0x2DAA;
			public const char ETHIOPIC_SYLLABLE_CCO = (char)0x2DAE;
			public const char ETHIOPIC_SYLLABLE_CCU = (char)0x2DA9;
			public const char ETHIOPIC_SYLLABLE_CE = (char)0x127D;
			public const char ETHIOPIC_SYLLABLE_CEE = (char)0x127C;
			public const char ETHIOPIC_SYLLABLE_CHA = (char)0x1328;
			public const char ETHIOPIC_SYLLABLE_CHAA = (char)0x132B;
			public const char ETHIOPIC_SYLLABLE_CHE = (char)0x132D;
			public const char ETHIOPIC_SYLLABLE_CHEE = (char)0x132C;
			public const char ETHIOPIC_SYLLABLE_CHI = (char)0x132A;
			public const char ETHIOPIC_SYLLABLE_CHO = (char)0x132E;
			public const char ETHIOPIC_SYLLABLE_CHOA = (char)0x2D90;
			public const char ETHIOPIC_SYLLABLE_CHU = (char)0x1329;
			public const char ETHIOPIC_SYLLABLE_CHWA = (char)0x132F;
			public const char ETHIOPIC_SYLLABLE_CI = (char)0x127A;
			public const char ETHIOPIC_SYLLABLE_CO = (char)0x127E;
			public const char ETHIOPIC_SYLLABLE_COA = (char)0x2D87;
			public const char ETHIOPIC_SYLLABLE_CU = (char)0x1279;
			public const char ETHIOPIC_SYLLABLE_CWA = (char)0x127F;
			public const char ETHIOPIC_SYLLABLE_DA = (char)0x12F0;
			public const char ETHIOPIC_SYLLABLE_DAA = (char)0x12F3;
			public const char ETHIOPIC_SYLLABLE_DDA = (char)0x12F8;
			public const char ETHIOPIC_SYLLABLE_DDAA = (char)0x12FB;
			public const char ETHIOPIC_SYLLABLE_DDE = (char)0x12FD;
			public const char ETHIOPIC_SYLLABLE_DDEE = (char)0x12FC;
			public const char ETHIOPIC_SYLLABLE_DDI = (char)0x12FA;
			public const char ETHIOPIC_SYLLABLE_DDO = (char)0x12FE;
			public const char ETHIOPIC_SYLLABLE_DDOA = (char)0x2D8D;
			public const char ETHIOPIC_SYLLABLE_DDU = (char)0x12F9;
			public const char ETHIOPIC_SYLLABLE_DDWA = (char)0x12FF;
			public const char ETHIOPIC_SYLLABLE_DE = (char)0x12F5;
			public const char ETHIOPIC_SYLLABLE_DEE = (char)0x12F4;
			public const char ETHIOPIC_SYLLABLE_DI = (char)0x12F2;
			public const char ETHIOPIC_SYLLABLE_DO = (char)0x12F6;
			public const char ETHIOPIC_SYLLABLE_DOA = (char)0x2D8C;
			public const char ETHIOPIC_SYLLABLE_DU = (char)0x12F1;
			public const char ETHIOPIC_SYLLABLE_DWA = (char)0x12F7;
			public const char ETHIOPIC_SYLLABLE_FA = (char)0x1348;
			public const char ETHIOPIC_SYLLABLE_FAA = (char)0x134B;
			public const char ETHIOPIC_SYLLABLE_FE = (char)0x134D;
			public const char ETHIOPIC_SYLLABLE_FEE = (char)0x134C;
			public const char ETHIOPIC_SYLLABLE_FI = (char)0x134A;
			public const char ETHIOPIC_SYLLABLE_FO = (char)0x134E;
			public const char ETHIOPIC_SYLLABLE_FU = (char)0x1349;
			public const char ETHIOPIC_SYLLABLE_FWA = (char)0x134F;
			public const char ETHIOPIC_SYLLABLE_FWE = (char)0x138B;
			public const char ETHIOPIC_SYLLABLE_FWEE = (char)0x138A;
			public const char ETHIOPIC_SYLLABLE_FWI = (char)0x1389;
			public const char ETHIOPIC_SYLLABLE_FYA = (char)0x135A;
			public const char ETHIOPIC_SYLLABLE_GA = (char)0x1308;
			public const char ETHIOPIC_SYLLABLE_GAA = (char)0x130B;
			public const char ETHIOPIC_SYLLABLE_GE = (char)0x130D;
			public const char ETHIOPIC_SYLLABLE_GEE = (char)0x130C;
			public const char ETHIOPIC_SYLLABLE_GGA = (char)0x1318;
			public const char ETHIOPIC_SYLLABLE_GGAA = (char)0x131B;
			public const char ETHIOPIC_SYLLABLE_GGE = (char)0x131D;
			public const char ETHIOPIC_SYLLABLE_GGEE = (char)0x131C;
			public const char ETHIOPIC_SYLLABLE_GGI = (char)0x131A;
			public const char ETHIOPIC_SYLLABLE_GGO = (char)0x131E;
			public const char ETHIOPIC_SYLLABLE_GGU = (char)0x1319;
			public const char ETHIOPIC_SYLLABLE_GGWA = (char)0x2D93;
			public const char ETHIOPIC_SYLLABLE_GGWAA = (char)0x131F;
			public const char ETHIOPIC_SYLLABLE_GGWE = (char)0x2D96;
			public const char ETHIOPIC_SYLLABLE_GGWEE = (char)0x2D95;
			public const char ETHIOPIC_SYLLABLE_GGWI = (char)0x2D94;
			public const char ETHIOPIC_SYLLABLE_GI = (char)0x130A;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_A = (char)0x12A0;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_AA = (char)0x12A3;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_E = (char)0x12A5;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_EE = (char)0x12A4;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_I = (char)0x12A2;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_O = (char)0x12A6;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_OA = (char)0x2D8A;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_U = (char)0x12A1;
			public const char ETHIOPIC_SYLLABLE_GLOTTAL_WA = (char)0x12A7;
			public const char ETHIOPIC_SYLLABLE_GO = (char)0x130E;
			public const char ETHIOPIC_SYLLABLE_GOA = (char)0x130F;
			public const char ETHIOPIC_SYLLABLE_GU = (char)0x1309;
			public const char ETHIOPIC_SYLLABLE_GWA = (char)0x1310;
			public const char ETHIOPIC_SYLLABLE_GWAA = (char)0x1313;
			public const char ETHIOPIC_SYLLABLE_GWE = (char)0x1315;
			public const char ETHIOPIC_SYLLABLE_GWEE = (char)0x1314;
			public const char ETHIOPIC_SYLLABLE_GWI = (char)0x1312;
			public const char ETHIOPIC_SYLLABLE_GYA = (char)0x2DD8;
			public const char ETHIOPIC_SYLLABLE_GYAA = (char)0x2DDB;
			public const char ETHIOPIC_SYLLABLE_GYE = (char)0x2DDD;
			public const char ETHIOPIC_SYLLABLE_GYEE = (char)0x2DDC;
			public const char ETHIOPIC_SYLLABLE_GYI = (char)0x2DDA;
			public const char ETHIOPIC_SYLLABLE_GYO = (char)0x2DDE;
			public const char ETHIOPIC_SYLLABLE_GYU = (char)0x2DD9;
			public const char ETHIOPIC_SYLLABLE_HA = (char)0x1200;
			public const char ETHIOPIC_SYLLABLE_HAA = (char)0x1203;
			public const char ETHIOPIC_SYLLABLE_HE = (char)0x1205;
			public const char ETHIOPIC_SYLLABLE_HEE = (char)0x1204;
			public const char ETHIOPIC_SYLLABLE_HHA = (char)0x1210;
			public const char ETHIOPIC_SYLLABLE_HHAA = (char)0x1213;
			public const char ETHIOPIC_SYLLABLE_HHE = (char)0x1215;
			public const char ETHIOPIC_SYLLABLE_HHEE = (char)0x1214;
			public const char ETHIOPIC_SYLLABLE_HHI = (char)0x1212;
			public const char ETHIOPIC_SYLLABLE_HHO = (char)0x1216;
			public const char ETHIOPIC_SYLLABLE_HHU = (char)0x1211;
			public const char ETHIOPIC_SYLLABLE_HHWA = (char)0x1217;
			public const char ETHIOPIC_SYLLABLE_HI = (char)0x1202;
			public const char ETHIOPIC_SYLLABLE_HO = (char)0x1206;
			public const char ETHIOPIC_SYLLABLE_HOA = (char)0x1207;
			public const char ETHIOPIC_SYLLABLE_HU = (char)0x1201;
			public const char ETHIOPIC_SYLLABLE_JA = (char)0x1300;
			public const char ETHIOPIC_SYLLABLE_JAA = (char)0x1303;
			public const char ETHIOPIC_SYLLABLE_JE = (char)0x1305;
			public const char ETHIOPIC_SYLLABLE_JEE = (char)0x1304;
			public const char ETHIOPIC_SYLLABLE_JI = (char)0x1302;
			public const char ETHIOPIC_SYLLABLE_JO = (char)0x1306;
			public const char ETHIOPIC_SYLLABLE_JOA = (char)0x2D8E;
			public const char ETHIOPIC_SYLLABLE_JU = (char)0x1301;
			public const char ETHIOPIC_SYLLABLE_JWA = (char)0x1307;
			public const char ETHIOPIC_SYLLABLE_KA = (char)0x12A8;
			public const char ETHIOPIC_SYLLABLE_KAA = (char)0x12AB;
			public const char ETHIOPIC_SYLLABLE_KE = (char)0x12AD;
			public const char ETHIOPIC_SYLLABLE_KEE = (char)0x12AC;
			public const char ETHIOPIC_SYLLABLE_KI = (char)0x12AA;
			public const char ETHIOPIC_SYLLABLE_KO = (char)0x12AE;
			public const char ETHIOPIC_SYLLABLE_KOA = (char)0x12AF;
			public const char ETHIOPIC_SYLLABLE_KU = (char)0x12A9;
			public const char ETHIOPIC_SYLLABLE_KWA = (char)0x12B0;
			public const char ETHIOPIC_SYLLABLE_KWAA = (char)0x12B3;
			public const char ETHIOPIC_SYLLABLE_KWE = (char)0x12B5;
			public const char ETHIOPIC_SYLLABLE_KWEE = (char)0x12B4;
			public const char ETHIOPIC_SYLLABLE_KWI = (char)0x12B2;
			public const char ETHIOPIC_SYLLABLE_KXA = (char)0x12B8;
			public const char ETHIOPIC_SYLLABLE_KXAA = (char)0x12BB;
			public const char ETHIOPIC_SYLLABLE_KXE = (char)0x12BD;
			public const char ETHIOPIC_SYLLABLE_KXEE = (char)0x12BC;
			public const char ETHIOPIC_SYLLABLE_KXI = (char)0x12BA;
			public const char ETHIOPIC_SYLLABLE_KXO = (char)0x12BE;
			public const char ETHIOPIC_SYLLABLE_KXU = (char)0x12B9;
			public const char ETHIOPIC_SYLLABLE_KXWA = (char)0x12C0;
			public const char ETHIOPIC_SYLLABLE_KXWAA = (char)0x12C3;
			public const char ETHIOPIC_SYLLABLE_KXWE = (char)0x12C5;
			public const char ETHIOPIC_SYLLABLE_KXWEE = (char)0x12C4;
			public const char ETHIOPIC_SYLLABLE_KXWI = (char)0x12C2;
			public const char ETHIOPIC_SYLLABLE_KYA = (char)0x2DC8;
			public const char ETHIOPIC_SYLLABLE_KYAA = (char)0x2DCB;
			public const char ETHIOPIC_SYLLABLE_KYE = (char)0x2DCD;
			public const char ETHIOPIC_SYLLABLE_KYEE = (char)0x2DCC;
			public const char ETHIOPIC_SYLLABLE_KYI = (char)0x2DCA;
			public const char ETHIOPIC_SYLLABLE_KYO = (char)0x2DCE;
			public const char ETHIOPIC_SYLLABLE_KYU = (char)0x2DC9;
			public const char ETHIOPIC_SYLLABLE_LA = (char)0x1208;
			public const char ETHIOPIC_SYLLABLE_LAA = (char)0x120B;
			public const char ETHIOPIC_SYLLABLE_LE = (char)0x120D;
			public const char ETHIOPIC_SYLLABLE_LEE = (char)0x120C;
			public const char ETHIOPIC_SYLLABLE_LI = (char)0x120A;
			public const char ETHIOPIC_SYLLABLE_LO = (char)0x120E;
			public const char ETHIOPIC_SYLLABLE_LOA = (char)0x2D80;
			public const char ETHIOPIC_SYLLABLE_LU = (char)0x1209;
			public const char ETHIOPIC_SYLLABLE_LWA = (char)0x120F;
			public const char ETHIOPIC_SYLLABLE_MA = (char)0x1218;
			public const char ETHIOPIC_SYLLABLE_MAA = (char)0x121B;
			public const char ETHIOPIC_SYLLABLE_ME = (char)0x121D;
			public const char ETHIOPIC_SYLLABLE_MEE = (char)0x121C;
			public const char ETHIOPIC_SYLLABLE_MI = (char)0x121A;
			public const char ETHIOPIC_SYLLABLE_MO = (char)0x121E;
			public const char ETHIOPIC_SYLLABLE_MOA = (char)0x2D81;
			public const char ETHIOPIC_SYLLABLE_MU = (char)0x1219;
			public const char ETHIOPIC_SYLLABLE_MWA = (char)0x121F;
			public const char ETHIOPIC_SYLLABLE_MWE = (char)0x1383;
			public const char ETHIOPIC_SYLLABLE_MWEE = (char)0x1382;
			public const char ETHIOPIC_SYLLABLE_MWI = (char)0x1381;
			public const char ETHIOPIC_SYLLABLE_MYA = (char)0x1359;
			public const char ETHIOPIC_SYLLABLE_NA = (char)0x1290;
			public const char ETHIOPIC_SYLLABLE_NAA = (char)0x1293;
			public const char ETHIOPIC_SYLLABLE_NE = (char)0x1295;
			public const char ETHIOPIC_SYLLABLE_NEE = (char)0x1294;
			public const char ETHIOPIC_SYLLABLE_NI = (char)0x1292;
			public const char ETHIOPIC_SYLLABLE_NO = (char)0x1296;
			public const char ETHIOPIC_SYLLABLE_NOA = (char)0x2D88;
			public const char ETHIOPIC_SYLLABLE_NU = (char)0x1291;
			public const char ETHIOPIC_SYLLABLE_NWA = (char)0x1297;
			public const char ETHIOPIC_SYLLABLE_NYA = (char)0x1298;
			public const char ETHIOPIC_SYLLABLE_NYAA = (char)0x129B;
			public const char ETHIOPIC_SYLLABLE_NYE = (char)0x129D;
			public const char ETHIOPIC_SYLLABLE_NYEE = (char)0x129C;
			public const char ETHIOPIC_SYLLABLE_NYI = (char)0x129A;
			public const char ETHIOPIC_SYLLABLE_NYO = (char)0x129E;
			public const char ETHIOPIC_SYLLABLE_NYOA = (char)0x2D89;
			public const char ETHIOPIC_SYLLABLE_NYU = (char)0x1299;
			public const char ETHIOPIC_SYLLABLE_NYWA = (char)0x129F;
			public const char ETHIOPIC_SYLLABLE_PA = (char)0x1350;
			public const char ETHIOPIC_SYLLABLE_PAA = (char)0x1353;
			public const char ETHIOPIC_SYLLABLE_PE = (char)0x1355;
			public const char ETHIOPIC_SYLLABLE_PEE = (char)0x1354;
			public const char ETHIOPIC_SYLLABLE_PHA = (char)0x1330;
			public const char ETHIOPIC_SYLLABLE_PHAA = (char)0x1333;
			public const char ETHIOPIC_SYLLABLE_PHARYNGEAL_A = (char)0x12D0;
			public const char ETHIOPIC_SYLLABLE_PHARYNGEAL_AA = (char)0x12D3;
			public const char ETHIOPIC_SYLLABLE_PHARYNGEAL_E = (char)0x12D5;
			public const char ETHIOPIC_SYLLABLE_PHARYNGEAL_EE = (char)0x12D4;
			public const char ETHIOPIC_SYLLABLE_PHARYNGEAL_I = (char)0x12D2;
			public const char ETHIOPIC_SYLLABLE_PHARYNGEAL_O = (char)0x12D6;
			public const char ETHIOPIC_SYLLABLE_PHARYNGEAL_U = (char)0x12D1;
			public const char ETHIOPIC_SYLLABLE_PHE = (char)0x1335;
			public const char ETHIOPIC_SYLLABLE_PHEE = (char)0x1334;
			public const char ETHIOPIC_SYLLABLE_PHI = (char)0x1332;
			public const char ETHIOPIC_SYLLABLE_PHO = (char)0x1336;
			public const char ETHIOPIC_SYLLABLE_PHOA = (char)0x2D91;
			public const char ETHIOPIC_SYLLABLE_PHU = (char)0x1331;
			public const char ETHIOPIC_SYLLABLE_PHWA = (char)0x1337;
			public const char ETHIOPIC_SYLLABLE_PI = (char)0x1352;
			public const char ETHIOPIC_SYLLABLE_PO = (char)0x1356;
			public const char ETHIOPIC_SYLLABLE_POA = (char)0x2D92;
			public const char ETHIOPIC_SYLLABLE_PU = (char)0x1351;
			public const char ETHIOPIC_SYLLABLE_PWA = (char)0x1357;
			public const char ETHIOPIC_SYLLABLE_PWE = (char)0x138F;
			public const char ETHIOPIC_SYLLABLE_PWEE = (char)0x138E;
			public const char ETHIOPIC_SYLLABLE_PWI = (char)0x138D;
			public const char ETHIOPIC_SYLLABLE_QA = (char)0x1240;
			public const char ETHIOPIC_SYLLABLE_QAA = (char)0x1243;
			public const char ETHIOPIC_SYLLABLE_QE = (char)0x1245;
			public const char ETHIOPIC_SYLLABLE_QEE = (char)0x1244;
			public const char ETHIOPIC_SYLLABLE_QHA = (char)0x1250;
			public const char ETHIOPIC_SYLLABLE_QHAA = (char)0x1253;
			public const char ETHIOPIC_SYLLABLE_QHE = (char)0x1255;
			public const char ETHIOPIC_SYLLABLE_QHEE = (char)0x1254;
			public const char ETHIOPIC_SYLLABLE_QHI = (char)0x1252;
			public const char ETHIOPIC_SYLLABLE_QHO = (char)0x1256;
			public const char ETHIOPIC_SYLLABLE_QHU = (char)0x1251;
			public const char ETHIOPIC_SYLLABLE_QHWA = (char)0x1258;
			public const char ETHIOPIC_SYLLABLE_QHWAA = (char)0x125B;
			public const char ETHIOPIC_SYLLABLE_QHWE = (char)0x125D;
			public const char ETHIOPIC_SYLLABLE_QHWEE = (char)0x125C;
			public const char ETHIOPIC_SYLLABLE_QHWI = (char)0x125A;
			public const char ETHIOPIC_SYLLABLE_QI = (char)0x1242;
			public const char ETHIOPIC_SYLLABLE_QO = (char)0x1246;
			public const char ETHIOPIC_SYLLABLE_QOA = (char)0x1247;
			public const char ETHIOPIC_SYLLABLE_QU = (char)0x1241;
			public const char ETHIOPIC_SYLLABLE_QWA = (char)0x1248;
			public const char ETHIOPIC_SYLLABLE_QWAA = (char)0x124B;
			public const char ETHIOPIC_SYLLABLE_QWE = (char)0x124D;
			public const char ETHIOPIC_SYLLABLE_QWEE = (char)0x124C;
			public const char ETHIOPIC_SYLLABLE_QWI = (char)0x124A;
			public const char ETHIOPIC_SYLLABLE_QYA = (char)0x2DC0;
			public const char ETHIOPIC_SYLLABLE_QYAA = (char)0x2DC3;
			public const char ETHIOPIC_SYLLABLE_QYE = (char)0x2DC5;
			public const char ETHIOPIC_SYLLABLE_QYEE = (char)0x2DC4;
			public const char ETHIOPIC_SYLLABLE_QYI = (char)0x2DC2;
			public const char ETHIOPIC_SYLLABLE_QYO = (char)0x2DC6;
			public const char ETHIOPIC_SYLLABLE_QYU = (char)0x2DC1;
			public const char ETHIOPIC_SYLLABLE_RA = (char)0x1228;
			public const char ETHIOPIC_SYLLABLE_RAA = (char)0x122B;
			public const char ETHIOPIC_SYLLABLE_RE = (char)0x122D;
			public const char ETHIOPIC_SYLLABLE_REE = (char)0x122C;
			public const char ETHIOPIC_SYLLABLE_RI = (char)0x122A;
			public const char ETHIOPIC_SYLLABLE_RO = (char)0x122E;
			public const char ETHIOPIC_SYLLABLE_ROA = (char)0x2D82;
			public const char ETHIOPIC_SYLLABLE_RU = (char)0x1229;
			public const char ETHIOPIC_SYLLABLE_RWA = (char)0x122F;
			public const char ETHIOPIC_SYLLABLE_RYA = (char)0x1358;
			public const char ETHIOPIC_SYLLABLE_SA = (char)0x1230;
			public const char ETHIOPIC_SYLLABLE_SAA = (char)0x1233;
			public const char ETHIOPIC_SYLLABLE_SE = (char)0x1235;
			public const char ETHIOPIC_SYLLABLE_SEBATBEIT_BWA = (char)0x1384;
			public const char ETHIOPIC_SYLLABLE_SEBATBEIT_FWA = (char)0x1388;
			public const char ETHIOPIC_SYLLABLE_SEBATBEIT_MWA = (char)0x1380;
			public const char ETHIOPIC_SYLLABLE_SEBATBEIT_PWA = (char)0x138C;
			public const char ETHIOPIC_SYLLABLE_SEE = (char)0x1234;
			public const char ETHIOPIC_SYLLABLE_SHA = (char)0x1238;
			public const char ETHIOPIC_SYLLABLE_SHAA = (char)0x123B;
			public const char ETHIOPIC_SYLLABLE_SHE = (char)0x123D;
			public const char ETHIOPIC_SYLLABLE_SHEE = (char)0x123C;
			public const char ETHIOPIC_SYLLABLE_SHI = (char)0x123A;
			public const char ETHIOPIC_SYLLABLE_SHO = (char)0x123E;
			public const char ETHIOPIC_SYLLABLE_SHOA = (char)0x2D84;
			public const char ETHIOPIC_SYLLABLE_SHU = (char)0x1239;
			public const char ETHIOPIC_SYLLABLE_SHWA = (char)0x123F;
			public const char ETHIOPIC_SYLLABLE_SI = (char)0x1232;
			public const char ETHIOPIC_SYLLABLE_SO = (char)0x1236;
			public const char ETHIOPIC_SYLLABLE_SOA = (char)0x2D83;
			public const char ETHIOPIC_SYLLABLE_SSA = (char)0x2DA0;
			public const char ETHIOPIC_SYLLABLE_SSAA = (char)0x2DA3;
			public const char ETHIOPIC_SYLLABLE_SSE = (char)0x2DA5;
			public const char ETHIOPIC_SYLLABLE_SSEE = (char)0x2DA4;
			public const char ETHIOPIC_SYLLABLE_SSI = (char)0x2DA2;
			public const char ETHIOPIC_SYLLABLE_SSO = (char)0x2DA6;
			public const char ETHIOPIC_SYLLABLE_SSU = (char)0x2DA1;
			public const char ETHIOPIC_SYLLABLE_SU = (char)0x1231;
			public const char ETHIOPIC_SYLLABLE_SWA = (char)0x1237;
			public const char ETHIOPIC_SYLLABLE_SZA = (char)0x1220;
			public const char ETHIOPIC_SYLLABLE_SZAA = (char)0x1223;
			public const char ETHIOPIC_SYLLABLE_SZE = (char)0x1225;
			public const char ETHIOPIC_SYLLABLE_SZEE = (char)0x1224;
			public const char ETHIOPIC_SYLLABLE_SZI = (char)0x1222;
			public const char ETHIOPIC_SYLLABLE_SZO = (char)0x1226;
			public const char ETHIOPIC_SYLLABLE_SZU = (char)0x1221;
			public const char ETHIOPIC_SYLLABLE_SZWA = (char)0x1227;
			public const char ETHIOPIC_SYLLABLE_TA = (char)0x1270;
			public const char ETHIOPIC_SYLLABLE_TAA = (char)0x1273;
			public const char ETHIOPIC_SYLLABLE_TE = (char)0x1275;
			public const char ETHIOPIC_SYLLABLE_TEE = (char)0x1274;
			public const char ETHIOPIC_SYLLABLE_THA = (char)0x1320;
			public const char ETHIOPIC_SYLLABLE_THAA = (char)0x1323;
			public const char ETHIOPIC_SYLLABLE_THE = (char)0x1325;
			public const char ETHIOPIC_SYLLABLE_THEE = (char)0x1324;
			public const char ETHIOPIC_SYLLABLE_THI = (char)0x1322;
			public const char ETHIOPIC_SYLLABLE_THO = (char)0x1326;
			public const char ETHIOPIC_SYLLABLE_THOA = (char)0x2D8F;
			public const char ETHIOPIC_SYLLABLE_THU = (char)0x1321;
			public const char ETHIOPIC_SYLLABLE_THWA = (char)0x1327;
			public const char ETHIOPIC_SYLLABLE_TI = (char)0x1272;
			public const char ETHIOPIC_SYLLABLE_TO = (char)0x1276;
			public const char ETHIOPIC_SYLLABLE_TOA = (char)0x2D86;
			public const char ETHIOPIC_SYLLABLE_TSA = (char)0x1338;
			public const char ETHIOPIC_SYLLABLE_TSAA = (char)0x133B;
			public const char ETHIOPIC_SYLLABLE_TSE = (char)0x133D;
			public const char ETHIOPIC_SYLLABLE_TSEE = (char)0x133C;
			public const char ETHIOPIC_SYLLABLE_TSI = (char)0x133A;
			public const char ETHIOPIC_SYLLABLE_TSO = (char)0x133E;
			public const char ETHIOPIC_SYLLABLE_TSU = (char)0x1339;
			public const char ETHIOPIC_SYLLABLE_TSWA = (char)0x133F;
			public const char ETHIOPIC_SYLLABLE_TU = (char)0x1271;
			public const char ETHIOPIC_SYLLABLE_TWA = (char)0x1277;
			public const char ETHIOPIC_SYLLABLE_TZA = (char)0x1340;
			public const char ETHIOPIC_SYLLABLE_TZAA = (char)0x1343;
			public const char ETHIOPIC_SYLLABLE_TZE = (char)0x1345;
			public const char ETHIOPIC_SYLLABLE_TZEE = (char)0x1344;
			public const char ETHIOPIC_SYLLABLE_TZI = (char)0x1342;
			public const char ETHIOPIC_SYLLABLE_TZO = (char)0x1346;
			public const char ETHIOPIC_SYLLABLE_TZOA = (char)0x1347;
			public const char ETHIOPIC_SYLLABLE_TZU = (char)0x1341;
			public const char ETHIOPIC_SYLLABLE_VA = (char)0x1268;
			public const char ETHIOPIC_SYLLABLE_VAA = (char)0x126B;
			public const char ETHIOPIC_SYLLABLE_VE = (char)0x126D;
			public const char ETHIOPIC_SYLLABLE_VEE = (char)0x126C;
			public const char ETHIOPIC_SYLLABLE_VI = (char)0x126A;
			public const char ETHIOPIC_SYLLABLE_VO = (char)0x126E;
			public const char ETHIOPIC_SYLLABLE_VU = (char)0x1269;
			public const char ETHIOPIC_SYLLABLE_VWA = (char)0x126F;
			public const char ETHIOPIC_SYLLABLE_WA = (char)0x12C8;
			public const char ETHIOPIC_SYLLABLE_WAA = (char)0x12CB;
			public const char ETHIOPIC_SYLLABLE_WE = (char)0x12CD;
			public const char ETHIOPIC_SYLLABLE_WEE = (char)0x12CC;
			public const char ETHIOPIC_SYLLABLE_WI = (char)0x12CA;
			public const char ETHIOPIC_SYLLABLE_WO = (char)0x12CE;
			public const char ETHIOPIC_SYLLABLE_WOA = (char)0x12CF;
			public const char ETHIOPIC_SYLLABLE_WU = (char)0x12C9;
			public const char ETHIOPIC_SYLLABLE_XA = (char)0x1280;
			public const char ETHIOPIC_SYLLABLE_XAA = (char)0x1283;
			public const char ETHIOPIC_SYLLABLE_XE = (char)0x1285;
			public const char ETHIOPIC_SYLLABLE_XEE = (char)0x1284;
			public const char ETHIOPIC_SYLLABLE_XI = (char)0x1282;
			public const char ETHIOPIC_SYLLABLE_XO = (char)0x1286;
			public const char ETHIOPIC_SYLLABLE_XOA = (char)0x1287;
			public const char ETHIOPIC_SYLLABLE_XU = (char)0x1281;
			public const char ETHIOPIC_SYLLABLE_XWA = (char)0x1288;
			public const char ETHIOPIC_SYLLABLE_XWAA = (char)0x128B;
			public const char ETHIOPIC_SYLLABLE_XWE = (char)0x128D;
			public const char ETHIOPIC_SYLLABLE_XWEE = (char)0x128C;
			public const char ETHIOPIC_SYLLABLE_XWI = (char)0x128A;
			public const char ETHIOPIC_SYLLABLE_XYA = (char)0x2DD0;
			public const char ETHIOPIC_SYLLABLE_XYAA = (char)0x2DD3;
			public const char ETHIOPIC_SYLLABLE_XYE = (char)0x2DD5;
			public const char ETHIOPIC_SYLLABLE_XYEE = (char)0x2DD4;
			public const char ETHIOPIC_SYLLABLE_XYI = (char)0x2DD2;
			public const char ETHIOPIC_SYLLABLE_XYO = (char)0x2DD6;
			public const char ETHIOPIC_SYLLABLE_XYU = (char)0x2DD1;
			public const char ETHIOPIC_SYLLABLE_YA = (char)0x12E8;
			public const char ETHIOPIC_SYLLABLE_YAA = (char)0x12EB;
			public const char ETHIOPIC_SYLLABLE_YE = (char)0x12ED;
			public const char ETHIOPIC_SYLLABLE_YEE = (char)0x12EC;
			public const char ETHIOPIC_SYLLABLE_YI = (char)0x12EA;
			public const char ETHIOPIC_SYLLABLE_YO = (char)0x12EE;
			public const char ETHIOPIC_SYLLABLE_YOA = (char)0x12EF;
			public const char ETHIOPIC_SYLLABLE_YU = (char)0x12E9;
			public const char ETHIOPIC_SYLLABLE_ZA = (char)0x12D8;
			public const char ETHIOPIC_SYLLABLE_ZAA = (char)0x12DB;
			public const char ETHIOPIC_SYLLABLE_ZE = (char)0x12DD;
			public const char ETHIOPIC_SYLLABLE_ZEE = (char)0x12DC;
			public const char ETHIOPIC_SYLLABLE_ZHA = (char)0x12E0;
			public const char ETHIOPIC_SYLLABLE_ZHAA = (char)0x12E3;
			public const char ETHIOPIC_SYLLABLE_ZHE = (char)0x12E5;
			public const char ETHIOPIC_SYLLABLE_ZHEE = (char)0x12E4;
			public const char ETHIOPIC_SYLLABLE_ZHI = (char)0x12E2;
			public const char ETHIOPIC_SYLLABLE_ZHO = (char)0x12E6;
			public const char ETHIOPIC_SYLLABLE_ZHU = (char)0x12E1;
			public const char ETHIOPIC_SYLLABLE_ZHWA = (char)0x12E7;
			public const char ETHIOPIC_SYLLABLE_ZI = (char)0x12DA;
			public const char ETHIOPIC_SYLLABLE_ZO = (char)0x12DE;
			public const char ETHIOPIC_SYLLABLE_ZOA = (char)0x2D8B;
			public const char ETHIOPIC_SYLLABLE_ZU = (char)0x12D9;
			public const char ETHIOPIC_SYLLABLE_ZWA = (char)0x12DF;
			public const char ETHIOPIC_SYLLABLE_ZZA = (char)0x2DB0;
			public const char ETHIOPIC_SYLLABLE_ZZAA = (char)0x2DB3;
			public const char ETHIOPIC_SYLLABLE_ZZE = (char)0x2DB5;
			public const char ETHIOPIC_SYLLABLE_ZZEE = (char)0x2DB4;
			public const char ETHIOPIC_SYLLABLE_ZZI = (char)0x2DB2;
			public const char ETHIOPIC_SYLLABLE_ZZO = (char)0x2DB6;
			public const char ETHIOPIC_SYLLABLE_ZZU = (char)0x2DB1;
			public const char ETHIOPIC_TONAL_MARK_CHIRET = (char)0x1396;
			public const char ETHIOPIC_TONAL_MARK_DERET = (char)0x1391;
			public const char ETHIOPIC_TONAL_MARK_DERET_HIDET = (char)0x1398;
			public const char ETHIOPIC_TONAL_MARK_DIFAT = (char)0x1394;
			public const char ETHIOPIC_TONAL_MARK_HIDET = (char)0x1397;
			public const char ETHIOPIC_TONAL_MARK_KENAT = (char)0x1395;
			public const char ETHIOPIC_TONAL_MARK_KURT = (char)0x1399;
			public const char ETHIOPIC_TONAL_MARK_RIKRIK = (char)0x1392;
			public const char ETHIOPIC_TONAL_MARK_SHORT_RIKRIK = (char)0x1393;
			public const char ETHIOPIC_TONAL_MARK_YIZET = (char)0x1390;
			public const char ETHIOPIC_WORDSPACE = (char)0x1361;
			/// <summary> (This is a composition; consider avoiding.) Formerly EULERS. </summary>
			public const char EULER_CONSTANT = (char)0x2107;
			public const char EURO_CURRENCY_SIGN = (char)0x20A0;
			public const char EURO_SIGN = (char)0x20AC;
			public const char EXCESS = (char)0x2239;
			public const char EXCLAMATION_MARK = (char)0x0021;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char EXCLAMATION_QUESTION_MARK = (char)0x2049;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT EIGHT. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_EIGHT = (char)0x06F8;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT FIVE. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_FIVE = (char)0x06F5;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT FOUR. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_FOUR = (char)0x06F4;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT NINE. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_NINE = (char)0x06F9;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT ONE. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_ONE = (char)0x06F1;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT SEVEN. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_SEVEN = (char)0x06F7;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT SIX. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_SIX = (char)0x06F6;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT THREE. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_THREE = (char)0x06F3;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT TWO. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_TWO = (char)0x06F2;
			/// <summary> Formerly EASTERN ARABIC-INDIC DIGIT ZERO. </summary>
			public const char EXTENDED_ARABIC_INDIC_DIGIT_ZERO = (char)0x06F0;
		}
		public class F {
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FACSIMILE_SIGN = (char)0x213B;
			public const char FALLING_DIAGONAL_CROSSING_NORTH_EAST_ARROW = (char)0x292F;
			public const char FALLING_DIAGONAL_CROSSING_RISING_DIAGONAL = (char)0x292C;
			/// <summary> Formerly SYMBOL OF IRAN. </summary>
			public const char FARSI_SYMBOL = (char)0x262B;
			public const char FEMALE_SIGN = (char)0x2640;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FEMININE_ORDINAL_INDICATOR = (char)0x00AA;
			public const char FIGURE_DASH = (char)0x2012;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FIGURE_SPACE = (char)0x2007;
			public const char FINITE_PART_INTEGRAL = (char)0x2A0D;
			public const char FIRST_QUARTER_MOON = (char)0x263D;
			public const char FISHEYE = (char)0x25C9;
			public const char FIVE_DOT_PUNCTUATION = (char)0x2059;
			public const char FLEUR_DE_LIS = (char)0x269C;
			public const char FLORAL_HEART = (char)0x2766;
			public const char FLOWER = (char)0x2698;
			public const char FLOWER_PUNCTUATION_MARK = (char)0x2055;
			public const char FORCES = (char)0x22A9;
			public const char FORKED_PARAGRAPHOS = (char)0x2E10;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FORKING = (char)0x2ADC;
			public const char FOR_ALL = (char)0x2200;
			public const char FOURTH_ROOT = (char)0x221C;
			public const char FOUR_BALLOON_SPOKED_ASTERISK = (char)0x2723;
			public const char FOUR_CLUB_SPOKED_ASTERISK = (char)0x2725;
			public const char FOUR_DOT_MARK = (char)0x205B;
			public const char FOUR_DOT_PUNCTUATION = (char)0x2058;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FOUR_PER_EM_SPACE = (char)0x2005;
			public const char FOUR_TEARDROP_SPOKED_ASTERISK = (char)0x2722;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FRACTION_NUMERATOR_ONE = (char)0x215F;
			public const char FRACTION_SLASH = (char)0x2044;
			public const char FRENCH_FRANC_SIGN = (char)0x20A3;
			/// <summary> Formerly FRONT-TILTED SHADOWED WHITE RIGHT ARROW. </summary>
			public const char FRONT_TILTED_SHADOWED_WHITE_RIGHTWARDS_ARROW = (char)0x27AC;
			public const char FROWN = (char)0x2322;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_AMPERSAND = (char)0xFF06;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_APOSTROPHE = (char)0xFF07;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_ASTERISK = (char)0xFF0A;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH BROKEN VERTICAL BAR. </summary>
			public const char FULLWIDTH_BROKEN_BAR = (char)0xFFE4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_CENT_SIGN = (char)0xFFE0;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH SPACING CIRCUMFLEX. </summary>
			public const char FULLWIDTH_CIRCUMFLEX_ACCENT = (char)0xFF3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_COLON = (char)0xFF1A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_COMMA = (char)0xFF0C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_COMMERCIAL_AT = (char)0xFF20;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_EIGHT = (char)0xFF18;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_FIVE = (char)0xFF15;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_FOUR = (char)0xFF14;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_NINE = (char)0xFF19;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_ONE = (char)0xFF11;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_SEVEN = (char)0xFF17;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_SIX = (char)0xFF16;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_THREE = (char)0xFF13;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_TWO = (char)0xFF12;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DIGIT_ZERO = (char)0xFF10;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_DOLLAR_SIGN = (char)0xFF04;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_EQUALS_SIGN = (char)0xFF1D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_EXCLAMATION_MARK = (char)0xFF01;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH PERIOD. </summary>
			public const char FULLWIDTH_FULL_STOP = (char)0xFF0E;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH SPACING GRAVE. </summary>
			public const char FULLWIDTH_GRAVE_ACCENT = (char)0xFF40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_GREATER_THAN_SIGN = (char)0xFF1E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_HYPHEN_MINUS = (char)0xFF0D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_A = (char)0xFF21;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_B = (char)0xFF22;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_C = (char)0xFF23;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_D = (char)0xFF24;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_E = (char)0xFF25;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_F = (char)0xFF26;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_G = (char)0xFF27;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_H = (char)0xFF28;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_I = (char)0xFF29;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_J = (char)0xFF2A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_K = (char)0xFF2B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_L = (char)0xFF2C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_M = (char)0xFF2D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_N = (char)0xFF2E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_O = (char)0xFF2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_P = (char)0xFF30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_Q = (char)0xFF31;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_R = (char)0xFF32;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_S = (char)0xFF33;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_T = (char)0xFF34;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_U = (char)0xFF35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_V = (char)0xFF36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_W = (char)0xFF37;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_X = (char)0xFF38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_Y = (char)0xFF39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_CAPITAL_LETTER_Z = (char)0xFF3A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_A = (char)0xFF41;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_B = (char)0xFF42;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_C = (char)0xFF43;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_D = (char)0xFF44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_E = (char)0xFF45;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_F = (char)0xFF46;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_G = (char)0xFF47;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_H = (char)0xFF48;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_I = (char)0xFF49;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_J = (char)0xFF4A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_K = (char)0xFF4B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_L = (char)0xFF4C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_M = (char)0xFF4D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_N = (char)0xFF4E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_O = (char)0xFF4F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_P = (char)0xFF50;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_Q = (char)0xFF51;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_R = (char)0xFF52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_S = (char)0xFF53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_T = (char)0xFF54;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_U = (char)0xFF55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_V = (char)0xFF56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_W = (char)0xFF57;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_X = (char)0xFF58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_Y = (char)0xFF59;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LATIN_SMALL_LETTER_Z = (char)0xFF5A;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH OPENING CURLY BRACKET. </summary>
			public const char FULLWIDTH_LEFT_CURLY_BRACKET = (char)0xFF5B;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH OPENING PARENTHESIS. </summary>
			public const char FULLWIDTH_LEFT_PARENTHESIS = (char)0xFF08;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH OPENING SQUARE BRACKET. </summary>
			public const char FULLWIDTH_LEFT_SQUARE_BRACKET = (char)0xFF3B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LEFT_WHITE_PARENTHESIS = (char)0xFF5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_LESS_THAN_SIGN = (char)0xFF1C;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH SPACING UNDERSCORE. </summary>
			public const char FULLWIDTH_LOW_LINE = (char)0xFF3F;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH SPACING MACRON. </summary>
			public const char FULLWIDTH_MACRON = (char)0xFFE3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_NOT_SIGN = (char)0xFFE2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_NUMBER_SIGN = (char)0xFF03;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_PERCENT_SIGN = (char)0xFF05;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_PLUS_SIGN = (char)0xFF0B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_POUND_SIGN = (char)0xFFE1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_QUESTION_MARK = (char)0xFF1F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_QUOTATION_MARK = (char)0xFF02;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH BACKSLASH. </summary>
			public const char FULLWIDTH_REVERSE_SOLIDUS = (char)0xFF3C;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH CLOSING CURLY BRACKET. </summary>
			public const char FULLWIDTH_RIGHT_CURLY_BRACKET = (char)0xFF5D;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH CLOSING PARENTHESIS. </summary>
			public const char FULLWIDTH_RIGHT_PARENTHESIS = (char)0xFF09;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH CLOSING SQUARE BRACKET. </summary>
			public const char FULLWIDTH_RIGHT_SQUARE_BRACKET = (char)0xFF3D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_RIGHT_WHITE_PARENTHESIS = (char)0xFF60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_SEMICOLON = (char)0xFF1B;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH SLASH. </summary>
			public const char FULLWIDTH_SOLIDUS = (char)0xFF0F;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH SPACING TILDE. </summary>
			public const char FULLWIDTH_TILDE = (char)0xFF5E;
			/// <summary> (This is a composition; consider avoiding.) Formerly FULLWIDTH VERTICAL BAR. </summary>
			public const char FULLWIDTH_VERTICAL_LINE = (char)0xFF5C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_WON_SIGN = (char)0xFFE6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char FULLWIDTH_YEN_SIGN = (char)0xFFE5;
			public const char FULL_BLOCK = (char)0x2588;
			public const char FULL_OUTER_JOIN = (char)0x27D7;
			/// <summary> Formerly PERIOD. </summary>
			public const char FULL_STOP = (char)0x002E;
			public const char FUNCTION_APPLICATION = (char)0x2061;
			public const char FUNERAL_URN = (char)0x26B1;
			public const char FUSE = (char)0x23DB;
		}
		public class G {
			public const char GEAR = (char)0x2699;
			public const char GEMINI = (char)0x264A;
			public const char GEOMETRICALLY_EQUAL_TO = (char)0x2251;
			public const char GEOMETRICALLY_EQUIVALENT_TO = (char)0x224E;
			public const char GEOMETRIC_PROPORTION = (char)0x223A;
			public const char GEORGIAN_CAPITAL_LETTER_AN = (char)0x10A0;
			public const char GEORGIAN_CAPITAL_LETTER_BAN = (char)0x10A1;
			public const char GEORGIAN_CAPITAL_LETTER_CAN = (char)0x10BA;
			public const char GEORGIAN_CAPITAL_LETTER_CHAR = (char)0x10BD;
			public const char GEORGIAN_CAPITAL_LETTER_CHIN = (char)0x10B9;
			public const char GEORGIAN_CAPITAL_LETTER_CIL = (char)0x10BC;
			public const char GEORGIAN_CAPITAL_LETTER_DON = (char)0x10A3;
			public const char GEORGIAN_CAPITAL_LETTER_EN = (char)0x10A4;
			public const char GEORGIAN_CAPITAL_LETTER_GAN = (char)0x10A2;
			public const char GEORGIAN_CAPITAL_LETTER_GHAN = (char)0x10B6;
			public const char GEORGIAN_CAPITAL_LETTER_HAE = (char)0x10C0;
			public const char GEORGIAN_CAPITAL_LETTER_HAR = (char)0x10C4;
			public const char GEORGIAN_CAPITAL_LETTER_HE = (char)0x10C1;
			public const char GEORGIAN_CAPITAL_LETTER_HIE = (char)0x10C2;
			public const char GEORGIAN_CAPITAL_LETTER_HOE = (char)0x10C5;
			public const char GEORGIAN_CAPITAL_LETTER_IN = (char)0x10A8;
			public const char GEORGIAN_CAPITAL_LETTER_JHAN = (char)0x10BF;
			public const char GEORGIAN_CAPITAL_LETTER_JIL = (char)0x10BB;
			public const char GEORGIAN_CAPITAL_LETTER_KAN = (char)0x10A9;
			public const char GEORGIAN_CAPITAL_LETTER_KHAR = (char)0x10B5;
			public const char GEORGIAN_CAPITAL_LETTER_LAS = (char)0x10AA;
			public const char GEORGIAN_CAPITAL_LETTER_MAN = (char)0x10AB;
			public const char GEORGIAN_CAPITAL_LETTER_NAR = (char)0x10AC;
			public const char GEORGIAN_CAPITAL_LETTER_ON = (char)0x10AD;
			public const char GEORGIAN_CAPITAL_LETTER_PAR = (char)0x10AE;
			public const char GEORGIAN_CAPITAL_LETTER_PHAR = (char)0x10B4;
			public const char GEORGIAN_CAPITAL_LETTER_QAR = (char)0x10B7;
			public const char GEORGIAN_CAPITAL_LETTER_RAE = (char)0x10B0;
			public const char GEORGIAN_CAPITAL_LETTER_SAN = (char)0x10B1;
			public const char GEORGIAN_CAPITAL_LETTER_SHIN = (char)0x10B8;
			public const char GEORGIAN_CAPITAL_LETTER_TAN = (char)0x10A7;
			public const char GEORGIAN_CAPITAL_LETTER_TAR = (char)0x10B2;
			public const char GEORGIAN_CAPITAL_LETTER_UN = (char)0x10B3;
			public const char GEORGIAN_CAPITAL_LETTER_VIN = (char)0x10A5;
			public const char GEORGIAN_CAPITAL_LETTER_WE = (char)0x10C3;
			public const char GEORGIAN_CAPITAL_LETTER_XAN = (char)0x10BE;
			public const char GEORGIAN_CAPITAL_LETTER_ZEN = (char)0x10A6;
			public const char GEORGIAN_CAPITAL_LETTER_ZHAR = (char)0x10AF;
			public const char GEORGIAN_LETTER_AIN = (char)0x10FA;
			/// <summary> Formerly GEORGIAN SMALL LETTER AN. </summary>
			public const char GEORGIAN_LETTER_AN = (char)0x10D0;
			/// <summary> Formerly GEORGIAN SMALL LETTER BAN. </summary>
			public const char GEORGIAN_LETTER_BAN = (char)0x10D1;
			/// <summary> Formerly GEORGIAN SMALL LETTER CAN. </summary>
			public const char GEORGIAN_LETTER_CAN = (char)0x10EA;
			/// <summary> Formerly GEORGIAN SMALL LETTER CHAR. </summary>
			public const char GEORGIAN_LETTER_CHAR = (char)0x10ED;
			/// <summary> Formerly GEORGIAN SMALL LETTER CHIN. </summary>
			public const char GEORGIAN_LETTER_CHIN = (char)0x10E9;
			/// <summary> Formerly GEORGIAN SMALL LETTER CIL. </summary>
			public const char GEORGIAN_LETTER_CIL = (char)0x10EC;
			/// <summary> Formerly GEORGIAN SMALL LETTER DON. </summary>
			public const char GEORGIAN_LETTER_DON = (char)0x10D3;
			public const char GEORGIAN_LETTER_ELIFI = (char)0x10F8;
			/// <summary> Formerly GEORGIAN SMALL LETTER EN. </summary>
			public const char GEORGIAN_LETTER_EN = (char)0x10D4;
			/// <summary> Formerly GEORGIAN SMALL LETTER FI. </summary>
			public const char GEORGIAN_LETTER_FI = (char)0x10F6;
			/// <summary> Formerly GEORGIAN SMALL LETTER GAN. </summary>
			public const char GEORGIAN_LETTER_GAN = (char)0x10D2;
			/// <summary> Formerly GEORGIAN SMALL LETTER GHAN. </summary>
			public const char GEORGIAN_LETTER_GHAN = (char)0x10E6;
			/// <summary> Formerly GEORGIAN SMALL LETTER HAE. </summary>
			public const char GEORGIAN_LETTER_HAE = (char)0x10F0;
			/// <summary> Formerly GEORGIAN SMALL LETTER HAR. </summary>
			public const char GEORGIAN_LETTER_HAR = (char)0x10F4;
			/// <summary> Formerly GEORGIAN SMALL LETTER HE. </summary>
			public const char GEORGIAN_LETTER_HE = (char)0x10F1;
			/// <summary> Formerly GEORGIAN SMALL LETTER HIE. </summary>
			public const char GEORGIAN_LETTER_HIE = (char)0x10F2;
			/// <summary> Formerly GEORGIAN SMALL LETTER HOE. </summary>
			public const char GEORGIAN_LETTER_HOE = (char)0x10F5;
			/// <summary> Formerly GEORGIAN SMALL LETTER IN. </summary>
			public const char GEORGIAN_LETTER_IN = (char)0x10D8;
			/// <summary> Formerly GEORGIAN SMALL LETTER JHAN. </summary>
			public const char GEORGIAN_LETTER_JHAN = (char)0x10EF;
			/// <summary> Formerly GEORGIAN SMALL LETTER JIL. </summary>
			public const char GEORGIAN_LETTER_JIL = (char)0x10EB;
			/// <summary> Formerly GEORGIAN SMALL LETTER KAN. </summary>
			public const char GEORGIAN_LETTER_KAN = (char)0x10D9;
			/// <summary> Formerly GEORGIAN SMALL LETTER KHAR. </summary>
			public const char GEORGIAN_LETTER_KHAR = (char)0x10E5;
			/// <summary> Formerly GEORGIAN SMALL LETTER LAS. </summary>
			public const char GEORGIAN_LETTER_LAS = (char)0x10DA;
			/// <summary> Formerly GEORGIAN SMALL LETTER MAN. </summary>
			public const char GEORGIAN_LETTER_MAN = (char)0x10DB;
			/// <summary> Formerly GEORGIAN SMALL LETTER NAR. </summary>
			public const char GEORGIAN_LETTER_NAR = (char)0x10DC;
			/// <summary> Formerly GEORGIAN SMALL LETTER ON. </summary>
			public const char GEORGIAN_LETTER_ON = (char)0x10DD;
			/// <summary> Formerly GEORGIAN SMALL LETTER PAR. </summary>
			public const char GEORGIAN_LETTER_PAR = (char)0x10DE;
			/// <summary> Formerly GEORGIAN SMALL LETTER PHAR. </summary>
			public const char GEORGIAN_LETTER_PHAR = (char)0x10E4;
			/// <summary> Formerly GEORGIAN SMALL LETTER QAR. </summary>
			public const char GEORGIAN_LETTER_QAR = (char)0x10E7;
			/// <summary> Formerly GEORGIAN SMALL LETTER RAE. </summary>
			public const char GEORGIAN_LETTER_RAE = (char)0x10E0;
			/// <summary> Formerly GEORGIAN SMALL LETTER SAN. </summary>
			public const char GEORGIAN_LETTER_SAN = (char)0x10E1;
			/// <summary> Formerly GEORGIAN SMALL LETTER SHIN. </summary>
			public const char GEORGIAN_LETTER_SHIN = (char)0x10E8;
			/// <summary> Formerly GEORGIAN SMALL LETTER TAN. </summary>
			public const char GEORGIAN_LETTER_TAN = (char)0x10D7;
			/// <summary> Formerly GEORGIAN SMALL LETTER TAR. </summary>
			public const char GEORGIAN_LETTER_TAR = (char)0x10E2;
			public const char GEORGIAN_LETTER_TURNED_GAN = (char)0x10F9;
			/// <summary> Formerly GEORGIAN SMALL LETTER UN. </summary>
			public const char GEORGIAN_LETTER_UN = (char)0x10E3;
			/// <summary> Formerly GEORGIAN SMALL LETTER VIN. </summary>
			public const char GEORGIAN_LETTER_VIN = (char)0x10D5;
			/// <summary> Formerly GEORGIAN SMALL LETTER WE. </summary>
			public const char GEORGIAN_LETTER_WE = (char)0x10F3;
			/// <summary> Formerly GEORGIAN SMALL LETTER XAN. </summary>
			public const char GEORGIAN_LETTER_XAN = (char)0x10EE;
			public const char GEORGIAN_LETTER_YN = (char)0x10F7;
			/// <summary> Formerly GEORGIAN SMALL LETTER ZEN. </summary>
			public const char GEORGIAN_LETTER_ZEN = (char)0x10D6;
			/// <summary> Formerly GEORGIAN SMALL LETTER ZHAR. </summary>
			public const char GEORGIAN_LETTER_ZHAR = (char)0x10DF;
			public const char GEORGIAN_PARAGRAPH_SEPARATOR = (char)0x10FB;
			public const char GEORGIAN_SMALL_LETTER_AN = (char)0x2D00;
			public const char GEORGIAN_SMALL_LETTER_BAN = (char)0x2D01;
			public const char GEORGIAN_SMALL_LETTER_CAN = (char)0x2D1A;
			public const char GEORGIAN_SMALL_LETTER_CHAR = (char)0x2D1D;
			public const char GEORGIAN_SMALL_LETTER_CHIN = (char)0x2D19;
			public const char GEORGIAN_SMALL_LETTER_CIL = (char)0x2D1C;
			public const char GEORGIAN_SMALL_LETTER_DON = (char)0x2D03;
			public const char GEORGIAN_SMALL_LETTER_EN = (char)0x2D04;
			public const char GEORGIAN_SMALL_LETTER_GAN = (char)0x2D02;
			public const char GEORGIAN_SMALL_LETTER_GHAN = (char)0x2D16;
			public const char GEORGIAN_SMALL_LETTER_HAE = (char)0x2D20;
			public const char GEORGIAN_SMALL_LETTER_HAR = (char)0x2D24;
			public const char GEORGIAN_SMALL_LETTER_HE = (char)0x2D21;
			public const char GEORGIAN_SMALL_LETTER_HIE = (char)0x2D22;
			public const char GEORGIAN_SMALL_LETTER_HOE = (char)0x2D25;
			public const char GEORGIAN_SMALL_LETTER_IN = (char)0x2D08;
			public const char GEORGIAN_SMALL_LETTER_JHAN = (char)0x2D1F;
			public const char GEORGIAN_SMALL_LETTER_JIL = (char)0x2D1B;
			public const char GEORGIAN_SMALL_LETTER_KAN = (char)0x2D09;
			public const char GEORGIAN_SMALL_LETTER_KHAR = (char)0x2D15;
			public const char GEORGIAN_SMALL_LETTER_LAS = (char)0x2D0A;
			public const char GEORGIAN_SMALL_LETTER_MAN = (char)0x2D0B;
			public const char GEORGIAN_SMALL_LETTER_NAR = (char)0x2D0C;
			public const char GEORGIAN_SMALL_LETTER_ON = (char)0x2D0D;
			public const char GEORGIAN_SMALL_LETTER_PAR = (char)0x2D0E;
			public const char GEORGIAN_SMALL_LETTER_PHAR = (char)0x2D14;
			public const char GEORGIAN_SMALL_LETTER_QAR = (char)0x2D17;
			public const char GEORGIAN_SMALL_LETTER_RAE = (char)0x2D10;
			public const char GEORGIAN_SMALL_LETTER_SAN = (char)0x2D11;
			public const char GEORGIAN_SMALL_LETTER_SHIN = (char)0x2D18;
			public const char GEORGIAN_SMALL_LETTER_TAN = (char)0x2D07;
			public const char GEORGIAN_SMALL_LETTER_TAR = (char)0x2D12;
			public const char GEORGIAN_SMALL_LETTER_UN = (char)0x2D13;
			public const char GEORGIAN_SMALL_LETTER_VIN = (char)0x2D05;
			public const char GEORGIAN_SMALL_LETTER_WE = (char)0x2D23;
			public const char GEORGIAN_SMALL_LETTER_XAN = (char)0x2D1E;
			public const char GEORGIAN_SMALL_LETTER_ZEN = (char)0x2D06;
			public const char GEORGIAN_SMALL_LETTER_ZHAR = (char)0x2D0F;
			public const char GERMAN_PENNY_SIGN = (char)0x20B0;
			public const char GETA_MARK = (char)0x3013;
			/// <summary> (This is a composition; consider avoiding.) Formerly THIRD TRANSFINITE CARDINAL. </summary>
			public const char GIMEL_SYMBOL = (char)0x2137;
			public const char GLAGOLITIC_CAPITAL_LETTER_AZU = (char)0x2C00;
			public const char GLAGOLITIC_CAPITAL_LETTER_BIG_YUS = (char)0x2C28;
			public const char GLAGOLITIC_CAPITAL_LETTER_BUKY = (char)0x2C01;
			public const char GLAGOLITIC_CAPITAL_LETTER_CHRIVI = (char)0x2C1D;
			public const char GLAGOLITIC_CAPITAL_LETTER_DJERVI = (char)0x2C0C;
			public const char GLAGOLITIC_CAPITAL_LETTER_DOBRO = (char)0x2C04;
			public const char GLAGOLITIC_CAPITAL_LETTER_DZELO = (char)0x2C07;
			public const char GLAGOLITIC_CAPITAL_LETTER_FITA = (char)0x2C2A;
			public const char GLAGOLITIC_CAPITAL_LETTER_FRITU = (char)0x2C17;
			public const char GLAGOLITIC_CAPITAL_LETTER_GLAGOLI = (char)0x2C03;
			public const char GLAGOLITIC_CAPITAL_LETTER_HERU = (char)0x2C18;
			public const char GLAGOLITIC_CAPITAL_LETTER_I = (char)0x2C0B;
			public const char GLAGOLITIC_CAPITAL_LETTER_INITIAL_IZHE = (char)0x2C0A;
			public const char GLAGOLITIC_CAPITAL_LETTER_IOTATED_BIG_YUS = (char)0x2C29;
			public const char GLAGOLITIC_CAPITAL_LETTER_IOTATED_SMALL_YUS = (char)0x2C27;
			public const char GLAGOLITIC_CAPITAL_LETTER_IZHE = (char)0x2C09;
			public const char GLAGOLITIC_CAPITAL_LETTER_IZHITSA = (char)0x2C2B;
			public const char GLAGOLITIC_CAPITAL_LETTER_KAKO = (char)0x2C0D;
			public const char GLAGOLITIC_CAPITAL_LETTER_LATINATE_MYSLITE = (char)0x2C2E;
			public const char GLAGOLITIC_CAPITAL_LETTER_LJUDIJE = (char)0x2C0E;
			public const char GLAGOLITIC_CAPITAL_LETTER_MYSLITE = (char)0x2C0F;
			public const char GLAGOLITIC_CAPITAL_LETTER_NASHI = (char)0x2C10;
			public const char GLAGOLITIC_CAPITAL_LETTER_ONU = (char)0x2C11;
			public const char GLAGOLITIC_CAPITAL_LETTER_OTU = (char)0x2C19;
			public const char GLAGOLITIC_CAPITAL_LETTER_PE = (char)0x2C1A;
			public const char GLAGOLITIC_CAPITAL_LETTER_POKOJI = (char)0x2C12;
			public const char GLAGOLITIC_CAPITAL_LETTER_RITSI = (char)0x2C13;
			public const char GLAGOLITIC_CAPITAL_LETTER_SHA = (char)0x2C1E;
			public const char GLAGOLITIC_CAPITAL_LETTER_SHTA = (char)0x2C1B;
			public const char GLAGOLITIC_CAPITAL_LETTER_SHTAPIC = (char)0x2C2C;
			public const char GLAGOLITIC_CAPITAL_LETTER_SLOVO = (char)0x2C14;
			public const char GLAGOLITIC_CAPITAL_LETTER_SMALL_YUS = (char)0x2C24;
			public const char GLAGOLITIC_CAPITAL_LETTER_SMALL_YUS_WITH_TAIL = (char)0x2C25;
			public const char GLAGOLITIC_CAPITAL_LETTER_SPIDERY_HA = (char)0x2C22;
			public const char GLAGOLITIC_CAPITAL_LETTER_TROKUTASTI_A = (char)0x2C2D;
			public const char GLAGOLITIC_CAPITAL_LETTER_TSI = (char)0x2C1C;
			public const char GLAGOLITIC_CAPITAL_LETTER_TVRIDO = (char)0x2C15;
			public const char GLAGOLITIC_CAPITAL_LETTER_UKU = (char)0x2C16;
			public const char GLAGOLITIC_CAPITAL_LETTER_VEDE = (char)0x2C02;
			public const char GLAGOLITIC_CAPITAL_LETTER_YATI = (char)0x2C21;
			public const char GLAGOLITIC_CAPITAL_LETTER_YERI = (char)0x2C20;
			public const char GLAGOLITIC_CAPITAL_LETTER_YERU = (char)0x2C1F;
			public const char GLAGOLITIC_CAPITAL_LETTER_YESTU = (char)0x2C05;
			public const char GLAGOLITIC_CAPITAL_LETTER_YO = (char)0x2C26;
			public const char GLAGOLITIC_CAPITAL_LETTER_YU = (char)0x2C23;
			public const char GLAGOLITIC_CAPITAL_LETTER_ZEMLJA = (char)0x2C08;
			public const char GLAGOLITIC_CAPITAL_LETTER_ZHIVETE = (char)0x2C06;
			public const char GLAGOLITIC_SMALL_LETTER_AZU = (char)0x2C30;
			public const char GLAGOLITIC_SMALL_LETTER_BIG_YUS = (char)0x2C58;
			public const char GLAGOLITIC_SMALL_LETTER_BUKY = (char)0x2C31;
			public const char GLAGOLITIC_SMALL_LETTER_CHRIVI = (char)0x2C4D;
			public const char GLAGOLITIC_SMALL_LETTER_DJERVI = (char)0x2C3C;
			public const char GLAGOLITIC_SMALL_LETTER_DOBRO = (char)0x2C34;
			public const char GLAGOLITIC_SMALL_LETTER_DZELO = (char)0x2C37;
			public const char GLAGOLITIC_SMALL_LETTER_FITA = (char)0x2C5A;
			public const char GLAGOLITIC_SMALL_LETTER_FRITU = (char)0x2C47;
			public const char GLAGOLITIC_SMALL_LETTER_GLAGOLI = (char)0x2C33;
			public const char GLAGOLITIC_SMALL_LETTER_HERU = (char)0x2C48;
			public const char GLAGOLITIC_SMALL_LETTER_I = (char)0x2C3B;
			public const char GLAGOLITIC_SMALL_LETTER_INITIAL_IZHE = (char)0x2C3A;
			public const char GLAGOLITIC_SMALL_LETTER_IOTATED_BIG_YUS = (char)0x2C59;
			public const char GLAGOLITIC_SMALL_LETTER_IOTATED_SMALL_YUS = (char)0x2C57;
			public const char GLAGOLITIC_SMALL_LETTER_IZHE = (char)0x2C39;
			public const char GLAGOLITIC_SMALL_LETTER_IZHITSA = (char)0x2C5B;
			public const char GLAGOLITIC_SMALL_LETTER_KAKO = (char)0x2C3D;
			public const char GLAGOLITIC_SMALL_LETTER_LATINATE_MYSLITE = (char)0x2C5E;
			public const char GLAGOLITIC_SMALL_LETTER_LJUDIJE = (char)0x2C3E;
			public const char GLAGOLITIC_SMALL_LETTER_MYSLITE = (char)0x2C3F;
			public const char GLAGOLITIC_SMALL_LETTER_NASHI = (char)0x2C40;
			public const char GLAGOLITIC_SMALL_LETTER_ONU = (char)0x2C41;
			public const char GLAGOLITIC_SMALL_LETTER_OTU = (char)0x2C49;
			public const char GLAGOLITIC_SMALL_LETTER_PE = (char)0x2C4A;
			public const char GLAGOLITIC_SMALL_LETTER_POKOJI = (char)0x2C42;
			public const char GLAGOLITIC_SMALL_LETTER_RITSI = (char)0x2C43;
			public const char GLAGOLITIC_SMALL_LETTER_SHA = (char)0x2C4E;
			public const char GLAGOLITIC_SMALL_LETTER_SHTA = (char)0x2C4B;
			public const char GLAGOLITIC_SMALL_LETTER_SHTAPIC = (char)0x2C5C;
			public const char GLAGOLITIC_SMALL_LETTER_SLOVO = (char)0x2C44;
			public const char GLAGOLITIC_SMALL_LETTER_SMALL_YUS = (char)0x2C54;
			public const char GLAGOLITIC_SMALL_LETTER_SMALL_YUS_WITH_TAIL = (char)0x2C55;
			public const char GLAGOLITIC_SMALL_LETTER_SPIDERY_HA = (char)0x2C52;
			public const char GLAGOLITIC_SMALL_LETTER_TROKUTASTI_A = (char)0x2C5D;
			public const char GLAGOLITIC_SMALL_LETTER_TSI = (char)0x2C4C;
			public const char GLAGOLITIC_SMALL_LETTER_TVRIDO = (char)0x2C45;
			public const char GLAGOLITIC_SMALL_LETTER_UKU = (char)0x2C46;
			public const char GLAGOLITIC_SMALL_LETTER_VEDE = (char)0x2C32;
			public const char GLAGOLITIC_SMALL_LETTER_YATI = (char)0x2C51;
			public const char GLAGOLITIC_SMALL_LETTER_YERI = (char)0x2C50;
			public const char GLAGOLITIC_SMALL_LETTER_YERU = (char)0x2C4F;
			public const char GLAGOLITIC_SMALL_LETTER_YESTU = (char)0x2C35;
			public const char GLAGOLITIC_SMALL_LETTER_YO = (char)0x2C56;
			public const char GLAGOLITIC_SMALL_LETTER_YU = (char)0x2C53;
			public const char GLAGOLITIC_SMALL_LETTER_ZEMLJA = (char)0x2C38;
			public const char GLAGOLITIC_SMALL_LETTER_ZHIVETE = (char)0x2C36;
			public const char GLEICH_STARK = (char)0x29E6;
			/// <summary> Formerly SPACING GRAVE. </summary>
			public const char GRAVE_ACCENT = (char)0x0060;
			public const char GREATER_THAN_ABOVE_DOUBLE_LINE_EQUAL_ABOVE_LESS_THAN = (char)0x2A8C;
			public const char GREATER_THAN_ABOVE_LESS_THAN_ABOVE_DOUBLE_LINE_EQUAL = (char)0x2A92;
			public const char GREATER_THAN_ABOVE_RIGHTWARDS_ARROW = (char)0x2978;
			public const char GREATER_THAN_ABOVE_SIMILAR_ABOVE_LESS_THAN = (char)0x2A90;
			public const char GREATER_THAN_ABOVE_SIMILAR_OR_EQUAL = (char)0x2A8E;
			public const char GREATER_THAN_ABOVE_SLANTED_EQUAL_ABOVE_LESS_THAN_ABOVE_SLANTED_EQUAL = (char)0x2A94;
			public const char GREATER_THAN_AND_NOT_APPROXIMATE = (char)0x2A8A;
			public const char GREATER_THAN_AND_SINGLE_LINE_NOT_EQUAL_TO = (char)0x2A88;
			public const char GREATER_THAN_BESIDE_LESS_THAN = (char)0x2AA5;
			/// <summary> Formerly GREATER THAN BUT NOT EQUAL TO. </summary>
			public const char GREATER_THAN_BUT_NOT_EQUAL_TO = (char)0x2269;
			/// <summary> Formerly GREATER THAN BUT NOT EQUIVALENT TO. </summary>
			public const char GREATER_THAN_BUT_NOT_EQUIVALENT_TO = (char)0x22E7;
			public const char GREATER_THAN_CLOSED_BY_CURVE = (char)0x2AA7;
			public const char GREATER_THAN_CLOSED_BY_CURVE_ABOVE_SLANTED_EQUAL = (char)0x2AA9;
			/// <summary> Formerly GREATER THAN EQUAL TO OR LESS THAN. </summary>
			public const char GREATER_THAN_EQUAL_TO_OR_LESS_THAN = (char)0x22DB;
			public const char GREATER_THAN_OR_APPROXIMATE = (char)0x2A86;
			/// <summary> Formerly GREATER THAN OR EQUAL TO. </summary>
			public const char GREATER_THAN_OR_EQUAL_TO = (char)0x2265;
			/// <summary> Formerly GREATER THAN OR EQUIVALENT TO. </summary>
			public const char GREATER_THAN_OR_EQUIVALENT_TO = (char)0x2273;
			/// <summary> Formerly GREATER THAN OR LESS THAN. </summary>
			public const char GREATER_THAN_OR_LESS_THAN = (char)0x2277;
			public const char GREATER_THAN_OR_SLANTED_EQUAL_TO = (char)0x2A7E;
			public const char GREATER_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_ABOVE = (char)0x2A82;
			public const char GREATER_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_ABOVE_LEFT = (char)0x2A84;
			public const char GREATER_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_INSIDE = (char)0x2A80;
			public const char GREATER_THAN_OVERLAPPING_LESS_THAN = (char)0x2AA4;
			/// <summary> Formerly GREATER THAN OVER EQUAL TO. </summary>
			public const char GREATER_THAN_OVER_EQUAL_TO = (char)0x2267;
			public const char GREATER_THAN_SIGN = (char)0x003E;
			public const char GREATER_THAN_WITH_CIRCLE_INSIDE = (char)0x2A7A;
			/// <summary> Formerly GREATER THAN WITH DOT. </summary>
			public const char GREATER_THAN_WITH_DOT = (char)0x22D7;
			public const char GREATER_THAN_WITH_QUESTION_MARK_ABOVE = (char)0x2A7C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_ANO_TELEIA = (char)0x0387;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER CURLED BETA. </summary>
			public const char GREEK_BETA_SYMBOL = (char)0x03D0;
			public const char GREEK_CAPITAL_DOTTED_LUNATE_SIGMA_SYMBOL = (char)0x03FE;
			public const char GREEK_CAPITAL_LETTER_ALPHA = (char)0x0391;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_DASIA = (char)0x1F09;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_DASIA_AND_OXIA = (char)0x1F0D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_DASIA_AND_OXIA_AND_PROSGEGRAMMENI = (char)0x1F8D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_DASIA_AND_PERISPOMENI = (char)0x1F0F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_DASIA_AND_PERISPOMENI_AND_PROSGEGRAMMENI = (char)0x1F8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_DASIA_AND_PROSGEGRAMMENI = (char)0x1F89;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_DASIA_AND_VARIA = (char)0x1F0B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_DASIA_AND_VARIA_AND_PROSGEGRAMMENI = (char)0x1F8B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_MACRON = (char)0x1FB9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_OXIA = (char)0x1FBB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PROSGEGRAMMENI = (char)0x1FBC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PSILI = (char)0x1F08;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PSILI_AND_OXIA = (char)0x1F0C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PSILI_AND_OXIA_AND_PROSGEGRAMMENI = (char)0x1F8C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PSILI_AND_PERISPOMENI = (char)0x1F0E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PSILI_AND_PERISPOMENI_AND_PROSGEGRAMMENI = (char)0x1F8E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PSILI_AND_PROSGEGRAMMENI = (char)0x1F88;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PSILI_AND_VARIA = (char)0x1F0A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_PSILI_AND_VARIA_AND_PROSGEGRAMMENI = (char)0x1F8A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER ALPHA TONOS. </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_TONOS = (char)0x0386;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_VARIA = (char)0x1FBA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ALPHA_WITH_VRACHY = (char)0x1FB8;
			public const char GREEK_CAPITAL_LETTER_BETA = (char)0x0392;
			public const char GREEK_CAPITAL_LETTER_CHI = (char)0x03A7;
			public const char GREEK_CAPITAL_LETTER_DELTA = (char)0x0394;
			public const char GREEK_CAPITAL_LETTER_EPSILON = (char)0x0395;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_DASIA = (char)0x1F19;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_DASIA_AND_OXIA = (char)0x1F1D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_DASIA_AND_VARIA = (char)0x1F1B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_OXIA = (char)0x1FC9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_PSILI = (char)0x1F18;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_PSILI_AND_OXIA = (char)0x1F1C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_PSILI_AND_VARIA = (char)0x1F1A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER EPSILON TONOS. </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_TONOS = (char)0x0388;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_EPSILON_WITH_VARIA = (char)0x1FC8;
			public const char GREEK_CAPITAL_LETTER_ETA = (char)0x0397;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_DASIA = (char)0x1F29;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_DASIA_AND_OXIA = (char)0x1F2D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_DASIA_AND_OXIA_AND_PROSGEGRAMMENI = (char)0x1F9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_DASIA_AND_PERISPOMENI = (char)0x1F2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_DASIA_AND_PERISPOMENI_AND_PROSGEGRAMMENI = (char)0x1F9F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_DASIA_AND_PROSGEGRAMMENI = (char)0x1F99;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_DASIA_AND_VARIA = (char)0x1F2B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_DASIA_AND_VARIA_AND_PROSGEGRAMMENI = (char)0x1F9B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_OXIA = (char)0x1FCB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PROSGEGRAMMENI = (char)0x1FCC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PSILI = (char)0x1F28;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PSILI_AND_OXIA = (char)0x1F2C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PSILI_AND_OXIA_AND_PROSGEGRAMMENI = (char)0x1F9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PSILI_AND_PERISPOMENI = (char)0x1F2E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PSILI_AND_PERISPOMENI_AND_PROSGEGRAMMENI = (char)0x1F9E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PSILI_AND_PROSGEGRAMMENI = (char)0x1F98;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PSILI_AND_VARIA = (char)0x1F2A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_PSILI_AND_VARIA_AND_PROSGEGRAMMENI = (char)0x1F9A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER ETA TONOS. </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_TONOS = (char)0x0389;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_ETA_WITH_VARIA = (char)0x1FCA;
			public const char GREEK_CAPITAL_LETTER_GAMMA = (char)0x0393;
			public const char GREEK_CAPITAL_LETTER_IOTA = (char)0x0399;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_DASIA = (char)0x1F39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_DASIA_AND_OXIA = (char)0x1F3D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_DASIA_AND_PERISPOMENI = (char)0x1F3F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_DASIA_AND_VARIA = (char)0x1F3B;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER IOTA DIAERESIS. </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_DIALYTIKA = (char)0x03AA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_MACRON = (char)0x1FD9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_OXIA = (char)0x1FDB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_PSILI = (char)0x1F38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_PSILI_AND_OXIA = (char)0x1F3C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_PSILI_AND_PERISPOMENI = (char)0x1F3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_PSILI_AND_VARIA = (char)0x1F3A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER IOTA TONOS. </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_TONOS = (char)0x038A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_VARIA = (char)0x1FDA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_IOTA_WITH_VRACHY = (char)0x1FD8;
			public const char GREEK_CAPITAL_LETTER_KAPPA = (char)0x039A;
			/// <summary> Formerly GREEK CAPITAL LETTER LAMBDA. </summary>
			public const char GREEK_CAPITAL_LETTER_LAMDA = (char)0x039B;
			public const char GREEK_CAPITAL_LETTER_MU = (char)0x039C;
			public const char GREEK_CAPITAL_LETTER_NU = (char)0x039D;
			public const char GREEK_CAPITAL_LETTER_OMEGA = (char)0x03A9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_DASIA = (char)0x1F69;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_DASIA_AND_OXIA = (char)0x1F6D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_DASIA_AND_OXIA_AND_PROSGEGRAMMENI = (char)0x1FAD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_DASIA_AND_PERISPOMENI = (char)0x1F6F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_DASIA_AND_PERISPOMENI_AND_PROSGEGRAMMENI = (char)0x1FAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_DASIA_AND_PROSGEGRAMMENI = (char)0x1FA9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_DASIA_AND_VARIA = (char)0x1F6B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_DASIA_AND_VARIA_AND_PROSGEGRAMMENI = (char)0x1FAB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_OXIA = (char)0x1FFB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PROSGEGRAMMENI = (char)0x1FFC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PSILI = (char)0x1F68;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PSILI_AND_OXIA = (char)0x1F6C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PSILI_AND_OXIA_AND_PROSGEGRAMMENI = (char)0x1FAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PSILI_AND_PERISPOMENI = (char)0x1F6E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PSILI_AND_PERISPOMENI_AND_PROSGEGRAMMENI = (char)0x1FAE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PSILI_AND_PROSGEGRAMMENI = (char)0x1FA8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PSILI_AND_VARIA = (char)0x1F6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_PSILI_AND_VARIA_AND_PROSGEGRAMMENI = (char)0x1FAA;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER OMEGA TONOS. </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_TONOS = (char)0x038F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMEGA_WITH_VARIA = (char)0x1FFA;
			public const char GREEK_CAPITAL_LETTER_OMICRON = (char)0x039F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_DASIA = (char)0x1F49;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_DASIA_AND_OXIA = (char)0x1F4D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_DASIA_AND_VARIA = (char)0x1F4B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_OXIA = (char)0x1FF9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_PSILI = (char)0x1F48;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_PSILI_AND_OXIA = (char)0x1F4C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_PSILI_AND_VARIA = (char)0x1F4A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER OMICRON TONOS. </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_TONOS = (char)0x038C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_OMICRON_WITH_VARIA = (char)0x1FF8;
			public const char GREEK_CAPITAL_LETTER_PHI = (char)0x03A6;
			public const char GREEK_CAPITAL_LETTER_PI = (char)0x03A0;
			public const char GREEK_CAPITAL_LETTER_PSI = (char)0x03A8;
			public const char GREEK_CAPITAL_LETTER_RHO = (char)0x03A1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_RHO_WITH_DASIA = (char)0x1FEC;
			public const char GREEK_CAPITAL_LETTER_SAN = (char)0x03FA;
			public const char GREEK_CAPITAL_LETTER_SHO = (char)0x03F7;
			public const char GREEK_CAPITAL_LETTER_SIGMA = (char)0x03A3;
			public const char GREEK_CAPITAL_LETTER_TAU = (char)0x03A4;
			public const char GREEK_CAPITAL_LETTER_THETA = (char)0x0398;
			public const char GREEK_CAPITAL_LETTER_UPSILON = (char)0x03A5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_DASIA = (char)0x1F59;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_DASIA_AND_OXIA = (char)0x1F5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_DASIA_AND_PERISPOMENI = (char)0x1F5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_DASIA_AND_VARIA = (char)0x1F5B;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER UPSILON DIAERESIS. </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_DIALYTIKA = (char)0x03AB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_MACRON = (char)0x1FE9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_OXIA = (char)0x1FEB;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER UPSILON TONOS. </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_TONOS = (char)0x038E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_VARIA = (char)0x1FEA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LETTER_UPSILON_WITH_VRACHY = (char)0x1FE8;
			public const char GREEK_CAPITAL_LETTER_XI = (char)0x039E;
			public const char GREEK_CAPITAL_LETTER_ZETA = (char)0x0396;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_LUNATE_SIGMA_SYMBOL = (char)0x03F9;
			public const char GREEK_CAPITAL_REVERSED_DOTTED_LUNATE_SIGMA_SYMBOL = (char)0x03FF;
			public const char GREEK_CAPITAL_REVERSED_LUNATE_SIGMA_SYMBOL = (char)0x03FD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_CAPITAL_THETA_SYMBOL = (char)0x03F4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_DASIA = (char)0x1FFE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_DASIA_AND_OXIA = (char)0x1FDE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_DASIA_AND_PERISPOMENI = (char)0x1FDF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_DASIA_AND_VARIA = (char)0x1FDD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_DIALYTIKA_AND_OXIA = (char)0x1FEE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_DIALYTIKA_AND_PERISPOMENI = (char)0x1FC1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_DIALYTIKA_AND_VARIA = (char)0x1FED;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SPACING DIAERESIS TONOS. </summary>
			public const char GREEK_DIALYTIKA_TONOS = (char)0x0385;
			public const char GREEK_KAI_SYMBOL = (char)0x03D7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER SCRIPT KAPPA. </summary>
			public const char GREEK_KAPPA_SYMBOL = (char)0x03F0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_KORONIS = (char)0x1FBD;
			public const char GREEK_LETTER_ARCHAIC_KOPPA = (char)0x03D8;
			/// <summary> Formerly GREEK CAPITAL LETTER DIGAMMA. </summary>
			public const char GREEK_LETTER_DIGAMMA = (char)0x03DC;
			/// <summary> Formerly GREEK CAPITAL LETTER KOPPA. </summary>
			public const char GREEK_LETTER_KOPPA = (char)0x03DE;
			/// <summary> Formerly GREEK CAPITAL LETTER SAMPI. </summary>
			public const char GREEK_LETTER_SAMPI = (char)0x03E0;
			public const char GREEK_LETTER_SMALL_CAPITAL_GAMMA = (char)0x1D26;
			public const char GREEK_LETTER_SMALL_CAPITAL_LAMDA = (char)0x1D27;
			public const char GREEK_LETTER_SMALL_CAPITAL_PI = (char)0x1D28;
			public const char GREEK_LETTER_SMALL_CAPITAL_PSI = (char)0x1D2A;
			public const char GREEK_LETTER_SMALL_CAPITAL_RHO = (char)0x1D29;
			/// <summary> Formerly GREEK CAPITAL LETTER STIGMA. </summary>
			public const char GREEK_LETTER_STIGMA = (char)0x03DA;
			public const char GREEK_LETTER_YOT = (char)0x03F3;
			public const char GREEK_LOWER_NUMERAL_SIGN = (char)0x0375;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_LUNATE_EPSILON_SYMBOL = (char)0x03F5;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER LUNATE SIGMA. </summary>
			public const char GREEK_LUNATE_SIGMA_SYMBOL = (char)0x03F2;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK UPPER NUMERAL SIGN. </summary>
			public const char GREEK_NUMERAL_SIGN = (char)0x0374;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_OXIA = (char)0x1FFD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_PERISPOMENI = (char)0x1FC0;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER SCRIPT PHI. </summary>
			public const char GREEK_PHI_SYMBOL = (char)0x03D5;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER OMEGA PI. </summary>
			public const char GREEK_PI_SYMBOL = (char)0x03D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_PROSGEGRAMMENI = (char)0x1FBE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_PSILI = (char)0x1FBF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_PSILI_AND_OXIA = (char)0x1FCE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_PSILI_AND_PERISPOMENI = (char)0x1FCF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_PSILI_AND_VARIA = (char)0x1FCD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_QUESTION_MARK = (char)0x037E;
			public const char GREEK_REVERSED_LUNATE_EPSILON_SYMBOL = (char)0x03F6;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER TAILED RHO. </summary>
			public const char GREEK_RHO_SYMBOL = (char)0x03F1;
			public const char GREEK_RHO_WITH_STROKE_SYMBOL = (char)0x03FC;
			public const char GREEK_SMALL_LETTER_ALPHA = (char)0x03B1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_DASIA = (char)0x1F01;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_DASIA_AND_OXIA = (char)0x1F05;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_DASIA_AND_OXIA_AND_YPOGEGRAMMENI = (char)0x1F85;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_DASIA_AND_PERISPOMENI = (char)0x1F07;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_DASIA_AND_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1F87;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_DASIA_AND_VARIA = (char)0x1F03;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_DASIA_AND_VARIA_AND_YPOGEGRAMMENI = (char)0x1F83;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_DASIA_AND_YPOGEGRAMMENI = (char)0x1F81;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_MACRON = (char)0x1FB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_OXIA = (char)0x1F71;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_OXIA_AND_YPOGEGRAMMENI = (char)0x1FB4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PERISPOMENI = (char)0x1FB6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1FB7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PSILI = (char)0x1F00;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PSILI_AND_OXIA = (char)0x1F04;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PSILI_AND_OXIA_AND_YPOGEGRAMMENI = (char)0x1F84;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PSILI_AND_PERISPOMENI = (char)0x1F06;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PSILI_AND_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1F86;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PSILI_AND_VARIA = (char)0x1F02;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PSILI_AND_VARIA_AND_YPOGEGRAMMENI = (char)0x1F82;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_PSILI_AND_YPOGEGRAMMENI = (char)0x1F80;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER ALPHA TONOS. </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_TONOS = (char)0x03AC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_VARIA = (char)0x1F70;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_VARIA_AND_YPOGEGRAMMENI = (char)0x1FB2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_VRACHY = (char)0x1FB0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ALPHA_WITH_YPOGEGRAMMENI = (char)0x1FB3;
			public const char GREEK_SMALL_LETTER_ARCHAIC_KOPPA = (char)0x03D9;
			public const char GREEK_SMALL_LETTER_BETA = (char)0x03B2;
			public const char GREEK_SMALL_LETTER_CHI = (char)0x03C7;
			public const char GREEK_SMALL_LETTER_DELTA = (char)0x03B4;
			public const char GREEK_SMALL_LETTER_DIGAMMA = (char)0x03DD;
			public const char GREEK_SMALL_LETTER_EPSILON = (char)0x03B5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_DASIA = (char)0x1F11;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_DASIA_AND_OXIA = (char)0x1F15;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_DASIA_AND_VARIA = (char)0x1F13;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_OXIA = (char)0x1F73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_PSILI = (char)0x1F10;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_PSILI_AND_OXIA = (char)0x1F14;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_PSILI_AND_VARIA = (char)0x1F12;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER EPSILON TONOS. </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_TONOS = (char)0x03AD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_EPSILON_WITH_VARIA = (char)0x1F72;
			public const char GREEK_SMALL_LETTER_ETA = (char)0x03B7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_DASIA = (char)0x1F21;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_DASIA_AND_OXIA = (char)0x1F25;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_DASIA_AND_OXIA_AND_YPOGEGRAMMENI = (char)0x1F95;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_DASIA_AND_PERISPOMENI = (char)0x1F27;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_DASIA_AND_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1F97;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_DASIA_AND_VARIA = (char)0x1F23;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_DASIA_AND_VARIA_AND_YPOGEGRAMMENI = (char)0x1F93;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_DASIA_AND_YPOGEGRAMMENI = (char)0x1F91;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_OXIA = (char)0x1F75;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_OXIA_AND_YPOGEGRAMMENI = (char)0x1FC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PERISPOMENI = (char)0x1FC6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1FC7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PSILI = (char)0x1F20;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PSILI_AND_OXIA = (char)0x1F24;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PSILI_AND_OXIA_AND_YPOGEGRAMMENI = (char)0x1F94;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PSILI_AND_PERISPOMENI = (char)0x1F26;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PSILI_AND_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1F96;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PSILI_AND_VARIA = (char)0x1F22;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PSILI_AND_VARIA_AND_YPOGEGRAMMENI = (char)0x1F92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_PSILI_AND_YPOGEGRAMMENI = (char)0x1F90;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER ETA TONOS. </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_TONOS = (char)0x03AE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_VARIA = (char)0x1F74;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_VARIA_AND_YPOGEGRAMMENI = (char)0x1FC2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_ETA_WITH_YPOGEGRAMMENI = (char)0x1FC3;
			public const char GREEK_SMALL_LETTER_FINAL_SIGMA = (char)0x03C2;
			public const char GREEK_SMALL_LETTER_GAMMA = (char)0x03B3;
			public const char GREEK_SMALL_LETTER_IOTA = (char)0x03B9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DASIA = (char)0x1F31;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DASIA_AND_OXIA = (char)0x1F35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DASIA_AND_PERISPOMENI = (char)0x1F37;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DASIA_AND_VARIA = (char)0x1F33;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER IOTA DIAERESIS. </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DIALYTIKA = (char)0x03CA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DIALYTIKA_AND_OXIA = (char)0x1FD3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DIALYTIKA_AND_PERISPOMENI = (char)0x1FD7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER IOTA DIAERESIS TONOS. </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DIALYTIKA_AND_TONOS = (char)0x0390;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_DIALYTIKA_AND_VARIA = (char)0x1FD2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_MACRON = (char)0x1FD1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_OXIA = (char)0x1F77;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_PERISPOMENI = (char)0x1FD6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_PSILI = (char)0x1F30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_PSILI_AND_OXIA = (char)0x1F34;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_PSILI_AND_PERISPOMENI = (char)0x1F36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_PSILI_AND_VARIA = (char)0x1F32;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER IOTA TONOS. </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_TONOS = (char)0x03AF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_VARIA = (char)0x1F76;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_IOTA_WITH_VRACHY = (char)0x1FD0;
			public const char GREEK_SMALL_LETTER_KAPPA = (char)0x03BA;
			public const char GREEK_SMALL_LETTER_KOPPA = (char)0x03DF;
			/// <summary> Formerly GREEK SMALL LETTER LAMBDA. </summary>
			public const char GREEK_SMALL_LETTER_LAMDA = (char)0x03BB;
			public const char GREEK_SMALL_LETTER_MU = (char)0x03BC;
			public const char GREEK_SMALL_LETTER_NU = (char)0x03BD;
			public const char GREEK_SMALL_LETTER_OMEGA = (char)0x03C9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_DASIA = (char)0x1F61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_DASIA_AND_OXIA = (char)0x1F65;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_DASIA_AND_OXIA_AND_YPOGEGRAMMENI = (char)0x1FA5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_DASIA_AND_PERISPOMENI = (char)0x1F67;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_DASIA_AND_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1FA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_DASIA_AND_VARIA = (char)0x1F63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_DASIA_AND_VARIA_AND_YPOGEGRAMMENI = (char)0x1FA3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_DASIA_AND_YPOGEGRAMMENI = (char)0x1FA1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_OXIA = (char)0x1F7D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_OXIA_AND_YPOGEGRAMMENI = (char)0x1FF4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PERISPOMENI = (char)0x1FF6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1FF7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PSILI = (char)0x1F60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PSILI_AND_OXIA = (char)0x1F64;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PSILI_AND_OXIA_AND_YPOGEGRAMMENI = (char)0x1FA4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PSILI_AND_PERISPOMENI = (char)0x1F66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PSILI_AND_PERISPOMENI_AND_YPOGEGRAMMENI = (char)0x1FA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PSILI_AND_VARIA = (char)0x1F62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PSILI_AND_VARIA_AND_YPOGEGRAMMENI = (char)0x1FA2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_PSILI_AND_YPOGEGRAMMENI = (char)0x1FA0;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER OMEGA TONOS. </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_TONOS = (char)0x03CE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_VARIA = (char)0x1F7C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_VARIA_AND_YPOGEGRAMMENI = (char)0x1FF2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMEGA_WITH_YPOGEGRAMMENI = (char)0x1FF3;
			public const char GREEK_SMALL_LETTER_OMICRON = (char)0x03BF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_DASIA = (char)0x1F41;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_DASIA_AND_OXIA = (char)0x1F45;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_DASIA_AND_VARIA = (char)0x1F43;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_OXIA = (char)0x1F79;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_PSILI = (char)0x1F40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_PSILI_AND_OXIA = (char)0x1F44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_PSILI_AND_VARIA = (char)0x1F42;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER OMICRON TONOS. </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_TONOS = (char)0x03CC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_OMICRON_WITH_VARIA = (char)0x1F78;
			public const char GREEK_SMALL_LETTER_PHI = (char)0x03C6;
			public const char GREEK_SMALL_LETTER_PI = (char)0x03C0;
			public const char GREEK_SMALL_LETTER_PSI = (char)0x03C8;
			public const char GREEK_SMALL_LETTER_RHO = (char)0x03C1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_RHO_WITH_DASIA = (char)0x1FE5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_RHO_WITH_PSILI = (char)0x1FE4;
			public const char GREEK_SMALL_LETTER_SAMPI = (char)0x03E1;
			public const char GREEK_SMALL_LETTER_SAN = (char)0x03FB;
			public const char GREEK_SMALL_LETTER_SHO = (char)0x03F8;
			public const char GREEK_SMALL_LETTER_SIGMA = (char)0x03C3;
			public const char GREEK_SMALL_LETTER_STIGMA = (char)0x03DB;
			public const char GREEK_SMALL_LETTER_TAU = (char)0x03C4;
			public const char GREEK_SMALL_LETTER_THETA = (char)0x03B8;
			public const char GREEK_SMALL_LETTER_UPSILON = (char)0x03C5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DASIA = (char)0x1F51;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DASIA_AND_OXIA = (char)0x1F55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DASIA_AND_PERISPOMENI = (char)0x1F57;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DASIA_AND_VARIA = (char)0x1F53;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER UPSILON DIAERESIS. </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DIALYTIKA = (char)0x03CB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DIALYTIKA_AND_OXIA = (char)0x1FE3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DIALYTIKA_AND_PERISPOMENI = (char)0x1FE7;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER UPSILON DIAERESIS TONOS. </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DIALYTIKA_AND_TONOS = (char)0x03B0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_DIALYTIKA_AND_VARIA = (char)0x1FE2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_MACRON = (char)0x1FE1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_OXIA = (char)0x1F7B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_PERISPOMENI = (char)0x1FE6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_PSILI = (char)0x1F50;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_PSILI_AND_OXIA = (char)0x1F54;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_PSILI_AND_PERISPOMENI = (char)0x1F56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_PSILI_AND_VARIA = (char)0x1F52;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER UPSILON TONOS. </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_TONOS = (char)0x03CD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_VARIA = (char)0x1F7A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SMALL_LETTER_UPSILON_WITH_VRACHY = (char)0x1FE0;
			public const char GREEK_SMALL_LETTER_XI = (char)0x03BE;
			public const char GREEK_SMALL_LETTER_ZETA = (char)0x03B6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SUBSCRIPT_SMALL_LETTER_BETA = (char)0x1D66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SUBSCRIPT_SMALL_LETTER_CHI = (char)0x1D6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SUBSCRIPT_SMALL_LETTER_GAMMA = (char)0x1D67;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SUBSCRIPT_SMALL_LETTER_PHI = (char)0x1D69;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_SUBSCRIPT_SMALL_LETTER_RHO = (char)0x1D68;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SMALL LETTER SCRIPT THETA. </summary>
			public const char GREEK_THETA_SYMBOL = (char)0x03D1;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SPACING TONOS. </summary>
			public const char GREEK_TONOS = (char)0x0384;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER UPSILON HOOK TONOS. </summary>
			public const char GREEK_UPSILON_WITH_ACUTE_AND_HOOK_SYMBOL = (char)0x03D3;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER UPSILON HOOK DIAERESIS. </summary>
			public const char GREEK_UPSILON_WITH_DIAERESIS_AND_HOOK_SYMBOL = (char)0x03D4;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK CAPITAL LETTER UPSILON HOOK. </summary>
			public const char GREEK_UPSILON_WITH_HOOK_SYMBOL = (char)0x03D2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GREEK_VARIA = (char)0x1FEF;
			/// <summary> (This is a composition; consider avoiding.) Formerly GREEK SPACING IOTA BELOW. </summary>
			public const char GREEK_YPOGEGRAMMENI = (char)0x037A;
			public const char GUARANI_SIGN = (char)0x20B2;
			public const char GUJARATI_DIGIT_EIGHT = (char)0x0AEE;
			public const char GUJARATI_DIGIT_FIVE = (char)0x0AEB;
			public const char GUJARATI_DIGIT_FOUR = (char)0x0AEA;
			public const char GUJARATI_DIGIT_NINE = (char)0x0AEF;
			public const char GUJARATI_DIGIT_ONE = (char)0x0AE7;
			public const char GUJARATI_DIGIT_SEVEN = (char)0x0AED;
			public const char GUJARATI_DIGIT_SIX = (char)0x0AEC;
			public const char GUJARATI_DIGIT_THREE = (char)0x0AE9;
			public const char GUJARATI_DIGIT_TWO = (char)0x0AE8;
			public const char GUJARATI_DIGIT_ZERO = (char)0x0AE6;
			public const char GUJARATI_LETTER_A = (char)0x0A85;
			public const char GUJARATI_LETTER_AA = (char)0x0A86;
			public const char GUJARATI_LETTER_AI = (char)0x0A90;
			public const char GUJARATI_LETTER_AU = (char)0x0A94;
			public const char GUJARATI_LETTER_BA = (char)0x0AAC;
			public const char GUJARATI_LETTER_BHA = (char)0x0AAD;
			public const char GUJARATI_LETTER_CA = (char)0x0A9A;
			public const char GUJARATI_LETTER_CHA = (char)0x0A9B;
			public const char GUJARATI_LETTER_DA = (char)0x0AA6;
			public const char GUJARATI_LETTER_DDA = (char)0x0AA1;
			public const char GUJARATI_LETTER_DDHA = (char)0x0AA2;
			public const char GUJARATI_LETTER_DHA = (char)0x0AA7;
			public const char GUJARATI_LETTER_E = (char)0x0A8F;
			public const char GUJARATI_LETTER_GA = (char)0x0A97;
			public const char GUJARATI_LETTER_GHA = (char)0x0A98;
			public const char GUJARATI_LETTER_HA = (char)0x0AB9;
			public const char GUJARATI_LETTER_I = (char)0x0A87;
			public const char GUJARATI_LETTER_II = (char)0x0A88;
			public const char GUJARATI_LETTER_JA = (char)0x0A9C;
			public const char GUJARATI_LETTER_JHA = (char)0x0A9D;
			public const char GUJARATI_LETTER_KA = (char)0x0A95;
			public const char GUJARATI_LETTER_KHA = (char)0x0A96;
			public const char GUJARATI_LETTER_LA = (char)0x0AB2;
			public const char GUJARATI_LETTER_LLA = (char)0x0AB3;
			public const char GUJARATI_LETTER_MA = (char)0x0AAE;
			public const char GUJARATI_LETTER_NA = (char)0x0AA8;
			public const char GUJARATI_LETTER_NGA = (char)0x0A99;
			public const char GUJARATI_LETTER_NNA = (char)0x0AA3;
			public const char GUJARATI_LETTER_NYA = (char)0x0A9E;
			public const char GUJARATI_LETTER_O = (char)0x0A93;
			public const char GUJARATI_LETTER_PA = (char)0x0AAA;
			public const char GUJARATI_LETTER_PHA = (char)0x0AAB;
			public const char GUJARATI_LETTER_RA = (char)0x0AB0;
			public const char GUJARATI_LETTER_SA = (char)0x0AB8;
			public const char GUJARATI_LETTER_SHA = (char)0x0AB6;
			public const char GUJARATI_LETTER_SSA = (char)0x0AB7;
			public const char GUJARATI_LETTER_TA = (char)0x0AA4;
			public const char GUJARATI_LETTER_THA = (char)0x0AA5;
			public const char GUJARATI_LETTER_TTA = (char)0x0A9F;
			public const char GUJARATI_LETTER_TTHA = (char)0x0AA0;
			public const char GUJARATI_LETTER_U = (char)0x0A89;
			public const char GUJARATI_LETTER_UU = (char)0x0A8A;
			public const char GUJARATI_LETTER_VA = (char)0x0AB5;
			public const char GUJARATI_LETTER_VOCALIC_L = (char)0x0A8C;
			public const char GUJARATI_LETTER_VOCALIC_LL = (char)0x0AE1;
			public const char GUJARATI_LETTER_VOCALIC_R = (char)0x0A8B;
			public const char GUJARATI_LETTER_VOCALIC_RR = (char)0x0AE0;
			public const char GUJARATI_LETTER_YA = (char)0x0AAF;
			public const char GUJARATI_OM = (char)0x0AD0;
			public const char GUJARATI_RUPEE_SIGN = (char)0x0AF1;
			public const char GUJARATI_SIGN_ANUSVARA = (char)0x0A82;
			public const char GUJARATI_SIGN_AVAGRAHA = (char)0x0ABD;
			public const char GUJARATI_SIGN_CANDRABINDU = (char)0x0A81;
			public const char GUJARATI_SIGN_NUKTA = (char)0x0ABC;
			public const char GUJARATI_SIGN_VIRAMA = (char)0x0ACD;
			public const char GUJARATI_SIGN_VISARGA = (char)0x0A83;
			public const char GUJARATI_VOWEL_CANDRA_E = (char)0x0A8D;
			public const char GUJARATI_VOWEL_CANDRA_O = (char)0x0A91;
			public const char GUJARATI_VOWEL_SIGN_AA = (char)0x0ABE;
			public const char GUJARATI_VOWEL_SIGN_AI = (char)0x0AC8;
			public const char GUJARATI_VOWEL_SIGN_AU = (char)0x0ACC;
			public const char GUJARATI_VOWEL_SIGN_CANDRA_E = (char)0x0AC5;
			public const char GUJARATI_VOWEL_SIGN_CANDRA_O = (char)0x0AC9;
			public const char GUJARATI_VOWEL_SIGN_E = (char)0x0AC7;
			public const char GUJARATI_VOWEL_SIGN_I = (char)0x0ABF;
			public const char GUJARATI_VOWEL_SIGN_II = (char)0x0AC0;
			public const char GUJARATI_VOWEL_SIGN_O = (char)0x0ACB;
			public const char GUJARATI_VOWEL_SIGN_U = (char)0x0AC1;
			public const char GUJARATI_VOWEL_SIGN_UU = (char)0x0AC2;
			public const char GUJARATI_VOWEL_SIGN_VOCALIC_L = (char)0x0AE2;
			public const char GUJARATI_VOWEL_SIGN_VOCALIC_LL = (char)0x0AE3;
			public const char GUJARATI_VOWEL_SIGN_VOCALIC_R = (char)0x0AC3;
			public const char GUJARATI_VOWEL_SIGN_VOCALIC_RR = (char)0x0AC4;
			public const char GURMUKHI_ADDAK = (char)0x0A71;
			public const char GURMUKHI_DIGIT_EIGHT = (char)0x0A6E;
			public const char GURMUKHI_DIGIT_FIVE = (char)0x0A6B;
			public const char GURMUKHI_DIGIT_FOUR = (char)0x0A6A;
			public const char GURMUKHI_DIGIT_NINE = (char)0x0A6F;
			public const char GURMUKHI_DIGIT_ONE = (char)0x0A67;
			public const char GURMUKHI_DIGIT_SEVEN = (char)0x0A6D;
			public const char GURMUKHI_DIGIT_SIX = (char)0x0A6C;
			public const char GURMUKHI_DIGIT_THREE = (char)0x0A69;
			public const char GURMUKHI_DIGIT_TWO = (char)0x0A68;
			public const char GURMUKHI_DIGIT_ZERO = (char)0x0A66;
			public const char GURMUKHI_EK_ONKAR = (char)0x0A74;
			public const char GURMUKHI_IRI = (char)0x0A72;
			public const char GURMUKHI_LETTER_A = (char)0x0A05;
			public const char GURMUKHI_LETTER_AA = (char)0x0A06;
			public const char GURMUKHI_LETTER_AI = (char)0x0A10;
			public const char GURMUKHI_LETTER_AU = (char)0x0A14;
			public const char GURMUKHI_LETTER_BA = (char)0x0A2C;
			public const char GURMUKHI_LETTER_BHA = (char)0x0A2D;
			public const char GURMUKHI_LETTER_CA = (char)0x0A1A;
			public const char GURMUKHI_LETTER_CHA = (char)0x0A1B;
			public const char GURMUKHI_LETTER_DA = (char)0x0A26;
			public const char GURMUKHI_LETTER_DDA = (char)0x0A21;
			public const char GURMUKHI_LETTER_DDHA = (char)0x0A22;
			public const char GURMUKHI_LETTER_DHA = (char)0x0A27;
			public const char GURMUKHI_LETTER_EE = (char)0x0A0F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GURMUKHI_LETTER_FA = (char)0x0A5E;
			public const char GURMUKHI_LETTER_GA = (char)0x0A17;
			public const char GURMUKHI_LETTER_GHA = (char)0x0A18;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GURMUKHI_LETTER_GHHA = (char)0x0A5A;
			public const char GURMUKHI_LETTER_HA = (char)0x0A39;
			public const char GURMUKHI_LETTER_I = (char)0x0A07;
			public const char GURMUKHI_LETTER_II = (char)0x0A08;
			public const char GURMUKHI_LETTER_JA = (char)0x0A1C;
			public const char GURMUKHI_LETTER_JHA = (char)0x0A1D;
			public const char GURMUKHI_LETTER_KA = (char)0x0A15;
			public const char GURMUKHI_LETTER_KHA = (char)0x0A16;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GURMUKHI_LETTER_KHHA = (char)0x0A59;
			public const char GURMUKHI_LETTER_LA = (char)0x0A32;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GURMUKHI_LETTER_LLA = (char)0x0A33;
			public const char GURMUKHI_LETTER_MA = (char)0x0A2E;
			public const char GURMUKHI_LETTER_NA = (char)0x0A28;
			public const char GURMUKHI_LETTER_NGA = (char)0x0A19;
			public const char GURMUKHI_LETTER_NNA = (char)0x0A23;
			public const char GURMUKHI_LETTER_NYA = (char)0x0A1E;
			public const char GURMUKHI_LETTER_OO = (char)0x0A13;
			public const char GURMUKHI_LETTER_PA = (char)0x0A2A;
			public const char GURMUKHI_LETTER_PHA = (char)0x0A2B;
			public const char GURMUKHI_LETTER_RA = (char)0x0A30;
			public const char GURMUKHI_LETTER_RRA = (char)0x0A5C;
			public const char GURMUKHI_LETTER_SA = (char)0x0A38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GURMUKHI_LETTER_SHA = (char)0x0A36;
			public const char GURMUKHI_LETTER_TA = (char)0x0A24;
			public const char GURMUKHI_LETTER_THA = (char)0x0A25;
			public const char GURMUKHI_LETTER_TTA = (char)0x0A1F;
			public const char GURMUKHI_LETTER_TTHA = (char)0x0A20;
			public const char GURMUKHI_LETTER_U = (char)0x0A09;
			public const char GURMUKHI_LETTER_UU = (char)0x0A0A;
			public const char GURMUKHI_LETTER_VA = (char)0x0A35;
			public const char GURMUKHI_LETTER_YA = (char)0x0A2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char GURMUKHI_LETTER_ZA = (char)0x0A5B;
			public const char GURMUKHI_SIGN_ADAK_BINDI = (char)0x0A01;
			public const char GURMUKHI_SIGN_BINDI = (char)0x0A02;
			public const char GURMUKHI_SIGN_NUKTA = (char)0x0A3C;
			public const char GURMUKHI_SIGN_VIRAMA = (char)0x0A4D;
			public const char GURMUKHI_SIGN_VISARGA = (char)0x0A03;
			public const char GURMUKHI_TIPPI = (char)0x0A70;
			public const char GURMUKHI_URA = (char)0x0A73;
			public const char GURMUKHI_VOWEL_SIGN_AA = (char)0x0A3E;
			public const char GURMUKHI_VOWEL_SIGN_AI = (char)0x0A48;
			public const char GURMUKHI_VOWEL_SIGN_AU = (char)0x0A4C;
			public const char GURMUKHI_VOWEL_SIGN_EE = (char)0x0A47;
			public const char GURMUKHI_VOWEL_SIGN_I = (char)0x0A3F;
			public const char GURMUKHI_VOWEL_SIGN_II = (char)0x0A40;
			public const char GURMUKHI_VOWEL_SIGN_OO = (char)0x0A4B;
			public const char GURMUKHI_VOWEL_SIGN_U = (char)0x0A41;
			public const char GURMUKHI_VOWEL_SIGN_UU = (char)0x0A42;
		}
		public class H {
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HAIR_SPACE = (char)0x200A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_BLACK_SQUARE = (char)0xFFED;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_DOWNWARDS_ARROW = (char)0xFFEC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_FORMS_LIGHT_VERTICAL = (char)0xFFE8;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL CAE OM. </summary>
			public const char HALFWIDTH_HANGUL_FILLER = (char)0xFFA0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_A = (char)0xFFC2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_AE = (char)0xFFC3;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER CIEUC. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_CHIEUCH = (char)0xFFBA;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER JIEUJ. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_CIEUC = (char)0xFFB8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_E = (char)0xFFC7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_EO = (char)0xFFC6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_EU = (char)0xFFDA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_HIEUH = (char)0xFFBE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_I = (char)0xFFDC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_IEUNG = (char)0xFFB7;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER KIYEOK. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_KHIEUKH = (char)0xFFBB;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER GIYEOG. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_KIYEOK = (char)0xFFA1;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER GIYEOG SIOS. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_KIYEOK_SIOS = (char)0xFFA3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_MIEUM = (char)0xFFB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_NIEUN = (char)0xFFA4;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER NIEUN JIEUJ. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_NIEUN_CIEUC = (char)0xFFA5;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER NIEUN HIEUH. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_NIEUN_HIEUH = (char)0xFFA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_O = (char)0xFFCC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_OE = (char)0xFFCF;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER PIEUP. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_PHIEUPH = (char)0xFFBD;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER BIEUB. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_PIEUP = (char)0xFFB2;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER BIEUB SIOS. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_PIEUP_SIOS = (char)0xFFB4;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER LIEUL. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_RIEUL = (char)0xFFA9;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER LIEUL HIEUH. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_RIEUL_HIEUH = (char)0xFFB0;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER LIEUL GIYEOG. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_RIEUL_KIYEOK = (char)0xFFAA;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER LIEUL MIEUM. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_RIEUL_MIEUM = (char)0xFFAB;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER LIEUL PIEUP. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_RIEUL_PHIEUPH = (char)0xFFAF;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER LIEUL BIEUB. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_RIEUL_PIEUP = (char)0xFFAC;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER LIEUL SIOS. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_RIEUL_SIOS = (char)0xFFAD;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER LIEUL TIEUT. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_RIEUL_THIEUTH = (char)0xFFAE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_SIOS = (char)0xFFB5;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER SSANG JIEUJ. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_SSANGCIEUC = (char)0xFFB9;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER SSANG GIYEOG. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_SSANGKIYEOK = (char)0xFFA2;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER SSANG BIEUB. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_SSANGPIEUP = (char)0xFFB3;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER SSANG SIOS. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_SSANGSIOS = (char)0xFFB6;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER SSANG DIGEUD. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_SSANGTIKEUT = (char)0xFFA8;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER TIEUT. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_THIEUTH = (char)0xFFBC;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH HANGUL LETTER DIGEUD. </summary>
			public const char HALFWIDTH_HANGUL_LETTER_TIKEUT = (char)0xFFA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_U = (char)0xFFD3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_WA = (char)0xFFCD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_WAE = (char)0xFFCE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_WE = (char)0xFFD5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_WEO = (char)0xFFD4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_WI = (char)0xFFD6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_YA = (char)0xFFC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_YAE = (char)0xFFC5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_YE = (char)0xFFCB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_YEO = (char)0xFFCA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_YI = (char)0xFFDB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_YO = (char)0xFFD2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_HANGUL_LETTER_YU = (char)0xFFD7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_IDEOGRAPHIC_COMMA = (char)0xFF64;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH IDEOGRAPHIC PERIOD. </summary>
			public const char HALFWIDTH_IDEOGRAPHIC_FULL_STOP = (char)0xFF61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_HIRAGANA_PROLONGED_SOUND_MARK = (char)0xFF70;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_A = (char)0xFF71;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_E = (char)0xFF74;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_HA = (char)0xFF8A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_HE = (char)0xFF8D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_HI = (char)0xFF8B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_HO = (char)0xFF8E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_HU = (char)0xFF8C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_I = (char)0xFF72;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_KA = (char)0xFF76;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_KE = (char)0xFF79;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_KI = (char)0xFF77;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_KO = (char)0xFF7A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_KU = (char)0xFF78;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_MA = (char)0xFF8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_ME = (char)0xFF92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_MI = (char)0xFF90;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_MO = (char)0xFF93;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_MU = (char)0xFF91;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_N = (char)0xFF9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_NA = (char)0xFF85;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_NE = (char)0xFF88;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_NI = (char)0xFF86;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_NO = (char)0xFF89;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_NU = (char)0xFF87;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_O = (char)0xFF75;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_RA = (char)0xFF97;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_RE = (char)0xFF9A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_RI = (char)0xFF98;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_RO = (char)0xFF9B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_RU = (char)0xFF99;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SA = (char)0xFF7B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SE = (char)0xFF7E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SI = (char)0xFF7C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_A = (char)0xFF67;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_E = (char)0xFF6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_I = (char)0xFF68;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_O = (char)0xFF6B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_TU = (char)0xFF6F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_U = (char)0xFF69;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_YA = (char)0xFF6C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_YO = (char)0xFF6E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SMALL_YU = (char)0xFF6D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SO = (char)0xFF7F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_SU = (char)0xFF7D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_TA = (char)0xFF80;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_TE = (char)0xFF83;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_TI = (char)0xFF81;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_TO = (char)0xFF84;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_TU = (char)0xFF82;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_U = (char)0xFF73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_WA = (char)0xFF9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_WO = (char)0xFF66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_YA = (char)0xFF94;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_YO = (char)0xFF96;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_LETTER_YU = (char)0xFF95;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_MIDDLE_DOT = (char)0xFF65;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_SEMI_VOICED_SOUND_MARK = (char)0xFF9F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_KATAKANA_VOICED_SOUND_MARK = (char)0xFF9E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_LEFTWARDS_ARROW = (char)0xFFE9;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH OPENING CORNER BRACKET. </summary>
			public const char HALFWIDTH_LEFT_CORNER_BRACKET = (char)0xFF62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_RIGHTWARDS_ARROW = (char)0xFFEB;
			/// <summary> (This is a composition; consider avoiding.) Formerly HALFWIDTH CLOSING CORNER BRACKET. </summary>
			public const char HALFWIDTH_RIGHT_CORNER_BRACKET = (char)0xFF63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_UPWARDS_ARROW = (char)0xFFEA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HALFWIDTH_WHITE_CIRCLE = (char)0xFFEE;
			public const char HAMMER_AND_PICK = (char)0x2692;
			public const char HAMMER_AND_SICKLE = (char)0x262D;
			public const char HANGUL_CHOSEONG_CEONGCHIEUMCHIEUCH = (char)0x1155;
			public const char HANGUL_CHOSEONG_CEONGCHIEUMCIEUC = (char)0x1150;
			public const char HANGUL_CHOSEONG_CEONGCHIEUMSIOS = (char)0x113E;
			public const char HANGUL_CHOSEONG_CEONGCHIEUMSSANGCIEUC = (char)0x1151;
			public const char HANGUL_CHOSEONG_CEONGCHIEUMSSANGSIOS = (char)0x113F;
			public const char HANGUL_CHOSEONG_CHIEUCH = (char)0x110E;
			public const char HANGUL_CHOSEONG_CHIEUCH_HIEUH = (char)0x1153;
			public const char HANGUL_CHOSEONG_CHIEUCH_KHIEUKH = (char)0x1152;
			public const char HANGUL_CHOSEONG_CHITUEUMCHIEUCH = (char)0x1154;
			public const char HANGUL_CHOSEONG_CHITUEUMCIEUC = (char)0x114E;
			public const char HANGUL_CHOSEONG_CHITUEUMSIOS = (char)0x113C;
			public const char HANGUL_CHOSEONG_CHITUEUMSSANGCIEUC = (char)0x114F;
			public const char HANGUL_CHOSEONG_CHITUEUMSSANGSIOS = (char)0x113D;
			public const char HANGUL_CHOSEONG_CIEUC = (char)0x110C;
			public const char HANGUL_CHOSEONG_CIEUC_IEUNG = (char)0x114D;
			public const char HANGUL_CHOSEONG_FILLER = (char)0x115F;
			public const char HANGUL_CHOSEONG_HIEUH = (char)0x1112;
			public const char HANGUL_CHOSEONG_IEUNG = (char)0x110B;
			public const char HANGUL_CHOSEONG_IEUNG_CHIEUCH = (char)0x1149;
			public const char HANGUL_CHOSEONG_IEUNG_CIEUC = (char)0x1148;
			public const char HANGUL_CHOSEONG_IEUNG_KIYEOK = (char)0x1141;
			public const char HANGUL_CHOSEONG_IEUNG_MIEUM = (char)0x1143;
			public const char HANGUL_CHOSEONG_IEUNG_PANSIOS = (char)0x1146;
			public const char HANGUL_CHOSEONG_IEUNG_PHIEUPH = (char)0x114B;
			public const char HANGUL_CHOSEONG_IEUNG_PIEUP = (char)0x1144;
			public const char HANGUL_CHOSEONG_IEUNG_SIOS = (char)0x1145;
			public const char HANGUL_CHOSEONG_IEUNG_THIEUTH = (char)0x114A;
			public const char HANGUL_CHOSEONG_IEUNG_TIKEUT = (char)0x1142;
			public const char HANGUL_CHOSEONG_KAPYEOUNMIEUM = (char)0x111D;
			public const char HANGUL_CHOSEONG_KAPYEOUNPHIEUPH = (char)0x1157;
			public const char HANGUL_CHOSEONG_KAPYEOUNPIEUP = (char)0x112B;
			public const char HANGUL_CHOSEONG_KAPYEOUNRIEUL = (char)0x111B;
			public const char HANGUL_CHOSEONG_KAPYEOUNSSANGPIEUP = (char)0x112C;
			public const char HANGUL_CHOSEONG_KHIEUKH = (char)0x110F;
			public const char HANGUL_CHOSEONG_KIYEOK = (char)0x1100;
			public const char HANGUL_CHOSEONG_MIEUM = (char)0x1106;
			public const char HANGUL_CHOSEONG_MIEUM_PIEUP = (char)0x111C;
			public const char HANGUL_CHOSEONG_NIEUN = (char)0x1102;
			public const char HANGUL_CHOSEONG_NIEUN_KIYEOK = (char)0x1113;
			public const char HANGUL_CHOSEONG_NIEUN_PIEUP = (char)0x1116;
			public const char HANGUL_CHOSEONG_NIEUN_TIKEUT = (char)0x1115;
			public const char HANGUL_CHOSEONG_PANSIOS = (char)0x1140;
			public const char HANGUL_CHOSEONG_PHIEUPH = (char)0x1111;
			public const char HANGUL_CHOSEONG_PHIEUPH_PIEUP = (char)0x1156;
			public const char HANGUL_CHOSEONG_PIEUP = (char)0x1107;
			public const char HANGUL_CHOSEONG_PIEUP_CHIEUCH = (char)0x1128;
			public const char HANGUL_CHOSEONG_PIEUP_CIEUC = (char)0x1127;
			public const char HANGUL_CHOSEONG_PIEUP_KIYEOK = (char)0x111E;
			public const char HANGUL_CHOSEONG_PIEUP_NIEUN = (char)0x111F;
			public const char HANGUL_CHOSEONG_PIEUP_PHIEUPH = (char)0x112A;
			public const char HANGUL_CHOSEONG_PIEUP_SIOS = (char)0x1121;
			public const char HANGUL_CHOSEONG_PIEUP_SIOS_CIEUC = (char)0x1126;
			public const char HANGUL_CHOSEONG_PIEUP_SIOS_KIYEOK = (char)0x1122;
			public const char HANGUL_CHOSEONG_PIEUP_SIOS_PIEUP = (char)0x1124;
			public const char HANGUL_CHOSEONG_PIEUP_SIOS_TIKEUT = (char)0x1123;
			public const char HANGUL_CHOSEONG_PIEUP_SSANGSIOS = (char)0x1125;
			public const char HANGUL_CHOSEONG_PIEUP_THIEUTH = (char)0x1129;
			public const char HANGUL_CHOSEONG_PIEUP_TIKEUT = (char)0x1120;
			public const char HANGUL_CHOSEONG_RIEUL = (char)0x1105;
			public const char HANGUL_CHOSEONG_RIEUL_HIEUH = (char)0x111A;
			public const char HANGUL_CHOSEONG_RIEUL_NIEUN = (char)0x1118;
			public const char HANGUL_CHOSEONG_SIOS = (char)0x1109;
			public const char HANGUL_CHOSEONG_SIOS_CHIEUCH = (char)0x1137;
			public const char HANGUL_CHOSEONG_SIOS_CIEUC = (char)0x1136;
			public const char HANGUL_CHOSEONG_SIOS_HIEUH = (char)0x113B;
			public const char HANGUL_CHOSEONG_SIOS_IEUNG = (char)0x1135;
			public const char HANGUL_CHOSEONG_SIOS_KHIEUKH = (char)0x1138;
			public const char HANGUL_CHOSEONG_SIOS_KIYEOK = (char)0x112D;
			public const char HANGUL_CHOSEONG_SIOS_MIEUM = (char)0x1131;
			public const char HANGUL_CHOSEONG_SIOS_NIEUN = (char)0x112E;
			public const char HANGUL_CHOSEONG_SIOS_PHIEUPH = (char)0x113A;
			public const char HANGUL_CHOSEONG_SIOS_PIEUP = (char)0x1132;
			public const char HANGUL_CHOSEONG_SIOS_PIEUP_KIYEOK = (char)0x1133;
			public const char HANGUL_CHOSEONG_SIOS_RIEUL = (char)0x1130;
			public const char HANGUL_CHOSEONG_SIOS_SSANGSIOS = (char)0x1134;
			public const char HANGUL_CHOSEONG_SIOS_THIEUTH = (char)0x1139;
			public const char HANGUL_CHOSEONG_SIOS_TIKEUT = (char)0x112F;
			public const char HANGUL_CHOSEONG_SSANGCIEUC = (char)0x110D;
			public const char HANGUL_CHOSEONG_SSANGHIEUH = (char)0x1158;
			public const char HANGUL_CHOSEONG_SSANGIEUNG = (char)0x1147;
			public const char HANGUL_CHOSEONG_SSANGKIYEOK = (char)0x1101;
			public const char HANGUL_CHOSEONG_SSANGNIEUN = (char)0x1114;
			public const char HANGUL_CHOSEONG_SSANGPIEUP = (char)0x1108;
			public const char HANGUL_CHOSEONG_SSANGRIEUL = (char)0x1119;
			public const char HANGUL_CHOSEONG_SSANGSIOS = (char)0x110A;
			public const char HANGUL_CHOSEONG_SSANGTIKEUT = (char)0x1104;
			public const char HANGUL_CHOSEONG_THIEUTH = (char)0x1110;
			public const char HANGUL_CHOSEONG_TIKEUT = (char)0x1103;
			public const char HANGUL_CHOSEONG_TIKEUT_KIYEOK = (char)0x1117;
			public const char HANGUL_CHOSEONG_YEORINHIEUH = (char)0x1159;
			public const char HANGUL_CHOSEONG_YESIEUNG = (char)0x114C;
			public const char HANGUL_DOUBLE_DOT_TONE_MARK = (char)0x302F;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL CAE OM. </summary>
			public const char HANGUL_FILLER = (char)0x3164;
			public const char HANGUL_JONGSEONG_CHIEUCH = (char)0x11BE;
			public const char HANGUL_JONGSEONG_CIEUC = (char)0x11BD;
			public const char HANGUL_JONGSEONG_HIEUH = (char)0x11C2;
			public const char HANGUL_JONGSEONG_HIEUH_MIEUM = (char)0x11F7;
			public const char HANGUL_JONGSEONG_HIEUH_NIEUN = (char)0x11F5;
			public const char HANGUL_JONGSEONG_HIEUH_PIEUP = (char)0x11F8;
			public const char HANGUL_JONGSEONG_HIEUH_RIEUL = (char)0x11F6;
			public const char HANGUL_JONGSEONG_IEUNG = (char)0x11BC;
			public const char HANGUL_JONGSEONG_IEUNG_KHIEUKH = (char)0x11EF;
			public const char HANGUL_JONGSEONG_IEUNG_KIYEOK = (char)0x11EC;
			public const char HANGUL_JONGSEONG_IEUNG_SSANGKIYEOK = (char)0x11ED;
			public const char HANGUL_JONGSEONG_KAPYEOUNMIEUM = (char)0x11E2;
			public const char HANGUL_JONGSEONG_KAPYEOUNPHIEUPH = (char)0x11F4;
			public const char HANGUL_JONGSEONG_KAPYEOUNPIEUP = (char)0x11E6;
			public const char HANGUL_JONGSEONG_KHIEUKH = (char)0x11BF;
			public const char HANGUL_JONGSEONG_KIYEOK = (char)0x11A8;
			public const char HANGUL_JONGSEONG_KIYEOK_RIEUL = (char)0x11C3;
			public const char HANGUL_JONGSEONG_KIYEOK_SIOS = (char)0x11AA;
			public const char HANGUL_JONGSEONG_KIYEOK_SIOS_KIYEOK = (char)0x11C4;
			public const char HANGUL_JONGSEONG_MIEUM = (char)0x11B7;
			public const char HANGUL_JONGSEONG_MIEUM_CHIEUCH = (char)0x11E0;
			public const char HANGUL_JONGSEONG_MIEUM_HIEUH = (char)0x11E1;
			public const char HANGUL_JONGSEONG_MIEUM_KIYEOK = (char)0x11DA;
			public const char HANGUL_JONGSEONG_MIEUM_PANSIOS = (char)0x11DF;
			public const char HANGUL_JONGSEONG_MIEUM_PIEUP = (char)0x11DC;
			public const char HANGUL_JONGSEONG_MIEUM_RIEUL = (char)0x11DB;
			public const char HANGUL_JONGSEONG_MIEUM_SIOS = (char)0x11DD;
			public const char HANGUL_JONGSEONG_MIEUM_SSANGSIOS = (char)0x11DE;
			public const char HANGUL_JONGSEONG_NIEUN = (char)0x11AB;
			public const char HANGUL_JONGSEONG_NIEUN_CIEUC = (char)0x11AC;
			public const char HANGUL_JONGSEONG_NIEUN_HIEUH = (char)0x11AD;
			public const char HANGUL_JONGSEONG_NIEUN_KIYEOK = (char)0x11C5;
			public const char HANGUL_JONGSEONG_NIEUN_PANSIOS = (char)0x11C8;
			public const char HANGUL_JONGSEONG_NIEUN_SIOS = (char)0x11C7;
			public const char HANGUL_JONGSEONG_NIEUN_THIEUTH = (char)0x11C9;
			public const char HANGUL_JONGSEONG_NIEUN_TIKEUT = (char)0x11C6;
			public const char HANGUL_JONGSEONG_PANSIOS = (char)0x11EB;
			public const char HANGUL_JONGSEONG_PHIEUPH = (char)0x11C1;
			public const char HANGUL_JONGSEONG_PHIEUPH_PIEUP = (char)0x11F3;
			public const char HANGUL_JONGSEONG_PIEUP = (char)0x11B8;
			public const char HANGUL_JONGSEONG_PIEUP_HIEUH = (char)0x11E5;
			public const char HANGUL_JONGSEONG_PIEUP_PHIEUPH = (char)0x11E4;
			public const char HANGUL_JONGSEONG_PIEUP_RIEUL = (char)0x11E3;
			public const char HANGUL_JONGSEONG_PIEUP_SIOS = (char)0x11B9;
			public const char HANGUL_JONGSEONG_RIEUL = (char)0x11AF;
			public const char HANGUL_JONGSEONG_RIEUL_HIEUH = (char)0x11B6;
			public const char HANGUL_JONGSEONG_RIEUL_KAPYEOUNPIEUP = (char)0x11D5;
			public const char HANGUL_JONGSEONG_RIEUL_KHIEUKH = (char)0x11D8;
			public const char HANGUL_JONGSEONG_RIEUL_KIYEOK = (char)0x11B0;
			public const char HANGUL_JONGSEONG_RIEUL_KIYEOK_SIOS = (char)0x11CC;
			public const char HANGUL_JONGSEONG_RIEUL_MIEUM = (char)0x11B1;
			public const char HANGUL_JONGSEONG_RIEUL_MIEUM_KIYEOK = (char)0x11D1;
			public const char HANGUL_JONGSEONG_RIEUL_MIEUM_SIOS = (char)0x11D2;
			public const char HANGUL_JONGSEONG_RIEUL_NIEUN = (char)0x11CD;
			public const char HANGUL_JONGSEONG_RIEUL_PANSIOS = (char)0x11D7;
			public const char HANGUL_JONGSEONG_RIEUL_PHIEUPH = (char)0x11B5;
			public const char HANGUL_JONGSEONG_RIEUL_PIEUP = (char)0x11B2;
			public const char HANGUL_JONGSEONG_RIEUL_PIEUP_HIEUH = (char)0x11D4;
			public const char HANGUL_JONGSEONG_RIEUL_PIEUP_SIOS = (char)0x11D3;
			public const char HANGUL_JONGSEONG_RIEUL_SIOS = (char)0x11B3;
			public const char HANGUL_JONGSEONG_RIEUL_SSANGSIOS = (char)0x11D6;
			public const char HANGUL_JONGSEONG_RIEUL_THIEUTH = (char)0x11B4;
			public const char HANGUL_JONGSEONG_RIEUL_TIKEUT = (char)0x11CE;
			public const char HANGUL_JONGSEONG_RIEUL_TIKEUT_HIEUH = (char)0x11CF;
			public const char HANGUL_JONGSEONG_RIEUL_YEORINHIEUH = (char)0x11D9;
			public const char HANGUL_JONGSEONG_SIOS = (char)0x11BA;
			public const char HANGUL_JONGSEONG_SIOS_KIYEOK = (char)0x11E7;
			public const char HANGUL_JONGSEONG_SIOS_PIEUP = (char)0x11EA;
			public const char HANGUL_JONGSEONG_SIOS_RIEUL = (char)0x11E9;
			public const char HANGUL_JONGSEONG_SIOS_TIKEUT = (char)0x11E8;
			public const char HANGUL_JONGSEONG_SSANGIEUNG = (char)0x11EE;
			public const char HANGUL_JONGSEONG_SSANGKIYEOK = (char)0x11A9;
			public const char HANGUL_JONGSEONG_SSANGRIEUL = (char)0x11D0;
			public const char HANGUL_JONGSEONG_SSANGSIOS = (char)0x11BB;
			public const char HANGUL_JONGSEONG_THIEUTH = (char)0x11C0;
			public const char HANGUL_JONGSEONG_TIKEUT = (char)0x11AE;
			public const char HANGUL_JONGSEONG_TIKEUT_KIYEOK = (char)0x11CA;
			public const char HANGUL_JONGSEONG_TIKEUT_RIEUL = (char)0x11CB;
			public const char HANGUL_JONGSEONG_YEORINHIEUH = (char)0x11F9;
			public const char HANGUL_JONGSEONG_YESIEUNG = (char)0x11F0;
			public const char HANGUL_JONGSEONG_YESIEUNG_PANSIOS = (char)0x11F2;
			public const char HANGUL_JONGSEONG_YESIEUNG_SIOS = (char)0x11F1;
			public const char HANGUL_JUNGSEONG_A = (char)0x1161;
			public const char HANGUL_JUNGSEONG_AE = (char)0x1162;
			public const char HANGUL_JUNGSEONG_ARAEA = (char)0x119E;
			public const char HANGUL_JUNGSEONG_ARAEA_EO = (char)0x119F;
			public const char HANGUL_JUNGSEONG_ARAEA_I = (char)0x11A1;
			public const char HANGUL_JUNGSEONG_ARAEA_U = (char)0x11A0;
			public const char HANGUL_JUNGSEONG_A_O = (char)0x1176;
			public const char HANGUL_JUNGSEONG_A_U = (char)0x1177;
			public const char HANGUL_JUNGSEONG_E = (char)0x1166;
			public const char HANGUL_JUNGSEONG_EO = (char)0x1165;
			public const char HANGUL_JUNGSEONG_EO_EU = (char)0x117C;
			public const char HANGUL_JUNGSEONG_EO_O = (char)0x117A;
			public const char HANGUL_JUNGSEONG_EO_U = (char)0x117B;
			public const char HANGUL_JUNGSEONG_EU = (char)0x1173;
			public const char HANGUL_JUNGSEONG_EU_EU = (char)0x1196;
			public const char HANGUL_JUNGSEONG_EU_U = (char)0x1195;
			public const char HANGUL_JUNGSEONG_FILLER = (char)0x1160;
			public const char HANGUL_JUNGSEONG_I = (char)0x1175;
			public const char HANGUL_JUNGSEONG_I_A = (char)0x1198;
			public const char HANGUL_JUNGSEONG_I_ARAEA = (char)0x119D;
			public const char HANGUL_JUNGSEONG_I_EU = (char)0x119C;
			public const char HANGUL_JUNGSEONG_I_O = (char)0x119A;
			public const char HANGUL_JUNGSEONG_I_U = (char)0x119B;
			public const char HANGUL_JUNGSEONG_I_YA = (char)0x1199;
			public const char HANGUL_JUNGSEONG_O = (char)0x1169;
			public const char HANGUL_JUNGSEONG_OE = (char)0x116C;
			public const char HANGUL_JUNGSEONG_O_E = (char)0x1180;
			public const char HANGUL_JUNGSEONG_O_EO = (char)0x117F;
			public const char HANGUL_JUNGSEONG_O_O = (char)0x1182;
			public const char HANGUL_JUNGSEONG_O_U = (char)0x1183;
			public const char HANGUL_JUNGSEONG_O_YE = (char)0x1181;
			public const char HANGUL_JUNGSEONG_SSANGARAEA = (char)0x11A2;
			public const char HANGUL_JUNGSEONG_U = (char)0x116E;
			public const char HANGUL_JUNGSEONG_U_A = (char)0x1189;
			public const char HANGUL_JUNGSEONG_U_AE = (char)0x118A;
			public const char HANGUL_JUNGSEONG_U_EO_EU = (char)0x118B;
			public const char HANGUL_JUNGSEONG_U_U = (char)0x118D;
			public const char HANGUL_JUNGSEONG_U_YE = (char)0x118C;
			public const char HANGUL_JUNGSEONG_WA = (char)0x116A;
			public const char HANGUL_JUNGSEONG_WAE = (char)0x116B;
			public const char HANGUL_JUNGSEONG_WE = (char)0x1170;
			public const char HANGUL_JUNGSEONG_WEO = (char)0x116F;
			public const char HANGUL_JUNGSEONG_WI = (char)0x1171;
			public const char HANGUL_JUNGSEONG_YA = (char)0x1163;
			public const char HANGUL_JUNGSEONG_YAE = (char)0x1164;
			public const char HANGUL_JUNGSEONG_YA_O = (char)0x1178;
			public const char HANGUL_JUNGSEONG_YA_YO = (char)0x1179;
			public const char HANGUL_JUNGSEONG_YE = (char)0x1168;
			public const char HANGUL_JUNGSEONG_YEO = (char)0x1167;
			public const char HANGUL_JUNGSEONG_YEO_O = (char)0x117D;
			public const char HANGUL_JUNGSEONG_YEO_U = (char)0x117E;
			public const char HANGUL_JUNGSEONG_YI = (char)0x1174;
			public const char HANGUL_JUNGSEONG_YI_U = (char)0x1197;
			public const char HANGUL_JUNGSEONG_YO = (char)0x116D;
			public const char HANGUL_JUNGSEONG_YO_I = (char)0x1188;
			public const char HANGUL_JUNGSEONG_YO_O = (char)0x1187;
			public const char HANGUL_JUNGSEONG_YO_YA = (char)0x1184;
			public const char HANGUL_JUNGSEONG_YO_YAE = (char)0x1185;
			public const char HANGUL_JUNGSEONG_YO_YEO = (char)0x1186;
			public const char HANGUL_JUNGSEONG_YU = (char)0x1172;
			public const char HANGUL_JUNGSEONG_YU_A = (char)0x118E;
			public const char HANGUL_JUNGSEONG_YU_E = (char)0x1190;
			public const char HANGUL_JUNGSEONG_YU_EO = (char)0x118F;
			public const char HANGUL_JUNGSEONG_YU_I = (char)0x1194;
			public const char HANGUL_JUNGSEONG_YU_U = (char)0x1193;
			public const char HANGUL_JUNGSEONG_YU_YE = (char)0x1192;
			public const char HANGUL_JUNGSEONG_YU_YEO = (char)0x1191;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_A = (char)0x314F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_AE = (char)0x3150;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER ALAE A. </summary>
			public const char HANGUL_LETTER_ARAEA = (char)0x318D;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER ALAE AE. </summary>
			public const char HANGUL_LETTER_ARAEAE = (char)0x318E;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER CIEUC. </summary>
			public const char HANGUL_LETTER_CHIEUCH = (char)0x314A;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER JIEUJ. </summary>
			public const char HANGUL_LETTER_CIEUC = (char)0x3148;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_E = (char)0x3154;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_EO = (char)0x3153;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_EU = (char)0x3161;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_HIEUH = (char)0x314E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_I = (char)0x3163;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_IEUNG = (char)0x3147;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER MIEUM SUN GYEONG EUM. </summary>
			public const char HANGUL_LETTER_KAPYEOUNMIEUM = (char)0x3171;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER PIEUP SUN GYEONG EUM. </summary>
			public const char HANGUL_LETTER_KAPYEOUNPHIEUPH = (char)0x3184;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB SUN GYEONG EUM. </summary>
			public const char HANGUL_LETTER_KAPYEOUNPIEUP = (char)0x3178;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG BIEUB SUN GYEONG EUM. </summary>
			public const char HANGUL_LETTER_KAPYEOUNSSANGPIEUP = (char)0x3179;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER KIYEOK. </summary>
			public const char HANGUL_LETTER_KHIEUKH = (char)0x314B;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER GIYEOG. </summary>
			public const char HANGUL_LETTER_KIYEOK = (char)0x3131;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER GIYEOG SIOS. </summary>
			public const char HANGUL_LETTER_KIYEOK_SIOS = (char)0x3133;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_MIEUM = (char)0x3141;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB BAN CHI EUM. </summary>
			public const char HANGUL_LETTER_MIEUM_PANSIOS = (char)0x3170;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER MIEUM BIEUB. </summary>
			public const char HANGUL_LETTER_MIEUM_PIEUP = (char)0x316E;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER MIEUM SIOS. </summary>
			public const char HANGUL_LETTER_MIEUM_SIOS = (char)0x316F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_NIEUN = (char)0x3134;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER NIEUN JIEUJ. </summary>
			public const char HANGUL_LETTER_NIEUN_CIEUC = (char)0x3135;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER NIEUN HIEUH. </summary>
			public const char HANGUL_LETTER_NIEUN_HIEUH = (char)0x3136;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER NIEUN BAN CHI EUM. </summary>
			public const char HANGUL_LETTER_NIEUN_PANSIOS = (char)0x3168;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER NIEUN SIOS. </summary>
			public const char HANGUL_LETTER_NIEUN_SIOS = (char)0x3167;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER NIEUN DIGEUD. </summary>
			public const char HANGUL_LETTER_NIEUN_TIKEUT = (char)0x3166;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_O = (char)0x3157;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_OE = (char)0x315A;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BAN CHI EUM. </summary>
			public const char HANGUL_LETTER_PANSIOS = (char)0x317F;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER PIEUP. </summary>
			public const char HANGUL_LETTER_PHIEUPH = (char)0x314D;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB. </summary>
			public const char HANGUL_LETTER_PIEUP = (char)0x3142;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB JIEUJ. </summary>
			public const char HANGUL_LETTER_PIEUP_CIEUC = (char)0x3176;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB GIYEOG. </summary>
			public const char HANGUL_LETTER_PIEUP_KIYEOK = (char)0x3172;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB SIOS. </summary>
			public const char HANGUL_LETTER_PIEUP_SIOS = (char)0x3144;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB SIOS GIYEOG. </summary>
			public const char HANGUL_LETTER_PIEUP_SIOS_KIYEOK = (char)0x3174;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB SIOS DIGEUD. </summary>
			public const char HANGUL_LETTER_PIEUP_SIOS_TIKEUT = (char)0x3175;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB TIEUT. </summary>
			public const char HANGUL_LETTER_PIEUP_THIEUTH = (char)0x3177;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER BIEUB DIGEUD. </summary>
			public const char HANGUL_LETTER_PIEUP_TIKEUT = (char)0x3173;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL. </summary>
			public const char HANGUL_LETTER_RIEUL = (char)0x3139;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL HIEUH. </summary>
			public const char HANGUL_LETTER_RIEUL_HIEUH = (char)0x3140;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL GIYEOG. </summary>
			public const char HANGUL_LETTER_RIEUL_KIYEOK = (char)0x313A;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL GIYEOG SIOS. </summary>
			public const char HANGUL_LETTER_RIEUL_KIYEOK_SIOS = (char)0x3169;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL MIEUM. </summary>
			public const char HANGUL_LETTER_RIEUL_MIEUM = (char)0x313B;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL BAN CHI EUM. </summary>
			public const char HANGUL_LETTER_RIEUL_PANSIOS = (char)0x316C;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL PIEUP. </summary>
			public const char HANGUL_LETTER_RIEUL_PHIEUPH = (char)0x313F;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL BIEUB. </summary>
			public const char HANGUL_LETTER_RIEUL_PIEUP = (char)0x313C;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL BIEUB SIOS. </summary>
			public const char HANGUL_LETTER_RIEUL_PIEUP_SIOS = (char)0x316B;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL SIOS. </summary>
			public const char HANGUL_LETTER_RIEUL_SIOS = (char)0x313D;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL TIEUT. </summary>
			public const char HANGUL_LETTER_RIEUL_THIEUTH = (char)0x313E;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL DIGEUD. </summary>
			public const char HANGUL_LETTER_RIEUL_TIKEUT = (char)0x316A;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER LIEUL YEOLIN HIEUH. </summary>
			public const char HANGUL_LETTER_RIEUL_YEORINHIEUH = (char)0x316D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_SIOS = (char)0x3145;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SIOS JIEUJ. </summary>
			public const char HANGUL_LETTER_SIOS_CIEUC = (char)0x317E;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SIOS GIYEOG. </summary>
			public const char HANGUL_LETTER_SIOS_KIYEOK = (char)0x317A;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SIOS NIEUN. </summary>
			public const char HANGUL_LETTER_SIOS_NIEUN = (char)0x317B;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SIOS BIEUB. </summary>
			public const char HANGUL_LETTER_SIOS_PIEUP = (char)0x317D;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SIOS DIGEUD. </summary>
			public const char HANGUL_LETTER_SIOS_TIKEUT = (char)0x317C;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG JIEUJ. </summary>
			public const char HANGUL_LETTER_SSANGCIEUC = (char)0x3149;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG HIEUH. </summary>
			public const char HANGUL_LETTER_SSANGHIEUH = (char)0x3185;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG IEUNG. </summary>
			public const char HANGUL_LETTER_SSANGIEUNG = (char)0x3180;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG GIYEOG. </summary>
			public const char HANGUL_LETTER_SSANGKIYEOK = (char)0x3132;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG NIEUN. </summary>
			public const char HANGUL_LETTER_SSANGNIEUN = (char)0x3165;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG BIEUB. </summary>
			public const char HANGUL_LETTER_SSANGPIEUP = (char)0x3143;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG SIOS. </summary>
			public const char HANGUL_LETTER_SSANGSIOS = (char)0x3146;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER SSANG DIGEUD. </summary>
			public const char HANGUL_LETTER_SSANGTIKEUT = (char)0x3138;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER TIEUT. </summary>
			public const char HANGUL_LETTER_THIEUTH = (char)0x314C;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER DIGEUD. </summary>
			public const char HANGUL_LETTER_TIKEUT = (char)0x3137;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_U = (char)0x315C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_WA = (char)0x3158;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_WAE = (char)0x3159;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_WE = (char)0x315E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_WEO = (char)0x315D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_WI = (char)0x315F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_YA = (char)0x3151;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_YAE = (char)0x3152;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_YE = (char)0x3156;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_YEO = (char)0x3155;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER YEOLIN HIEUH. </summary>
			public const char HANGUL_LETTER_YEORINHIEUH = (char)0x3186;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER NGIEUNG. </summary>
			public const char HANGUL_LETTER_YESIEUNG = (char)0x3181;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER NGIEUNG BAN CHI EUM. </summary>
			public const char HANGUL_LETTER_YESIEUNG_PANSIOS = (char)0x3183;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER NGIEUNG SIOS. </summary>
			public const char HANGUL_LETTER_YESIEUNG_SIOS = (char)0x3182;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_YI = (char)0x3162;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_YO = (char)0x315B;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER YOI. </summary>
			public const char HANGUL_LETTER_YO_I = (char)0x3189;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER YOYA. </summary>
			public const char HANGUL_LETTER_YO_YA = (char)0x3187;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER YOYAE. </summary>
			public const char HANGUL_LETTER_YO_YAE = (char)0x3188;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGUL_LETTER_YU = (char)0x3160;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER YUI. </summary>
			public const char HANGUL_LETTER_YU_I = (char)0x318C;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER YUYE. </summary>
			public const char HANGUL_LETTER_YU_YE = (char)0x318B;
			/// <summary> (This is a composition; consider avoiding.) Formerly HANGUL LETTER YUYEO. </summary>
			public const char HANGUL_LETTER_YU_YEO = (char)0x318A;
			public const char HANGUL_SINGLE_DOT_TONE_MARK = (char)0x302E;
			public const char HANGZHOU_NUMERAL_EIGHT = (char)0x3028;
			public const char HANGZHOU_NUMERAL_FIVE = (char)0x3025;
			public const char HANGZHOU_NUMERAL_FOUR = (char)0x3024;
			public const char HANGZHOU_NUMERAL_NINE = (char)0x3029;
			public const char HANGZHOU_NUMERAL_ONE = (char)0x3021;
			public const char HANGZHOU_NUMERAL_SEVEN = (char)0x3027;
			public const char HANGZHOU_NUMERAL_SIX = (char)0x3026;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGZHOU_NUMERAL_TEN = (char)0x3038;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGZHOU_NUMERAL_THIRTY = (char)0x303A;
			public const char HANGZHOU_NUMERAL_THREE = (char)0x3023;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HANGZHOU_NUMERAL_TWENTY = (char)0x3039;
			public const char HANGZHOU_NUMERAL_TWO = (char)0x3022;
			public const char HANUNOO_LETTER_A = (char)0x1720;
			public const char HANUNOO_LETTER_BA = (char)0x172A;
			public const char HANUNOO_LETTER_DA = (char)0x1727;
			public const char HANUNOO_LETTER_GA = (char)0x1724;
			public const char HANUNOO_LETTER_HA = (char)0x1731;
			public const char HANUNOO_LETTER_I = (char)0x1721;
			public const char HANUNOO_LETTER_KA = (char)0x1723;
			public const char HANUNOO_LETTER_LA = (char)0x172E;
			public const char HANUNOO_LETTER_MA = (char)0x172B;
			public const char HANUNOO_LETTER_NA = (char)0x1728;
			public const char HANUNOO_LETTER_NGA = (char)0x1725;
			public const char HANUNOO_LETTER_PA = (char)0x1729;
			public const char HANUNOO_LETTER_RA = (char)0x172D;
			public const char HANUNOO_LETTER_SA = (char)0x1730;
			public const char HANUNOO_LETTER_TA = (char)0x1726;
			public const char HANUNOO_LETTER_U = (char)0x1722;
			public const char HANUNOO_LETTER_WA = (char)0x172F;
			public const char HANUNOO_LETTER_YA = (char)0x172C;
			public const char HANUNOO_SIGN_PAMUDPOD = (char)0x1734;
			public const char HANUNOO_VOWEL_SIGN_I = (char)0x1732;
			public const char HANUNOO_VOWEL_SIGN_U = (char)0x1733;
			public const char HEAVY_ASTERISK = (char)0x2731;
			public const char HEAVY_BALLOT_X = (char)0x2718;
			/// <summary> Formerly HEAVY BLACK CURVED DOWN AND RIGHT ARROW. </summary>
			public const char HEAVY_BLACK_CURVED_DOWNWARDS_AND_RIGHTWARDS_ARROW = (char)0x27A5;
			/// <summary> Formerly HEAVY BLACK CURVED UP AND RIGHT ARROW. </summary>
			public const char HEAVY_BLACK_CURVED_UPWARDS_AND_RIGHTWARDS_ARROW = (char)0x27A6;
			/// <summary> Formerly HEAVY BLACK-FEATHERED UPPER RIGHT ARROW. </summary>
			public const char HEAVY_BLACK_FEATHERED_NORTH_EAST_ARROW = (char)0x27B9;
			/// <summary> Formerly HEAVY BLACK-FEATHERED RIGHT ARROW. </summary>
			public const char HEAVY_BLACK_FEATHERED_RIGHTWARDS_ARROW = (char)0x27B8;
			/// <summary> Formerly HEAVY BLACK-FEATHERED LOWER RIGHT ARROW. </summary>
			public const char HEAVY_BLACK_FEATHERED_SOUTH_EAST_ARROW = (char)0x27B7;
			public const char HEAVY_BLACK_HEART = (char)0x2764;
			public const char HEAVY_CHECK_MARK = (char)0x2714;
			public const char HEAVY_CHEVRON_SNOWFLAKE = (char)0x2746;
			/// <summary> Formerly HEAVY CONCAVE-POINTED BLACK RIGHT ARROW. </summary>
			public const char HEAVY_CONCAVE_POINTED_BLACK_RIGHTWARDS_ARROW = (char)0x27A8;
			/// <summary> Formerly HEAVY DASHED TRIANGLE-HEADED RIGHT ARROW. </summary>
			public const char HEAVY_DASHED_TRIANGLE_HEADED_RIGHTWARDS_ARROW = (char)0x27A0;
			public const char HEAVY_DOUBLE_COMMA_QUOTATION_MARK_ORNAMENT = (char)0x275E;
			public const char HEAVY_DOUBLE_TURNED_COMMA_QUOTATION_MARK_ORNAMENT = (char)0x275D;
			public const char HEAVY_EIGHT_POINTED_RECTILINEAR_BLACK_STAR = (char)0x2738;
			public const char HEAVY_EIGHT_TEARDROP_SPOKED_PROPELLER_ASTERISK = (char)0x274B;
			public const char HEAVY_EXCLAMATION_MARK_ORNAMENT = (char)0x2762;
			public const char HEAVY_FOUR_BALLOON_SPOKED_ASTERISK = (char)0x2724;
			public const char HEAVY_GREEK_CROSS = (char)0x271A;
			public const char HEAVY_HEART_EXCLAMATION_MARK_ORNAMENT = (char)0x2763;
			public const char HEAVY_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT = (char)0x2770;
			public const char HEAVY_LEFT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT = (char)0x276E;
			/// <summary> Formerly HEAVY LOWER RIGHT-SHADOWED WHITE RIGHT ARROW. </summary>
			public const char HEAVY_LOWER_RIGHT_SHADOWED_WHITE_RIGHTWARDS_ARROW = (char)0x27AD;
			public const char HEAVY_MULTIPLICATION_X = (char)0x2716;
			/// <summary> Formerly HEAVY UPPER RIGHT ARROW. </summary>
			public const char HEAVY_NORTH_EAST_ARROW = (char)0x279A;
			/// <summary> Formerly HEAVY OPEN CENTER CROSS. </summary>
			public const char HEAVY_OPEN_CENTRE_CROSS = (char)0x271C;
			public const char HEAVY_OUTLINED_BLACK_STAR = (char)0x272E;
			/// <summary> Formerly HEAVY RIGHT ARROW. </summary>
			public const char HEAVY_RIGHTWARDS_ARROW = (char)0x2799;
			public const char HEAVY_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT = (char)0x2771;
			public const char HEAVY_RIGHT_POINTING_ANGLE_QUOTATION_MARK_ORNAMENT = (char)0x276F;
			/// <summary> Formerly HEAVY ROUND-TIPPED RIGHT ARROW. </summary>
			public const char HEAVY_ROUND_TIPPED_RIGHTWARDS_ARROW = (char)0x279C;
			public const char HEAVY_SINGLE_COMMA_QUOTATION_MARK_ORNAMENT = (char)0x275C;
			public const char HEAVY_SINGLE_TURNED_COMMA_QUOTATION_MARK_ORNAMENT = (char)0x275B;
			/// <summary> Formerly HEAVY LOWER RIGHT ARROW. </summary>
			public const char HEAVY_SOUTH_EAST_ARROW = (char)0x2798;
			public const char HEAVY_SPARKLE = (char)0x2748;
			/// <summary> Formerly HEAVY TEARDROP-SHANKED RIGHT ARROW. </summary>
			public const char HEAVY_TEARDROP_SHANKED_RIGHTWARDS_ARROW = (char)0x27BB;
			public const char HEAVY_TEARDROP_SPOKED_ASTERISK = (char)0x273D;
			public const char HEAVY_TEARDROP_SPOKED_PINWHEEL_ASTERISK = (char)0x2743;
			/// <summary> Formerly HEAVY TRIANGLE-HEADED RIGHT ARROW. </summary>
			public const char HEAVY_TRIANGLE_HEADED_RIGHTWARDS_ARROW = (char)0x279E;
			/// <summary> Formerly HEAVY UPPER RIGHT-SHADOWED WHITE RIGHT ARROW. </summary>
			public const char HEAVY_UPPER_RIGHT_SHADOWED_WHITE_RIGHTWARDS_ARROW = (char)0x27AE;
			public const char HEAVY_VERTICAL_BAR = (char)0x275A;
			/// <summary> Formerly HEAVY WEDGE-TAILED RIGHT ARROW. </summary>
			public const char HEAVY_WEDGE_TAILED_RIGHTWARDS_ARROW = (char)0x27BD;
			/// <summary> Formerly HEAVY WIDE-HEADED RIGHT ARROW. </summary>
			public const char HEAVY_WIDE_HEADED_RIGHTWARDS_ARROW = (char)0x2794;
			public const char HEBREW_ACCENT_ATNAH_HAFUKH = (char)0x05A2;
			public const char HEBREW_ACCENT_DARGA = (char)0x05A7;
			public const char HEBREW_ACCENT_DEHI = (char)0x05AD;
			public const char HEBREW_ACCENT_ETNAHTA = (char)0x0591;
			public const char HEBREW_ACCENT_GERESH = (char)0x059C;
			public const char HEBREW_ACCENT_GERESH_MUQDAM = (char)0x059D;
			public const char HEBREW_ACCENT_GERSHAYIM = (char)0x059E;
			public const char HEBREW_ACCENT_ILUY = (char)0x05AC;
			public const char HEBREW_ACCENT_MAHAPAKH = (char)0x05A4;
			public const char HEBREW_ACCENT_MERKHA = (char)0x05A5;
			public const char HEBREW_ACCENT_MERKHA_KEFULA = (char)0x05A6;
			public const char HEBREW_ACCENT_MUNAH = (char)0x05A3;
			public const char HEBREW_ACCENT_OLE = (char)0x05AB;
			public const char HEBREW_ACCENT_PASHTA = (char)0x0599;
			public const char HEBREW_ACCENT_PAZER = (char)0x05A1;
			public const char HEBREW_ACCENT_QADMA = (char)0x05A8;
			public const char HEBREW_ACCENT_QARNEY_PARA = (char)0x059F;
			public const char HEBREW_ACCENT_REVIA = (char)0x0597;
			public const char HEBREW_ACCENT_SEGOL = (char)0x0592;
			public const char HEBREW_ACCENT_SHALSHELET = (char)0x0593;
			public const char HEBREW_ACCENT_TELISHA_GEDOLA = (char)0x05A0;
			public const char HEBREW_ACCENT_TELISHA_QETANA = (char)0x05A9;
			public const char HEBREW_ACCENT_TEVIR = (char)0x059B;
			public const char HEBREW_ACCENT_TIPEHA = (char)0x0596;
			public const char HEBREW_ACCENT_YERAH_BEN_YOMO = (char)0x05AA;
			public const char HEBREW_ACCENT_YETIV = (char)0x059A;
			public const char HEBREW_ACCENT_ZAQEF_GADOL = (char)0x0595;
			public const char HEBREW_ACCENT_ZAQEF_QATAN = (char)0x0594;
			public const char HEBREW_ACCENT_ZARQA = (char)0x0598;
			public const char HEBREW_ACCENT_ZINOR = (char)0x05AE;
			public const char HEBREW_LETTER_ALEF = (char)0x05D0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_ALEF_WITH_MAPIQ = (char)0xFB30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_ALEF_WITH_PATAH = (char)0xFB2E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_ALEF_WITH_QAMATS = (char)0xFB2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_ALTERNATIVE_AYIN = (char)0xFB20;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_ALTERNATIVE_PLUS_SIGN = (char)0xFB29;
			public const char HEBREW_LETTER_AYIN = (char)0x05E2;
			public const char HEBREW_LETTER_BET = (char)0x05D1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_BET_WITH_DAGESH = (char)0xFB31;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_BET_WITH_RAFE = (char)0xFB4C;
			public const char HEBREW_LETTER_DALET = (char)0x05D3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_DALET_WITH_DAGESH = (char)0xFB33;
			public const char HEBREW_LETTER_FINAL_KAF = (char)0x05DA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_FINAL_KAF_WITH_DAGESH = (char)0xFB3A;
			public const char HEBREW_LETTER_FINAL_MEM = (char)0x05DD;
			public const char HEBREW_LETTER_FINAL_NUN = (char)0x05DF;
			public const char HEBREW_LETTER_FINAL_PE = (char)0x05E3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_FINAL_PE_WITH_DAGESH = (char)0xFB43;
			public const char HEBREW_LETTER_FINAL_TSADI = (char)0x05E5;
			public const char HEBREW_LETTER_GIMEL = (char)0x05D2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_GIMEL_WITH_DAGESH = (char)0xFB32;
			public const char HEBREW_LETTER_HE = (char)0x05D4;
			public const char HEBREW_LETTER_HET = (char)0x05D7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_HE_WITH_MAPIQ = (char)0xFB34;
			public const char HEBREW_LETTER_KAF = (char)0x05DB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_KAF_WITH_DAGESH = (char)0xFB3B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_KAF_WITH_RAFE = (char)0xFB4D;
			public const char HEBREW_LETTER_LAMED = (char)0x05DC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_LAMED_WITH_DAGESH = (char)0xFB3C;
			public const char HEBREW_LETTER_MEM = (char)0x05DE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_MEM_WITH_DAGESH = (char)0xFB3E;
			public const char HEBREW_LETTER_NUN = (char)0x05E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_NUN_WITH_DAGESH = (char)0xFB40;
			public const char HEBREW_LETTER_PE = (char)0x05E4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_PE_WITH_DAGESH = (char)0xFB44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_PE_WITH_RAFE = (char)0xFB4E;
			public const char HEBREW_LETTER_QOF = (char)0x05E7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_QOF_WITH_DAGESH = (char)0xFB47;
			public const char HEBREW_LETTER_RESH = (char)0x05E8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_RESH_WITH_DAGESH = (char)0xFB48;
			public const char HEBREW_LETTER_SAMEKH = (char)0x05E1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_SAMEKH_WITH_DAGESH = (char)0xFB41;
			public const char HEBREW_LETTER_SHIN = (char)0x05E9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_SHIN_WITH_DAGESH = (char)0xFB49;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_SHIN_WITH_DAGESH_AND_SHIN_DOT = (char)0xFB2C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_SHIN_WITH_DAGESH_AND_SIN_DOT = (char)0xFB2D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_SHIN_WITH_SHIN_DOT = (char)0xFB2A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_SHIN_WITH_SIN_DOT = (char)0xFB2B;
			public const char HEBREW_LETTER_TAV = (char)0x05EA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_TAV_WITH_DAGESH = (char)0xFB4A;
			public const char HEBREW_LETTER_TET = (char)0x05D8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_TET_WITH_DAGESH = (char)0xFB38;
			public const char HEBREW_LETTER_TSADI = (char)0x05E6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_TSADI_WITH_DAGESH = (char)0xFB46;
			public const char HEBREW_LETTER_VAV = (char)0x05D5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_VAV_WITH_DAGESH = (char)0xFB35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_VAV_WITH_HOLAM = (char)0xFB4B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_WIDE_ALEF = (char)0xFB21;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_WIDE_DALET = (char)0xFB22;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_WIDE_FINAL_MEM = (char)0xFB26;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_WIDE_HE = (char)0xFB23;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_WIDE_KAF = (char)0xFB24;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_WIDE_LAMED = (char)0xFB25;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_WIDE_RESH = (char)0xFB27;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_WIDE_TAV = (char)0xFB28;
			public const char HEBREW_LETTER_YOD = (char)0x05D9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_YOD_WITH_DAGESH = (char)0xFB39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_YOD_WITH_HIRIQ = (char)0xFB1D;
			public const char HEBREW_LETTER_ZAYIN = (char)0x05D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LETTER_ZAYIN_WITH_DAGESH = (char)0xFB36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LIGATURE_ALEF_LAMED = (char)0xFB4F;
			/// <summary> Formerly HEBREW LETTER DOUBLE VAV. </summary>
			public const char HEBREW_LIGATURE_YIDDISH_DOUBLE_VAV = (char)0x05F0;
			/// <summary> Formerly HEBREW LETTER DOUBLE YOD. </summary>
			public const char HEBREW_LIGATURE_YIDDISH_DOUBLE_YOD = (char)0x05F2;
			/// <summary> Formerly HEBREW LETTER VAV YOD. </summary>
			public const char HEBREW_LIGATURE_YIDDISH_VAV_YOD = (char)0x05F1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HEBREW_LIGATURE_YIDDISH_YOD_YOD_PATAH = (char)0xFB1F;
			public const char HEBREW_MARK_LOWER_DOT = (char)0x05C5;
			public const char HEBREW_MARK_MASORA_CIRCLE = (char)0x05AF;
			public const char HEBREW_MARK_UPPER_DOT = (char)0x05C4;
			/// <summary> Formerly HEBREW POINT DAGESH. </summary>
			public const char HEBREW_POINT_DAGESH_OR_MAPIQ = (char)0x05BC;
			public const char HEBREW_POINT_HATAF_PATAH = (char)0x05B2;
			public const char HEBREW_POINT_HATAF_QAMATS = (char)0x05B3;
			public const char HEBREW_POINT_HATAF_SEGOL = (char)0x05B1;
			public const char HEBREW_POINT_HIRIQ = (char)0x05B4;
			public const char HEBREW_POINT_HOLAM = (char)0x05B9;
			/// <summary> Formerly HEBREW POINT VARIKA. </summary>
			public const char HEBREW_POINT_JUDEO_SPANISH_VARIKA = (char)0xFB1E;
			public const char HEBREW_POINT_METEG = (char)0x05BD;
			public const char HEBREW_POINT_PATAH = (char)0x05B7;
			public const char HEBREW_POINT_QAMATS = (char)0x05B8;
			public const char HEBREW_POINT_QAMATS_QATAN = (char)0x05C7;
			public const char HEBREW_POINT_QUBUTS = (char)0x05BB;
			public const char HEBREW_POINT_RAFE = (char)0x05BF;
			public const char HEBREW_POINT_SEGOL = (char)0x05B6;
			public const char HEBREW_POINT_SHEVA = (char)0x05B0;
			public const char HEBREW_POINT_SHIN_DOT = (char)0x05C1;
			public const char HEBREW_POINT_SIN_DOT = (char)0x05C2;
			public const char HEBREW_POINT_TSERE = (char)0x05B5;
			public const char HEBREW_PUNCTUATION_GERESH = (char)0x05F3;
			public const char HEBREW_PUNCTUATION_GERSHAYIM = (char)0x05F4;
			public const char HEBREW_PUNCTUATION_MAQAF = (char)0x05BE;
			public const char HEBREW_PUNCTUATION_NUN_HAFUKHA = (char)0x05C6;
			/// <summary> Formerly HEBREW POINT PASEQ. </summary>
			public const char HEBREW_PUNCTUATION_PASEQ = (char)0x05C0;
			public const char HEBREW_PUNCTUATION_SOF_PASUQ = (char)0x05C3;
			public const char HELM_SYMBOL = (char)0x2388;
			public const char HERMITIAN_CONJUGATE_MATRIX = (char)0x22B9;
			public const char HEXAGRAM_FOR_ABUNDANCE = (char)0x4DF6;
			public const char HEXAGRAM_FOR_AFTER_COMPLETION = (char)0x4DFE;
			public const char HEXAGRAM_FOR_APPROACH = (char)0x4DD2;
			public const char HEXAGRAM_FOR_BEFORE_COMPLETION = (char)0x4DFF;
			public const char HEXAGRAM_FOR_BITING_THROUGH = (char)0x4DD4;
			public const char HEXAGRAM_FOR_BREAKTHROUGH = (char)0x4DEA;
			public const char HEXAGRAM_FOR_COMING_TO_MEET = (char)0x4DEB;
			public const char HEXAGRAM_FOR_CONFLICT = (char)0x4DC5;
			public const char HEXAGRAM_FOR_CONTEMPLATION = (char)0x4DD3;
			public const char HEXAGRAM_FOR_DARKENING_OF_THE_LIGHT = (char)0x4DE3;
			public const char HEXAGRAM_FOR_DECREASE = (char)0x4DE8;
			public const char HEXAGRAM_FOR_DELIVERANCE = (char)0x4DE7;
			public const char HEXAGRAM_FOR_DEVELOPMENT = (char)0x4DF4;
			public const char HEXAGRAM_FOR_DIFFICULTY_AT_THE_BEGINNING = (char)0x4DC2;
			public const char HEXAGRAM_FOR_DISPERSION = (char)0x4DFA;
			public const char HEXAGRAM_FOR_DURATION = (char)0x4DDF;
			public const char HEXAGRAM_FOR_ENTHUSIASM = (char)0x4DCF;
			public const char HEXAGRAM_FOR_FELLOWSHIP = (char)0x4DCC;
			public const char HEXAGRAM_FOR_FOLLOWING = (char)0x4DD0;
			public const char HEXAGRAM_FOR_GATHERING_TOGETHER = (char)0x4DEC;
			public const char HEXAGRAM_FOR_GRACE = (char)0x4DD5;
			public const char HEXAGRAM_FOR_GREAT_POSSESSION = (char)0x4DCD;
			public const char HEXAGRAM_FOR_GREAT_POWER = (char)0x4DE1;
			public const char HEXAGRAM_FOR_GREAT_PREPONDERANCE = (char)0x4DDB;
			public const char HEXAGRAM_FOR_GREAT_TAMING = (char)0x4DD9;
			public const char HEXAGRAM_FOR_HOLDING_TOGETHER = (char)0x4DC7;
			public const char HEXAGRAM_FOR_INCREASE = (char)0x4DE9;
			public const char HEXAGRAM_FOR_INFLUENCE = (char)0x4DDE;
			public const char HEXAGRAM_FOR_INNER_TRUTH = (char)0x4DFC;
			public const char HEXAGRAM_FOR_INNOCENCE = (char)0x4DD8;
			public const char HEXAGRAM_FOR_LIMITATION = (char)0x4DFB;
			public const char HEXAGRAM_FOR_MODESTY = (char)0x4DCE;
			public const char HEXAGRAM_FOR_MOUTH_CORNERS = (char)0x4DDA;
			public const char HEXAGRAM_FOR_OBSTRUCTION = (char)0x4DE6;
			public const char HEXAGRAM_FOR_OPPOSITION = (char)0x4DE5;
			public const char HEXAGRAM_FOR_OPPRESSION = (char)0x4DEE;
			public const char HEXAGRAM_FOR_PEACE = (char)0x4DCA;
			public const char HEXAGRAM_FOR_PROGRESS = (char)0x4DE2;
			public const char HEXAGRAM_FOR_PUSHING_UPWARD = (char)0x4DED;
			public const char HEXAGRAM_FOR_RETREAT = (char)0x4DE0;
			public const char HEXAGRAM_FOR_RETURN = (char)0x4DD7;
			public const char HEXAGRAM_FOR_REVOLUTION = (char)0x4DF0;
			public const char HEXAGRAM_FOR_SMALL_PREPONDERANCE = (char)0x4DFD;
			public const char HEXAGRAM_FOR_SMALL_TAMING = (char)0x4DC8;
			public const char HEXAGRAM_FOR_SPLITTING_APART = (char)0x4DD6;
			public const char HEXAGRAM_FOR_STANDSTILL = (char)0x4DCB;
			public const char HEXAGRAM_FOR_THE_ABYSMAL_WATER = (char)0x4DDC;
			public const char HEXAGRAM_FOR_THE_ARMY = (char)0x4DC6;
			public const char HEXAGRAM_FOR_THE_AROUSING_THUNDER = (char)0x4DF2;
			public const char HEXAGRAM_FOR_THE_CAULDRON = (char)0x4DF1;
			public const char HEXAGRAM_FOR_THE_CLINGING_FIRE = (char)0x4DDD;
			public const char HEXAGRAM_FOR_THE_CREATIVE_HEAVEN = (char)0x4DC0;
			public const char HEXAGRAM_FOR_THE_FAMILY = (char)0x4DE4;
			public const char HEXAGRAM_FOR_THE_GENTLE_WIND = (char)0x4DF8;
			public const char HEXAGRAM_FOR_THE_JOYOUS_LAKE = (char)0x4DF9;
			public const char HEXAGRAM_FOR_THE_KEEPING_STILL_MOUNTAIN = (char)0x4DF3;
			public const char HEXAGRAM_FOR_THE_MARRYING_MAIDEN = (char)0x4DF5;
			public const char HEXAGRAM_FOR_THE_RECEPTIVE_EARTH = (char)0x4DC1;
			public const char HEXAGRAM_FOR_THE_WANDERER = (char)0x4DF7;
			public const char HEXAGRAM_FOR_THE_WELL = (char)0x4DEF;
			public const char HEXAGRAM_FOR_TREADING = (char)0x4DC9;
			public const char HEXAGRAM_FOR_WAITING = (char)0x4DC4;
			public const char HEXAGRAM_FOR_WORK_ON_THE_DECAYED = (char)0x4DD1;
			public const char HEXAGRAM_FOR_YOUTHFUL_FOLLY = (char)0x4DC3;
			public const char HIGH_VOLTAGE_SIGN = (char)0x26A1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_DIGRAPH_YORI = (char)0x309F;
			public const char HIRAGANA_ITERATION_MARK = (char)0x309D;
			public const char HIRAGANA_LETTER_A = (char)0x3042;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_BA = (char)0x3070;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_BE = (char)0x3079;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_BI = (char)0x3073;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_BO = (char)0x307C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_BU = (char)0x3076;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_DA = (char)0x3060;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_DE = (char)0x3067;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_DI = (char)0x3062;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_DO = (char)0x3069;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_DU = (char)0x3065;
			public const char HIRAGANA_LETTER_E = (char)0x3048;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_GA = (char)0x304C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_GE = (char)0x3052;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_GI = (char)0x304E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_GO = (char)0x3054;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_GU = (char)0x3050;
			public const char HIRAGANA_LETTER_HA = (char)0x306F;
			public const char HIRAGANA_LETTER_HE = (char)0x3078;
			public const char HIRAGANA_LETTER_HI = (char)0x3072;
			public const char HIRAGANA_LETTER_HO = (char)0x307B;
			public const char HIRAGANA_LETTER_HU = (char)0x3075;
			public const char HIRAGANA_LETTER_I = (char)0x3044;
			public const char HIRAGANA_LETTER_KA = (char)0x304B;
			public const char HIRAGANA_LETTER_KE = (char)0x3051;
			public const char HIRAGANA_LETTER_KI = (char)0x304D;
			public const char HIRAGANA_LETTER_KO = (char)0x3053;
			public const char HIRAGANA_LETTER_KU = (char)0x304F;
			public const char HIRAGANA_LETTER_MA = (char)0x307E;
			public const char HIRAGANA_LETTER_ME = (char)0x3081;
			public const char HIRAGANA_LETTER_MI = (char)0x307F;
			public const char HIRAGANA_LETTER_MO = (char)0x3082;
			public const char HIRAGANA_LETTER_MU = (char)0x3080;
			public const char HIRAGANA_LETTER_N = (char)0x3093;
			public const char HIRAGANA_LETTER_NA = (char)0x306A;
			public const char HIRAGANA_LETTER_NE = (char)0x306D;
			public const char HIRAGANA_LETTER_NI = (char)0x306B;
			public const char HIRAGANA_LETTER_NO = (char)0x306E;
			public const char HIRAGANA_LETTER_NU = (char)0x306C;
			public const char HIRAGANA_LETTER_O = (char)0x304A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_PA = (char)0x3071;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_PE = (char)0x307A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_PI = (char)0x3074;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_PO = (char)0x307D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_PU = (char)0x3077;
			public const char HIRAGANA_LETTER_RA = (char)0x3089;
			public const char HIRAGANA_LETTER_RE = (char)0x308C;
			public const char HIRAGANA_LETTER_RI = (char)0x308A;
			public const char HIRAGANA_LETTER_RO = (char)0x308D;
			public const char HIRAGANA_LETTER_RU = (char)0x308B;
			public const char HIRAGANA_LETTER_SA = (char)0x3055;
			public const char HIRAGANA_LETTER_SE = (char)0x305B;
			public const char HIRAGANA_LETTER_SI = (char)0x3057;
			public const char HIRAGANA_LETTER_SMALL_A = (char)0x3041;
			public const char HIRAGANA_LETTER_SMALL_E = (char)0x3047;
			public const char HIRAGANA_LETTER_SMALL_I = (char)0x3043;
			public const char HIRAGANA_LETTER_SMALL_KA = (char)0x3095;
			public const char HIRAGANA_LETTER_SMALL_KE = (char)0x3096;
			public const char HIRAGANA_LETTER_SMALL_O = (char)0x3049;
			public const char HIRAGANA_LETTER_SMALL_TU = (char)0x3063;
			public const char HIRAGANA_LETTER_SMALL_U = (char)0x3045;
			public const char HIRAGANA_LETTER_SMALL_WA = (char)0x308E;
			public const char HIRAGANA_LETTER_SMALL_YA = (char)0x3083;
			public const char HIRAGANA_LETTER_SMALL_YO = (char)0x3087;
			public const char HIRAGANA_LETTER_SMALL_YU = (char)0x3085;
			public const char HIRAGANA_LETTER_SO = (char)0x305D;
			public const char HIRAGANA_LETTER_SU = (char)0x3059;
			public const char HIRAGANA_LETTER_TA = (char)0x305F;
			public const char HIRAGANA_LETTER_TE = (char)0x3066;
			public const char HIRAGANA_LETTER_TI = (char)0x3061;
			public const char HIRAGANA_LETTER_TO = (char)0x3068;
			public const char HIRAGANA_LETTER_TU = (char)0x3064;
			public const char HIRAGANA_LETTER_U = (char)0x3046;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_VU = (char)0x3094;
			public const char HIRAGANA_LETTER_WA = (char)0x308F;
			public const char HIRAGANA_LETTER_WE = (char)0x3091;
			public const char HIRAGANA_LETTER_WI = (char)0x3090;
			public const char HIRAGANA_LETTER_WO = (char)0x3092;
			public const char HIRAGANA_LETTER_YA = (char)0x3084;
			public const char HIRAGANA_LETTER_YO = (char)0x3088;
			public const char HIRAGANA_LETTER_YU = (char)0x3086;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_ZA = (char)0x3056;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_ZE = (char)0x305C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_ZI = (char)0x3058;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_ZO = (char)0x305E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_LETTER_ZU = (char)0x305A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HIRAGANA_VOICED_ITERATION_MARK = (char)0x309E;
			public const char HOMOTHETIC = (char)0x223B;
			/// <summary> Formerly QUOTATION DASH. </summary>
			public const char HORIZONTAL_BAR = (char)0x2015;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char HORIZONTAL_ELLIPSIS = (char)0x2026;
			public const char HORIZONTAL_LINE_EXTENSION = (char)0x23AF;
			public const char HORIZONTAL_MALE_WITH_STROKE_SIGN = (char)0x26A9;
			public const char HORIZONTAL_SCAN_LINE_1 = (char)0x23BA;
			public const char HORIZONTAL_SCAN_LINE_3 = (char)0x23BB;
			public const char HORIZONTAL_SCAN_LINE_7 = (char)0x23BC;
			public const char HORIZONTAL_SCAN_LINE_9 = (char)0x23BD;
			public const char HOT_BEVERAGE = (char)0x2615;
			public const char HOT_SPRINGS = (char)0x2668;
			public const char HOURGLASS = (char)0x231B;
			public const char HOUSE = (char)0x2302;
			public const char HRYVNIA_SIGN = (char)0x20B4;
			public const char HYPHEN = (char)0x2010;
			public const char HYPHENATION_POINT = (char)0x2027;
			public const char HYPHEN_BULLET = (char)0x2043;
			public const char HYPHEN_MINUS = (char)0x002D;
			public const char HYPODIASTOLE = (char)0x2E12;
			public const char HYSTERESIS_SYMBOL = (char)0x238E;
		}
		public class I {
			public const char IDENTICAL_TO = (char)0x2261;
			public const char IDENTICAL_TO_AND_SLANTED_PARALLEL = (char)0x29E5;
			public const char IDENTICAL_WITH_DOT_ABOVE = (char)0x2A67;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN GE. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_BOTTOM_MARK = (char)0x3198;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN TI. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_EARTH_MARK = (char)0x319E;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN KOU. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_FIRST_MARK = (char)0x3199;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN TEI. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_FOURTH_MARK = (char)0x319C;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN SI. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_FOUR_MARK = (char)0x3195;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN TEN. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_HEAVEN_MARK = (char)0x319D;
			/// <summary> Formerly KANBUN TATETEN. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_LINKING_MARK = (char)0x3190;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN ZIN. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_MAN_MARK = (char)0x319F;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN TYUU. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_MIDDLE_MARK = (char)0x3197;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN ITI. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_ONE_MARK = (char)0x3192;
			/// <summary> Formerly KAERITEN RE. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_REVERSE_MARK = (char)0x3191;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN OTU. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_SECOND_MARK = (char)0x319A;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN HEI. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_THIRD_MARK = (char)0x319B;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN SAN. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_THREE_MARK = (char)0x3194;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN ZYOU. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_TOP_MARK = (char)0x3196;
			/// <summary> (This is a composition; consider avoiding.) Formerly KAERITEN NI. </summary>
			public const char IDEOGRAPHIC_ANNOTATION_TWO_MARK = (char)0x3193;
			public const char IDEOGRAPHIC_CLOSING_MARK = (char)0x3006;
			public const char IDEOGRAPHIC_COMMA = (char)0x3001;
			public const char IDEOGRAPHIC_DEPARTING_TONE_MARK = (char)0x302C;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_ABOVE_TO_BELOW = (char)0x2FF1;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_ABOVE_TO_MIDDLE_AND_BELOW = (char)0x2FF3;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_FULL_SURROUND = (char)0x2FF4;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_LEFT_TO_MIDDLE_AND_RIGHT = (char)0x2FF2;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_LEFT_TO_RIGHT = (char)0x2FF0;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_OVERLAID = (char)0x2FFB;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_SURROUND_FROM_ABOVE = (char)0x2FF5;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_SURROUND_FROM_BELOW = (char)0x2FF6;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_SURROUND_FROM_LEFT = (char)0x2FF7;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_SURROUND_FROM_LOWER_LEFT = (char)0x2FFA;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_SURROUND_FROM_UPPER_LEFT = (char)0x2FF8;
			public const char IDEOGRAPHIC_DESCRIPTION_CHARACTER_SURROUND_FROM_UPPER_RIGHT = (char)0x2FF9;
			public const char IDEOGRAPHIC_ENTERING_TONE_MARK = (char)0x302D;
			/// <summary> Formerly IDEOGRAPHIC PERIOD. </summary>
			public const char IDEOGRAPHIC_FULL_STOP = (char)0x3002;
			public const char IDEOGRAPHIC_HALF_FILL_SPACE = (char)0x303F;
			public const char IDEOGRAPHIC_ITERATION_MARK = (char)0x3005;
			public const char IDEOGRAPHIC_LEVEL_TONE_MARK = (char)0x302A;
			public const char IDEOGRAPHIC_NUMBER_ZERO = (char)0x3007;
			public const char IDEOGRAPHIC_RISING_TONE_MARK = (char)0x302B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_SPACE = (char)0x3000;
			public const char IDEOGRAPHIC_TELEGRAPH_LINE_FEED_SEPARATOR_SYMBOL = (char)0x3037;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_APRIL = (char)0x32C3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_AUGUST = (char)0x32C7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_EIGHT = (char)0x33E7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_EIGHTEEN = (char)0x33F1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_ELEVEN = (char)0x33EA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_FIFTEEN = (char)0x33EE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_FIVE = (char)0x33E4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_FOUR = (char)0x33E3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_FOURTEEN = (char)0x33ED;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_NINE = (char)0x33E8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_NINETEEN = (char)0x33F2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_ONE = (char)0x33E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_SEVEN = (char)0x33E6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_SEVENTEEN = (char)0x33F0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_SIX = (char)0x33E5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_SIXTEEN = (char)0x33EF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TEN = (char)0x33E9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_THIRTEEN = (char)0x33EC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_THIRTY = (char)0x33FD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_THIRTY_ONE = (char)0x33FE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_THREE = (char)0x33E2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWELVE = (char)0x33EB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY = (char)0x33F3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_EIGHT = (char)0x33FB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_FIVE = (char)0x33F8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_FOUR = (char)0x33F7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_NINE = (char)0x33FC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_ONE = (char)0x33F4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_SEVEN = (char)0x33FA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_SIX = (char)0x33F9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_THREE = (char)0x33F6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWENTY_TWO = (char)0x33F5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DAY_TWO = (char)0x33E1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_DECEMBER = (char)0x32CB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_FEBRUARY = (char)0x32C1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_EIGHT = (char)0x3360;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_EIGHTEEN = (char)0x336A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_ELEVEN = (char)0x3363;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_FIFTEEN = (char)0x3367;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_FIVE = (char)0x335D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_FOUR = (char)0x335C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_FOURTEEN = (char)0x3366;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_NINE = (char)0x3361;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_NINETEEN = (char)0x336B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_ONE = (char)0x3359;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_SEVEN = (char)0x335F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_SEVENTEEN = (char)0x3369;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_SIX = (char)0x335E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_SIXTEEN = (char)0x3368;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_TEN = (char)0x3362;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_THIRTEEN = (char)0x3365;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_THREE = (char)0x335B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_TWELVE = (char)0x3364;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_TWENTY = (char)0x336C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_TWENTY_FOUR = (char)0x3370;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_TWENTY_ONE = (char)0x336D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_TWENTY_THREE = (char)0x336F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_TWENTY_TWO = (char)0x336E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_TWO = (char)0x335A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_HOUR_ZERO = (char)0x3358;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_JANUARY = (char)0x32C0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_JULY = (char)0x32C6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_JUNE = (char)0x32C5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_MARCH = (char)0x32C2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_MAY = (char)0x32C4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_NOVEMBER = (char)0x32CA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_OCTOBER = (char)0x32C9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char IDEOGRAPHIC_TELEGRAPH_SYMBOL_FOR_SEPTEMBER = (char)0x32C8;
			public const char IDEOGRAPHIC_VARIATION_INDICATOR = (char)0x303E;
			public const char IMAGE_OF = (char)0x22B7;
			public const char IMAGE_OF_OR_APPROXIMATELY_EQUAL_TO = (char)0x2253;
			public const char INCOMPLETE_INFINITY = (char)0x29DC;
			public const char INCREASES_AS = (char)0x29E1;
			public const char INCREMENT = (char)0x2206;
			public const char INFINITY = (char)0x221E;
			public const char INFINITY_NEGATED_WITH_VERTICAL_BAR = (char)0x29DE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char INFORMATION_SOURCE = (char)0x2139;
			public const char INHIBIT_ARABIC_FORM_SHAPING = (char)0x206C;
			public const char INHIBIT_SYMMETRIC_SWAPPING = (char)0x206A;
			public const char INSERTION_SYMBOL = (char)0x2380;
			public const char INTEGRAL = (char)0x222B;
			public const char INTEGRAL_AROUND_A_POINT_OPERATOR = (char)0x2A15;
			public const char INTEGRAL_AVERAGE_WITH_SLASH = (char)0x2A0F;
			public const char INTEGRAL_EXTENSION = (char)0x23AE;
			public const char INTEGRAL_WITH_DOUBLE_STROKE = (char)0x2A0E;
			public const char INTEGRAL_WITH_INTERSECTION = (char)0x2A19;
			public const char INTEGRAL_WITH_LEFTWARDS_ARROW_WITH_HOOK = (char)0x2A17;
			public const char INTEGRAL_WITH_OVERBAR = (char)0x2A1B;
			public const char INTEGRAL_WITH_TIMES_SIGN = (char)0x2A18;
			public const char INTEGRAL_WITH_UNDERBAR = (char)0x2A1C;
			public const char INTEGRAL_WITH_UNION = (char)0x2A1A;
			public const char INTERCALATE = (char)0x22BA;
			public const char INTERIOR_PRODUCT = (char)0x2A3C;
			public const char INTERLINEAR_ANNOTATION_ANCHOR = (char)0xFFF9;
			public const char INTERLINEAR_ANNOTATION_SEPARATOR = (char)0xFFFA;
			public const char INTERLINEAR_ANNOTATION_TERMINATOR = (char)0xFFFB;
			public const char INTERLOCKED_FEMALE_AND_MALE_SIGN = (char)0x26A4;
			public const char INTERROBANG = (char)0x203D;
			public const char INTERSECTION = (char)0x2229;
			public const char INTERSECTION_ABOVE_BAR_ABOVE_UNION = (char)0x2A49;
			public const char INTERSECTION_ABOVE_UNION = (char)0x2A47;
			public const char INTERSECTION_BESIDE_AND_JOINED_WITH_INTERSECTION = (char)0x2A4B;
			public const char INTERSECTION_WITH_DOT = (char)0x2A40;
			public const char INTERSECTION_WITH_LOGICAL_AND = (char)0x2A44;
			public const char INTERSECTION_WITH_OVERBAR = (char)0x2A43;
			public const char INVERSE_BULLET = (char)0x25D8;
			public const char INVERSE_WHITE_CIRCLE = (char)0x25D9;
			public const char INVERTED_EXCLAMATION_MARK = (char)0x00A1;
			public const char INVERTED_LAZY_S = (char)0x223E;
			/// <summary> Formerly MHO. </summary>
			public const char INVERTED_OHM_SIGN = (char)0x2127;
			public const char INVERTED_QUESTION_MARK = (char)0x00BF;
			public const char INVERTED_UNDERTIE = (char)0x2054;
			public const char INVISIBLE_SEPARATOR = (char)0x2063;
			public const char INVISIBLE_TIMES = (char)0x2062;
		}
		public class J {
			public const char JAPANESE_INDUSTRIAL_STANDARD_SYMBOL = (char)0x3004;
			public const char JOIN = (char)0x2A1D;
			public const char JUPITER = (char)0x2643;
		}
		public class K {
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_AGAIN = (char)0x2F1C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_AND = (char)0x2F7D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_ARRIVE = (char)0x2F84;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_ARROW = (char)0x2F6E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_AXE = (char)0x2F44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BADGER = (char)0x2F98;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BAMBOO = (char)0x2F75;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BEAN = (char)0x2F96;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BIG = (char)0x2F24;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BIRD = (char)0x2FC3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BITTER = (char)0x2F9F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BLACK = (char)0x2FCA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BLOOD = (char)0x2F8E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BLUE = (char)0x2FAD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BOAT = (char)0x2F88;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BODY = (char)0x2F9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BOLT_OF_CLOTH = (char)0x2F66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BONE = (char)0x2FBB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BOW = (char)0x2F38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BRANCH = (char)0x2F40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BRISTLE = (char)0x2F3A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_BRUSH = (char)0x2F80;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CART = (char)0x2F9E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CAULDRON = (char)0x2FC0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CAVE = (char)0x2F73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CHILD = (char)0x2F26;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CITY = (char)0x2FA2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CLAN = (char)0x2F52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CLAW = (char)0x2F56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CLIFF = (char)0x2F1A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CLOTHES = (char)0x2F90;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_COLOR = (char)0x2F8A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_COMPARE = (char)0x2F50;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_CORPSE = (char)0x2F2B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_COVER = (char)0x2F0D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_COW = (char)0x2F5C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DEATH = (char)0x2F4D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DEER = (char)0x2FC5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DIPPER = (char)0x2F43;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DISH = (char)0x2F6B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DISTINGUISH = (char)0x2FA4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DIVINATION = (char)0x2F18;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DOG = (char)0x2F5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DOOR = (char)0x2F3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DOT = (char)0x2F02;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DOTTED_CLIFF = (char)0x2F34;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DOTTED_TENT = (char)0x2F68;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DOUBLE_X = (char)0x2F58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DOWN_BOX = (char)0x2F0C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DO_NOT = (char)0x2F4F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DRAGON = (char)0x2FD3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DRUM = (char)0x2FCE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_DRY = (char)0x2F32;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_EAR = (char)0x2F7F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_EARTH = (char)0x2F1F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_EAT = (char)0x2FB7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_EIGHT = (char)0x2F0B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_EMBROIDERY = (char)0x2FCB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_ENCLOSURE = (char)0x2F1E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_ENTER = (char)0x2F0A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_EVEN = (char)0x2FD1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_EVENING = (char)0x2F23;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_EYE = (char)0x2F6C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FACE = (char)0x2FAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FANG = (char)0x2F5B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FATHER = (char)0x2F57;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FEATHER = (char)0x2F7B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FIELD = (char)0x2F65;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FIGHT = (char)0x2FBE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FIRE = (char)0x2F55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FISH = (char)0x2FC2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FLUTE = (char)0x2FD5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FLY = (char)0x2FB6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FOOT = (char)0x2F9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FRAGRANT = (char)0x2FB9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FROG = (char)0x2FCC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_FUR = (char)0x2F51;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_GATE = (char)0x2FA8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_GHOST = (char)0x2FC1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_GO = (char)0x2F21;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_GOLD = (char)0x2FA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_GO_SLOWLY = (char)0x2F22;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_GRAIN = (char)0x2F72;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_GRASS = (char)0x2F8B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HAIR = (char)0x2FBD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HALBERD = (char)0x2F3D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HALF_TREE_TRUNK = (char)0x2F59;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HAND = (char)0x2F3F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HEAD = (char)0x2FB8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HEART = (char)0x2F3C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HEMP = (char)0x2FC7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HIDING_ENCLOSURE = (char)0x2F16;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HOOK = (char)0x2F05;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HORN = (char)0x2F93;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_HORSE = (char)0x2FBA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_ICE = (char)0x2F0E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_INCH = (char)0x2F28;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_INSECT = (char)0x2F8D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_JADE = (char)0x2F5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_JAR = (char)0x2F78;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_KNIFE = (char)0x2F11;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LACK = (char)0x2F4B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LAME = (char)0x2F2A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LEAF = (char)0x2FB4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LEATHER = (char)0x2FB0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LEEK = (char)0x2FB2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LEGS = (char)0x2F09;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LID = (char)0x2F07;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LIFE = (char)0x2F63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LINE = (char)0x2F01;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LONG = (char)0x2FA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_LONG_STRIDE = (char)0x2F35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MAN = (char)0x2F08;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MEAT = (char)0x2F81;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MELON = (char)0x2F60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MILLET = (char)0x2FC9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MINISTER = (char)0x2F82;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MOON = (char)0x2F49;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MORNING = (char)0x2FA0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MORTAR = (char)0x2F85;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MOUND = (char)0x2FA9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MOUNTAIN = (char)0x2F2D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_MOUTH = (char)0x2F1D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_NET = (char)0x2F79;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_NOSE = (char)0x2FD0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_NOT = (char)0x2F46;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_OLD = (char)0x2F7C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_ONE = (char)0x2F00;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_ONESELF = (char)0x2F30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_OPEN_BOX = (char)0x2F10;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_OPPOSE = (char)0x2F87;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_PIG = (char)0x2F97;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_PLOW = (char)0x2F7E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_POWER = (char)0x2F12;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_PRIVATE = (char)0x2F1B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_PROFOUND = (char)0x2F5E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_RAIN = (char)0x2FAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_RAP = (char)0x2F41;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_RAT = (char)0x2FCF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_RED = (char)0x2F9A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_RICE = (char)0x2F76;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_RIGHT_OPEN_BOX = (char)0x2F15;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_RIVER = (char)0x2F2E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_ROOF = (char)0x2F27;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_RUN = (char)0x2F9B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SACRIFICIAL_WINE = (char)0x2FBF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SALT = (char)0x2FC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SAY = (char)0x2F48;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SCHOLAR = (char)0x2F20;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SCRIPT = (char)0x2F42;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SEAL = (char)0x2F19;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SECOND = (char)0x2F04;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SEE = (char)0x2F92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SELF = (char)0x2F83;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SHEEP = (char)0x2F7A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SHELL = (char)0x2F99;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SHOOT = (char)0x2F37;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SHORT_TAILED_BIRD = (char)0x2FAB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SHORT_THREAD = (char)0x2F33;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SICKNESS = (char)0x2F67;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SILK = (char)0x2F77;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SKIN = (char)0x2F6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SLASH = (char)0x2F03;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SLAVE = (char)0x2FAA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SLICE = (char)0x2F5A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SMALL = (char)0x2F29;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SNOUT = (char)0x2F39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SOUND = (char)0x2FB3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SPEAR = (char)0x2F6D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SPEECH = (char)0x2F94;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SPIRIT = (char)0x2F70;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SPOON = (char)0x2F14;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SPROUT = (char)0x2F2C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SQUARE = (char)0x2F45;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_STAND = (char)0x2F74;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_STEAM = (char)0x2F53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_STEP = (char)0x2F3B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_STONE = (char)0x2F6F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_STOP = (char)0x2F4C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_STOPPING = (char)0x2F89;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SUN = (char)0x2F47;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_SWEET = (char)0x2F62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TABLE = (char)0x2F0F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TALL = (char)0x2FBC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TANNED_LEATHER = (char)0x2FB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TEN = (char)0x2F17;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TIGER = (char)0x2F8C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TILE = (char)0x2F61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TONGUE = (char)0x2F86;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TOOTH = (char)0x2FD2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TRACK = (char)0x2F71;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TREE = (char)0x2F4A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TRIPOD = (char)0x2FCD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TURBAN = (char)0x2F31;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TURTLE = (char)0x2FD4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TWO = (char)0x2F06;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_TWO_HANDS = (char)0x2F36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_USE = (char)0x2F64;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_VALLEY = (char)0x2F95;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_VILLAGE = (char)0x2FA5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WALK = (char)0x2FA1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WALK_ENCLOSURE = (char)0x2F8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WATER = (char)0x2F54;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WEAPON = (char)0x2F4E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WEST = (char)0x2F91;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WHEAT = (char)0x2FC6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WHITE = (char)0x2F69;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WIND = (char)0x2FB5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WINE = (char)0x2FA3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WOMAN = (char)0x2F25;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WORK = (char)0x2F2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WRAP = (char)0x2F13;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_WRONG = (char)0x2FAE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANGXI_RADICAL_YELLOW = (char)0x2FC8;
			public const char KANNADA_AI_LENGTH_MARK = (char)0x0CD6;
			public const char KANNADA_DIGIT_EIGHT = (char)0x0CEE;
			public const char KANNADA_DIGIT_FIVE = (char)0x0CEB;
			public const char KANNADA_DIGIT_FOUR = (char)0x0CEA;
			public const char KANNADA_DIGIT_NINE = (char)0x0CEF;
			public const char KANNADA_DIGIT_ONE = (char)0x0CE7;
			public const char KANNADA_DIGIT_SEVEN = (char)0x0CED;
			public const char KANNADA_DIGIT_SIX = (char)0x0CEC;
			public const char KANNADA_DIGIT_THREE = (char)0x0CE9;
			public const char KANNADA_DIGIT_TWO = (char)0x0CE8;
			public const char KANNADA_DIGIT_ZERO = (char)0x0CE6;
			public const char KANNADA_LENGTH_MARK = (char)0x0CD5;
			public const char KANNADA_LETTER_A = (char)0x0C85;
			public const char KANNADA_LETTER_AA = (char)0x0C86;
			public const char KANNADA_LETTER_AI = (char)0x0C90;
			public const char KANNADA_LETTER_AU = (char)0x0C94;
			public const char KANNADA_LETTER_BA = (char)0x0CAC;
			public const char KANNADA_LETTER_BHA = (char)0x0CAD;
			public const char KANNADA_LETTER_CA = (char)0x0C9A;
			public const char KANNADA_LETTER_CHA = (char)0x0C9B;
			public const char KANNADA_LETTER_DA = (char)0x0CA6;
			public const char KANNADA_LETTER_DDA = (char)0x0CA1;
			public const char KANNADA_LETTER_DDHA = (char)0x0CA2;
			public const char KANNADA_LETTER_DHA = (char)0x0CA7;
			public const char KANNADA_LETTER_E = (char)0x0C8E;
			public const char KANNADA_LETTER_EE = (char)0x0C8F;
			public const char KANNADA_LETTER_FA = (char)0x0CDE;
			public const char KANNADA_LETTER_GA = (char)0x0C97;
			public const char KANNADA_LETTER_GHA = (char)0x0C98;
			public const char KANNADA_LETTER_HA = (char)0x0CB9;
			public const char KANNADA_LETTER_I = (char)0x0C87;
			public const char KANNADA_LETTER_II = (char)0x0C88;
			public const char KANNADA_LETTER_JA = (char)0x0C9C;
			public const char KANNADA_LETTER_JHA = (char)0x0C9D;
			public const char KANNADA_LETTER_KA = (char)0x0C95;
			public const char KANNADA_LETTER_KHA = (char)0x0C96;
			public const char KANNADA_LETTER_LA = (char)0x0CB2;
			public const char KANNADA_LETTER_LLA = (char)0x0CB3;
			public const char KANNADA_LETTER_MA = (char)0x0CAE;
			public const char KANNADA_LETTER_NA = (char)0x0CA8;
			public const char KANNADA_LETTER_NGA = (char)0x0C99;
			public const char KANNADA_LETTER_NNA = (char)0x0CA3;
			public const char KANNADA_LETTER_NYA = (char)0x0C9E;
			public const char KANNADA_LETTER_O = (char)0x0C92;
			public const char KANNADA_LETTER_OO = (char)0x0C93;
			public const char KANNADA_LETTER_PA = (char)0x0CAA;
			public const char KANNADA_LETTER_PHA = (char)0x0CAB;
			public const char KANNADA_LETTER_RA = (char)0x0CB0;
			public const char KANNADA_LETTER_RRA = (char)0x0CB1;
			public const char KANNADA_LETTER_SA = (char)0x0CB8;
			public const char KANNADA_LETTER_SHA = (char)0x0CB6;
			public const char KANNADA_LETTER_SSA = (char)0x0CB7;
			public const char KANNADA_LETTER_TA = (char)0x0CA4;
			public const char KANNADA_LETTER_THA = (char)0x0CA5;
			public const char KANNADA_LETTER_TTA = (char)0x0C9F;
			public const char KANNADA_LETTER_TTHA = (char)0x0CA0;
			public const char KANNADA_LETTER_U = (char)0x0C89;
			public const char KANNADA_LETTER_UU = (char)0x0C8A;
			public const char KANNADA_LETTER_VA = (char)0x0CB5;
			public const char KANNADA_LETTER_VOCALIC_L = (char)0x0C8C;
			public const char KANNADA_LETTER_VOCALIC_LL = (char)0x0CE1;
			public const char KANNADA_LETTER_VOCALIC_R = (char)0x0C8B;
			public const char KANNADA_LETTER_VOCALIC_RR = (char)0x0CE0;
			public const char KANNADA_LETTER_YA = (char)0x0CAF;
			public const char KANNADA_SIGN_ANUSVARA = (char)0x0C82;
			public const char KANNADA_SIGN_AVAGRAHA = (char)0x0CBD;
			public const char KANNADA_SIGN_NUKTA = (char)0x0CBC;
			public const char KANNADA_SIGN_VIRAMA = (char)0x0CCD;
			public const char KANNADA_SIGN_VISARGA = (char)0x0C83;
			public const char KANNADA_VOWEL_SIGN_AA = (char)0x0CBE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANNADA_VOWEL_SIGN_AI = (char)0x0CC8;
			public const char KANNADA_VOWEL_SIGN_AU = (char)0x0CCC;
			public const char KANNADA_VOWEL_SIGN_E = (char)0x0CC6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANNADA_VOWEL_SIGN_EE = (char)0x0CC7;
			public const char KANNADA_VOWEL_SIGN_I = (char)0x0CBF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANNADA_VOWEL_SIGN_II = (char)0x0CC0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANNADA_VOWEL_SIGN_O = (char)0x0CCA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KANNADA_VOWEL_SIGN_OO = (char)0x0CCB;
			public const char KANNADA_VOWEL_SIGN_U = (char)0x0CC1;
			public const char KANNADA_VOWEL_SIGN_UU = (char)0x0CC2;
			public const char KANNADA_VOWEL_SIGN_VOCALIC_R = (char)0x0CC3;
			public const char KANNADA_VOWEL_SIGN_VOCALIC_RR = (char)0x0CC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_DIGRAPH_KOTO = (char)0x30FF;
			public const char KATAKANA_HIRAGANA_DOUBLE_HYPHEN = (char)0x30A0;
			public const char KATAKANA_HIRAGANA_PROLONGED_SOUND_MARK = (char)0x30FC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_HIRAGANA_SEMI_VOICED_SOUND_MARK = (char)0x309C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_HIRAGANA_VOICED_SOUND_MARK = (char)0x309B;
			public const char KATAKANA_ITERATION_MARK = (char)0x30FD;
			public const char KATAKANA_LETTER_A = (char)0x30A2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_BA = (char)0x30D0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_BE = (char)0x30D9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_BI = (char)0x30D3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_BO = (char)0x30DC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_BU = (char)0x30D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_DA = (char)0x30C0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_DE = (char)0x30C7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_DI = (char)0x30C2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_DO = (char)0x30C9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_DU = (char)0x30C5;
			public const char KATAKANA_LETTER_E = (char)0x30A8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_GA = (char)0x30AC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_GE = (char)0x30B2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_GI = (char)0x30AE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_GO = (char)0x30B4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_GU = (char)0x30B0;
			public const char KATAKANA_LETTER_HA = (char)0x30CF;
			public const char KATAKANA_LETTER_HE = (char)0x30D8;
			public const char KATAKANA_LETTER_HI = (char)0x30D2;
			public const char KATAKANA_LETTER_HO = (char)0x30DB;
			public const char KATAKANA_LETTER_HU = (char)0x30D5;
			public const char KATAKANA_LETTER_I = (char)0x30A4;
			public const char KATAKANA_LETTER_KA = (char)0x30AB;
			public const char KATAKANA_LETTER_KE = (char)0x30B1;
			public const char KATAKANA_LETTER_KI = (char)0x30AD;
			public const char KATAKANA_LETTER_KO = (char)0x30B3;
			public const char KATAKANA_LETTER_KU = (char)0x30AF;
			public const char KATAKANA_LETTER_MA = (char)0x30DE;
			public const char KATAKANA_LETTER_ME = (char)0x30E1;
			public const char KATAKANA_LETTER_MI = (char)0x30DF;
			public const char KATAKANA_LETTER_MO = (char)0x30E2;
			public const char KATAKANA_LETTER_MU = (char)0x30E0;
			public const char KATAKANA_LETTER_N = (char)0x30F3;
			public const char KATAKANA_LETTER_NA = (char)0x30CA;
			public const char KATAKANA_LETTER_NE = (char)0x30CD;
			public const char KATAKANA_LETTER_NI = (char)0x30CB;
			public const char KATAKANA_LETTER_NO = (char)0x30CE;
			public const char KATAKANA_LETTER_NU = (char)0x30CC;
			public const char KATAKANA_LETTER_O = (char)0x30AA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_PA = (char)0x30D1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_PE = (char)0x30DA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_PI = (char)0x30D4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_PO = (char)0x30DD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_PU = (char)0x30D7;
			public const char KATAKANA_LETTER_RA = (char)0x30E9;
			public const char KATAKANA_LETTER_RE = (char)0x30EC;
			public const char KATAKANA_LETTER_RI = (char)0x30EA;
			public const char KATAKANA_LETTER_RO = (char)0x30ED;
			public const char KATAKANA_LETTER_RU = (char)0x30EB;
			public const char KATAKANA_LETTER_SA = (char)0x30B5;
			public const char KATAKANA_LETTER_SE = (char)0x30BB;
			public const char KATAKANA_LETTER_SI = (char)0x30B7;
			public const char KATAKANA_LETTER_SMALL_A = (char)0x30A1;
			public const char KATAKANA_LETTER_SMALL_E = (char)0x30A7;
			public const char KATAKANA_LETTER_SMALL_HA = (char)0x31F5;
			public const char KATAKANA_LETTER_SMALL_HE = (char)0x31F8;
			public const char KATAKANA_LETTER_SMALL_HI = (char)0x31F6;
			public const char KATAKANA_LETTER_SMALL_HO = (char)0x31F9;
			public const char KATAKANA_LETTER_SMALL_HU = (char)0x31F7;
			public const char KATAKANA_LETTER_SMALL_I = (char)0x30A3;
			public const char KATAKANA_LETTER_SMALL_KA = (char)0x30F5;
			public const char KATAKANA_LETTER_SMALL_KE = (char)0x30F6;
			public const char KATAKANA_LETTER_SMALL_KU = (char)0x31F0;
			public const char KATAKANA_LETTER_SMALL_MU = (char)0x31FA;
			public const char KATAKANA_LETTER_SMALL_NU = (char)0x31F4;
			public const char KATAKANA_LETTER_SMALL_O = (char)0x30A9;
			public const char KATAKANA_LETTER_SMALL_RA = (char)0x31FB;
			public const char KATAKANA_LETTER_SMALL_RE = (char)0x31FE;
			public const char KATAKANA_LETTER_SMALL_RI = (char)0x31FC;
			public const char KATAKANA_LETTER_SMALL_RO = (char)0x31FF;
			public const char KATAKANA_LETTER_SMALL_RU = (char)0x31FD;
			public const char KATAKANA_LETTER_SMALL_SI = (char)0x31F1;
			public const char KATAKANA_LETTER_SMALL_SU = (char)0x31F2;
			public const char KATAKANA_LETTER_SMALL_TO = (char)0x31F3;
			public const char KATAKANA_LETTER_SMALL_TU = (char)0x30C3;
			public const char KATAKANA_LETTER_SMALL_U = (char)0x30A5;
			public const char KATAKANA_LETTER_SMALL_WA = (char)0x30EE;
			public const char KATAKANA_LETTER_SMALL_YA = (char)0x30E3;
			public const char KATAKANA_LETTER_SMALL_YO = (char)0x30E7;
			public const char KATAKANA_LETTER_SMALL_YU = (char)0x30E5;
			public const char KATAKANA_LETTER_SO = (char)0x30BD;
			public const char KATAKANA_LETTER_SU = (char)0x30B9;
			public const char KATAKANA_LETTER_TA = (char)0x30BF;
			public const char KATAKANA_LETTER_TE = (char)0x30C6;
			public const char KATAKANA_LETTER_TI = (char)0x30C1;
			public const char KATAKANA_LETTER_TO = (char)0x30C8;
			public const char KATAKANA_LETTER_TU = (char)0x30C4;
			public const char KATAKANA_LETTER_U = (char)0x30A6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_VA = (char)0x30F7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_VE = (char)0x30F9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_VI = (char)0x30F8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_VO = (char)0x30FA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_VU = (char)0x30F4;
			public const char KATAKANA_LETTER_WA = (char)0x30EF;
			public const char KATAKANA_LETTER_WE = (char)0x30F1;
			public const char KATAKANA_LETTER_WI = (char)0x30F0;
			public const char KATAKANA_LETTER_WO = (char)0x30F2;
			public const char KATAKANA_LETTER_YA = (char)0x30E4;
			public const char KATAKANA_LETTER_YO = (char)0x30E8;
			public const char KATAKANA_LETTER_YU = (char)0x30E6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_ZA = (char)0x30B6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_ZE = (char)0x30BC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_ZI = (char)0x30B8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_ZO = (char)0x30BE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_LETTER_ZU = (char)0x30BA;
			public const char KATAKANA_MIDDLE_DOT = (char)0x30FB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char KATAKANA_VOICED_ITERATION_MARK = (char)0x30FE;
			/// <summary> (This is a composition; consider avoiding.) Formerly DEGREES KELVIN. </summary>
			public const char KELVIN_SIGN = (char)0x212A;
			public const char KEYBOARD = (char)0x2328;
			public const char KHMER_CURRENCY_SYMBOL_RIEL = (char)0x17DB;
			public const char KHMER_DIGIT_EIGHT = (char)0x17E8;
			public const char KHMER_DIGIT_FIVE = (char)0x17E5;
			public const char KHMER_DIGIT_FOUR = (char)0x17E4;
			public const char KHMER_DIGIT_NINE = (char)0x17E9;
			public const char KHMER_DIGIT_ONE = (char)0x17E1;
			public const char KHMER_DIGIT_SEVEN = (char)0x17E7;
			public const char KHMER_DIGIT_SIX = (char)0x17E6;
			public const char KHMER_DIGIT_THREE = (char)0x17E3;
			public const char KHMER_DIGIT_TWO = (char)0x17E2;
			public const char KHMER_DIGIT_ZERO = (char)0x17E0;
			public const char KHMER_INDEPENDENT_VOWEL_LY = (char)0x17AD;
			public const char KHMER_INDEPENDENT_VOWEL_LYY = (char)0x17AE;
			public const char KHMER_INDEPENDENT_VOWEL_QAA = (char)0x17A4;
			public const char KHMER_INDEPENDENT_VOWEL_QAI = (char)0x17B0;
			public const char KHMER_INDEPENDENT_VOWEL_QAQ = (char)0x17A3;
			public const char KHMER_INDEPENDENT_VOWEL_QAU = (char)0x17B3;
			public const char KHMER_INDEPENDENT_VOWEL_QE = (char)0x17AF;
			public const char KHMER_INDEPENDENT_VOWEL_QI = (char)0x17A5;
			public const char KHMER_INDEPENDENT_VOWEL_QII = (char)0x17A6;
			public const char KHMER_INDEPENDENT_VOWEL_QOO_TYPE_ONE = (char)0x17B1;
			public const char KHMER_INDEPENDENT_VOWEL_QOO_TYPE_TWO = (char)0x17B2;
			public const char KHMER_INDEPENDENT_VOWEL_QU = (char)0x17A7;
			public const char KHMER_INDEPENDENT_VOWEL_QUK = (char)0x17A8;
			public const char KHMER_INDEPENDENT_VOWEL_QUU = (char)0x17A9;
			public const char KHMER_INDEPENDENT_VOWEL_QUUV = (char)0x17AA;
			public const char KHMER_INDEPENDENT_VOWEL_RY = (char)0x17AB;
			public const char KHMER_INDEPENDENT_VOWEL_RYY = (char)0x17AC;
			public const char KHMER_LETTER_BA = (char)0x1794;
			public const char KHMER_LETTER_CA = (char)0x1785;
			public const char KHMER_LETTER_CHA = (char)0x1786;
			public const char KHMER_LETTER_CHO = (char)0x1788;
			public const char KHMER_LETTER_CO = (char)0x1787;
			public const char KHMER_LETTER_DA = (char)0x178A;
			public const char KHMER_LETTER_DO = (char)0x178C;
			public const char KHMER_LETTER_HA = (char)0x17A0;
			public const char KHMER_LETTER_KA = (char)0x1780;
			public const char KHMER_LETTER_KHA = (char)0x1781;
			public const char KHMER_LETTER_KHO = (char)0x1783;
			public const char KHMER_LETTER_KO = (char)0x1782;
			public const char KHMER_LETTER_LA = (char)0x17A1;
			public const char KHMER_LETTER_LO = (char)0x179B;
			public const char KHMER_LETTER_MO = (char)0x1798;
			public const char KHMER_LETTER_NGO = (char)0x1784;
			public const char KHMER_LETTER_NNO = (char)0x178E;
			public const char KHMER_LETTER_NO = (char)0x1793;
			public const char KHMER_LETTER_NYO = (char)0x1789;
			public const char KHMER_LETTER_PHA = (char)0x1795;
			public const char KHMER_LETTER_PHO = (char)0x1797;
			public const char KHMER_LETTER_PO = (char)0x1796;
			public const char KHMER_LETTER_QA = (char)0x17A2;
			public const char KHMER_LETTER_RO = (char)0x179A;
			public const char KHMER_LETTER_SA = (char)0x179F;
			public const char KHMER_LETTER_SHA = (char)0x179D;
			public const char KHMER_LETTER_SSO = (char)0x179E;
			public const char KHMER_LETTER_TA = (char)0x178F;
			public const char KHMER_LETTER_THA = (char)0x1790;
			public const char KHMER_LETTER_THO = (char)0x1792;
			public const char KHMER_LETTER_TO = (char)0x1791;
			public const char KHMER_LETTER_TTHA = (char)0x178B;
			public const char KHMER_LETTER_TTHO = (char)0x178D;
			public const char KHMER_LETTER_VO = (char)0x179C;
			public const char KHMER_LETTER_YO = (char)0x1799;
			public const char KHMER_SIGN_AHSDA = (char)0x17CF;
			public const char KHMER_SIGN_ATTHACAN = (char)0x17DD;
			public const char KHMER_SIGN_AVAKRAHASANYA = (char)0x17DC;
			public const char KHMER_SIGN_BANTOC = (char)0x17CB;
			public const char KHMER_SIGN_BARIYOOSAN = (char)0x17D5;
			public const char KHMER_SIGN_BATHAMASAT = (char)0x17D3;
			public const char KHMER_SIGN_BEYYAL = (char)0x17D8;
			public const char KHMER_SIGN_CAMNUC_PII_KUUH = (char)0x17D6;
			public const char KHMER_SIGN_COENG = (char)0x17D2;
			public const char KHMER_SIGN_KAKABAT = (char)0x17CE;
			public const char KHMER_SIGN_KHAN = (char)0x17D4;
			public const char KHMER_SIGN_KOOMUUT = (char)0x17DA;
			public const char KHMER_SIGN_LEK_TOO = (char)0x17D7;
			public const char KHMER_SIGN_MUUSIKATOAN = (char)0x17C9;
			public const char KHMER_SIGN_NIKAHIT = (char)0x17C6;
			public const char KHMER_SIGN_PHNAEK_MUAN = (char)0x17D9;
			public const char KHMER_SIGN_REAHMUK = (char)0x17C7;
			public const char KHMER_SIGN_ROBAT = (char)0x17CC;
			public const char KHMER_SIGN_SAMYOK_SANNYA = (char)0x17D0;
			public const char KHMER_SIGN_TOANDAKHIAT = (char)0x17CD;
			public const char KHMER_SIGN_TRIISAP = (char)0x17CA;
			public const char KHMER_SIGN_VIRIAM = (char)0x17D1;
			public const char KHMER_SIGN_YUUKALEAPINTU = (char)0x17C8;
			public const char KHMER_SYMBOL_BEI_KOET = (char)0x19E3;
			public const char KHMER_SYMBOL_BEI_ROC = (char)0x19F3;
			public const char KHMER_SYMBOL_BUON_KOET = (char)0x19E4;
			public const char KHMER_SYMBOL_BUON_ROC = (char)0x19F4;
			public const char KHMER_SYMBOL_DAP_BEI_KOET = (char)0x19ED;
			public const char KHMER_SYMBOL_DAP_BEI_ROC = (char)0x19FD;
			public const char KHMER_SYMBOL_DAP_BUON_KOET = (char)0x19EE;
			public const char KHMER_SYMBOL_DAP_BUON_ROC = (char)0x19FE;
			public const char KHMER_SYMBOL_DAP_KOET = (char)0x19EA;
			public const char KHMER_SYMBOL_DAP_MUOY_KOET = (char)0x19EB;
			public const char KHMER_SYMBOL_DAP_MUOY_ROC = (char)0x19FB;
			public const char KHMER_SYMBOL_DAP_PII_KOET = (char)0x19EC;
			public const char KHMER_SYMBOL_DAP_PII_ROC = (char)0x19FC;
			public const char KHMER_SYMBOL_DAP_PRAM_KOET = (char)0x19EF;
			public const char KHMER_SYMBOL_DAP_PRAM_ROC = (char)0x19FF;
			public const char KHMER_SYMBOL_DAP_ROC = (char)0x19FA;
			public const char KHMER_SYMBOL_LEK_ATTAK_BEI = (char)0x17F3;
			public const char KHMER_SYMBOL_LEK_ATTAK_BUON = (char)0x17F4;
			public const char KHMER_SYMBOL_LEK_ATTAK_MUOY = (char)0x17F1;
			public const char KHMER_SYMBOL_LEK_ATTAK_PII = (char)0x17F2;
			public const char KHMER_SYMBOL_LEK_ATTAK_PRAM = (char)0x17F5;
			public const char KHMER_SYMBOL_LEK_ATTAK_PRAM_BEI = (char)0x17F8;
			public const char KHMER_SYMBOL_LEK_ATTAK_PRAM_BUON = (char)0x17F9;
			public const char KHMER_SYMBOL_LEK_ATTAK_PRAM_MUOY = (char)0x17F6;
			public const char KHMER_SYMBOL_LEK_ATTAK_PRAM_PII = (char)0x17F7;
			public const char KHMER_SYMBOL_LEK_ATTAK_SON = (char)0x17F0;
			public const char KHMER_SYMBOL_MUOY_KOET = (char)0x19E1;
			public const char KHMER_SYMBOL_MUOY_ROC = (char)0x19F1;
			public const char KHMER_SYMBOL_PATHAMASAT = (char)0x19E0;
			public const char KHMER_SYMBOL_PII_KOET = (char)0x19E2;
			public const char KHMER_SYMBOL_PII_ROC = (char)0x19F2;
			public const char KHMER_SYMBOL_PRAM_BEI_KOET = (char)0x19E8;
			public const char KHMER_SYMBOL_PRAM_BEI_ROC = (char)0x19F8;
			public const char KHMER_SYMBOL_PRAM_BUON_KOET = (char)0x19E9;
			public const char KHMER_SYMBOL_PRAM_BUON_ROC = (char)0x19F9;
			public const char KHMER_SYMBOL_PRAM_KOET = (char)0x19E5;
			public const char KHMER_SYMBOL_PRAM_MUOY_KOET = (char)0x19E6;
			public const char KHMER_SYMBOL_PRAM_MUOY_ROC = (char)0x19F6;
			public const char KHMER_SYMBOL_PRAM_PII_KOET = (char)0x19E7;
			public const char KHMER_SYMBOL_PRAM_PII_ROC = (char)0x19F7;
			public const char KHMER_SYMBOL_PRAM_ROC = (char)0x19F5;
			public const char KHMER_SYMBOL_TUTEYASAT = (char)0x19F0;
			public const char KHMER_VOWEL_INHERENT_AA = (char)0x17B5;
			public const char KHMER_VOWEL_INHERENT_AQ = (char)0x17B4;
			public const char KHMER_VOWEL_SIGN_AA = (char)0x17B6;
			public const char KHMER_VOWEL_SIGN_AE = (char)0x17C2;
			public const char KHMER_VOWEL_SIGN_AI = (char)0x17C3;
			public const char KHMER_VOWEL_SIGN_AU = (char)0x17C5;
			public const char KHMER_VOWEL_SIGN_E = (char)0x17C1;
			public const char KHMER_VOWEL_SIGN_I = (char)0x17B7;
			public const char KHMER_VOWEL_SIGN_IE = (char)0x17C0;
			public const char KHMER_VOWEL_SIGN_II = (char)0x17B8;
			public const char KHMER_VOWEL_SIGN_OE = (char)0x17BE;
			public const char KHMER_VOWEL_SIGN_OO = (char)0x17C4;
			public const char KHMER_VOWEL_SIGN_U = (char)0x17BB;
			public const char KHMER_VOWEL_SIGN_UA = (char)0x17BD;
			public const char KHMER_VOWEL_SIGN_UU = (char)0x17BC;
			public const char KHMER_VOWEL_SIGN_Y = (char)0x17B9;
			public const char KHMER_VOWEL_SIGN_YA = (char)0x17BF;
			public const char KHMER_VOWEL_SIGN_YY = (char)0x17BA;
			public const char KIP_SIGN = (char)0x20AD;
			public const char KOREAN_STANDARD_SYMBOL = (char)0x327F;
		}
		public class L {
			public const char LAO_CANCELLATION_MARK = (char)0x0ECC;
			public const char LAO_DIGIT_EIGHT = (char)0x0ED8;
			public const char LAO_DIGIT_FIVE = (char)0x0ED5;
			public const char LAO_DIGIT_FOUR = (char)0x0ED4;
			public const char LAO_DIGIT_NINE = (char)0x0ED9;
			public const char LAO_DIGIT_ONE = (char)0x0ED1;
			public const char LAO_DIGIT_SEVEN = (char)0x0ED7;
			public const char LAO_DIGIT_SIX = (char)0x0ED6;
			public const char LAO_DIGIT_THREE = (char)0x0ED3;
			public const char LAO_DIGIT_TWO = (char)0x0ED2;
			public const char LAO_DIGIT_ZERO = (char)0x0ED0;
			public const char LAO_ELLIPSIS = (char)0x0EAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LAO_HO_MO = (char)0x0EDD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LAO_HO_NO = (char)0x0EDC;
			public const char LAO_KO_LA = (char)0x0EC6;
			public const char LAO_LETTER_BO = (char)0x0E9A;
			public const char LAO_LETTER_CO = (char)0x0E88;
			public const char LAO_LETTER_DO = (char)0x0E94;
			public const char LAO_LETTER_FO_SUNG = (char)0x0E9F;
			public const char LAO_LETTER_FO_TAM = (char)0x0E9D;
			public const char LAO_LETTER_HO_SUNG = (char)0x0EAB;
			public const char LAO_LETTER_HO_TAM = (char)0x0EAE;
			public const char LAO_LETTER_KHO_SUNG = (char)0x0E82;
			public const char LAO_LETTER_KHO_TAM = (char)0x0E84;
			public const char LAO_LETTER_KO = (char)0x0E81;
			public const char LAO_LETTER_LO_LING = (char)0x0EA3;
			public const char LAO_LETTER_LO_LOOT = (char)0x0EA5;
			public const char LAO_LETTER_MO = (char)0x0EA1;
			public const char LAO_LETTER_NGO = (char)0x0E87;
			public const char LAO_LETTER_NO = (char)0x0E99;
			public const char LAO_LETTER_NYO = (char)0x0E8D;
			public const char LAO_LETTER_O = (char)0x0EAD;
			public const char LAO_LETTER_PHO_SUNG = (char)0x0E9C;
			public const char LAO_LETTER_PHO_TAM = (char)0x0E9E;
			public const char LAO_LETTER_PO = (char)0x0E9B;
			public const char LAO_LETTER_SO_SUNG = (char)0x0EAA;
			public const char LAO_LETTER_SO_TAM = (char)0x0E8A;
			public const char LAO_LETTER_THO_SUNG = (char)0x0E96;
			public const char LAO_LETTER_THO_TAM = (char)0x0E97;
			public const char LAO_LETTER_TO = (char)0x0E95;
			public const char LAO_LETTER_WO = (char)0x0EA7;
			public const char LAO_LETTER_YO = (char)0x0EA2;
			public const char LAO_NIGGAHITA = (char)0x0ECD;
			public const char LAO_SEMIVOWEL_SIGN_LO = (char)0x0EBC;
			public const char LAO_SEMIVOWEL_SIGN_NYO = (char)0x0EBD;
			public const char LAO_TONE_MAI_CATAWA = (char)0x0ECB;
			public const char LAO_TONE_MAI_EK = (char)0x0EC8;
			public const char LAO_TONE_MAI_THO = (char)0x0EC9;
			public const char LAO_TONE_MAI_TI = (char)0x0ECA;
			public const char LAO_VOWEL_SIGN_A = (char)0x0EB0;
			public const char LAO_VOWEL_SIGN_AA = (char)0x0EB2;
			public const char LAO_VOWEL_SIGN_AI = (char)0x0EC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LAO_VOWEL_SIGN_AM = (char)0x0EB3;
			public const char LAO_VOWEL_SIGN_AY = (char)0x0EC3;
			public const char LAO_VOWEL_SIGN_E = (char)0x0EC0;
			public const char LAO_VOWEL_SIGN_EI = (char)0x0EC1;
			public const char LAO_VOWEL_SIGN_I = (char)0x0EB4;
			public const char LAO_VOWEL_SIGN_II = (char)0x0EB5;
			public const char LAO_VOWEL_SIGN_MAI_KAN = (char)0x0EB1;
			public const char LAO_VOWEL_SIGN_MAI_KON = (char)0x0EBB;
			public const char LAO_VOWEL_SIGN_O = (char)0x0EC2;
			public const char LAO_VOWEL_SIGN_U = (char)0x0EB8;
			public const char LAO_VOWEL_SIGN_UU = (char)0x0EB9;
			public const char LAO_VOWEL_SIGN_Y = (char)0x0EB6;
			public const char LAO_VOWEL_SIGN_YY = (char)0x0EB7;
			public const char LARGER_THAN = (char)0x2AAB;
			public const char LARGER_THAN_OR_EQUAL_TO = (char)0x2AAD;
			public const char LARGE_CIRCLE = (char)0x25EF;
			public const char LARGE_DOWN_TACK = (char)0x27D9;
			public const char LARGE_LEFT_TRIANGLE_OPERATOR = (char)0x2A1E;
			public const char LARGE_TRIPLE_VERTICAL_BAR_OPERATOR = (char)0x2AFC;
			public const char LARGE_UP_TACK = (char)0x27D8;
			public const char LAST_QUARTER_MOON = (char)0x263E;
			public const char LATIN_CAPITAL_LETTER_A = (char)0x0041;
			/// <summary> Formerly LATIN CAPITAL LETTER A E. </summary>
			public const char LATIN_CAPITAL_LETTER_AE = (char)0x00C6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_AE_WITH_ACUTE = (char)0x01FC;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A E MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_AE_WITH_MACRON = (char)0x01E2;
			public const char LATIN_CAPITAL_LETTER_AFRICAN_D = (char)0x0189;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_ACUTE = (char)0x00C1;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A BREVE. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_BREVE = (char)0x0102;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_BREVE_AND_ACUTE = (char)0x1EAE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_BREVE_AND_DOT_BELOW = (char)0x1EB6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_BREVE_AND_GRAVE = (char)0x1EB0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_BREVE_AND_HOOK_ABOVE = (char)0x1EB2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_BREVE_AND_TILDE = (char)0x1EB4;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_CARON = (char)0x01CD;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX = (char)0x00C2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX_AND_ACUTE = (char)0x1EA4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX_AND_DOT_BELOW = (char)0x1EAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX_AND_GRAVE = (char)0x1EA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX_AND_HOOK_ABOVE = (char)0x1EA8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_CIRCUMFLEX_AND_TILDE = (char)0x1EAA;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A DIAERESIS. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS = (char)0x00C4;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A DIAERESIS MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_DIAERESIS_AND_MACRON = (char)0x01DE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_DOT_ABOVE = (char)0x0226;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A DOT MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_DOT_ABOVE_AND_MACRON = (char)0x01E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_DOT_BELOW = (char)0x1EA0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_DOUBLE_GRAVE = (char)0x0200;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A GRAVE. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_GRAVE = (char)0x00C0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_HOOK_ABOVE = (char)0x1EA2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_INVERTED_BREVE = (char)0x0202;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_MACRON = (char)0x0100;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A OGONEK. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_OGONEK = (char)0x0104;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A RING. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE = (char)0x00C5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_RING_ABOVE_AND_ACUTE = (char)0x01FA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_RING_BELOW = (char)0x1E00;
			public const char LATIN_CAPITAL_LETTER_A_WITH_STROKE = (char)0x023A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER A TILDE. </summary>
			public const char LATIN_CAPITAL_LETTER_A_WITH_TILDE = (char)0x00C3;
			public const char LATIN_CAPITAL_LETTER_B = (char)0x0042;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_B_WITH_DOT_ABOVE = (char)0x1E02;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_B_WITH_DOT_BELOW = (char)0x1E04;
			/// <summary> Formerly LATIN CAPITAL LETTER B HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_B_WITH_HOOK = (char)0x0181;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_B_WITH_LINE_BELOW = (char)0x1E06;
			/// <summary> Formerly LATIN CAPITAL LETTER B TOPBAR. </summary>
			public const char LATIN_CAPITAL_LETTER_B_WITH_TOPBAR = (char)0x0182;
			public const char LATIN_CAPITAL_LETTER_C = (char)0x0043;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER C ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_C_WITH_ACUTE = (char)0x0106;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER C HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_C_WITH_CARON = (char)0x010C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER C CEDILLA. </summary>
			public const char LATIN_CAPITAL_LETTER_C_WITH_CEDILLA = (char)0x00C7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_C_WITH_CEDILLA_AND_ACUTE = (char)0x1E08;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER C CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_C_WITH_CIRCUMFLEX = (char)0x0108;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER C DOT. </summary>
			public const char LATIN_CAPITAL_LETTER_C_WITH_DOT_ABOVE = (char)0x010A;
			/// <summary> Formerly LATIN CAPITAL LETTER C HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_C_WITH_HOOK = (char)0x0187;
			public const char LATIN_CAPITAL_LETTER_C_WITH_STROKE = (char)0x023B;
			public const char LATIN_CAPITAL_LETTER_D = (char)0x0044;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_DZ = (char)0x01F1;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER D Z HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_DZ_WITH_CARON = (char)0x01C4;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER D HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_CARON = (char)0x010E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_CEDILLA = (char)0x1E10;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_CIRCUMFLEX_BELOW = (char)0x1E12;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_DOT_ABOVE = (char)0x1E0A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_DOT_BELOW = (char)0x1E0C;
			/// <summary> Formerly LATIN CAPITAL LETTER D HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_HOOK = (char)0x018A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_LINE_BELOW = (char)0x1E0E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_SMALL_LETTER_Z = (char)0x01F2;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN LETTER CAPITAL D SMALL Z HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_SMALL_LETTER_Z_WITH_CARON = (char)0x01C5;
			/// <summary> Formerly LATIN CAPITAL LETTER D BAR. </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_STROKE = (char)0x0110;
			/// <summary> Formerly LATIN CAPITAL LETTER D TOPBAR. </summary>
			public const char LATIN_CAPITAL_LETTER_D_WITH_TOPBAR = (char)0x018B;
			public const char LATIN_CAPITAL_LETTER_E = (char)0x0045;
			public const char LATIN_CAPITAL_LETTER_ENG = (char)0x014A;
			public const char LATIN_CAPITAL_LETTER_ESH = (char)0x01A9;
			public const char LATIN_CAPITAL_LETTER_ETH = (char)0x00D0;
			/// <summary> Formerly LATIN CAPITAL LETTER YOGH. </summary>
			public const char LATIN_CAPITAL_LETTER_EZH = (char)0x01B7;
			/// <summary> Formerly LATIN CAPITAL LETTER REVERSED YOGH. </summary>
			public const char LATIN_CAPITAL_LETTER_EZH_REVERSED = (char)0x01B8;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER YOGH HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_EZH_WITH_CARON = (char)0x01EE;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_ACUTE = (char)0x00C9;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E BREVE. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_BREVE = (char)0x0114;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CARON = (char)0x011A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CEDILLA = (char)0x0228;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CEDILLA_AND_BREVE = (char)0x1E1C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX = (char)0x00CA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX_AND_ACUTE = (char)0x1EBE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX_AND_DOT_BELOW = (char)0x1EC6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX_AND_GRAVE = (char)0x1EC0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX_AND_HOOK_ABOVE = (char)0x1EC2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX_AND_TILDE = (char)0x1EC4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_CIRCUMFLEX_BELOW = (char)0x1E18;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E DIAERESIS. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_DIAERESIS = (char)0x00CB;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E DOT. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_DOT_ABOVE = (char)0x0116;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_DOT_BELOW = (char)0x1EB8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_DOUBLE_GRAVE = (char)0x0204;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E GRAVE. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_GRAVE = (char)0x00C8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_HOOK_ABOVE = (char)0x1EBA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_INVERTED_BREVE = (char)0x0206;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_MACRON = (char)0x0112;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_MACRON_AND_ACUTE = (char)0x1E16;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_MACRON_AND_GRAVE = (char)0x1E14;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER E OGONEK. </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_OGONEK = (char)0x0118;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_TILDE = (char)0x1EBC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_E_WITH_TILDE_BELOW = (char)0x1E1A;
			public const char LATIN_CAPITAL_LETTER_F = (char)0x0046;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_F_WITH_DOT_ABOVE = (char)0x1E1E;
			/// <summary> Formerly LATIN CAPITAL LETTER F HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_F_WITH_HOOK = (char)0x0191;
			public const char LATIN_CAPITAL_LETTER_G = (char)0x0047;
			public const char LATIN_CAPITAL_LETTER_GAMMA = (char)0x0194;
			public const char LATIN_CAPITAL_LETTER_GLOTTAL_STOP = (char)0x0241;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_ACUTE = (char)0x01F4;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER G BREVE. </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_BREVE = (char)0x011E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER G HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_CARON = (char)0x01E6;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER G CEDILLA. </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_CEDILLA = (char)0x0122;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER G CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_CIRCUMFLEX = (char)0x011C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER G DOT. </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_DOT_ABOVE = (char)0x0120;
			/// <summary> Formerly LATIN CAPITAL LETTER G HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_HOOK = (char)0x0193;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_MACRON = (char)0x1E20;
			/// <summary> Formerly LATIN CAPITAL LETTER G BAR. </summary>
			public const char LATIN_CAPITAL_LETTER_G_WITH_STROKE = (char)0x01E4;
			public const char LATIN_CAPITAL_LETTER_H = (char)0x0048;
			public const char LATIN_CAPITAL_LETTER_HWAIR = (char)0x01F6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_H_WITH_BREVE_BELOW = (char)0x1E2A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_H_WITH_CARON = (char)0x021E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_H_WITH_CEDILLA = (char)0x1E28;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER H CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_H_WITH_CIRCUMFLEX = (char)0x0124;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_H_WITH_DIAERESIS = (char)0x1E26;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_H_WITH_DOT_ABOVE = (char)0x1E22;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_H_WITH_DOT_BELOW = (char)0x1E24;
			/// <summary> Formerly LATIN CAPITAL LETTER H BAR. </summary>
			public const char LATIN_CAPITAL_LETTER_H_WITH_STROKE = (char)0x0126;
			public const char LATIN_CAPITAL_LETTER_I = (char)0x0049;
			public const char LATIN_CAPITAL_LETTER_IOTA = (char)0x0196;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_ACUTE = (char)0x00CD;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I BREVE. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_BREVE = (char)0x012C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_CARON = (char)0x01CF;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_CIRCUMFLEX = (char)0x00CE;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I DIAERESIS. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS = (char)0x00CF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_DIAERESIS_AND_ACUTE = (char)0x1E2E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I DOT. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_DOT_ABOVE = (char)0x0130;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_DOT_BELOW = (char)0x1ECA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_DOUBLE_GRAVE = (char)0x0208;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I GRAVE. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_GRAVE = (char)0x00CC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_HOOK_ABOVE = (char)0x1EC8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_INVERTED_BREVE = (char)0x020A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_MACRON = (char)0x012A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I OGONEK. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_OGONEK = (char)0x012E;
			/// <summary> Formerly LATIN CAPITAL LETTER BARRED I. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_STROKE = (char)0x0197;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I TILDE. </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_TILDE = (char)0x0128;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_I_WITH_TILDE_BELOW = (char)0x1E2C;
			public const char LATIN_CAPITAL_LETTER_J = (char)0x004A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER J CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_J_WITH_CIRCUMFLEX = (char)0x0134;
			public const char LATIN_CAPITAL_LETTER_K = (char)0x004B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_K_WITH_ACUTE = (char)0x1E30;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER K HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_K_WITH_CARON = (char)0x01E8;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER K CEDILLA. </summary>
			public const char LATIN_CAPITAL_LETTER_K_WITH_CEDILLA = (char)0x0136;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_K_WITH_DOT_BELOW = (char)0x1E32;
			/// <summary> Formerly LATIN CAPITAL LETTER K HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_K_WITH_HOOK = (char)0x0198;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_K_WITH_LINE_BELOW = (char)0x1E34;
			public const char LATIN_CAPITAL_LETTER_L = (char)0x004C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER L J. </summary>
			public const char LATIN_CAPITAL_LETTER_LJ = (char)0x01C7;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER L ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_ACUTE = (char)0x0139;
			public const char LATIN_CAPITAL_LETTER_L_WITH_BAR = (char)0x023D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER L HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_CARON = (char)0x013D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER L CEDILLA. </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_CEDILLA = (char)0x013B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_CIRCUMFLEX_BELOW = (char)0x1E3C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_DOT_BELOW = (char)0x1E36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_DOT_BELOW_AND_MACRON = (char)0x1E38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_LINE_BELOW = (char)0x1E3A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_MIDDLE_DOT = (char)0x013F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN LETTER CAPITAL L SMALL J. </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_SMALL_LETTER_J = (char)0x01C8;
			/// <summary> Formerly LATIN CAPITAL LETTER L SLASH. </summary>
			public const char LATIN_CAPITAL_LETTER_L_WITH_STROKE = (char)0x0141;
			public const char LATIN_CAPITAL_LETTER_M = (char)0x004D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_M_WITH_ACUTE = (char)0x1E3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_M_WITH_DOT_ABOVE = (char)0x1E40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_M_WITH_DOT_BELOW = (char)0x1E42;
			public const char LATIN_CAPITAL_LETTER_N = (char)0x004E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER N J. </summary>
			public const char LATIN_CAPITAL_LETTER_NJ = (char)0x01CA;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER N ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_ACUTE = (char)0x0143;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER N HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_CARON = (char)0x0147;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER N CEDILLA. </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_CEDILLA = (char)0x0145;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_CIRCUMFLEX_BELOW = (char)0x1E4A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_DOT_ABOVE = (char)0x1E44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_DOT_BELOW = (char)0x1E46;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_GRAVE = (char)0x01F8;
			/// <summary> Formerly LATIN CAPITAL LETTER N HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_LEFT_HOOK = (char)0x019D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_LINE_BELOW = (char)0x1E48;
			public const char LATIN_CAPITAL_LETTER_N_WITH_LONG_RIGHT_LEG = (char)0x0220;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN LETTER CAPITAL N SMALL J. </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_SMALL_LETTER_J = (char)0x01CB;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER N TILDE. </summary>
			public const char LATIN_CAPITAL_LETTER_N_WITH_TILDE = (char)0x00D1;
			public const char LATIN_CAPITAL_LETTER_O = (char)0x004F;
			/// <summary> Formerly LATIN CAPITAL LETTER O I. </summary>
			public const char LATIN_CAPITAL_LETTER_OI = (char)0x01A2;
			/// <summary> Formerly LATIN CAPITAL LETTER EPSILON. </summary>
			public const char LATIN_CAPITAL_LETTER_OPEN_E = (char)0x0190;
			public const char LATIN_CAPITAL_LETTER_OPEN_O = (char)0x0186;
			public const char LATIN_CAPITAL_LETTER_OU = (char)0x0222;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_ACUTE = (char)0x00D3;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O BREVE. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_BREVE = (char)0x014E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_CARON = (char)0x01D1;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX = (char)0x00D4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX_AND_ACUTE = (char)0x1ED0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX_AND_DOT_BELOW = (char)0x1ED8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX_AND_GRAVE = (char)0x1ED2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX_AND_HOOK_ABOVE = (char)0x1ED4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_CIRCUMFLEX_AND_TILDE = (char)0x1ED6;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O DIAERESIS. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS = (char)0x00D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_DIAERESIS_AND_MACRON = (char)0x022A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_DOT_ABOVE = (char)0x022E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_DOT_ABOVE_AND_MACRON = (char)0x0230;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_DOT_BELOW = (char)0x1ECC;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O DOUBLE ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_ACUTE = (char)0x0150;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_DOUBLE_GRAVE = (char)0x020C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O GRAVE. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_GRAVE = (char)0x00D2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_HOOK_ABOVE = (char)0x1ECE;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O HORN. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_HORN = (char)0x01A0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_HORN_AND_ACUTE = (char)0x1EDA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_HORN_AND_DOT_BELOW = (char)0x1EE2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_HORN_AND_GRAVE = (char)0x1EDC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_HORN_AND_HOOK_ABOVE = (char)0x1EDE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_HORN_AND_TILDE = (char)0x1EE0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_INVERTED_BREVE = (char)0x020E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_MACRON = (char)0x014C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_MACRON_AND_ACUTE = (char)0x1E52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_MACRON_AND_GRAVE = (char)0x1E50;
			/// <summary> Formerly LATIN CAPITAL LETTER BARRED O. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_MIDDLE_TILDE = (char)0x019F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O OGONEK. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_OGONEK = (char)0x01EA;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O OGONEK MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_OGONEK_AND_MACRON = (char)0x01EC;
			/// <summary> Formerly LATIN CAPITAL LETTER O SLASH. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_STROKE = (char)0x00D8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_STROKE_AND_ACUTE = (char)0x01FE;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER O TILDE. </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_TILDE = (char)0x00D5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_TILDE_AND_ACUTE = (char)0x1E4C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_TILDE_AND_DIAERESIS = (char)0x1E4E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_O_WITH_TILDE_AND_MACRON = (char)0x022C;
			public const char LATIN_CAPITAL_LETTER_P = (char)0x0050;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_P_WITH_ACUTE = (char)0x1E54;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_P_WITH_DOT_ABOVE = (char)0x1E56;
			/// <summary> Formerly LATIN CAPITAL LETTER P HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_P_WITH_HOOK = (char)0x01A4;
			public const char LATIN_CAPITAL_LETTER_Q = (char)0x0051;
			public const char LATIN_CAPITAL_LETTER_R = (char)0x0052;
			/// <summary> Formerly LATIN CAPITAL LETTER TURNED E. </summary>
			public const char LATIN_CAPITAL_LETTER_REVERSED_E = (char)0x018E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER R ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_ACUTE = (char)0x0154;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER R HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_CARON = (char)0x0158;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER R CEDILLA. </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_CEDILLA = (char)0x0156;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_DOT_ABOVE = (char)0x1E58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_DOT_BELOW = (char)0x1E5A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_DOT_BELOW_AND_MACRON = (char)0x1E5C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_DOUBLE_GRAVE = (char)0x0210;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_INVERTED_BREVE = (char)0x0212;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_R_WITH_LINE_BELOW = (char)0x1E5E;
			public const char LATIN_CAPITAL_LETTER_S = (char)0x0053;
			public const char LATIN_CAPITAL_LETTER_SCHWA = (char)0x018F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER S ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_ACUTE = (char)0x015A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_ACUTE_AND_DOT_ABOVE = (char)0x1E64;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER S HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_CARON = (char)0x0160;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_CARON_AND_DOT_ABOVE = (char)0x1E66;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER S CEDILLA. </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_CEDILLA = (char)0x015E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER S CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_CIRCUMFLEX = (char)0x015C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_COMMA_BELOW = (char)0x0218;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_DOT_ABOVE = (char)0x1E60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_DOT_BELOW = (char)0x1E62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_S_WITH_DOT_BELOW_AND_DOT_ABOVE = (char)0x1E68;
			public const char LATIN_CAPITAL_LETTER_T = (char)0x0054;
			public const char LATIN_CAPITAL_LETTER_THORN = (char)0x00DE;
			public const char LATIN_CAPITAL_LETTER_TONE_FIVE = (char)0x01BC;
			public const char LATIN_CAPITAL_LETTER_TONE_SIX = (char)0x0184;
			public const char LATIN_CAPITAL_LETTER_TONE_TWO = (char)0x01A7;
			public const char LATIN_CAPITAL_LETTER_TURNED_M = (char)0x019C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER T HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_CARON = (char)0x0164;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER T CEDILLA. </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_CEDILLA = (char)0x0162;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_CIRCUMFLEX_BELOW = (char)0x1E70;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_COMMA_BELOW = (char)0x021A;
			public const char LATIN_CAPITAL_LETTER_T_WITH_DIAGONAL_STROKE = (char)0x023E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_DOT_ABOVE = (char)0x1E6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_DOT_BELOW = (char)0x1E6C;
			/// <summary> Formerly LATIN CAPITAL LETTER T HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_HOOK = (char)0x01AC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_LINE_BELOW = (char)0x1E6E;
			/// <summary> Formerly LATIN CAPITAL LETTER T RETROFLEX HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_RETROFLEX_HOOK = (char)0x01AE;
			/// <summary> Formerly LATIN CAPITAL LETTER T BAR. </summary>
			public const char LATIN_CAPITAL_LETTER_T_WITH_STROKE = (char)0x0166;
			public const char LATIN_CAPITAL_LETTER_U = (char)0x0055;
			public const char LATIN_CAPITAL_LETTER_UPSILON = (char)0x01B1;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_ACUTE = (char)0x00DA;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U BREVE. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_BREVE = (char)0x016C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_CARON = (char)0x01D3;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX = (char)0x00DB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_CIRCUMFLEX_BELOW = (char)0x1E76;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U DIAERESIS. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS = (char)0x00DC;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U DIAERESIS ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS_AND_ACUTE = (char)0x01D7;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U DIAERESIS HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS_AND_CARON = (char)0x01D9;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U DIAERESIS GRAVE. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS_AND_GRAVE = (char)0x01DB;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U DIAERESIS MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS_AND_MACRON = (char)0x01D5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS_BELOW = (char)0x1E72;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DOT_BELOW = (char)0x1EE4;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U DOUBLE ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_ACUTE = (char)0x0170;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_DOUBLE_GRAVE = (char)0x0214;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U GRAVE. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_GRAVE = (char)0x00D9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_HOOK_ABOVE = (char)0x1EE6;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U HORN. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_HORN = (char)0x01AF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_HORN_AND_ACUTE = (char)0x1EE8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_HORN_AND_DOT_BELOW = (char)0x1EF0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_HORN_AND_GRAVE = (char)0x1EEA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_HORN_AND_HOOK_ABOVE = (char)0x1EEC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_HORN_AND_TILDE = (char)0x1EEE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_INVERTED_BREVE = (char)0x0216;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U MACRON. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_MACRON = (char)0x016A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_MACRON_AND_DIAERESIS = (char)0x1E7A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U OGONEK. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_OGONEK = (char)0x0172;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U RING. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_RING_ABOVE = (char)0x016E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER U TILDE. </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_TILDE = (char)0x0168;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_TILDE_AND_ACUTE = (char)0x1E78;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_U_WITH_TILDE_BELOW = (char)0x1E74;
			public const char LATIN_CAPITAL_LETTER_V = (char)0x0056;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_V_WITH_DOT_BELOW = (char)0x1E7E;
			/// <summary> Formerly LATIN CAPITAL LETTER SCRIPT V. </summary>
			public const char LATIN_CAPITAL_LETTER_V_WITH_HOOK = (char)0x01B2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_V_WITH_TILDE = (char)0x1E7C;
			public const char LATIN_CAPITAL_LETTER_W = (char)0x0057;
			public const char LATIN_CAPITAL_LETTER_WYNN = (char)0x01F7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_W_WITH_ACUTE = (char)0x1E82;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER W CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_W_WITH_CIRCUMFLEX = (char)0x0174;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_W_WITH_DIAERESIS = (char)0x1E84;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_W_WITH_DOT_ABOVE = (char)0x1E86;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_W_WITH_DOT_BELOW = (char)0x1E88;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_W_WITH_GRAVE = (char)0x1E80;
			public const char LATIN_CAPITAL_LETTER_X = (char)0x0058;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_X_WITH_DIAERESIS = (char)0x1E8C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_X_WITH_DOT_ABOVE = (char)0x1E8A;
			public const char LATIN_CAPITAL_LETTER_Y = (char)0x0059;
			public const char LATIN_CAPITAL_LETTER_YOGH = (char)0x021C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER Y ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_ACUTE = (char)0x00DD;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER Y CIRCUMFLEX. </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_CIRCUMFLEX = (char)0x0176;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER Y DIAERESIS. </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_DIAERESIS = (char)0x0178;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_DOT_ABOVE = (char)0x1E8E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_DOT_BELOW = (char)0x1EF4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_GRAVE = (char)0x1EF2;
			/// <summary> Formerly LATIN CAPITAL LETTER Y HOOK. </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_HOOK = (char)0x01B3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_HOOK_ABOVE = (char)0x1EF6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_MACRON = (char)0x0232;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Y_WITH_TILDE = (char)0x1EF8;
			public const char LATIN_CAPITAL_LETTER_Z = (char)0x005A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER Z ACUTE. </summary>
			public const char LATIN_CAPITAL_LETTER_Z_WITH_ACUTE = (char)0x0179;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER Z HACEK. </summary>
			public const char LATIN_CAPITAL_LETTER_Z_WITH_CARON = (char)0x017D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Z_WITH_CIRCUMFLEX = (char)0x1E90;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER Z DOT. </summary>
			public const char LATIN_CAPITAL_LETTER_Z_WITH_DOT_ABOVE = (char)0x017B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Z_WITH_DOT_BELOW = (char)0x1E92;
			public const char LATIN_CAPITAL_LETTER_Z_WITH_HOOK = (char)0x0224;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_CAPITAL_LETTER_Z_WITH_LINE_BELOW = (char)0x1E94;
			/// <summary> Formerly LATIN CAPITAL LETTER Z BAR. </summary>
			public const char LATIN_CAPITAL_LETTER_Z_WITH_STROKE = (char)0x01B5;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN CAPITAL LETTER I J. </summary>
			public const char LATIN_CAPITAL_LIGATURE_IJ = (char)0x0132;
			/// <summary> Formerly LATIN CAPITAL LETTER O E. </summary>
			public const char LATIN_CAPITAL_LIGATURE_OE = (char)0x0152;
			public const char LATIN_CROSS = (char)0x271D;
			public const char LATIN_LETTER_AIN = (char)0x1D25;
			/// <summary> Formerly LATIN LETTER PIPE DOUBLE BAR. </summary>
			public const char LATIN_LETTER_ALVEOLAR_CLICK = (char)0x01C2;
			public const char LATIN_LETTER_BIDENTAL_PERCUSSIVE = (char)0x02AD;
			/// <summary> Formerly LATIN LETTER BULLSEYE. </summary>
			public const char LATIN_LETTER_BILABIAL_CLICK = (char)0x0298;
			public const char LATIN_LETTER_BILABIAL_PERCUSSIVE = (char)0x02AC;
			/// <summary> Formerly LATIN LETTER PIPE. </summary>
			public const char LATIN_LETTER_DENTAL_CLICK = (char)0x01C0;
			public const char LATIN_LETTER_GLOTTAL_STOP = (char)0x0294;
			/// <summary> Formerly LATIN LETTER GLOTTAL STOP BAR. </summary>
			public const char LATIN_LETTER_GLOTTAL_STOP_WITH_STROKE = (char)0x02A1;
			public const char LATIN_LETTER_INVERTED_GLOTTAL_STOP = (char)0x0296;
			/// <summary> Formerly LATIN LETTER INVERTED GLOTTAL STOP BAR. </summary>
			public const char LATIN_LETTER_INVERTED_GLOTTAL_STOP_WITH_STROKE = (char)0x01BE;
			/// <summary> Formerly LATIN LETTER DOUBLE PIPE. </summary>
			public const char LATIN_LETTER_LATERAL_CLICK = (char)0x01C1;
			/// <summary> Formerly LATIN LETTER REVERSED GLOTTAL STOP. </summary>
			public const char LATIN_LETTER_PHARYNGEAL_VOICED_FRICATIVE = (char)0x0295;
			/// <summary> Formerly LATIN LETTER EXCLAMATION MARK. </summary>
			public const char LATIN_LETTER_RETROFLEX_CLICK = (char)0x01C3;
			public const char LATIN_LETTER_REVERSED_ESH_LOOP = (char)0x01AA;
			/// <summary> Formerly LATIN LETTER REVERSED GLOTTAL STOP BAR. </summary>
			public const char LATIN_LETTER_REVERSED_GLOTTAL_STOP_WITH_STROKE = (char)0x02A2;
			public const char LATIN_LETTER_SMALL_CAPITAL_A = (char)0x1D00;
			public const char LATIN_LETTER_SMALL_CAPITAL_AE = (char)0x1D01;
			public const char LATIN_LETTER_SMALL_CAPITAL_B = (char)0x0299;
			public const char LATIN_LETTER_SMALL_CAPITAL_BARRED_B = (char)0x1D03;
			public const char LATIN_LETTER_SMALL_CAPITAL_C = (char)0x1D04;
			public const char LATIN_LETTER_SMALL_CAPITAL_D = (char)0x1D05;
			public const char LATIN_LETTER_SMALL_CAPITAL_E = (char)0x1D07;
			public const char LATIN_LETTER_SMALL_CAPITAL_ETH = (char)0x1D06;
			public const char LATIN_LETTER_SMALL_CAPITAL_EZH = (char)0x1D23;
			public const char LATIN_LETTER_SMALL_CAPITAL_G = (char)0x0262;
			/// <summary> Formerly LATIN LETTER SMALL CAPITAL G HOOK. </summary>
			public const char LATIN_LETTER_SMALL_CAPITAL_G_WITH_HOOK = (char)0x029B;
			public const char LATIN_LETTER_SMALL_CAPITAL_H = (char)0x029C;
			public const char LATIN_LETTER_SMALL_CAPITAL_I = (char)0x026A;
			public const char LATIN_LETTER_SMALL_CAPITAL_INVERTED_R = (char)0x0281;
			public const char LATIN_LETTER_SMALL_CAPITAL_J = (char)0x1D0A;
			public const char LATIN_LETTER_SMALL_CAPITAL_K = (char)0x1D0B;
			public const char LATIN_LETTER_SMALL_CAPITAL_L = (char)0x029F;
			public const char LATIN_LETTER_SMALL_CAPITAL_L_WITH_STROKE = (char)0x1D0C;
			public const char LATIN_LETTER_SMALL_CAPITAL_M = (char)0x1D0D;
			public const char LATIN_LETTER_SMALL_CAPITAL_N = (char)0x0274;
			public const char LATIN_LETTER_SMALL_CAPITAL_O = (char)0x1D0F;
			/// <summary> Formerly LATIN LETTER SMALL CAPITAL O E. </summary>
			public const char LATIN_LETTER_SMALL_CAPITAL_OE = (char)0x0276;
			public const char LATIN_LETTER_SMALL_CAPITAL_OPEN_O = (char)0x1D10;
			public const char LATIN_LETTER_SMALL_CAPITAL_OU = (char)0x1D15;
			public const char LATIN_LETTER_SMALL_CAPITAL_P = (char)0x1D18;
			public const char LATIN_LETTER_SMALL_CAPITAL_R = (char)0x0280;
			public const char LATIN_LETTER_SMALL_CAPITAL_REVERSED_N = (char)0x1D0E;
			public const char LATIN_LETTER_SMALL_CAPITAL_REVERSED_R = (char)0x1D19;
			public const char LATIN_LETTER_SMALL_CAPITAL_T = (char)0x1D1B;
			public const char LATIN_LETTER_SMALL_CAPITAL_TURNED_R = (char)0x1D1A;
			public const char LATIN_LETTER_SMALL_CAPITAL_U = (char)0x1D1C;
			public const char LATIN_LETTER_SMALL_CAPITAL_V = (char)0x1D20;
			public const char LATIN_LETTER_SMALL_CAPITAL_W = (char)0x1D21;
			public const char LATIN_LETTER_SMALL_CAPITAL_Y = (char)0x028F;
			public const char LATIN_LETTER_SMALL_CAPITAL_Z = (char)0x1D22;
			public const char LATIN_LETTER_STRETCHED_C = (char)0x0297;
			/// <summary> Formerly LATIN LETTER TWO BAR. </summary>
			public const char LATIN_LETTER_TWO_WITH_STROKE = (char)0x01BB;
			public const char LATIN_LETTER_VOICED_LARYNGEAL_SPIRANT = (char)0x1D24;
			public const char LATIN_LETTER_WYNN = (char)0x01BF;
			/// <summary> Formerly LATIN LETTER Y R. </summary>
			public const char LATIN_LETTER_YR = (char)0x01A6;
			public const char LATIN_SMALL_CAPITAL_LETTER_I_WITH_STROKE = (char)0x1D7B;
			public const char LATIN_SMALL_CAPITAL_LETTER_U_WITH_STROKE = (char)0x1D7E;
			public const char LATIN_SMALL_LETTER_A = (char)0x0061;
			/// <summary> Formerly LATIN SMALL LETTER A E. </summary>
			public const char LATIN_SMALL_LETTER_AE = (char)0x00E6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_AE_WITH_ACUTE = (char)0x01FD;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A E MACRON. </summary>
			public const char LATIN_SMALL_LETTER_AE_WITH_MACRON = (char)0x01E3;
			/// <summary> Formerly LATIN SMALL LETTER SCRIPT A. </summary>
			public const char LATIN_SMALL_LETTER_ALPHA = (char)0x0251;
			public const char LATIN_SMALL_LETTER_ALPHA_WITH_RETROFLEX_HOOK = (char)0x1D90;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_ACUTE = (char)0x00E1;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A BREVE. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_BREVE = (char)0x0103;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_BREVE_AND_ACUTE = (char)0x1EAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_BREVE_AND_DOT_BELOW = (char)0x1EB7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_BREVE_AND_GRAVE = (char)0x1EB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_BREVE_AND_HOOK_ABOVE = (char)0x1EB3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_BREVE_AND_TILDE = (char)0x1EB5;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A HACEK. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_CARON = (char)0x01CE;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX = (char)0x00E2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX_AND_ACUTE = (char)0x1EA5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX_AND_DOT_BELOW = (char)0x1EAD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX_AND_GRAVE = (char)0x1EA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX_AND_HOOK_ABOVE = (char)0x1EA9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_CIRCUMFLEX_AND_TILDE = (char)0x1EAB;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A DIAERESIS. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_DIAERESIS = (char)0x00E4;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A DIAERESIS MACRON. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_DIAERESIS_AND_MACRON = (char)0x01DF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_DOT_ABOVE = (char)0x0227;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A DOT MACRON. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_DOT_ABOVE_AND_MACRON = (char)0x01E1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_DOT_BELOW = (char)0x1EA1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_DOUBLE_GRAVE = (char)0x0201;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A GRAVE. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_GRAVE = (char)0x00E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_HOOK_ABOVE = (char)0x1EA3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_INVERTED_BREVE = (char)0x0203;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A MACRON. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_MACRON = (char)0x0101;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A OGONEK. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_OGONEK = (char)0x0105;
			public const char LATIN_SMALL_LETTER_A_WITH_RETROFLEX_HOOK = (char)0x1D8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_RIGHT_HALF_RING = (char)0x1E9A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A RING. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_RING_ABOVE = (char)0x00E5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_RING_ABOVE_AND_ACUTE = (char)0x01FB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_RING_BELOW = (char)0x1E01;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER A TILDE. </summary>
			public const char LATIN_SMALL_LETTER_A_WITH_TILDE = (char)0x00E3;
			public const char LATIN_SMALL_LETTER_B = (char)0x0062;
			public const char LATIN_SMALL_LETTER_BARRED_O = (char)0x0275;
			public const char LATIN_SMALL_LETTER_BOTTOM_HALF_O = (char)0x1D17;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_B_WITH_DOT_ABOVE = (char)0x1E03;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_B_WITH_DOT_BELOW = (char)0x1E05;
			/// <summary> Formerly LATIN SMALL LETTER B HOOK. </summary>
			public const char LATIN_SMALL_LETTER_B_WITH_HOOK = (char)0x0253;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_B_WITH_LINE_BELOW = (char)0x1E07;
			public const char LATIN_SMALL_LETTER_B_WITH_MIDDLE_TILDE = (char)0x1D6C;
			public const char LATIN_SMALL_LETTER_B_WITH_PALATAL_HOOK = (char)0x1D80;
			/// <summary> Formerly LATIN SMALL LETTER B BAR. </summary>
			public const char LATIN_SMALL_LETTER_B_WITH_STROKE = (char)0x0180;
			/// <summary> Formerly LATIN SMALL LETTER B TOPBAR. </summary>
			public const char LATIN_SMALL_LETTER_B_WITH_TOPBAR = (char)0x0183;
			public const char LATIN_SMALL_LETTER_C = (char)0x0063;
			public const char LATIN_SMALL_LETTER_CLOSED_OMEGA = (char)0x0277;
			/// <summary> Formerly LATIN SMALL LETTER CLOSED EPSILON. </summary>
			public const char LATIN_SMALL_LETTER_CLOSED_OPEN_E = (char)0x029A;
			/// <summary> Formerly LATIN SMALL LETTER CLOSED REVERSED EPSILON. </summary>
			public const char LATIN_SMALL_LETTER_CLOSED_REVERSED_OPEN_E = (char)0x025E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER C ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_C_WITH_ACUTE = (char)0x0107;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER C HACEK. </summary>
			public const char LATIN_SMALL_LETTER_C_WITH_CARON = (char)0x010D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER C CEDILLA. </summary>
			public const char LATIN_SMALL_LETTER_C_WITH_CEDILLA = (char)0x00E7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_C_WITH_CEDILLA_AND_ACUTE = (char)0x1E09;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER C CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_C_WITH_CIRCUMFLEX = (char)0x0109;
			/// <summary> Formerly LATIN SMALL LETTER C CURL. </summary>
			public const char LATIN_SMALL_LETTER_C_WITH_CURL = (char)0x0255;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER C DOT. </summary>
			public const char LATIN_SMALL_LETTER_C_WITH_DOT_ABOVE = (char)0x010B;
			/// <summary> Formerly LATIN SMALL LETTER C HOOK. </summary>
			public const char LATIN_SMALL_LETTER_C_WITH_HOOK = (char)0x0188;
			public const char LATIN_SMALL_LETTER_C_WITH_STROKE = (char)0x023C;
			public const char LATIN_SMALL_LETTER_D = (char)0x0064;
			public const char LATIN_SMALL_LETTER_DB_DIGRAPH = (char)0x0238;
			/// <summary> Formerly LATIN SMALL LETTER D YOGH. </summary>
			public const char LATIN_SMALL_LETTER_DEZH_DIGRAPH = (char)0x02A4;
			public const char LATIN_SMALL_LETTER_DOTLESS_I = (char)0x0131;
			public const char LATIN_SMALL_LETTER_DOTLESS_J = (char)0x0237;
			/// <summary> Formerly LATIN SMALL LETTER DOTLESS J BAR. </summary>
			public const char LATIN_SMALL_LETTER_DOTLESS_J_WITH_STROKE = (char)0x025F;
			/// <summary> Formerly LATIN SMALL LETTER DOTLESS J BAR HOOK. </summary>
			public const char LATIN_SMALL_LETTER_DOTLESS_J_WITH_STROKE_AND_HOOK = (char)0x0284;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_DZ = (char)0x01F3;
			/// <summary> Formerly LATIN SMALL LETTER D Z. </summary>
			public const char LATIN_SMALL_LETTER_DZ_DIGRAPH = (char)0x02A3;
			/// <summary> Formerly LATIN SMALL LETTER D Z CURL. </summary>
			public const char LATIN_SMALL_LETTER_DZ_DIGRAPH_WITH_CURL = (char)0x02A5;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER D Z HACEK. </summary>
			public const char LATIN_SMALL_LETTER_DZ_WITH_CARON = (char)0x01C6;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER D HACEK. </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_CARON = (char)0x010F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_CEDILLA = (char)0x1E11;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_CIRCUMFLEX_BELOW = (char)0x1E13;
			public const char LATIN_SMALL_LETTER_D_WITH_CURL = (char)0x0221;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_DOT_ABOVE = (char)0x1E0B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_DOT_BELOW = (char)0x1E0D;
			/// <summary> Formerly LATIN SMALL LETTER D HOOK. </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_HOOK = (char)0x0257;
			public const char LATIN_SMALL_LETTER_D_WITH_HOOK_AND_TAIL = (char)0x1D91;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_LINE_BELOW = (char)0x1E0F;
			public const char LATIN_SMALL_LETTER_D_WITH_MIDDLE_TILDE = (char)0x1D6D;
			public const char LATIN_SMALL_LETTER_D_WITH_PALATAL_HOOK = (char)0x1D81;
			/// <summary> Formerly LATIN SMALL LETTER D BAR. </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_STROKE = (char)0x0111;
			/// <summary> Formerly LATIN SMALL LETTER D RETROFLEX HOOK. </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_TAIL = (char)0x0256;
			/// <summary> Formerly LATIN SMALL LETTER D TOPBAR. </summary>
			public const char LATIN_SMALL_LETTER_D_WITH_TOPBAR = (char)0x018C;
			public const char LATIN_SMALL_LETTER_E = (char)0x0065;
			public const char LATIN_SMALL_LETTER_ENG = (char)0x014B;
			public const char LATIN_SMALL_LETTER_ESH = (char)0x0283;
			/// <summary> Formerly LATIN SMALL LETTER ESH CURL. </summary>
			public const char LATIN_SMALL_LETTER_ESH_WITH_CURL = (char)0x0286;
			public const char LATIN_SMALL_LETTER_ESH_WITH_PALATAL_HOOK = (char)0x1D8B;
			public const char LATIN_SMALL_LETTER_ESH_WITH_RETROFLEX_HOOK = (char)0x1D98;
			public const char LATIN_SMALL_LETTER_ETH = (char)0x00F0;
			/// <summary> Formerly LATIN SMALL LETTER YOGH. </summary>
			public const char LATIN_SMALL_LETTER_EZH = (char)0x0292;
			/// <summary> Formerly LATIN SMALL LETTER REVERSED YOGH. </summary>
			public const char LATIN_SMALL_LETTER_EZH_REVERSED = (char)0x01B9;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER YOGH HACEK. </summary>
			public const char LATIN_SMALL_LETTER_EZH_WITH_CARON = (char)0x01EF;
			/// <summary> Formerly LATIN SMALL LETTER YOGH CURL. </summary>
			public const char LATIN_SMALL_LETTER_EZH_WITH_CURL = (char)0x0293;
			public const char LATIN_SMALL_LETTER_EZH_WITH_RETROFLEX_HOOK = (char)0x1D9A;
			/// <summary> Formerly LATIN SMALL LETTER YOGH WITH TAIL. </summary>
			public const char LATIN_SMALL_LETTER_EZH_WITH_TAIL = (char)0x01BA;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_ACUTE = (char)0x00E9;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E BREVE. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_BREVE = (char)0x0115;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E HACEK. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CARON = (char)0x011B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CEDILLA = (char)0x0229;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CEDILLA_AND_BREVE = (char)0x1E1D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX = (char)0x00EA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX_AND_ACUTE = (char)0x1EBF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX_AND_DOT_BELOW = (char)0x1EC7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX_AND_GRAVE = (char)0x1EC1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX_AND_HOOK_ABOVE = (char)0x1EC3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX_AND_TILDE = (char)0x1EC5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_CIRCUMFLEX_BELOW = (char)0x1E19;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E DIAERESIS. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_DIAERESIS = (char)0x00EB;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E DOT. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_DOT_ABOVE = (char)0x0117;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_DOT_BELOW = (char)0x1EB9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_DOUBLE_GRAVE = (char)0x0205;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E GRAVE. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_GRAVE = (char)0x00E8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_HOOK_ABOVE = (char)0x1EBB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_INVERTED_BREVE = (char)0x0207;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E MACRON. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_MACRON = (char)0x0113;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_MACRON_AND_ACUTE = (char)0x1E17;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_MACRON_AND_GRAVE = (char)0x1E15;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER E OGONEK. </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_OGONEK = (char)0x0119;
			public const char LATIN_SMALL_LETTER_E_WITH_RETROFLEX_HOOK = (char)0x1D92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_TILDE = (char)0x1EBD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_E_WITH_TILDE_BELOW = (char)0x1E1B;
			public const char LATIN_SMALL_LETTER_F = (char)0x0066;
			public const char LATIN_SMALL_LETTER_FENG_DIGRAPH = (char)0x02A9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_F_WITH_DOT_ABOVE = (char)0x1E1F;
			/// <summary> Formerly LATIN SMALL LETTER SCRIPT F. </summary>
			public const char LATIN_SMALL_LETTER_F_WITH_HOOK = (char)0x0192;
			public const char LATIN_SMALL_LETTER_F_WITH_MIDDLE_TILDE = (char)0x1D6E;
			public const char LATIN_SMALL_LETTER_F_WITH_PALATAL_HOOK = (char)0x1D82;
			public const char LATIN_SMALL_LETTER_G = (char)0x0067;
			public const char LATIN_SMALL_LETTER_GAMMA = (char)0x0263;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_ACUTE = (char)0x01F5;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER G BREVE. </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_BREVE = (char)0x011F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER G HACEK. </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_CARON = (char)0x01E7;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER G CEDILLA. </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_CEDILLA = (char)0x0123;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER G CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_CIRCUMFLEX = (char)0x011D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER G DOT. </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_DOT_ABOVE = (char)0x0121;
			/// <summary> Formerly LATIN SMALL LETTER G HOOK. </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_HOOK = (char)0x0260;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_MACRON = (char)0x1E21;
			public const char LATIN_SMALL_LETTER_G_WITH_PALATAL_HOOK = (char)0x1D83;
			/// <summary> Formerly LATIN SMALL LETTER G BAR. </summary>
			public const char LATIN_SMALL_LETTER_G_WITH_STROKE = (char)0x01E5;
			public const char LATIN_SMALL_LETTER_H = (char)0x0068;
			/// <summary> Formerly LATIN SMALL LETTER HENG HOOK. </summary>
			public const char LATIN_SMALL_LETTER_HENG_WITH_HOOK = (char)0x0267;
			/// <summary> Formerly LATIN SMALL LETTER H V. </summary>
			public const char LATIN_SMALL_LETTER_HV = (char)0x0195;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_BREVE_BELOW = (char)0x1E2B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_CARON = (char)0x021F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_CEDILLA = (char)0x1E29;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER H CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_CIRCUMFLEX = (char)0x0125;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_DIAERESIS = (char)0x1E27;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_DOT_ABOVE = (char)0x1E23;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_DOT_BELOW = (char)0x1E25;
			/// <summary> Formerly LATIN SMALL LETTER H HOOK. </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_HOOK = (char)0x0266;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_LINE_BELOW = (char)0x1E96;
			/// <summary> Formerly LATIN SMALL LETTER H BAR. </summary>
			public const char LATIN_SMALL_LETTER_H_WITH_STROKE = (char)0x0127;
			public const char LATIN_SMALL_LETTER_I = (char)0x0069;
			public const char LATIN_SMALL_LETTER_INSULAR_G = (char)0x1D79;
			public const char LATIN_SMALL_LETTER_IOTA = (char)0x0269;
			public const char LATIN_SMALL_LETTER_IOTA_WITH_STROKE = (char)0x1D7C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_ACUTE = (char)0x00ED;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I BREVE. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_BREVE = (char)0x012D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I HACEK. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_CARON = (char)0x01D0;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_CIRCUMFLEX = (char)0x00EE;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I DIAERESIS. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_DIAERESIS = (char)0x00EF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_DIAERESIS_AND_ACUTE = (char)0x1E2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_DOT_BELOW = (char)0x1ECB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_DOUBLE_GRAVE = (char)0x0209;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I GRAVE. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_GRAVE = (char)0x00EC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_HOOK_ABOVE = (char)0x1EC9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_INVERTED_BREVE = (char)0x020B;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I MACRON. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_MACRON = (char)0x012B;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I OGONEK. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_OGONEK = (char)0x012F;
			public const char LATIN_SMALL_LETTER_I_WITH_RETROFLEX_HOOK = (char)0x1D96;
			/// <summary> Formerly LATIN SMALL LETTER BARRED I. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_STROKE = (char)0x0268;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I TILDE. </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_TILDE = (char)0x0129;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_I_WITH_TILDE_BELOW = (char)0x1E2D;
			public const char LATIN_SMALL_LETTER_J = (char)0x006A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER J HACEK. </summary>
			public const char LATIN_SMALL_LETTER_J_WITH_CARON = (char)0x01F0;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER J CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_J_WITH_CIRCUMFLEX = (char)0x0135;
			/// <summary> Formerly LATIN SMALL LETTER CROSSED-TAIL J. </summary>
			public const char LATIN_SMALL_LETTER_J_WITH_CROSSED_TAIL = (char)0x029D;
			public const char LATIN_SMALL_LETTER_K = (char)0x006B;
			public const char LATIN_SMALL_LETTER_KRA = (char)0x0138;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_K_WITH_ACUTE = (char)0x1E31;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER K HACEK. </summary>
			public const char LATIN_SMALL_LETTER_K_WITH_CARON = (char)0x01E9;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER K CEDILLA. </summary>
			public const char LATIN_SMALL_LETTER_K_WITH_CEDILLA = (char)0x0137;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_K_WITH_DOT_BELOW = (char)0x1E33;
			/// <summary> Formerly LATIN SMALL LETTER K HOOK. </summary>
			public const char LATIN_SMALL_LETTER_K_WITH_HOOK = (char)0x0199;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_K_WITH_LINE_BELOW = (char)0x1E35;
			public const char LATIN_SMALL_LETTER_K_WITH_PALATAL_HOOK = (char)0x1D84;
			public const char LATIN_SMALL_LETTER_L = (char)0x006C;
			/// <summary> Formerly LATIN SMALL LETTER BARRED LAMBDA. </summary>
			public const char LATIN_SMALL_LETTER_LAMBDA_WITH_STROKE = (char)0x019B;
			/// <summary> Formerly LATIN SMALL LETTER L YOGH. </summary>
			public const char LATIN_SMALL_LETTER_LEZH = (char)0x026E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER L J. </summary>
			public const char LATIN_SMALL_LETTER_LJ = (char)0x01C9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_LONG_S = (char)0x017F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_LONG_S_WITH_DOT_ABOVE = (char)0x1E9B;
			public const char LATIN_SMALL_LETTER_LS_DIGRAPH = (char)0x02AA;
			public const char LATIN_SMALL_LETTER_LZ_DIGRAPH = (char)0x02AB;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER L ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_ACUTE = (char)0x013A;
			/// <summary> Formerly LATIN SMALL LETTER BARRED L. </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_BAR = (char)0x019A;
			/// <summary> Formerly LATIN SMALL LETTER L BELT. </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_BELT = (char)0x026C;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER L HACEK. </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_CARON = (char)0x013E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER L CEDILLA. </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_CEDILLA = (char)0x013C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_CIRCUMFLEX_BELOW = (char)0x1E3D;
			public const char LATIN_SMALL_LETTER_L_WITH_CURL = (char)0x0234;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_DOT_BELOW = (char)0x1E37;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_DOT_BELOW_AND_MACRON = (char)0x1E39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_LINE_BELOW = (char)0x1E3B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_MIDDLE_DOT = (char)0x0140;
			public const char LATIN_SMALL_LETTER_L_WITH_MIDDLE_TILDE = (char)0x026B;
			public const char LATIN_SMALL_LETTER_L_WITH_PALATAL_HOOK = (char)0x1D85;
			/// <summary> Formerly LATIN SMALL LETTER L RETROFLEX HOOK. </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_RETROFLEX_HOOK = (char)0x026D;
			/// <summary> Formerly LATIN SMALL LETTER L SLASH. </summary>
			public const char LATIN_SMALL_LETTER_L_WITH_STROKE = (char)0x0142;
			public const char LATIN_SMALL_LETTER_M = (char)0x006D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_M_WITH_ACUTE = (char)0x1E3F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_M_WITH_DOT_ABOVE = (char)0x1E41;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_M_WITH_DOT_BELOW = (char)0x1E43;
			/// <summary> Formerly LATIN SMALL LETTER M HOOK. </summary>
			public const char LATIN_SMALL_LETTER_M_WITH_HOOK = (char)0x0271;
			public const char LATIN_SMALL_LETTER_M_WITH_MIDDLE_TILDE = (char)0x1D6F;
			public const char LATIN_SMALL_LETTER_M_WITH_PALATAL_HOOK = (char)0x1D86;
			public const char LATIN_SMALL_LETTER_N = (char)0x006E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER N J. </summary>
			public const char LATIN_SMALL_LETTER_NJ = (char)0x01CC;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER APOSTROPHE N. </summary>
			public const char LATIN_SMALL_LETTER_N_PRECEDED_BY_APOSTROPHE = (char)0x0149;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER N ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_ACUTE = (char)0x0144;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER N HACEK. </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_CARON = (char)0x0148;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER N CEDILLA. </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_CEDILLA = (char)0x0146;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_CIRCUMFLEX_BELOW = (char)0x1E4B;
			public const char LATIN_SMALL_LETTER_N_WITH_CURL = (char)0x0235;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_DOT_ABOVE = (char)0x1E45;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_DOT_BELOW = (char)0x1E47;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_GRAVE = (char)0x01F9;
			/// <summary> Formerly LATIN SMALL LETTER N HOOK. </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_LEFT_HOOK = (char)0x0272;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_LINE_BELOW = (char)0x1E49;
			public const char LATIN_SMALL_LETTER_N_WITH_LONG_RIGHT_LEG = (char)0x019E;
			public const char LATIN_SMALL_LETTER_N_WITH_MIDDLE_TILDE = (char)0x1D70;
			public const char LATIN_SMALL_LETTER_N_WITH_PALATAL_HOOK = (char)0x1D87;
			/// <summary> Formerly LATIN SMALL LETTER N RETROFLEX HOOK. </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_RETROFLEX_HOOK = (char)0x0273;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER N TILDE. </summary>
			public const char LATIN_SMALL_LETTER_N_WITH_TILDE = (char)0x00F1;
			public const char LATIN_SMALL_LETTER_O = (char)0x006F;
			/// <summary> Formerly LATIN SMALL LETTER O I. </summary>
			public const char LATIN_SMALL_LETTER_OI = (char)0x01A3;
			/// <summary> Formerly LATIN SMALL LETTER EPSILON. </summary>
			public const char LATIN_SMALL_LETTER_OPEN_E = (char)0x025B;
			public const char LATIN_SMALL_LETTER_OPEN_E_WITH_RETROFLEX_HOOK = (char)0x1D93;
			public const char LATIN_SMALL_LETTER_OPEN_O = (char)0x0254;
			public const char LATIN_SMALL_LETTER_OPEN_O_WITH_RETROFLEX_HOOK = (char)0x1D97;
			public const char LATIN_SMALL_LETTER_OU = (char)0x0223;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_ACUTE = (char)0x00F3;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O BREVE. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_BREVE = (char)0x014F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O HACEK. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_CARON = (char)0x01D2;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX = (char)0x00F4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX_AND_ACUTE = (char)0x1ED1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX_AND_DOT_BELOW = (char)0x1ED9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX_AND_GRAVE = (char)0x1ED3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX_AND_HOOK_ABOVE = (char)0x1ED5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_CIRCUMFLEX_AND_TILDE = (char)0x1ED7;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O DIAERESIS. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_DIAERESIS = (char)0x00F6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_DIAERESIS_AND_MACRON = (char)0x022B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_DOT_ABOVE = (char)0x022F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_DOT_ABOVE_AND_MACRON = (char)0x0231;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_DOT_BELOW = (char)0x1ECD;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O DOUBLE ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_DOUBLE_ACUTE = (char)0x0151;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_DOUBLE_GRAVE = (char)0x020D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O GRAVE. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_GRAVE = (char)0x00F2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_HOOK_ABOVE = (char)0x1ECF;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O HORN. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_HORN = (char)0x01A1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_HORN_AND_ACUTE = (char)0x1EDB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_HORN_AND_DOT_BELOW = (char)0x1EE3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_HORN_AND_GRAVE = (char)0x1EDD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_HORN_AND_HOOK_ABOVE = (char)0x1EDF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_HORN_AND_TILDE = (char)0x1EE1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_INVERTED_BREVE = (char)0x020F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O MACRON. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_MACRON = (char)0x014D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_MACRON_AND_ACUTE = (char)0x1E53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_MACRON_AND_GRAVE = (char)0x1E51;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O OGONEK. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_OGONEK = (char)0x01EB;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O OGONEK MACRON. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_OGONEK_AND_MACRON = (char)0x01ED;
			/// <summary> Formerly LATIN SMALL LETTER O SLASH. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_STROKE = (char)0x00F8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_STROKE_AND_ACUTE = (char)0x01FF;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER O TILDE. </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_TILDE = (char)0x00F5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_TILDE_AND_ACUTE = (char)0x1E4D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_TILDE_AND_DIAERESIS = (char)0x1E4F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_O_WITH_TILDE_AND_MACRON = (char)0x022D;
			public const char LATIN_SMALL_LETTER_P = (char)0x0070;
			public const char LATIN_SMALL_LETTER_PHI = (char)0x0278;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_P_WITH_ACUTE = (char)0x1E55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_P_WITH_DOT_ABOVE = (char)0x1E57;
			/// <summary> Formerly LATIN SMALL LETTER P HOOK. </summary>
			public const char LATIN_SMALL_LETTER_P_WITH_HOOK = (char)0x01A5;
			public const char LATIN_SMALL_LETTER_P_WITH_MIDDLE_TILDE = (char)0x1D71;
			public const char LATIN_SMALL_LETTER_P_WITH_PALATAL_HOOK = (char)0x1D88;
			public const char LATIN_SMALL_LETTER_P_WITH_STROKE = (char)0x1D7D;
			public const char LATIN_SMALL_LETTER_Q = (char)0x0071;
			public const char LATIN_SMALL_LETTER_QP_DIGRAPH = (char)0x0239;
			/// <summary> Formerly LATIN SMALL LETTER Q HOOK. </summary>
			public const char LATIN_SMALL_LETTER_Q_WITH_HOOK = (char)0x02A0;
			public const char LATIN_SMALL_LETTER_R = (char)0x0072;
			/// <summary> Formerly LATIN SMALL LETTER BABY GAMMA. </summary>
			public const char LATIN_SMALL_LETTER_RAMS_HORN = (char)0x0264;
			public const char LATIN_SMALL_LETTER_REVERSED_E = (char)0x0258;
			/// <summary> Formerly LATIN SMALL LETTER REVERSED EPSILON. </summary>
			public const char LATIN_SMALL_LETTER_REVERSED_OPEN_E = (char)0x025C;
			/// <summary> Formerly LATIN SMALL LETTER REVERSED EPSILON HOOK. </summary>
			public const char LATIN_SMALL_LETTER_REVERSED_OPEN_E_WITH_HOOK = (char)0x025D;
			public const char LATIN_SMALL_LETTER_REVERSED_OPEN_E_WITH_RETROFLEX_HOOK = (char)0x1D94;
			/// <summary> Formerly LATIN SMALL LETTER REVERSED FISHHOOK R. </summary>
			public const char LATIN_SMALL_LETTER_REVERSED_R_WITH_FISHHOOK = (char)0x027F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER R ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_ACUTE = (char)0x0155;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER R HACEK. </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_CARON = (char)0x0159;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER R CEDILLA. </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_CEDILLA = (char)0x0157;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_DOT_ABOVE = (char)0x1E59;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_DOT_BELOW = (char)0x1E5B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_DOT_BELOW_AND_MACRON = (char)0x1E5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_DOUBLE_GRAVE = (char)0x0211;
			/// <summary> Formerly LATIN SMALL LETTER FISHHOOK R. </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_FISHHOOK = (char)0x027E;
			public const char LATIN_SMALL_LETTER_R_WITH_FISHHOOK_AND_MIDDLE_TILDE = (char)0x1D73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_INVERTED_BREVE = (char)0x0213;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_LINE_BELOW = (char)0x1E5F;
			public const char LATIN_SMALL_LETTER_R_WITH_LONG_LEG = (char)0x027C;
			public const char LATIN_SMALL_LETTER_R_WITH_MIDDLE_TILDE = (char)0x1D72;
			public const char LATIN_SMALL_LETTER_R_WITH_PALATAL_HOOK = (char)0x1D89;
			/// <summary> Formerly LATIN SMALL LETTER R HOOK. </summary>
			public const char LATIN_SMALL_LETTER_R_WITH_TAIL = (char)0x027D;
			public const char LATIN_SMALL_LETTER_S = (char)0x0073;
			public const char LATIN_SMALL_LETTER_SCHWA = (char)0x0259;
			/// <summary> Formerly LATIN SMALL LETTER SCHWA HOOK. </summary>
			public const char LATIN_SMALL_LETTER_SCHWA_WITH_HOOK = (char)0x025A;
			public const char LATIN_SMALL_LETTER_SCHWA_WITH_RETROFLEX_HOOK = (char)0x1D95;
			public const char LATIN_SMALL_LETTER_SCRIPT_G = (char)0x0261;
			public const char LATIN_SMALL_LETTER_SHARP_S = (char)0x00DF;
			public const char LATIN_SMALL_LETTER_SIDEWAYS_DIAERESIZED_U = (char)0x1D1E;
			public const char LATIN_SMALL_LETTER_SIDEWAYS_O = (char)0x1D11;
			public const char LATIN_SMALL_LETTER_SIDEWAYS_OPEN_O = (char)0x1D12;
			public const char LATIN_SMALL_LETTER_SIDEWAYS_O_WITH_STROKE = (char)0x1D13;
			public const char LATIN_SMALL_LETTER_SIDEWAYS_TURNED_M = (char)0x1D1F;
			public const char LATIN_SMALL_LETTER_SIDEWAYS_U = (char)0x1D1D;
			public const char LATIN_SMALL_LETTER_SQUAT_REVERSED_ESH = (char)0x0285;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER S ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_ACUTE = (char)0x015B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_ACUTE_AND_DOT_ABOVE = (char)0x1E65;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER S HACEK. </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_CARON = (char)0x0161;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_CARON_AND_DOT_ABOVE = (char)0x1E67;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER S CEDILLA. </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_CEDILLA = (char)0x015F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER S CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_CIRCUMFLEX = (char)0x015D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_COMMA_BELOW = (char)0x0219;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_DOT_ABOVE = (char)0x1E61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_DOT_BELOW = (char)0x1E63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_DOT_BELOW_AND_DOT_ABOVE = (char)0x1E69;
			/// <summary> Formerly LATIN SMALL LETTER S HOOK. </summary>
			public const char LATIN_SMALL_LETTER_S_WITH_HOOK = (char)0x0282;
			public const char LATIN_SMALL_LETTER_S_WITH_MIDDLE_TILDE = (char)0x1D74;
			public const char LATIN_SMALL_LETTER_S_WITH_PALATAL_HOOK = (char)0x1D8A;
			public const char LATIN_SMALL_LETTER_S_WITH_SWASH_TAIL = (char)0x023F;
			public const char LATIN_SMALL_LETTER_T = (char)0x0074;
			/// <summary> Formerly LATIN SMALL LETTER T C CURL. </summary>
			public const char LATIN_SMALL_LETTER_TC_DIGRAPH_WITH_CURL = (char)0x02A8;
			/// <summary> Formerly LATIN SMALL LETTER T ESH. </summary>
			public const char LATIN_SMALL_LETTER_TESH_DIGRAPH = (char)0x02A7;
			public const char LATIN_SMALL_LETTER_THORN = (char)0x00FE;
			public const char LATIN_SMALL_LETTER_TH_WITH_STRIKETHROUGH = (char)0x1D7A;
			public const char LATIN_SMALL_LETTER_TONE_FIVE = (char)0x01BD;
			public const char LATIN_SMALL_LETTER_TONE_SIX = (char)0x0185;
			public const char LATIN_SMALL_LETTER_TONE_TWO = (char)0x01A8;
			public const char LATIN_SMALL_LETTER_TOP_HALF_O = (char)0x1D16;
			/// <summary> Formerly LATIN SMALL LETTER T S. </summary>
			public const char LATIN_SMALL_LETTER_TS_DIGRAPH = (char)0x02A6;
			public const char LATIN_SMALL_LETTER_TURNED_A = (char)0x0250;
			public const char LATIN_SMALL_LETTER_TURNED_AE = (char)0x1D02;
			/// <summary> Formerly LATIN SMALL LETTER TURNED SCRIPT A. </summary>
			public const char LATIN_SMALL_LETTER_TURNED_ALPHA = (char)0x0252;
			public const char LATIN_SMALL_LETTER_TURNED_DELTA = (char)0x018D;
			public const char LATIN_SMALL_LETTER_TURNED_E = (char)0x01DD;
			public const char LATIN_SMALL_LETTER_TURNED_G = (char)0x1D77;
			public const char LATIN_SMALL_LETTER_TURNED_H = (char)0x0265;
			public const char LATIN_SMALL_LETTER_TURNED_H_WITH_FISHHOOK = (char)0x02AE;
			public const char LATIN_SMALL_LETTER_TURNED_H_WITH_FISHHOOK_AND_TAIL = (char)0x02AF;
			public const char LATIN_SMALL_LETTER_TURNED_I = (char)0x1D09;
			public const char LATIN_SMALL_LETTER_TURNED_K = (char)0x029E;
			public const char LATIN_SMALL_LETTER_TURNED_M = (char)0x026F;
			public const char LATIN_SMALL_LETTER_TURNED_M_WITH_LONG_LEG = (char)0x0270;
			public const char LATIN_SMALL_LETTER_TURNED_OE = (char)0x1D14;
			public const char LATIN_SMALL_LETTER_TURNED_OPEN_E = (char)0x1D08;
			public const char LATIN_SMALL_LETTER_TURNED_R = (char)0x0279;
			/// <summary> Formerly LATIN SMALL LETTER TURNED R HOOK. </summary>
			public const char LATIN_SMALL_LETTER_TURNED_R_WITH_HOOK = (char)0x027B;
			public const char LATIN_SMALL_LETTER_TURNED_R_WITH_LONG_LEG = (char)0x027A;
			public const char LATIN_SMALL_LETTER_TURNED_T = (char)0x0287;
			public const char LATIN_SMALL_LETTER_TURNED_V = (char)0x028C;
			public const char LATIN_SMALL_LETTER_TURNED_W = (char)0x028D;
			public const char LATIN_SMALL_LETTER_TURNED_Y = (char)0x028E;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER T HACEK. </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_CARON = (char)0x0165;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER T CEDILLA. </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_CEDILLA = (char)0x0163;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_CIRCUMFLEX_BELOW = (char)0x1E71;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_COMMA_BELOW = (char)0x021B;
			public const char LATIN_SMALL_LETTER_T_WITH_CURL = (char)0x0236;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_DIAERESIS = (char)0x1E97;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_DOT_ABOVE = (char)0x1E6B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_DOT_BELOW = (char)0x1E6D;
			/// <summary> Formerly LATIN SMALL LETTER T HOOK. </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_HOOK = (char)0x01AD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_LINE_BELOW = (char)0x1E6F;
			public const char LATIN_SMALL_LETTER_T_WITH_MIDDLE_TILDE = (char)0x1D75;
			/// <summary> Formerly LATIN SMALL LETTER T PALATAL HOOK. </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_PALATAL_HOOK = (char)0x01AB;
			/// <summary> Formerly LATIN SMALL LETTER T RETROFLEX HOOK. </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_RETROFLEX_HOOK = (char)0x0288;
			/// <summary> Formerly LATIN SMALL LETTER T BAR. </summary>
			public const char LATIN_SMALL_LETTER_T_WITH_STROKE = (char)0x0167;
			public const char LATIN_SMALL_LETTER_U = (char)0x0075;
			public const char LATIN_SMALL_LETTER_UE = (char)0x1D6B;
			public const char LATIN_SMALL_LETTER_UPSILON = (char)0x028A;
			public const char LATIN_SMALL_LETTER_UPSILON_WITH_STROKE = (char)0x1D7F;
			public const char LATIN_SMALL_LETTER_U_BAR = (char)0x0289;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_ACUTE = (char)0x00FA;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U BREVE. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_BREVE = (char)0x016D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U HACEK. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_CARON = (char)0x01D4;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX = (char)0x00FB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_CIRCUMFLEX_BELOW = (char)0x1E77;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U DIAERESIS. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DIAERESIS = (char)0x00FC;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U DIAERESIS ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DIAERESIS_AND_ACUTE = (char)0x01D8;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U DIAERESIS HACEK. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DIAERESIS_AND_CARON = (char)0x01DA;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U DIAERESIS GRAVE. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DIAERESIS_AND_GRAVE = (char)0x01DC;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U DIAERESIS MACRON. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DIAERESIS_AND_MACRON = (char)0x01D6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DIAERESIS_BELOW = (char)0x1E73;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DOT_BELOW = (char)0x1EE5;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U DOUBLE ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DOUBLE_ACUTE = (char)0x0171;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_DOUBLE_GRAVE = (char)0x0215;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U GRAVE. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_GRAVE = (char)0x00F9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_HOOK_ABOVE = (char)0x1EE7;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U HORN. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_HORN = (char)0x01B0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_HORN_AND_ACUTE = (char)0x1EE9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_HORN_AND_DOT_BELOW = (char)0x1EF1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_HORN_AND_GRAVE = (char)0x1EEB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_HORN_AND_HOOK_ABOVE = (char)0x1EED;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_HORN_AND_TILDE = (char)0x1EEF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_INVERTED_BREVE = (char)0x0217;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U MACRON. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_MACRON = (char)0x016B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_MACRON_AND_DIAERESIS = (char)0x1E7B;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U OGONEK. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_OGONEK = (char)0x0173;
			public const char LATIN_SMALL_LETTER_U_WITH_RETROFLEX_HOOK = (char)0x1D99;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U RING. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_RING_ABOVE = (char)0x016F;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER U TILDE. </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_TILDE = (char)0x0169;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_TILDE_AND_ACUTE = (char)0x1E79;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_U_WITH_TILDE_BELOW = (char)0x1E75;
			public const char LATIN_SMALL_LETTER_V = (char)0x0076;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_V_WITH_DOT_BELOW = (char)0x1E7F;
			/// <summary> Formerly LATIN SMALL LETTER SCRIPT V. </summary>
			public const char LATIN_SMALL_LETTER_V_WITH_HOOK = (char)0x028B;
			public const char LATIN_SMALL_LETTER_V_WITH_PALATAL_HOOK = (char)0x1D8C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_V_WITH_TILDE = (char)0x1E7D;
			public const char LATIN_SMALL_LETTER_W = (char)0x0077;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_W_WITH_ACUTE = (char)0x1E83;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER W CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_W_WITH_CIRCUMFLEX = (char)0x0175;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_W_WITH_DIAERESIS = (char)0x1E85;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_W_WITH_DOT_ABOVE = (char)0x1E87;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_W_WITH_DOT_BELOW = (char)0x1E89;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_W_WITH_GRAVE = (char)0x1E81;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_W_WITH_RING_ABOVE = (char)0x1E98;
			public const char LATIN_SMALL_LETTER_X = (char)0x0078;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_X_WITH_DIAERESIS = (char)0x1E8D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_X_WITH_DOT_ABOVE = (char)0x1E8B;
			public const char LATIN_SMALL_LETTER_X_WITH_PALATAL_HOOK = (char)0x1D8D;
			public const char LATIN_SMALL_LETTER_Y = (char)0x0079;
			public const char LATIN_SMALL_LETTER_YOGH = (char)0x021D;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER Y ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_ACUTE = (char)0x00FD;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER Y CIRCUMFLEX. </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_CIRCUMFLEX = (char)0x0177;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER Y DIAERESIS. </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_DIAERESIS = (char)0x00FF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_DOT_ABOVE = (char)0x1E8F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_DOT_BELOW = (char)0x1EF5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_GRAVE = (char)0x1EF3;
			/// <summary> Formerly LATIN SMALL LETTER Y HOOK. </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_HOOK = (char)0x01B4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_HOOK_ABOVE = (char)0x1EF7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_MACRON = (char)0x0233;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_RING_ABOVE = (char)0x1E99;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Y_WITH_TILDE = (char)0x1EF9;
			public const char LATIN_SMALL_LETTER_Z = (char)0x007A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER Z ACUTE. </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_ACUTE = (char)0x017A;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER Z HACEK. </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_CARON = (char)0x017E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_CIRCUMFLEX = (char)0x1E91;
			/// <summary> Formerly LATIN SMALL LETTER Z CURL. </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_CURL = (char)0x0291;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER Z DOT. </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_DOT_ABOVE = (char)0x017C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_DOT_BELOW = (char)0x1E93;
			public const char LATIN_SMALL_LETTER_Z_WITH_HOOK = (char)0x0225;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_LINE_BELOW = (char)0x1E95;
			public const char LATIN_SMALL_LETTER_Z_WITH_MIDDLE_TILDE = (char)0x1D76;
			public const char LATIN_SMALL_LETTER_Z_WITH_PALATAL_HOOK = (char)0x1D8E;
			/// <summary> Formerly LATIN SMALL LETTER Z RETROFLEX HOOK. </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_RETROFLEX_HOOK = (char)0x0290;
			/// <summary> Formerly LATIN SMALL LETTER Z BAR. </summary>
			public const char LATIN_SMALL_LETTER_Z_WITH_STROKE = (char)0x01B6;
			public const char LATIN_SMALL_LETTER_Z_WITH_SWASH_TAIL = (char)0x0240;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LIGATURE_FF = (char)0xFB00;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LIGATURE_FFI = (char)0xFB03;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LIGATURE_FFL = (char)0xFB04;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LIGATURE_FI = (char)0xFB01;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LIGATURE_FL = (char)0xFB02;
			/// <summary> (This is a composition; consider avoiding.) Formerly LATIN SMALL LETTER I J. </summary>
			public const char LATIN_SMALL_LIGATURE_IJ = (char)0x0133;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LIGATURE_LONG_S_T = (char)0xFB05;
			/// <summary> Formerly LATIN SMALL LETTER O E. </summary>
			public const char LATIN_SMALL_LIGATURE_OE = (char)0x0153;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SMALL_LIGATURE_ST = (char)0xFB06;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_A = (char)0x2090;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_E = (char)0x2091;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_I = (char)0x1D62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_O = (char)0x2092;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_R = (char)0x1D63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_SCHWA = (char)0x2094;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_U = (char)0x1D64;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_V = (char)0x1D65;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LATIN_SUBSCRIPT_SMALL_LETTER_X = (char)0x2093;
			/// <summary> Formerly LEFT ARROW. </summary>
			public const char LEFTWARDS_ARROW = (char)0x2190;
			public const char LEFTWARDS_ARROW_ABOVE_SHORT_RIGHTWARDS_ARROW = (char)0x2943;
			public const char LEFTWARDS_ARROW_ABOVE_TILDE_OPERATOR = (char)0x2973;
			/// <summary> Formerly LEFT ARROW FROM BAR. </summary>
			public const char LEFTWARDS_ARROW_FROM_BAR = (char)0x21A4;
			public const char LEFTWARDS_ARROW_FROM_BAR_TO_BLACK_DIAMOND = (char)0x291F;
			/// <summary> Formerly LEFT ARROW OVER RIGHT ARROW. </summary>
			public const char LEFTWARDS_ARROW_OVER_RIGHTWARDS_ARROW = (char)0x21C6;
			public const char LEFTWARDS_ARROW_TAIL = (char)0x2919;
			public const char LEFTWARDS_ARROW_THROUGH_LESS_THAN = (char)0x2977;
			public const char LEFTWARDS_ARROW_THROUGH_SUBSET = (char)0x297A;
			/// <summary> Formerly LEFT ARROW TO BAR. </summary>
			public const char LEFTWARDS_ARROW_TO_BAR = (char)0x21E4;
			/// <summary> Formerly LEFT ARROW TO BAR OVER RIGHT ARROW TO BAR. </summary>
			public const char LEFTWARDS_ARROW_TO_BAR_OVER_RIGHTWARDS_ARROW_TO_BAR = (char)0x21B9;
			public const char LEFTWARDS_ARROW_TO_BLACK_DIAMOND = (char)0x291D;
			public const char LEFTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE = (char)0x21FA;
			/// <summary> Formerly LEFT ARROW WITH HOOK. </summary>
			public const char LEFTWARDS_ARROW_WITH_HOOK = (char)0x21A9;
			/// <summary> Formerly LEFT ARROW WITH LOOP. </summary>
			public const char LEFTWARDS_ARROW_WITH_LOOP = (char)0x21AB;
			public const char LEFTWARDS_ARROW_WITH_PLUS_BELOW = (char)0x2946;
			/// <summary> (This is a composition; consider avoiding.) Formerly LEFT ARROW WITH STROKE. </summary>
			public const char LEFTWARDS_ARROW_WITH_STROKE = (char)0x219A;
			/// <summary> Formerly LEFT ARROW WITH TAIL. </summary>
			public const char LEFTWARDS_ARROW_WITH_TAIL = (char)0x21A2;
			public const char LEFTWARDS_ARROW_WITH_TIP_DOWNWARDS = (char)0x2B10;
			public const char LEFTWARDS_ARROW_WITH_TIP_UPWARDS = (char)0x2B11;
			public const char LEFTWARDS_ARROW_WITH_VERTICAL_STROKE = (char)0x21F7;
			public const char LEFTWARDS_BLACK_ARROW = (char)0x2B05;
			/// <summary> Formerly LEFT DASHED ARROW. </summary>
			public const char LEFTWARDS_DASHED_ARROW = (char)0x21E0;
			/// <summary> Formerly LEFT DOUBLE ARROW. </summary>
			public const char LEFTWARDS_DOUBLE_ARROW = (char)0x21D0;
			public const char LEFTWARDS_DOUBLE_ARROW_FROM_BAR = (char)0x2906;
			public const char LEFTWARDS_DOUBLE_ARROW_TAIL = (char)0x291B;
			/// <summary> (This is a composition; consider avoiding.) Formerly LEFT DOUBLE ARROW WITH STROKE. </summary>
			public const char LEFTWARDS_DOUBLE_ARROW_WITH_STROKE = (char)0x21CD;
			public const char LEFTWARDS_DOUBLE_ARROW_WITH_VERTICAL_STROKE = (char)0x2902;
			public const char LEFTWARDS_DOUBLE_DASH_ARROW = (char)0x290C;
			/// <summary> Formerly LEFT HARPOON OVER RIGHT HARPOON. </summary>
			public const char LEFTWARDS_HARPOON_OVER_RIGHTWARDS_HARPOON = (char)0x21CB;
			/// <summary> Formerly LEFT HARPOON WITH BARB DOWN. </summary>
			public const char LEFTWARDS_HARPOON_WITH_BARB_DOWNWARDS = (char)0x21BD;
			public const char LEFTWARDS_HARPOON_WITH_BARB_DOWN_ABOVE_RIGHTWARDS_HARPOON_WITH_BARB_DOWN = (char)0x2967;
			public const char LEFTWARDS_HARPOON_WITH_BARB_DOWN_BELOW_LONG_DASH = (char)0x296B;
			public const char LEFTWARDS_HARPOON_WITH_BARB_DOWN_FROM_BAR = (char)0x295E;
			public const char LEFTWARDS_HARPOON_WITH_BARB_DOWN_TO_BAR = (char)0x2956;
			/// <summary> Formerly LEFT HARPOON WITH BARB UP. </summary>
			public const char LEFTWARDS_HARPOON_WITH_BARB_UPWARDS = (char)0x21BC;
			public const char LEFTWARDS_HARPOON_WITH_BARB_UP_ABOVE_LEFTWARDS_HARPOON_WITH_BARB_DOWN = (char)0x2962;
			public const char LEFTWARDS_HARPOON_WITH_BARB_UP_ABOVE_LONG_DASH = (char)0x296A;
			public const char LEFTWARDS_HARPOON_WITH_BARB_UP_ABOVE_RIGHTWARDS_HARPOON_WITH_BARB_UP = (char)0x2966;
			public const char LEFTWARDS_HARPOON_WITH_BARB_UP_FROM_BAR = (char)0x295A;
			public const char LEFTWARDS_HARPOON_WITH_BARB_UP_TO_BAR = (char)0x2952;
			public const char LEFTWARDS_OPEN_HEADED_ARROW = (char)0x21FD;
			/// <summary> Formerly LEFT PAIRED ARROWS. </summary>
			public const char LEFTWARDS_PAIRED_ARROWS = (char)0x21C7;
			/// <summary> Formerly LEFT SQUIGGLE ARROW. </summary>
			public const char LEFTWARDS_SQUIGGLE_ARROW = (char)0x21DC;
			/// <summary> Formerly LEFT TRIPLE ARROW. </summary>
			public const char LEFTWARDS_TRIPLE_ARROW = (char)0x21DA;
			public const char LEFTWARDS_TRIPLE_DASH_ARROW = (char)0x290E;
			/// <summary> Formerly LEFT TWO HEADED ARROW. </summary>
			public const char LEFTWARDS_TWO_HEADED_ARROW = (char)0x219E;
			/// <summary> Formerly LEFT WAVE ARROW. </summary>
			public const char LEFTWARDS_WAVE_ARROW = (char)0x219C;
			/// <summary> Formerly WHITE LEFT ARROW. </summary>
			public const char LEFTWARDS_WHITE_ARROW = (char)0x21E6;
			public const char LEFT_AND_RIGHT_DOUBLE_TURNSTILE = (char)0x27DA;
			public const char LEFT_AND_RIGHT_TACK = (char)0x27DB;
			/// <summary> Formerly OPENING ANGLE BRACKET. </summary>
			public const char LEFT_ANGLE_BRACKET = (char)0x3008;
			public const char LEFT_ANGLE_BRACKET_WITH_DOT = (char)0x2991;
			public const char LEFT_ARC_LESS_THAN_BRACKET = (char)0x2993;
			public const char LEFT_BARB_DOWN_RIGHT_BARB_DOWN_HARPOON = (char)0x2950;
			public const char LEFT_BARB_DOWN_RIGHT_BARB_UP_HARPOON = (char)0x294B;
			public const char LEFT_BARB_UP_RIGHT_BARB_DOWN_HARPOON = (char)0x294A;
			public const char LEFT_BARB_UP_RIGHT_BARB_UP_HARPOON = (char)0x294E;
			/// <summary> Formerly OPENING BLACK LENTICULAR BRACKET. </summary>
			public const char LEFT_BLACK_LENTICULAR_BRACKET = (char)0x3010;
			public const char LEFT_BLACK_TORTOISE_SHELL_BRACKET = (char)0x2997;
			public const char LEFT_CEILING = (char)0x2308;
			/// <summary> Formerly OPENING CORNER BRACKET. </summary>
			public const char LEFT_CORNER_BRACKET = (char)0x300C;
			/// <summary> Formerly OPENING CURLY BRACKET. </summary>
			public const char LEFT_CURLY_BRACKET = (char)0x007B;
			public const char LEFT_CURLY_BRACKET_LOWER_HOOK = (char)0x23A9;
			public const char LEFT_CURLY_BRACKET_MIDDLE_PIECE = (char)0x23A8;
			public const char LEFT_CURLY_BRACKET_UPPER_HOOK = (char)0x23A7;
			public const char LEFT_DOTTED_SUBSTITUTION_BRACKET = (char)0x2E04;
			/// <summary> Formerly OPENING DOUBLE ANGLE BRACKET. </summary>
			public const char LEFT_DOUBLE_ANGLE_BRACKET = (char)0x300A;
			/// <summary> Formerly DOUBLE TURNED COMMA QUOTATION MARK. </summary>
			public const char LEFT_DOUBLE_QUOTATION_MARK = (char)0x201C;
			public const char LEFT_DOUBLE_WIGGLY_FENCE = (char)0x29DA;
			public const char LEFT_FISH_TAIL = (char)0x297C;
			public const char LEFT_FIVE_EIGHTHS_BLOCK = (char)0x258B;
			public const char LEFT_FLOOR = (char)0x230A;
			public const char LEFT_HALF_BLACK_CIRCLE = (char)0x25D6;
			public const char LEFT_HALF_BLOCK = (char)0x258C;
			public const char LEFT_LOW_PARAPHRASE_BRACKET = (char)0x2E1C;
			public const char LEFT_MULTIMAP = (char)0x27DC;
			public const char LEFT_NORMAL_FACTOR_SEMIDIRECT_PRODUCT = (char)0x22C9;
			public const char LEFT_ONE_EIGHTH_BLOCK = (char)0x258F;
			public const char LEFT_ONE_QUARTER_BLOCK = (char)0x258E;
			public const char LEFT_OUTER_JOIN = (char)0x27D5;
			/// <summary> Formerly OPENING PARENTHESIS. </summary>
			public const char LEFT_PARENTHESIS = (char)0x0028;
			public const char LEFT_PARENTHESIS_EXTENSION = (char)0x239C;
			public const char LEFT_PARENTHESIS_LOWER_HOOK = (char)0x239D;
			public const char LEFT_PARENTHESIS_UPPER_HOOK = (char)0x239B;
			/// <summary> (This is a composition; consider avoiding.) Formerly BRA. </summary>
			public const char LEFT_POINTING_ANGLE_BRACKET = (char)0x2329;
			public const char LEFT_POINTING_CURVED_ANGLE_BRACKET = (char)0x29FC;
			/// <summary> Formerly LEFT POINTING GUILLEMET. </summary>
			public const char LEFT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK = (char)0x00AB;
			public const char LEFT_RAISED_OMISSION_BRACKET = (char)0x2E0C;
			public const char LEFT_RIGHT_ARROW = (char)0x2194;
			public const char LEFT_RIGHT_ARROW_THROUGH_SMALL_CIRCLE = (char)0x2948;
			public const char LEFT_RIGHT_ARROW_WITH_DOUBLE_VERTICAL_STROKE = (char)0x21FC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LEFT_RIGHT_ARROW_WITH_STROKE = (char)0x21AE;
			public const char LEFT_RIGHT_ARROW_WITH_VERTICAL_STROKE = (char)0x21F9;
			public const char LEFT_RIGHT_BLACK_ARROW = (char)0x2B0C;
			public const char LEFT_RIGHT_DOUBLE_ARROW = (char)0x21D4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LEFT_RIGHT_DOUBLE_ARROW_WITH_STROKE = (char)0x21CE;
			public const char LEFT_RIGHT_DOUBLE_ARROW_WITH_VERTICAL_STROKE = (char)0x2904;
			public const char LEFT_RIGHT_OPEN_HEADED_ARROW = (char)0x21FF;
			public const char LEFT_RIGHT_WAVE_ARROW = (char)0x21AD;
			public const char LEFT_RIGHT_WHITE_ARROW = (char)0x2B04;
			public const char LEFT_SEMIDIRECT_PRODUCT = (char)0x22CB;
			public const char LEFT_SEVEN_EIGHTHS_BLOCK = (char)0x2589;
			/// <summary> Formerly LEFT-SHADED WHITE RIGHT ARROW. </summary>
			public const char LEFT_SHADED_WHITE_RIGHTWARDS_ARROW = (char)0x27AA;
			public const char LEFT_SIDE_ARC_ANTICLOCKWISE_ARROW = (char)0x2939;
			/// <summary> Formerly SINGLE TURNED COMMA QUOTATION MARK. </summary>
			public const char LEFT_SINGLE_QUOTATION_MARK = (char)0x2018;
			/// <summary> Formerly OPENING SQUARE BRACKET. </summary>
			public const char LEFT_SQUARE_BRACKET = (char)0x005B;
			public const char LEFT_SQUARE_BRACKET_EXTENSION = (char)0x23A2;
			public const char LEFT_SQUARE_BRACKET_LOWER_CORNER = (char)0x23A3;
			public const char LEFT_SQUARE_BRACKET_UPPER_CORNER = (char)0x23A1;
			public const char LEFT_SQUARE_BRACKET_WITH_QUILL = (char)0x2045;
			public const char LEFT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER = (char)0x298F;
			public const char LEFT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER = (char)0x298D;
			public const char LEFT_SQUARE_BRACKET_WITH_UNDERBAR = (char)0x298B;
			public const char LEFT_SUBSTITUTION_BRACKET = (char)0x2E02;
			public const char LEFT_S_SHAPED_BAG_DELIMITER = (char)0x27C5;
			public const char LEFT_TACK = (char)0x22A3;
			public const char LEFT_THREE_EIGHTHS_BLOCK = (char)0x258D;
			/// <summary> Formerly LEFT THREE QUARTER BLOCK. </summary>
			public const char LEFT_THREE_QUARTERS_BLOCK = (char)0x258A;
			/// <summary> Formerly OPENING TORTOISE SHELL BRACKET. </summary>
			public const char LEFT_TORTOISE_SHELL_BRACKET = (char)0x3014;
			public const char LEFT_TO_RIGHT_EMBEDDING = (char)0x202A;
			public const char LEFT_TO_RIGHT_MARK = (char)0x200E;
			public const char LEFT_TO_RIGHT_OVERRIDE = (char)0x202D;
			public const char LEFT_TRANSPOSITION_BRACKET = (char)0x2E09;
			public const char LEFT_TRIANGLE_BESIDE_VERTICAL_BAR = (char)0x29CF;
			public const char LEFT_VERTICAL_BOX_LINE = (char)0x23B8;
			/// <summary> Formerly OPENING WHITE CORNER BRACKET. </summary>
			public const char LEFT_WHITE_CORNER_BRACKET = (char)0x300E;
			public const char LEFT_WHITE_CURLY_BRACKET = (char)0x2983;
			/// <summary> Formerly OPENING WHITE LENTICULAR BRACKET. </summary>
			public const char LEFT_WHITE_LENTICULAR_BRACKET = (char)0x3016;
			public const char LEFT_WHITE_PARENTHESIS = (char)0x2985;
			/// <summary> Formerly OPENING WHITE SQUARE BRACKET. </summary>
			public const char LEFT_WHITE_SQUARE_BRACKET = (char)0x301A;
			/// <summary> Formerly OPENING WHITE TORTOISE SHELL BRACKET. </summary>
			public const char LEFT_WHITE_TORTOISE_SHELL_BRACKET = (char)0x3018;
			public const char LEFT_WIGGLY_FENCE = (char)0x29D8;
			public const char LEO = (char)0x264C;
			public const char LESS_THAN_ABOVE_DOUBLE_LINE_EQUAL_ABOVE_GREATER_THAN = (char)0x2A8B;
			public const char LESS_THAN_ABOVE_GREATER_THAN_ABOVE_DOUBLE_LINE_EQUAL = (char)0x2A91;
			public const char LESS_THAN_ABOVE_LEFTWARDS_ARROW = (char)0x2976;
			public const char LESS_THAN_ABOVE_SIMILAR_ABOVE_GREATER_THAN = (char)0x2A8F;
			public const char LESS_THAN_ABOVE_SIMILAR_OR_EQUAL = (char)0x2A8D;
			public const char LESS_THAN_ABOVE_SLANTED_EQUAL_ABOVE_GREATER_THAN_ABOVE_SLANTED_EQUAL = (char)0x2A93;
			public const char LESS_THAN_AND_NOT_APPROXIMATE = (char)0x2A89;
			public const char LESS_THAN_AND_SINGLE_LINE_NOT_EQUAL_TO = (char)0x2A87;
			/// <summary> Formerly LESS THAN BUT NOT EQUAL TO. </summary>
			public const char LESS_THAN_BUT_NOT_EQUAL_TO = (char)0x2268;
			/// <summary> Formerly LESS THAN BUT NOT EQUIVALENT TO. </summary>
			public const char LESS_THAN_BUT_NOT_EQUIVALENT_TO = (char)0x22E6;
			public const char LESS_THAN_CLOSED_BY_CURVE = (char)0x2AA6;
			public const char LESS_THAN_CLOSED_BY_CURVE_ABOVE_SLANTED_EQUAL = (char)0x2AA8;
			/// <summary> Formerly LESS THAN EQUAL TO OR GREATER THAN. </summary>
			public const char LESS_THAN_EQUAL_TO_OR_GREATER_THAN = (char)0x22DA;
			public const char LESS_THAN_OR_APPROXIMATE = (char)0x2A85;
			/// <summary> Formerly LESS THAN OR EQUAL TO. </summary>
			public const char LESS_THAN_OR_EQUAL_TO = (char)0x2264;
			/// <summary> Formerly LESS THAN OR EQUIVALENT TO. </summary>
			public const char LESS_THAN_OR_EQUIVALENT_TO = (char)0x2272;
			/// <summary> Formerly LESS THAN OR GREATER THAN. </summary>
			public const char LESS_THAN_OR_GREATER_THAN = (char)0x2276;
			public const char LESS_THAN_OR_SLANTED_EQUAL_TO = (char)0x2A7D;
			public const char LESS_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_ABOVE = (char)0x2A81;
			public const char LESS_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_ABOVE_RIGHT = (char)0x2A83;
			public const char LESS_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_INSIDE = (char)0x2A7F;
			/// <summary> Formerly LESS THAN OVER EQUAL TO. </summary>
			public const char LESS_THAN_OVER_EQUAL_TO = (char)0x2266;
			public const char LESS_THAN_SIGN = (char)0x003C;
			public const char LESS_THAN_WITH_CIRCLE_INSIDE = (char)0x2A79;
			/// <summary> Formerly LESS THAN WITH DOT. </summary>
			public const char LESS_THAN_WITH_DOT = (char)0x22D6;
			public const char LESS_THAN_WITH_QUESTION_MARK_ABOVE = (char)0x2A7B;
			public const char LIBRA = (char)0x264E;
			public const char LIGHTNING = (char)0x2607;
			public const char LIGHT_LEFT_TORTOISE_SHELL_BRACKET_ORNAMENT = (char)0x2772;
			public const char LIGHT_RIGHT_TORTOISE_SHELL_BRACKET_ORNAMENT = (char)0x2773;
			public const char LIGHT_SHADE = (char)0x2591;
			public const char LIGHT_VERTICAL_BAR = (char)0x2758;
			public const char LIMBU_DIGIT_EIGHT = (char)0x194E;
			public const char LIMBU_DIGIT_FIVE = (char)0x194B;
			public const char LIMBU_DIGIT_FOUR = (char)0x194A;
			public const char LIMBU_DIGIT_NINE = (char)0x194F;
			public const char LIMBU_DIGIT_ONE = (char)0x1947;
			public const char LIMBU_DIGIT_SEVEN = (char)0x194D;
			public const char LIMBU_DIGIT_SIX = (char)0x194C;
			public const char LIMBU_DIGIT_THREE = (char)0x1949;
			public const char LIMBU_DIGIT_TWO = (char)0x1948;
			public const char LIMBU_DIGIT_ZERO = (char)0x1946;
			public const char LIMBU_EXCLAMATION_MARK = (char)0x1944;
			public const char LIMBU_LETTER_BA = (char)0x1912;
			public const char LIMBU_LETTER_BHA = (char)0x1913;
			public const char LIMBU_LETTER_CA = (char)0x1906;
			public const char LIMBU_LETTER_CHA = (char)0x1907;
			public const char LIMBU_LETTER_DA = (char)0x190D;
			public const char LIMBU_LETTER_DHA = (char)0x190E;
			public const char LIMBU_LETTER_GA = (char)0x1903;
			public const char LIMBU_LETTER_GHA = (char)0x1904;
			public const char LIMBU_LETTER_HA = (char)0x191C;
			public const char LIMBU_LETTER_JA = (char)0x1908;
			public const char LIMBU_LETTER_JHA = (char)0x1909;
			public const char LIMBU_LETTER_KA = (char)0x1901;
			public const char LIMBU_LETTER_KHA = (char)0x1902;
			public const char LIMBU_LETTER_LA = (char)0x1917;
			public const char LIMBU_LETTER_MA = (char)0x1914;
			public const char LIMBU_LETTER_NA = (char)0x190F;
			public const char LIMBU_LETTER_NGA = (char)0x1905;
			public const char LIMBU_LETTER_PA = (char)0x1910;
			public const char LIMBU_LETTER_PHA = (char)0x1911;
			public const char LIMBU_LETTER_RA = (char)0x1916;
			public const char LIMBU_LETTER_SA = (char)0x191B;
			public const char LIMBU_LETTER_SHA = (char)0x1919;
			public const char LIMBU_LETTER_SSA = (char)0x191A;
			public const char LIMBU_LETTER_TA = (char)0x190B;
			public const char LIMBU_LETTER_THA = (char)0x190C;
			public const char LIMBU_LETTER_WA = (char)0x1918;
			public const char LIMBU_LETTER_YA = (char)0x1915;
			public const char LIMBU_LETTER_YAN = (char)0x190A;
			public const char LIMBU_QUESTION_MARK = (char)0x1945;
			public const char LIMBU_SIGN_KEMPHRENG = (char)0x193A;
			public const char LIMBU_SIGN_LOO = (char)0x1940;
			public const char LIMBU_SIGN_MUKPHRENG = (char)0x1939;
			public const char LIMBU_SIGN_SA_I = (char)0x193B;
			public const char LIMBU_SMALL_LETTER_ANUSVARA = (char)0x1932;
			public const char LIMBU_SMALL_LETTER_KA = (char)0x1930;
			public const char LIMBU_SMALL_LETTER_LA = (char)0x1938;
			public const char LIMBU_SMALL_LETTER_MA = (char)0x1936;
			public const char LIMBU_SMALL_LETTER_NA = (char)0x1934;
			public const char LIMBU_SMALL_LETTER_NGA = (char)0x1931;
			public const char LIMBU_SMALL_LETTER_PA = (char)0x1935;
			public const char LIMBU_SMALL_LETTER_RA = (char)0x1937;
			public const char LIMBU_SMALL_LETTER_TA = (char)0x1933;
			public const char LIMBU_SUBJOINED_LETTER_RA = (char)0x192A;
			public const char LIMBU_SUBJOINED_LETTER_WA = (char)0x192B;
			public const char LIMBU_SUBJOINED_LETTER_YA = (char)0x1929;
			public const char LIMBU_VOWEL_CARRIER_LETTER = (char)0x1900;
			public const char LIMBU_VOWEL_SIGN_A = (char)0x1920;
			public const char LIMBU_VOWEL_SIGN_AI = (char)0x1924;
			public const char LIMBU_VOWEL_SIGN_AU = (char)0x1926;
			public const char LIMBU_VOWEL_SIGN_E = (char)0x1927;
			public const char LIMBU_VOWEL_SIGN_EE = (char)0x1923;
			public const char LIMBU_VOWEL_SIGN_I = (char)0x1921;
			public const char LIMBU_VOWEL_SIGN_O = (char)0x1928;
			public const char LIMBU_VOWEL_SIGN_OO = (char)0x1925;
			public const char LIMBU_VOWEL_SIGN_U = (char)0x1922;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char LIMITED_LIABILITY_SIGN = (char)0x32CF;
			public const char LINE_INTEGRATION_NOT_INCLUDING_THE_POLE = (char)0x2A14;
			public const char LINE_INTEGRATION_WITH_RECTANGULAR_PATH_AROUND_POLE = (char)0x2A12;
			public const char LINE_INTEGRATION_WITH_SEMICIRCULAR_PATH_AROUND_POLE = (char)0x2A13;
			public const char LINE_SEPARATOR = (char)0x2028;
			public const char LIRA_SIGN = (char)0x20A4;
			public const char LOGICAL_AND = (char)0x2227;
			public const char LOGICAL_AND_WITH_DOT_ABOVE = (char)0x2A51;
			public const char LOGICAL_AND_WITH_DOUBLE_OVERBAR = (char)0x2A5E;
			public const char LOGICAL_AND_WITH_DOUBLE_UNDERBAR = (char)0x2A60;
			public const char LOGICAL_AND_WITH_HORIZONTAL_DASH = (char)0x2A5C;
			public const char LOGICAL_AND_WITH_MIDDLE_STEM = (char)0x2A5A;
			public const char LOGICAL_AND_WITH_UNDERBAR = (char)0x2A5F;
			public const char LOGICAL_OR = (char)0x2228;
			public const char LOGICAL_OR_OVERLAPPING_LOGICAL_AND = (char)0x2A59;
			public const char LOGICAL_OR_WITH_DOT_ABOVE = (char)0x2A52;
			public const char LOGICAL_OR_WITH_DOUBLE_OVERBAR = (char)0x2A62;
			public const char LOGICAL_OR_WITH_DOUBLE_UNDERBAR = (char)0x2A63;
			public const char LOGICAL_OR_WITH_HORIZONTAL_DASH = (char)0x2A5D;
			public const char LOGICAL_OR_WITH_MIDDLE_STEM = (char)0x2A5B;
			public const char LONG_DASH_FROM_LEFT_MEMBER_OF_DOUBLE_VERTICAL = (char)0x2AE6;
			public const char LONG_LEFTWARDS_ARROW = (char)0x27F5;
			public const char LONG_LEFTWARDS_ARROW_FROM_BAR = (char)0x27FB;
			public const char LONG_LEFTWARDS_DOUBLE_ARROW = (char)0x27F8;
			public const char LONG_LEFTWARDS_DOUBLE_ARROW_FROM_BAR = (char)0x27FD;
			public const char LONG_LEFT_RIGHT_ARROW = (char)0x27F7;
			public const char LONG_LEFT_RIGHT_DOUBLE_ARROW = (char)0x27FA;
			public const char LONG_LEFT_TACK = (char)0x27DE;
			public const char LONG_RIGHTWARDS_ARROW = (char)0x27F6;
			public const char LONG_RIGHTWARDS_ARROW_FROM_BAR = (char)0x27FC;
			public const char LONG_RIGHTWARDS_DOUBLE_ARROW = (char)0x27F9;
			public const char LONG_RIGHTWARDS_DOUBLE_ARROW_FROM_BAR = (char)0x27FE;
			public const char LONG_RIGHTWARDS_SQUIGGLE_ARROW = (char)0x27FF;
			public const char LONG_RIGHT_TACK = (char)0x27DD;
			public const char LOWER_BLADE_SCISSORS = (char)0x2703;
			public const char LOWER_FIVE_EIGHTHS_BLOCK = (char)0x2585;
			public const char LOWER_HALF_BLOCK = (char)0x2584;
			public const char LOWER_HALF_CIRCLE = (char)0x25E1;
			public const char LOWER_HALF_INVERSE_WHITE_CIRCLE = (char)0x25DB;
			public const char LOWER_LEFT_QUADRANT_CIRCULAR_ARC = (char)0x25DF;
			public const char LOWER_LEFT_SEMICIRCULAR_ANTICLOCKWISE_ARROW = (char)0x293F;
			public const char LOWER_LEFT_TRIANGLE = (char)0x25FA;
			public const char LOWER_ONE_EIGHTH_BLOCK = (char)0x2581;
			public const char LOWER_ONE_QUARTER_BLOCK = (char)0x2582;
			public const char LOWER_RIGHT_CORNER_WITH_DOT = (char)0x27D3;
			public const char LOWER_RIGHT_DROP_SHADOWED_WHITE_SQUARE = (char)0x274F;
			public const char LOWER_RIGHT_PENCIL = (char)0x270E;
			public const char LOWER_RIGHT_QUADRANT_CIRCULAR_ARC = (char)0x25DE;
			public const char LOWER_RIGHT_SEMICIRCULAR_CLOCKWISE_ARROW = (char)0x293E;
			public const char LOWER_RIGHT_SHADOWED_WHITE_SQUARE = (char)0x2751;
			public const char LOWER_RIGHT_TRIANGLE = (char)0x25FF;
			public const char LOWER_SEVEN_EIGHTHS_BLOCK = (char)0x2587;
			public const char LOWER_THREE_EIGHTHS_BLOCK = (char)0x2583;
			/// <summary> Formerly LOWER THREE QUARTER BLOCK. </summary>
			public const char LOWER_THREE_QUARTERS_BLOCK = (char)0x2586;
			public const char LOW_ASTERISK = (char)0x204E;
			public const char LOW_DOUBLE_PRIME_QUOTATION_MARK = (char)0x301F;
			/// <summary> Formerly SPACING UNDERSCORE. </summary>
			public const char LOW_LINE = (char)0x005F;
			public const char LOZENGE = (char)0x25CA;
			public const char LOZENGE_DIVIDED_BY_HORIZONTAL_RULE = (char)0x27E0;
			public const char L_B_BAR_SYMBOL = (char)0x2114;
		}
		public class M {
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING MACRON. </summary>
			public const char MACRON = (char)0x00AF;
			public const char MALAYALAM_AU_LENGTH_MARK = (char)0x0D57;
			public const char MALAYALAM_DIGIT_EIGHT = (char)0x0D6E;
			public const char MALAYALAM_DIGIT_FIVE = (char)0x0D6B;
			public const char MALAYALAM_DIGIT_FOUR = (char)0x0D6A;
			public const char MALAYALAM_DIGIT_NINE = (char)0x0D6F;
			public const char MALAYALAM_DIGIT_ONE = (char)0x0D67;
			public const char MALAYALAM_DIGIT_SEVEN = (char)0x0D6D;
			public const char MALAYALAM_DIGIT_SIX = (char)0x0D6C;
			public const char MALAYALAM_DIGIT_THREE = (char)0x0D69;
			public const char MALAYALAM_DIGIT_TWO = (char)0x0D68;
			public const char MALAYALAM_DIGIT_ZERO = (char)0x0D66;
			public const char MALAYALAM_LETTER_A = (char)0x0D05;
			public const char MALAYALAM_LETTER_AA = (char)0x0D06;
			public const char MALAYALAM_LETTER_AI = (char)0x0D10;
			public const char MALAYALAM_LETTER_AU = (char)0x0D14;
			public const char MALAYALAM_LETTER_BA = (char)0x0D2C;
			public const char MALAYALAM_LETTER_BHA = (char)0x0D2D;
			public const char MALAYALAM_LETTER_CA = (char)0x0D1A;
			public const char MALAYALAM_LETTER_CHA = (char)0x0D1B;
			public const char MALAYALAM_LETTER_DA = (char)0x0D26;
			public const char MALAYALAM_LETTER_DDA = (char)0x0D21;
			public const char MALAYALAM_LETTER_DDHA = (char)0x0D22;
			public const char MALAYALAM_LETTER_DHA = (char)0x0D27;
			public const char MALAYALAM_LETTER_E = (char)0x0D0E;
			public const char MALAYALAM_LETTER_EE = (char)0x0D0F;
			public const char MALAYALAM_LETTER_GA = (char)0x0D17;
			public const char MALAYALAM_LETTER_GHA = (char)0x0D18;
			public const char MALAYALAM_LETTER_HA = (char)0x0D39;
			public const char MALAYALAM_LETTER_I = (char)0x0D07;
			public const char MALAYALAM_LETTER_II = (char)0x0D08;
			public const char MALAYALAM_LETTER_JA = (char)0x0D1C;
			public const char MALAYALAM_LETTER_JHA = (char)0x0D1D;
			public const char MALAYALAM_LETTER_KA = (char)0x0D15;
			public const char MALAYALAM_LETTER_KHA = (char)0x0D16;
			public const char MALAYALAM_LETTER_LA = (char)0x0D32;
			public const char MALAYALAM_LETTER_LLA = (char)0x0D33;
			public const char MALAYALAM_LETTER_LLLA = (char)0x0D34;
			public const char MALAYALAM_LETTER_MA = (char)0x0D2E;
			public const char MALAYALAM_LETTER_NA = (char)0x0D28;
			public const char MALAYALAM_LETTER_NGA = (char)0x0D19;
			public const char MALAYALAM_LETTER_NNA = (char)0x0D23;
			public const char MALAYALAM_LETTER_NYA = (char)0x0D1E;
			public const char MALAYALAM_LETTER_O = (char)0x0D12;
			public const char MALAYALAM_LETTER_OO = (char)0x0D13;
			public const char MALAYALAM_LETTER_PA = (char)0x0D2A;
			public const char MALAYALAM_LETTER_PHA = (char)0x0D2B;
			public const char MALAYALAM_LETTER_RA = (char)0x0D30;
			public const char MALAYALAM_LETTER_RRA = (char)0x0D31;
			public const char MALAYALAM_LETTER_SA = (char)0x0D38;
			public const char MALAYALAM_LETTER_SHA = (char)0x0D36;
			public const char MALAYALAM_LETTER_SSA = (char)0x0D37;
			public const char MALAYALAM_LETTER_TA = (char)0x0D24;
			public const char MALAYALAM_LETTER_THA = (char)0x0D25;
			public const char MALAYALAM_LETTER_TTA = (char)0x0D1F;
			public const char MALAYALAM_LETTER_TTHA = (char)0x0D20;
			public const char MALAYALAM_LETTER_U = (char)0x0D09;
			public const char MALAYALAM_LETTER_UU = (char)0x0D0A;
			public const char MALAYALAM_LETTER_VA = (char)0x0D35;
			public const char MALAYALAM_LETTER_VOCALIC_L = (char)0x0D0C;
			public const char MALAYALAM_LETTER_VOCALIC_LL = (char)0x0D61;
			public const char MALAYALAM_LETTER_VOCALIC_R = (char)0x0D0B;
			public const char MALAYALAM_LETTER_VOCALIC_RR = (char)0x0D60;
			public const char MALAYALAM_LETTER_YA = (char)0x0D2F;
			public const char MALAYALAM_SIGN_ANUSVARA = (char)0x0D02;
			public const char MALAYALAM_SIGN_VIRAMA = (char)0x0D4D;
			public const char MALAYALAM_SIGN_VISARGA = (char)0x0D03;
			public const char MALAYALAM_VOWEL_SIGN_AA = (char)0x0D3E;
			public const char MALAYALAM_VOWEL_SIGN_AI = (char)0x0D48;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MALAYALAM_VOWEL_SIGN_AU = (char)0x0D4C;
			public const char MALAYALAM_VOWEL_SIGN_E = (char)0x0D46;
			public const char MALAYALAM_VOWEL_SIGN_EE = (char)0x0D47;
			public const char MALAYALAM_VOWEL_SIGN_I = (char)0x0D3F;
			public const char MALAYALAM_VOWEL_SIGN_II = (char)0x0D40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MALAYALAM_VOWEL_SIGN_O = (char)0x0D4A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MALAYALAM_VOWEL_SIGN_OO = (char)0x0D4B;
			public const char MALAYALAM_VOWEL_SIGN_U = (char)0x0D41;
			public const char MALAYALAM_VOWEL_SIGN_UU = (char)0x0D42;
			public const char MALAYALAM_VOWEL_SIGN_VOCALIC_R = (char)0x0D43;
			public const char MALE_AND_FEMALE_SIGN = (char)0x26A5;
			public const char MALE_SIGN = (char)0x2642;
			public const char MALE_WITH_STROKE_AND_MALE_AND_FEMALE_SIGN = (char)0x26A7;
			public const char MALE_WITH_STROKE_SIGN = (char)0x26A6;
			public const char MALTESE_CROSS = (char)0x2720;
			public const char MARRIAGE_SYMBOL = (char)0x26AD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MASCULINE_ORDINAL_INDICATOR = (char)0x00BA;
			public const char MASU_MARK = (char)0x303C;
			public const char MATHEMATICAL_LEFT_ANGLE_BRACKET = (char)0x27E8;
			public const char MATHEMATICAL_LEFT_DOUBLE_ANGLE_BRACKET = (char)0x27EA;
			public const char MATHEMATICAL_LEFT_WHITE_SQUARE_BRACKET = (char)0x27E6;
			public const char MATHEMATICAL_RIGHT_ANGLE_BRACKET = (char)0x27E9;
			public const char MATHEMATICAL_RIGHT_DOUBLE_ANGLE_BRACKET = (char)0x27EB;
			public const char MATHEMATICAL_RIGHT_WHITE_SQUARE_BRACKET = (char)0x27E7;
			public const char MEASURED_ANGLE = (char)0x2221;
			public const char MEASURED_ANGLE_OPENING_LEFT = (char)0x299B;
			public const char MEASURED_ANGLE_WITH_OPEN_ARM_ENDING_IN_ARROW_POINTING_DOWN_AND_LEFT = (char)0x29AB;
			public const char MEASURED_ANGLE_WITH_OPEN_ARM_ENDING_IN_ARROW_POINTING_DOWN_AND_RIGHT = (char)0x29AA;
			public const char MEASURED_ANGLE_WITH_OPEN_ARM_ENDING_IN_ARROW_POINTING_LEFT_AND_DOWN = (char)0x29AF;
			public const char MEASURED_ANGLE_WITH_OPEN_ARM_ENDING_IN_ARROW_POINTING_LEFT_AND_UP = (char)0x29AD;
			public const char MEASURED_ANGLE_WITH_OPEN_ARM_ENDING_IN_ARROW_POINTING_RIGHT_AND_DOWN = (char)0x29AE;
			public const char MEASURED_ANGLE_WITH_OPEN_ARM_ENDING_IN_ARROW_POINTING_RIGHT_AND_UP = (char)0x29AC;
			public const char MEASURED_ANGLE_WITH_OPEN_ARM_ENDING_IN_ARROW_POINTING_UP_AND_LEFT = (char)0x29A9;
			public const char MEASURED_ANGLE_WITH_OPEN_ARM_ENDING_IN_ARROW_POINTING_UP_AND_RIGHT = (char)0x29A8;
			public const char MEASURED_BY = (char)0x225E;
			public const char MEASURED_RIGHT_ANGLE_WITH_DOT = (char)0x299D;
			public const char MEDIUM_BLACK_CIRCLE = (char)0x26AB;
			public const char MEDIUM_FLATTENED_LEFT_PARENTHESIS_ORNAMENT = (char)0x276A;
			public const char MEDIUM_FLATTENED_RIGHT_PARENTHESIS_ORNAMENT = (char)0x276B;
			public const char MEDIUM_LEFT_CURLY_BRACKET_ORNAMENT = (char)0x2774;
			public const char MEDIUM_LEFT_PARENTHESIS_ORNAMENT = (char)0x2768;
			public const char MEDIUM_LEFT_POINTING_ANGLE_BRACKET_ORNAMENT = (char)0x276C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MEDIUM_MATHEMATICAL_SPACE = (char)0x205F;
			public const char MEDIUM_RIGHT_CURLY_BRACKET_ORNAMENT = (char)0x2775;
			public const char MEDIUM_RIGHT_PARENTHESIS_ORNAMENT = (char)0x2769;
			public const char MEDIUM_RIGHT_POINTING_ANGLE_BRACKET_ORNAMENT = (char)0x276D;
			public const char MEDIUM_SHADE = (char)0x2592;
			public const char MEDIUM_SMALL_WHITE_CIRCLE = (char)0x26AC;
			public const char MEDIUM_VERTICAL_BAR = (char)0x2759;
			public const char MEDIUM_WHITE_CIRCLE = (char)0x26AA;
			public const char MERCURY = (char)0x263F;
			public const char METRICAL_BREVE = (char)0x23D1;
			public const char METRICAL_LONG_OVER_SHORT = (char)0x23D2;
			public const char METRICAL_LONG_OVER_TWO_SHORTS = (char)0x23D4;
			public const char METRICAL_PENTASEME = (char)0x23D9;
			public const char METRICAL_SHORT_OVER_LONG = (char)0x23D3;
			public const char METRICAL_TETRASEME = (char)0x23D8;
			public const char METRICAL_TRISEME = (char)0x23D7;
			public const char METRICAL_TWO_SHORTS_JOINED = (char)0x23D6;
			public const char METRICAL_TWO_SHORTS_OVER_LONG = (char)0x23D5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MICRO_SIGN = (char)0x00B5;
			public const char MIDDLE_DOT = (char)0x00B7;
			public const char MIDLINE_HORIZONTAL_ELLIPSIS = (char)0x22EF;
			public const char MILL_SIGN = (char)0x20A5;
			public const char MINUS_OR_PLUS_SIGN = (char)0x2213;
			public const char MINUS_SIGN = (char)0x2212;
			public const char MINUS_SIGN_IN_TRIANGLE = (char)0x2A3A;
			public const char MINUS_SIGN_WITH_COMMA_ABOVE = (char)0x2A29;
			public const char MINUS_SIGN_WITH_DOT_BELOW = (char)0x2A2A;
			public const char MINUS_SIGN_WITH_FALLING_DOTS = (char)0x2A2B;
			public const char MINUS_SIGN_WITH_RISING_DOTS = (char)0x2A2C;
			public const char MINUS_TILDE = (char)0x2242;
			public const char MINY = (char)0x29FF;
			public const char MODELS = (char)0x22A7;
			/// <summary> Formerly MODIFIER LETTER ACUTE. </summary>
			public const char MODIFIER_LETTER_ACUTE_ACCENT = (char)0x02CA;
			public const char MODIFIER_LETTER_APOSTROPHE = (char)0x02BC;
			public const char MODIFIER_LETTER_BEGIN_HIGH_TONE = (char)0x02F9;
			public const char MODIFIER_LETTER_BEGIN_LOW_TONE = (char)0x02FB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_A = (char)0x1D2C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_AE = (char)0x1D2D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_B = (char)0x1D2E;
			public const char MODIFIER_LETTER_CAPITAL_BARRED_B = (char)0x1D2F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_D = (char)0x1D30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_E = (char)0x1D31;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_G = (char)0x1D33;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_H = (char)0x1D34;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_I = (char)0x1D35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_J = (char)0x1D36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_K = (char)0x1D37;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_L = (char)0x1D38;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_M = (char)0x1D39;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_N = (char)0x1D3A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_O = (char)0x1D3C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_OU = (char)0x1D3D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_P = (char)0x1D3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_R = (char)0x1D3F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_REVERSED_E = (char)0x1D32;
			public const char MODIFIER_LETTER_CAPITAL_REVERSED_N = (char)0x1D3B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_T = (char)0x1D40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_U = (char)0x1D41;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CAPITAL_W = (char)0x1D42;
			/// <summary> Formerly MODIFIER LETTER CENTERED LEFT HALF RING. </summary>
			public const char MODIFIER_LETTER_CENTRED_LEFT_HALF_RING = (char)0x02D3;
			/// <summary> Formerly MODIFIER LETTER CENTERED RIGHT HALF RING. </summary>
			public const char MODIFIER_LETTER_CENTRED_RIGHT_HALF_RING = (char)0x02D2;
			public const char MODIFIER_LETTER_CHINESE_TONE_YANG_PING = (char)0xA701;
			public const char MODIFIER_LETTER_CHINESE_TONE_YANG_QU = (char)0xA705;
			public const char MODIFIER_LETTER_CHINESE_TONE_YANG_RU = (char)0xA707;
			public const char MODIFIER_LETTER_CHINESE_TONE_YANG_SHANG = (char)0xA703;
			public const char MODIFIER_LETTER_CHINESE_TONE_YIN_PING = (char)0xA700;
			public const char MODIFIER_LETTER_CHINESE_TONE_YIN_QU = (char)0xA704;
			public const char MODIFIER_LETTER_CHINESE_TONE_YIN_RU = (char)0xA706;
			public const char MODIFIER_LETTER_CHINESE_TONE_YIN_SHANG = (char)0xA702;
			/// <summary> Formerly MODIFIER LETTER CIRCUMFLEX. </summary>
			public const char MODIFIER_LETTER_CIRCUMFLEX_ACCENT = (char)0x02C6;
			public const char MODIFIER_LETTER_CROSS_ACCENT = (char)0x02DF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_CYRILLIC_EN = (char)0x1D78;
			public const char MODIFIER_LETTER_DOUBLE_APOSTROPHE = (char)0x02EE;
			public const char MODIFIER_LETTER_DOUBLE_PRIME = (char)0x02BA;
			public const char MODIFIER_LETTER_DOWN_ARROWHEAD = (char)0x02C5;
			public const char MODIFIER_LETTER_DOWN_TACK = (char)0x02D5;
			public const char MODIFIER_LETTER_END_HIGH_TONE = (char)0x02FA;
			public const char MODIFIER_LETTER_END_LOW_TONE = (char)0x02FC;
			public const char MODIFIER_LETTER_EXTRA_HIGH_DOTTED_LEFT_STEM_TONE_BAR = (char)0xA70D;
			public const char MODIFIER_LETTER_EXTRA_HIGH_DOTTED_TONE_BAR = (char)0xA708;
			public const char MODIFIER_LETTER_EXTRA_HIGH_LEFT_STEM_TONE_BAR = (char)0xA712;
			public const char MODIFIER_LETTER_EXTRA_HIGH_TONE_BAR = (char)0x02E5;
			public const char MODIFIER_LETTER_EXTRA_LOW_DOTTED_LEFT_STEM_TONE_BAR = (char)0xA711;
			public const char MODIFIER_LETTER_EXTRA_LOW_DOTTED_TONE_BAR = (char)0xA70C;
			public const char MODIFIER_LETTER_EXTRA_LOW_LEFT_STEM_TONE_BAR = (char)0xA716;
			public const char MODIFIER_LETTER_EXTRA_LOW_TONE_BAR = (char)0x02E9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_GEORGIAN_NAR = (char)0x10FC;
			public const char MODIFIER_LETTER_GLOTTAL_STOP = (char)0x02C0;
			/// <summary> Formerly MODIFIER LETTER GRAVE. </summary>
			public const char MODIFIER_LETTER_GRAVE_ACCENT = (char)0x02CB;
			public const char MODIFIER_LETTER_HALF_TRIANGULAR_COLON = (char)0x02D1;
			public const char MODIFIER_LETTER_HIGH_DOTTED_LEFT_STEM_TONE_BAR = (char)0xA70E;
			public const char MODIFIER_LETTER_HIGH_DOTTED_TONE_BAR = (char)0xA709;
			public const char MODIFIER_LETTER_HIGH_LEFT_STEM_TONE_BAR = (char)0xA713;
			public const char MODIFIER_LETTER_HIGH_TONE_BAR = (char)0x02E6;
			public const char MODIFIER_LETTER_LEFT_ARROWHEAD = (char)0x02C2;
			public const char MODIFIER_LETTER_LEFT_HALF_RING = (char)0x02BF;
			/// <summary> Formerly MODIFIER LETTER LOW ACUTE. </summary>
			public const char MODIFIER_LETTER_LOW_ACUTE_ACCENT = (char)0x02CF;
			public const char MODIFIER_LETTER_LOW_DOTTED_LEFT_STEM_TONE_BAR = (char)0xA710;
			public const char MODIFIER_LETTER_LOW_DOTTED_TONE_BAR = (char)0xA70B;
			public const char MODIFIER_LETTER_LOW_DOWN_ARROWHEAD = (char)0x02EF;
			/// <summary> Formerly MODIFIER LETTER LOW GRAVE. </summary>
			public const char MODIFIER_LETTER_LOW_GRAVE_ACCENT = (char)0x02CE;
			public const char MODIFIER_LETTER_LOW_LEFT_ARROW = (char)0x02FF;
			public const char MODIFIER_LETTER_LOW_LEFT_ARROWHEAD = (char)0x02F1;
			public const char MODIFIER_LETTER_LOW_LEFT_STEM_TONE_BAR = (char)0xA715;
			public const char MODIFIER_LETTER_LOW_MACRON = (char)0x02CD;
			public const char MODIFIER_LETTER_LOW_RIGHT_ARROWHEAD = (char)0x02F2;
			public const char MODIFIER_LETTER_LOW_RING = (char)0x02F3;
			public const char MODIFIER_LETTER_LOW_TILDE = (char)0x02F7;
			public const char MODIFIER_LETTER_LOW_TONE_BAR = (char)0x02E8;
			public const char MODIFIER_LETTER_LOW_UP_ARROWHEAD = (char)0x02F0;
			public const char MODIFIER_LETTER_LOW_VERTICAL_LINE = (char)0x02CC;
			public const char MODIFIER_LETTER_MACRON = (char)0x02C9;
			public const char MODIFIER_LETTER_MIDDLE_DOUBLE_ACUTE_ACCENT = (char)0x02F6;
			public const char MODIFIER_LETTER_MIDDLE_DOUBLE_GRAVE_ACCENT = (char)0x02F5;
			public const char MODIFIER_LETTER_MIDDLE_GRAVE_ACCENT = (char)0x02F4;
			public const char MODIFIER_LETTER_MID_DOTTED_LEFT_STEM_TONE_BAR = (char)0xA70F;
			public const char MODIFIER_LETTER_MID_DOTTED_TONE_BAR = (char)0xA70A;
			public const char MODIFIER_LETTER_MID_LEFT_STEM_TONE_BAR = (char)0xA714;
			public const char MODIFIER_LETTER_MID_TONE_BAR = (char)0x02E7;
			public const char MODIFIER_LETTER_MINUS_SIGN = (char)0x02D7;
			public const char MODIFIER_LETTER_OPEN_SHELF = (char)0x02FE;
			public const char MODIFIER_LETTER_PLUS_SIGN = (char)0x02D6;
			public const char MODIFIER_LETTER_PRIME = (char)0x02B9;
			public const char MODIFIER_LETTER_RAISED_COLON = (char)0x02F8;
			public const char MODIFIER_LETTER_REVERSED_COMMA = (char)0x02BD;
			public const char MODIFIER_LETTER_REVERSED_GLOTTAL_STOP = (char)0x02C1;
			public const char MODIFIER_LETTER_RHOTIC_HOOK = (char)0x02DE;
			public const char MODIFIER_LETTER_RIGHT_ARROWHEAD = (char)0x02C3;
			public const char MODIFIER_LETTER_RIGHT_HALF_RING = (char)0x02BE;
			public const char MODIFIER_LETTER_SHELF = (char)0x02FD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_A = (char)0x1D43;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_AIN = (char)0x1D5C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_ALPHA = (char)0x1D45;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_B = (char)0x1D47;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_BARRED_O = (char)0x1DB1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_BETA = (char)0x1D5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_BOTTOM_HALF_O = (char)0x1D55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_C = (char)0x1D9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_CAPITAL_I = (char)0x1DA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_CAPITAL_INVERTED_R = (char)0x02B6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_CAPITAL_I_WITH_STROKE = (char)0x1DA7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_CAPITAL_L = (char)0x1DAB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_CAPITAL_N = (char)0x1DB0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_CAPITAL_U = (char)0x1DB8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_CHI = (char)0x1D61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_C_WITH_CURL = (char)0x1D9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_D = (char)0x1D48;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_DELTA = (char)0x1D5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_DOTLESS_J_WITH_STROKE = (char)0x1DA1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_E = (char)0x1D49;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_ENG = (char)0x1D51;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_ESH = (char)0x1DB4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_ETH = (char)0x1D9E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_EZH = (char)0x1DBE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_F = (char)0x1DA0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_G = (char)0x1D4D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_GAMMA = (char)0x02E0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_GREEK_GAMMA = (char)0x1D5E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_GREEK_PHI = (char)0x1D60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_H = (char)0x02B0;
			/// <summary> (This is a composition; consider avoiding.) Formerly MODIFIER LETTER SMALL H HOOK. </summary>
			public const char MODIFIER_LETTER_SMALL_H_WITH_HOOK = (char)0x02B1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_IOTA = (char)0x1DA5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_I_WITH_STROKE = (char)0x1DA4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_J = (char)0x02B2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_J_WITH_CROSSED_TAIL = (char)0x1DA8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_K = (char)0x1D4F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_L = (char)0x02E1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_L_WITH_PALATAL_HOOK = (char)0x1DAA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_L_WITH_RETROFLEX_HOOK = (char)0x1DA9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_M = (char)0x1D50;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_M_WITH_HOOK = (char)0x1DAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_N_WITH_LEFT_HOOK = (char)0x1DAE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_N_WITH_RETROFLEX_HOOK = (char)0x1DAF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_O = (char)0x1D52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_OPEN_E = (char)0x1D4B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_OPEN_O = (char)0x1D53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_P = (char)0x1D56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_PHI = (char)0x1DB2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_R = (char)0x02B3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_REVERSED_GLOTTAL_STOP = (char)0x02E4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_REVERSED_OPEN_E = (char)0x1D9F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_S = (char)0x02E2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_SCHWA = (char)0x1D4A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_SCRIPT_G = (char)0x1DA2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_SIDEWAYS_U = (char)0x1D59;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_S_WITH_HOOK = (char)0x1DB3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_T = (char)0x1D57;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_THETA = (char)0x1DBF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TOP_HALF_O = (char)0x1D54;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_A = (char)0x1D44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_AE = (char)0x1D46;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_ALPHA = (char)0x1D9B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_H = (char)0x1DA3;
			public const char MODIFIER_LETTER_SMALL_TURNED_I = (char)0x1D4E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_M = (char)0x1D5A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_M_WITH_LONG_LEG = (char)0x1DAD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_OPEN_E = (char)0x1D4C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_R = (char)0x02B4;
			/// <summary> (This is a composition; consider avoiding.) Formerly MODIFIER LETTER SMALL TURNED R HOOK. </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_R_WITH_HOOK = (char)0x02B5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_TURNED_V = (char)0x1DBA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_T_WITH_PALATAL_HOOK = (char)0x1DB5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_U = (char)0x1D58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_UPSILON = (char)0x1DB7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_U_BAR = (char)0x1DB6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_V = (char)0x1D5B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_V_WITH_HOOK = (char)0x1DB9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_W = (char)0x02B7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_X = (char)0x02E3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_Y = (char)0x02B8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_Z = (char)0x1DBB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_Z_WITH_CURL = (char)0x1DBD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MODIFIER_LETTER_SMALL_Z_WITH_RETROFLEX_HOOK = (char)0x1DBC;
			public const char MODIFIER_LETTER_TRIANGULAR_COLON = (char)0x02D0;
			public const char MODIFIER_LETTER_TURNED_COMMA = (char)0x02BB;
			public const char MODIFIER_LETTER_UNASPIRATED = (char)0x02ED;
			public const char MODIFIER_LETTER_UP_ARROWHEAD = (char)0x02C4;
			public const char MODIFIER_LETTER_UP_TACK = (char)0x02D4;
			public const char MODIFIER_LETTER_VERTICAL_LINE = (char)0x02C8;
			public const char MODIFIER_LETTER_VOICING = (char)0x02EC;
			public const char MODIFIER_LETTER_YANG_DEPARTING_TONE_MARK = (char)0x02EB;
			public const char MODIFIER_LETTER_YIN_DEPARTING_TONE_MARK = (char)0x02EA;
			public const char MODULO_TWO_SUM = (char)0x2A0A;
			public const char MONGOLIAN_BIRGA = (char)0x1800;
			public const char MONGOLIAN_COLON = (char)0x1804;
			public const char MONGOLIAN_COMMA = (char)0x1802;
			public const char MONGOLIAN_DIGIT_EIGHT = (char)0x1818;
			public const char MONGOLIAN_DIGIT_FIVE = (char)0x1815;
			public const char MONGOLIAN_DIGIT_FOUR = (char)0x1814;
			public const char MONGOLIAN_DIGIT_NINE = (char)0x1819;
			public const char MONGOLIAN_DIGIT_ONE = (char)0x1811;
			public const char MONGOLIAN_DIGIT_SEVEN = (char)0x1817;
			public const char MONGOLIAN_DIGIT_SIX = (char)0x1816;
			public const char MONGOLIAN_DIGIT_THREE = (char)0x1813;
			public const char MONGOLIAN_DIGIT_TWO = (char)0x1812;
			public const char MONGOLIAN_DIGIT_ZERO = (char)0x1810;
			public const char MONGOLIAN_ELLIPSIS = (char)0x1801;
			public const char MONGOLIAN_FOUR_DOTS = (char)0x1805;
			public const char MONGOLIAN_FREE_VARIATION_SELECTOR_ONE = (char)0x180B;
			public const char MONGOLIAN_FREE_VARIATION_SELECTOR_THREE = (char)0x180D;
			public const char MONGOLIAN_FREE_VARIATION_SELECTOR_TWO = (char)0x180C;
			public const char MONGOLIAN_FULL_STOP = (char)0x1803;
			public const char MONGOLIAN_LETTER_A = (char)0x1820;
			public const char MONGOLIAN_LETTER_ALI_GALI_A = (char)0x1887;
			public const char MONGOLIAN_LETTER_ALI_GALI_AH = (char)0x1897;
			public const char MONGOLIAN_LETTER_ALI_GALI_ANUSVARA_ONE = (char)0x1880;
			public const char MONGOLIAN_LETTER_ALI_GALI_BALUDA = (char)0x1885;
			public const char MONGOLIAN_LETTER_ALI_GALI_CA = (char)0x188B;
			public const char MONGOLIAN_LETTER_ALI_GALI_DA = (char)0x1891;
			public const char MONGOLIAN_LETTER_ALI_GALI_DAGALGA = (char)0x18A9;
			public const char MONGOLIAN_LETTER_ALI_GALI_DAMARU = (char)0x1882;
			public const char MONGOLIAN_LETTER_ALI_GALI_DDA = (char)0x188E;
			public const char MONGOLIAN_LETTER_ALI_GALI_HALF_U = (char)0x18A6;
			public const char MONGOLIAN_LETTER_ALI_GALI_HALF_YA = (char)0x18A7;
			public const char MONGOLIAN_LETTER_ALI_GALI_I = (char)0x1888;
			public const char MONGOLIAN_LETTER_ALI_GALI_INVERTED_UBADAMA = (char)0x1884;
			public const char MONGOLIAN_LETTER_ALI_GALI_KA = (char)0x1889;
			public const char MONGOLIAN_LETTER_ALI_GALI_NGA = (char)0x188A;
			public const char MONGOLIAN_LETTER_ALI_GALI_NNA = (char)0x188F;
			public const char MONGOLIAN_LETTER_ALI_GALI_PA = (char)0x1892;
			public const char MONGOLIAN_LETTER_ALI_GALI_PHA = (char)0x1893;
			public const char MONGOLIAN_LETTER_ALI_GALI_SSA = (char)0x1894;
			public const char MONGOLIAN_LETTER_ALI_GALI_TA = (char)0x1890;
			public const char MONGOLIAN_LETTER_ALI_GALI_THREE_BALUDA = (char)0x1886;
			public const char MONGOLIAN_LETTER_ALI_GALI_TTA = (char)0x188C;
			public const char MONGOLIAN_LETTER_ALI_GALI_TTHA = (char)0x188D;
			public const char MONGOLIAN_LETTER_ALI_GALI_UBADAMA = (char)0x1883;
			public const char MONGOLIAN_LETTER_ALI_GALI_VISARGA_ONE = (char)0x1881;
			public const char MONGOLIAN_LETTER_ALI_GALI_ZA = (char)0x1896;
			public const char MONGOLIAN_LETTER_ALI_GALI_ZHA = (char)0x1895;
			public const char MONGOLIAN_LETTER_ANG = (char)0x1829;
			public const char MONGOLIAN_LETTER_BA = (char)0x182A;
			public const char MONGOLIAN_LETTER_CHA = (char)0x1834;
			public const char MONGOLIAN_LETTER_CHI = (char)0x1842;
			public const char MONGOLIAN_LETTER_DA = (char)0x1833;
			public const char MONGOLIAN_LETTER_E = (char)0x1821;
			public const char MONGOLIAN_LETTER_EE = (char)0x1827;
			public const char MONGOLIAN_LETTER_FA = (char)0x1839;
			public const char MONGOLIAN_LETTER_GA = (char)0x182D;
			public const char MONGOLIAN_LETTER_HAA = (char)0x183E;
			public const char MONGOLIAN_LETTER_I = (char)0x1822;
			public const char MONGOLIAN_LETTER_JA = (char)0x1835;
			public const char MONGOLIAN_LETTER_KA = (char)0x183A;
			public const char MONGOLIAN_LETTER_KHA = (char)0x183B;
			public const char MONGOLIAN_LETTER_LA = (char)0x182F;
			public const char MONGOLIAN_LETTER_LHA = (char)0x1840;
			public const char MONGOLIAN_LETTER_MA = (char)0x182E;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_BHA = (char)0x18A8;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_CA = (char)0x189C;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_CYA = (char)0x18A3;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_DDHA = (char)0x189F;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_DHA = (char)0x18A1;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_GHA = (char)0x189A;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_JHA = (char)0x189D;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_NGA = (char)0x189B;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_SSA = (char)0x18A2;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_TA = (char)0x18A0;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_TTA = (char)0x189E;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_ZA = (char)0x18A5;
			public const char MONGOLIAN_LETTER_MANCHU_ALI_GALI_ZHA = (char)0x18A4;
			public const char MONGOLIAN_LETTER_MANCHU_FA = (char)0x1876;
			public const char MONGOLIAN_LETTER_MANCHU_I = (char)0x1873;
			public const char MONGOLIAN_LETTER_MANCHU_KA = (char)0x1874;
			public const char MONGOLIAN_LETTER_MANCHU_RA = (char)0x1875;
			public const char MONGOLIAN_LETTER_MANCHU_ZHA = (char)0x1877;
			public const char MONGOLIAN_LETTER_NA = (char)0x1828;
			public const char MONGOLIAN_LETTER_O = (char)0x1823;
			public const char MONGOLIAN_LETTER_OE = (char)0x1825;
			public const char MONGOLIAN_LETTER_PA = (char)0x182B;
			public const char MONGOLIAN_LETTER_QA = (char)0x182C;
			public const char MONGOLIAN_LETTER_RA = (char)0x1837;
			public const char MONGOLIAN_LETTER_SA = (char)0x1830;
			public const char MONGOLIAN_LETTER_SHA = (char)0x1831;
			public const char MONGOLIAN_LETTER_SIBE_ANG = (char)0x1862;
			public const char MONGOLIAN_LETTER_SIBE_CHA = (char)0x1871;
			public const char MONGOLIAN_LETTER_SIBE_DA = (char)0x1869;
			public const char MONGOLIAN_LETTER_SIBE_E = (char)0x185D;
			public const char MONGOLIAN_LETTER_SIBE_FA = (char)0x186B;
			public const char MONGOLIAN_LETTER_SIBE_GA = (char)0x1864;
			public const char MONGOLIAN_LETTER_SIBE_GAA = (char)0x186C;
			public const char MONGOLIAN_LETTER_SIBE_HA = (char)0x1865;
			public const char MONGOLIAN_LETTER_SIBE_HAA = (char)0x186D;
			public const char MONGOLIAN_LETTER_SIBE_I = (char)0x185E;
			public const char MONGOLIAN_LETTER_SIBE_IY = (char)0x185F;
			public const char MONGOLIAN_LETTER_SIBE_JA = (char)0x186A;
			public const char MONGOLIAN_LETTER_SIBE_KA = (char)0x1863;
			public const char MONGOLIAN_LETTER_SIBE_PA = (char)0x1866;
			public const char MONGOLIAN_LETTER_SIBE_RAA = (char)0x1870;
			public const char MONGOLIAN_LETTER_SIBE_SHA = (char)0x1867;
			public const char MONGOLIAN_LETTER_SIBE_TA = (char)0x1868;
			public const char MONGOLIAN_LETTER_SIBE_TSA = (char)0x186E;
			public const char MONGOLIAN_LETTER_SIBE_U = (char)0x1861;
			public const char MONGOLIAN_LETTER_SIBE_UE = (char)0x1860;
			public const char MONGOLIAN_LETTER_SIBE_ZA = (char)0x186F;
			public const char MONGOLIAN_LETTER_SIBE_ZHA = (char)0x1872;
			public const char MONGOLIAN_LETTER_TA = (char)0x1832;
			public const char MONGOLIAN_LETTER_TODO_ALI_GALI_TA = (char)0x1898;
			public const char MONGOLIAN_LETTER_TODO_ALI_GALI_ZHA = (char)0x1899;
			public const char MONGOLIAN_LETTER_TODO_ANG = (char)0x184A;
			public const char MONGOLIAN_LETTER_TODO_BA = (char)0x184B;
			public const char MONGOLIAN_LETTER_TODO_CHA = (char)0x1852;
			public const char MONGOLIAN_LETTER_TODO_DA = (char)0x1851;
			public const char MONGOLIAN_LETTER_TODO_DZA = (char)0x185C;
			public const char MONGOLIAN_LETTER_TODO_E = (char)0x1844;
			public const char MONGOLIAN_LETTER_TODO_GA = (char)0x184E;
			public const char MONGOLIAN_LETTER_TODO_GAA = (char)0x1858;
			public const char MONGOLIAN_LETTER_TODO_HAA = (char)0x1859;
			public const char MONGOLIAN_LETTER_TODO_I = (char)0x1845;
			public const char MONGOLIAN_LETTER_TODO_JA = (char)0x1853;
			public const char MONGOLIAN_LETTER_TODO_JIA = (char)0x185A;
			public const char MONGOLIAN_LETTER_TODO_KA = (char)0x1857;
			public const char MONGOLIAN_LETTER_TODO_LONG_VOWEL_SIGN = (char)0x1843;
			public const char MONGOLIAN_LETTER_TODO_MA = (char)0x184F;
			public const char MONGOLIAN_LETTER_TODO_NIA = (char)0x185B;
			public const char MONGOLIAN_LETTER_TODO_O = (char)0x1846;
			public const char MONGOLIAN_LETTER_TODO_OE = (char)0x1848;
			public const char MONGOLIAN_LETTER_TODO_PA = (char)0x184C;
			public const char MONGOLIAN_LETTER_TODO_QA = (char)0x184D;
			public const char MONGOLIAN_LETTER_TODO_TA = (char)0x1850;
			public const char MONGOLIAN_LETTER_TODO_TSA = (char)0x1854;
			public const char MONGOLIAN_LETTER_TODO_U = (char)0x1847;
			public const char MONGOLIAN_LETTER_TODO_UE = (char)0x1849;
			public const char MONGOLIAN_LETTER_TODO_WA = (char)0x1856;
			public const char MONGOLIAN_LETTER_TODO_YA = (char)0x1855;
			public const char MONGOLIAN_LETTER_TSA = (char)0x183C;
			public const char MONGOLIAN_LETTER_U = (char)0x1824;
			public const char MONGOLIAN_LETTER_UE = (char)0x1826;
			public const char MONGOLIAN_LETTER_WA = (char)0x1838;
			public const char MONGOLIAN_LETTER_YA = (char)0x1836;
			public const char MONGOLIAN_LETTER_ZA = (char)0x183D;
			public const char MONGOLIAN_LETTER_ZHI = (char)0x1841;
			public const char MONGOLIAN_LETTER_ZRA = (char)0x183F;
			public const char MONGOLIAN_MANCHU_COMMA = (char)0x1808;
			public const char MONGOLIAN_MANCHU_FULL_STOP = (char)0x1809;
			public const char MONGOLIAN_NIRUGU = (char)0x180A;
			public const char MONGOLIAN_SIBE_SYLLABLE_BOUNDARY_MARKER = (char)0x1807;
			public const char MONGOLIAN_TODO_SOFT_HYPHEN = (char)0x1806;
			public const char MONGOLIAN_VOWEL_SEPARATOR = (char)0x180E;
			public const char MONOGRAM_FOR_YANG = (char)0x268A;
			public const char MONOGRAM_FOR_YIN = (char)0x268B;
			public const char MONOSTABLE_SYMBOL = (char)0x238D;
			/// <summary> Formerly MUCH GREATER THAN. </summary>
			public const char MUCH_GREATER_THAN = (char)0x226B;
			/// <summary> Formerly MUCH LESS THAN. </summary>
			public const char MUCH_LESS_THAN = (char)0x226A;
			public const char MULTIMAP = (char)0x22B8;
			public const char MULTIPLICATION_SIGN = (char)0x00D7;
			public const char MULTIPLICATION_SIGN_IN_DOUBLE_CIRCLE = (char)0x2A37;
			public const char MULTIPLICATION_SIGN_IN_LEFT_HALF_CIRCLE = (char)0x2A34;
			public const char MULTIPLICATION_SIGN_IN_RIGHT_HALF_CIRCLE = (char)0x2A35;
			public const char MULTIPLICATION_SIGN_IN_TRIANGLE = (char)0x2A3B;
			public const char MULTIPLICATION_SIGN_WITH_DOT_ABOVE = (char)0x2A30;
			public const char MULTIPLICATION_SIGN_WITH_UNDERBAR = (char)0x2A31;
			public const char MULTIPLICATION_X = (char)0x2715;
			public const char MULTISET = (char)0x228C;
			public const char MULTISET_MULTIPLICATION = (char)0x228D;
			public const char MULTISET_UNION = (char)0x228E;
			/// <summary> Formerly FLAT. </summary>
			public const char MUSIC_FLAT_SIGN = (char)0x266D;
			/// <summary> Formerly NATURAL. </summary>
			public const char MUSIC_NATURAL_SIGN = (char)0x266E;
			/// <summary> Formerly SHARP. </summary>
			public const char MUSIC_SHARP_SIGN = (char)0x266F;
			public const char MYANMAR_DIGIT_EIGHT = (char)0x1048;
			public const char MYANMAR_DIGIT_FIVE = (char)0x1045;
			public const char MYANMAR_DIGIT_FOUR = (char)0x1044;
			public const char MYANMAR_DIGIT_NINE = (char)0x1049;
			public const char MYANMAR_DIGIT_ONE = (char)0x1041;
			public const char MYANMAR_DIGIT_SEVEN = (char)0x1047;
			public const char MYANMAR_DIGIT_SIX = (char)0x1046;
			public const char MYANMAR_DIGIT_THREE = (char)0x1043;
			public const char MYANMAR_DIGIT_TWO = (char)0x1042;
			public const char MYANMAR_DIGIT_ZERO = (char)0x1040;
			public const char MYANMAR_LETTER_A = (char)0x1021;
			public const char MYANMAR_LETTER_AU = (char)0x102A;
			public const char MYANMAR_LETTER_BA = (char)0x1017;
			public const char MYANMAR_LETTER_BHA = (char)0x1018;
			public const char MYANMAR_LETTER_CA = (char)0x1005;
			public const char MYANMAR_LETTER_CHA = (char)0x1006;
			public const char MYANMAR_LETTER_DA = (char)0x1012;
			public const char MYANMAR_LETTER_DDA = (char)0x100D;
			public const char MYANMAR_LETTER_DDHA = (char)0x100E;
			public const char MYANMAR_LETTER_DHA = (char)0x1013;
			public const char MYANMAR_LETTER_E = (char)0x1027;
			public const char MYANMAR_LETTER_GA = (char)0x1002;
			public const char MYANMAR_LETTER_GHA = (char)0x1003;
			public const char MYANMAR_LETTER_HA = (char)0x101F;
			public const char MYANMAR_LETTER_I = (char)0x1023;
			public const char MYANMAR_LETTER_II = (char)0x1024;
			public const char MYANMAR_LETTER_JA = (char)0x1007;
			public const char MYANMAR_LETTER_JHA = (char)0x1008;
			public const char MYANMAR_LETTER_KA = (char)0x1000;
			public const char MYANMAR_LETTER_KHA = (char)0x1001;
			public const char MYANMAR_LETTER_LA = (char)0x101C;
			public const char MYANMAR_LETTER_LLA = (char)0x1020;
			public const char MYANMAR_LETTER_MA = (char)0x1019;
			public const char MYANMAR_LETTER_NA = (char)0x1014;
			public const char MYANMAR_LETTER_NGA = (char)0x1004;
			public const char MYANMAR_LETTER_NNA = (char)0x100F;
			public const char MYANMAR_LETTER_NNYA = (char)0x100A;
			public const char MYANMAR_LETTER_NYA = (char)0x1009;
			public const char MYANMAR_LETTER_O = (char)0x1029;
			public const char MYANMAR_LETTER_PA = (char)0x1015;
			public const char MYANMAR_LETTER_PHA = (char)0x1016;
			public const char MYANMAR_LETTER_RA = (char)0x101B;
			public const char MYANMAR_LETTER_SA = (char)0x101E;
			public const char MYANMAR_LETTER_SHA = (char)0x1050;
			public const char MYANMAR_LETTER_SSA = (char)0x1051;
			public const char MYANMAR_LETTER_TA = (char)0x1010;
			public const char MYANMAR_LETTER_THA = (char)0x1011;
			public const char MYANMAR_LETTER_TTA = (char)0x100B;
			public const char MYANMAR_LETTER_TTHA = (char)0x100C;
			public const char MYANMAR_LETTER_U = (char)0x1025;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char MYANMAR_LETTER_UU = (char)0x1026;
			public const char MYANMAR_LETTER_VOCALIC_L = (char)0x1054;
			public const char MYANMAR_LETTER_VOCALIC_LL = (char)0x1055;
			public const char MYANMAR_LETTER_VOCALIC_R = (char)0x1052;
			public const char MYANMAR_LETTER_VOCALIC_RR = (char)0x1053;
			public const char MYANMAR_LETTER_WA = (char)0x101D;
			public const char MYANMAR_LETTER_YA = (char)0x101A;
			public const char MYANMAR_SIGN_ANUSVARA = (char)0x1036;
			public const char MYANMAR_SIGN_DOT_BELOW = (char)0x1037;
			public const char MYANMAR_SIGN_LITTLE_SECTION = (char)0x104A;
			public const char MYANMAR_SIGN_SECTION = (char)0x104B;
			public const char MYANMAR_SIGN_VIRAMA = (char)0x1039;
			public const char MYANMAR_SIGN_VISARGA = (char)0x1038;
			public const char MYANMAR_SYMBOL_AFOREMENTIONED = (char)0x104E;
			public const char MYANMAR_SYMBOL_COMPLETED = (char)0x104D;
			public const char MYANMAR_SYMBOL_GENITIVE = (char)0x104F;
			public const char MYANMAR_SYMBOL_LOCATIVE = (char)0x104C;
			public const char MYANMAR_VOWEL_SIGN_AA = (char)0x102C;
			public const char MYANMAR_VOWEL_SIGN_AI = (char)0x1032;
			public const char MYANMAR_VOWEL_SIGN_E = (char)0x1031;
			public const char MYANMAR_VOWEL_SIGN_I = (char)0x102D;
			public const char MYANMAR_VOWEL_SIGN_II = (char)0x102E;
			public const char MYANMAR_VOWEL_SIGN_U = (char)0x102F;
			public const char MYANMAR_VOWEL_SIGN_UU = (char)0x1030;
			public const char MYANMAR_VOWEL_SIGN_VOCALIC_L = (char)0x1058;
			public const char MYANMAR_VOWEL_SIGN_VOCALIC_LL = (char)0x1059;
			public const char MYANMAR_VOWEL_SIGN_VOCALIC_R = (char)0x1056;
			public const char MYANMAR_VOWEL_SIGN_VOCALIC_RR = (char)0x1057;
		}
		public class N {
			public const char NABLA = (char)0x2207;
			public const char NAIRA_SIGN = (char)0x20A6;
			public const char NAND = (char)0x22BC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NARROW_NO_BREAK_SPACE = (char)0x202F;
			public const char NATIONAL_DIGIT_SHAPES = (char)0x206E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NEGATED_DOUBLE_VERTICAL_BAR_DOUBLE_RIGHT_TURNSTILE = (char)0x22AF;
			public const char NEGATIVE_CIRCLED_DIGIT_ZERO = (char)0x24FF;
			public const char NEGATIVE_CIRCLED_NUMBER_EIGHTEEN = (char)0x24F2;
			public const char NEGATIVE_CIRCLED_NUMBER_ELEVEN = (char)0x24EB;
			public const char NEGATIVE_CIRCLED_NUMBER_FIFTEEN = (char)0x24EF;
			public const char NEGATIVE_CIRCLED_NUMBER_FOURTEEN = (char)0x24EE;
			public const char NEGATIVE_CIRCLED_NUMBER_NINETEEN = (char)0x24F3;
			public const char NEGATIVE_CIRCLED_NUMBER_SEVENTEEN = (char)0x24F1;
			public const char NEGATIVE_CIRCLED_NUMBER_SIXTEEN = (char)0x24F0;
			public const char NEGATIVE_CIRCLED_NUMBER_THIRTEEN = (char)0x24ED;
			public const char NEGATIVE_CIRCLED_NUMBER_TWELVE = (char)0x24EC;
			public const char NEGATIVE_CIRCLED_NUMBER_TWENTY = (char)0x24F4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NEITHER_APPROXIMATELY_NOR_ACTUALLY_EQUAL_TO = (char)0x2247;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NEITHER_A_SUBSET_OF_NOR_EQUAL_TO = (char)0x2288;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO = (char)0x2289;
			/// <summary> (This is a composition; consider avoiding.) Formerly NEITHER GREATER THAN NOR EQUAL TO. </summary>
			public const char NEITHER_GREATER_THAN_NOR_EQUAL_TO = (char)0x2271;
			/// <summary> (This is a composition; consider avoiding.) Formerly NEITHER GREATER THAN NOR EQUIVALENT TO. </summary>
			public const char NEITHER_GREATER_THAN_NOR_EQUIVALENT_TO = (char)0x2275;
			/// <summary> (This is a composition; consider avoiding.) Formerly NEITHER GREATER THAN NOR LESS THAN. </summary>
			public const char NEITHER_GREATER_THAN_NOR_LESS_THAN = (char)0x2279;
			/// <summary> (This is a composition; consider avoiding.) Formerly NEITHER LESS THAN NOR EQUAL TO. </summary>
			public const char NEITHER_LESS_THAN_NOR_EQUAL_TO = (char)0x2270;
			/// <summary> (This is a composition; consider avoiding.) Formerly NEITHER LESS THAN NOR EQUIVALENT TO. </summary>
			public const char NEITHER_LESS_THAN_NOR_EQUIVALENT_TO = (char)0x2274;
			/// <summary> (This is a composition; consider avoiding.) Formerly NEITHER LESS THAN NOR GREATER THAN. </summary>
			public const char NEITHER_LESS_THAN_NOR_GREATER_THAN = (char)0x2278;
			public const char NEPTUNE = (char)0x2646;
			public const char NEW_SHEQEL_SIGN = (char)0x20AA;
			public const char NEW_TAI_LUE_DIGIT_EIGHT = (char)0x19D8;
			public const char NEW_TAI_LUE_DIGIT_FIVE = (char)0x19D5;
			public const char NEW_TAI_LUE_DIGIT_FOUR = (char)0x19D4;
			public const char NEW_TAI_LUE_DIGIT_NINE = (char)0x19D9;
			public const char NEW_TAI_LUE_DIGIT_ONE = (char)0x19D1;
			public const char NEW_TAI_LUE_DIGIT_SEVEN = (char)0x19D7;
			public const char NEW_TAI_LUE_DIGIT_SIX = (char)0x19D6;
			public const char NEW_TAI_LUE_DIGIT_THREE = (char)0x19D3;
			public const char NEW_TAI_LUE_DIGIT_TWO = (char)0x19D2;
			public const char NEW_TAI_LUE_DIGIT_ZERO = (char)0x19D0;
			public const char NEW_TAI_LUE_LETTER_FINAL_B = (char)0x19C7;
			public const char NEW_TAI_LUE_LETTER_FINAL_D = (char)0x19C6;
			public const char NEW_TAI_LUE_LETTER_FINAL_K = (char)0x19C5;
			public const char NEW_TAI_LUE_LETTER_FINAL_M = (char)0x19C4;
			public const char NEW_TAI_LUE_LETTER_FINAL_N = (char)0x19C3;
			public const char NEW_TAI_LUE_LETTER_FINAL_NG = (char)0x19C2;
			public const char NEW_TAI_LUE_LETTER_FINAL_V = (char)0x19C1;
			public const char NEW_TAI_LUE_LETTER_HIGH_BA = (char)0x19A2;
			public const char NEW_TAI_LUE_LETTER_HIGH_DA = (char)0x19A1;
			public const char NEW_TAI_LUE_LETTER_HIGH_FA = (char)0x199A;
			public const char NEW_TAI_LUE_LETTER_HIGH_HA = (char)0x19A0;
			public const char NEW_TAI_LUE_LETTER_HIGH_KA = (char)0x1982;
			public const char NEW_TAI_LUE_LETTER_HIGH_KVA = (char)0x19A6;
			public const char NEW_TAI_LUE_LETTER_HIGH_LA = (char)0x199C;
			public const char NEW_TAI_LUE_LETTER_HIGH_MA = (char)0x1996;
			public const char NEW_TAI_LUE_LETTER_HIGH_NA = (char)0x1990;
			public const char NEW_TAI_LUE_LETTER_HIGH_NGA = (char)0x1984;
			public const char NEW_TAI_LUE_LETTER_HIGH_PA = (char)0x1994;
			public const char NEW_TAI_LUE_LETTER_HIGH_PHA = (char)0x1995;
			public const char NEW_TAI_LUE_LETTER_HIGH_QA = (char)0x1980;
			public const char NEW_TAI_LUE_LETTER_HIGH_SA = (char)0x1989;
			public const char NEW_TAI_LUE_LETTER_HIGH_TA = (char)0x198E;
			public const char NEW_TAI_LUE_LETTER_HIGH_THA = (char)0x198F;
			public const char NEW_TAI_LUE_LETTER_HIGH_TSA = (char)0x1988;
			public const char NEW_TAI_LUE_LETTER_HIGH_VA = (char)0x199B;
			public const char NEW_TAI_LUE_LETTER_HIGH_XA = (char)0x1983;
			public const char NEW_TAI_LUE_LETTER_HIGH_XVA = (char)0x19A7;
			public const char NEW_TAI_LUE_LETTER_HIGH_YA = (char)0x198A;
			public const char NEW_TAI_LUE_LETTER_LOW_BA = (char)0x19A5;
			public const char NEW_TAI_LUE_LETTER_LOW_DA = (char)0x19A4;
			public const char NEW_TAI_LUE_LETTER_LOW_FA = (char)0x199D;
			public const char NEW_TAI_LUE_LETTER_LOW_HA = (char)0x19A3;
			public const char NEW_TAI_LUE_LETTER_LOW_KA = (char)0x1985;
			public const char NEW_TAI_LUE_LETTER_LOW_KVA = (char)0x19A8;
			public const char NEW_TAI_LUE_LETTER_LOW_LA = (char)0x199F;
			public const char NEW_TAI_LUE_LETTER_LOW_MA = (char)0x1999;
			public const char NEW_TAI_LUE_LETTER_LOW_NA = (char)0x1993;
			public const char NEW_TAI_LUE_LETTER_LOW_NGA = (char)0x1987;
			public const char NEW_TAI_LUE_LETTER_LOW_PA = (char)0x1997;
			public const char NEW_TAI_LUE_LETTER_LOW_PHA = (char)0x1998;
			public const char NEW_TAI_LUE_LETTER_LOW_QA = (char)0x1981;
			public const char NEW_TAI_LUE_LETTER_LOW_SA = (char)0x198C;
			public const char NEW_TAI_LUE_LETTER_LOW_TA = (char)0x1991;
			public const char NEW_TAI_LUE_LETTER_LOW_THA = (char)0x1992;
			public const char NEW_TAI_LUE_LETTER_LOW_TSA = (char)0x198B;
			public const char NEW_TAI_LUE_LETTER_LOW_VA = (char)0x199E;
			public const char NEW_TAI_LUE_LETTER_LOW_XA = (char)0x1986;
			public const char NEW_TAI_LUE_LETTER_LOW_XVA = (char)0x19A9;
			public const char NEW_TAI_LUE_LETTER_LOW_YA = (char)0x198D;
			public const char NEW_TAI_LUE_SIGN_LAE = (char)0x19DE;
			public const char NEW_TAI_LUE_SIGN_LAEV = (char)0x19DF;
			public const char NEW_TAI_LUE_TONE_MARK_1 = (char)0x19C8;
			public const char NEW_TAI_LUE_TONE_MARK_2 = (char)0x19C9;
			public const char NEW_TAI_LUE_VOWEL_SIGN_AA = (char)0x19B1;
			public const char NEW_TAI_LUE_VOWEL_SIGN_AAY = (char)0x19BB;
			public const char NEW_TAI_LUE_VOWEL_SIGN_AE = (char)0x19B6;
			public const char NEW_TAI_LUE_VOWEL_SIGN_AY = (char)0x19BA;
			public const char NEW_TAI_LUE_VOWEL_SIGN_E = (char)0x19B5;
			public const char NEW_TAI_LUE_VOWEL_SIGN_II = (char)0x19B2;
			public const char NEW_TAI_LUE_VOWEL_SIGN_IY = (char)0x19C0;
			public const char NEW_TAI_LUE_VOWEL_SIGN_O = (char)0x19B7;
			public const char NEW_TAI_LUE_VOWEL_SIGN_OA = (char)0x19B8;
			public const char NEW_TAI_LUE_VOWEL_SIGN_OAY = (char)0x19BE;
			public const char NEW_TAI_LUE_VOWEL_SIGN_OY = (char)0x19BD;
			public const char NEW_TAI_LUE_VOWEL_SIGN_U = (char)0x19B3;
			public const char NEW_TAI_LUE_VOWEL_SIGN_UE = (char)0x19B9;
			public const char NEW_TAI_LUE_VOWEL_SIGN_UEY = (char)0x19BF;
			public const char NEW_TAI_LUE_VOWEL_SIGN_UU = (char)0x19B4;
			public const char NEW_TAI_LUE_VOWEL_SIGN_UY = (char)0x19BC;
			public const char NEW_TAI_LUE_VOWEL_SIGN_VOWEL_SHORTENER = (char)0x19B0;
			public const char NEXT_PAGE = (char)0x2398;
			public const char NOMINAL_DIGIT_SHAPES = (char)0x206F;
			public const char NONFORKING = (char)0x2ADD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NON_BREAKING_HYPHEN = (char)0x2011;
			public const char NOR = (char)0x22BD;
			public const char NORMAL_SUBGROUP_OF = (char)0x22B2;
			public const char NORMAL_SUBGROUP_OF_OR_EQUAL_TO = (char)0x22B4;
			public const char NORTH_EAST_AND_SOUTH_WEST_ARROW = (char)0x2922;
			/// <summary> Formerly UPPER RIGHT ARROW. </summary>
			public const char NORTH_EAST_ARROW = (char)0x2197;
			public const char NORTH_EAST_ARROW_AND_SOUTH_EAST_ARROW = (char)0x2928;
			public const char NORTH_EAST_ARROW_CROSSING_NORTH_WEST_ARROW = (char)0x2931;
			public const char NORTH_EAST_ARROW_CROSSING_SOUTH_EAST_ARROW = (char)0x292E;
			public const char NORTH_EAST_ARROW_WITH_HOOK = (char)0x2924;
			public const char NORTH_EAST_BLACK_ARROW = (char)0x2B08;
			/// <summary> Formerly UPPER RIGHT DOUBLE ARROW. </summary>
			public const char NORTH_EAST_DOUBLE_ARROW = (char)0x21D7;
			public const char NORTH_EAST_WHITE_ARROW = (char)0x2B00;
			public const char NORTH_WEST_AND_SOUTH_EAST_ARROW = (char)0x2921;
			/// <summary> Formerly UPPER LEFT ARROW. </summary>
			public const char NORTH_WEST_ARROW = (char)0x2196;
			public const char NORTH_WEST_ARROW_AND_NORTH_EAST_ARROW = (char)0x2927;
			public const char NORTH_WEST_ARROW_CROSSING_NORTH_EAST_ARROW = (char)0x2932;
			public const char NORTH_WEST_ARROW_TO_CORNER = (char)0x21F1;
			/// <summary> Formerly UPPER LEFT ARROW TO LONG BAR. </summary>
			public const char NORTH_WEST_ARROW_TO_LONG_BAR = (char)0x21B8;
			public const char NORTH_WEST_ARROW_WITH_HOOK = (char)0x2923;
			public const char NORTH_WEST_BLACK_ARROW = (char)0x2B09;
			/// <summary> Formerly UPPER LEFT DOUBLE ARROW. </summary>
			public const char NORTH_WEST_DOUBLE_ARROW = (char)0x21D6;
			public const char NORTH_WEST_WHITE_ARROW = (char)0x2B01;
			/// <summary> Formerly NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHT ARROW. </summary>
			public const char NOTCHED_LOWER_RIGHT_SHADOWED_WHITE_RIGHTWARDS_ARROW = (char)0x27AF;
			/// <summary> Formerly NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHT ARROW. </summary>
			public const char NOTCHED_UPPER_RIGHT_SHADOWED_WHITE_RIGHTWARDS_ARROW = (char)0x27B1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_ALMOST_EQUAL_TO = (char)0x2249;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_AN_ELEMENT_OF = (char)0x2209;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_ASYMPTOTICALLY_EQUAL_TO = (char)0x2244;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_A_SUBSET_OF = (char)0x2284;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_A_SUPERSET_OF = (char)0x2285;
			public const char NOT_CHECK_MARK = (char)0x237B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_EQUAL_TO = (char)0x2260;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_EQUIVALENT_TO = (char)0x226D;
			/// <summary> (This is a composition; consider avoiding.) Formerly NOT GREATER THAN. </summary>
			public const char NOT_GREATER_THAN = (char)0x226F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_IDENTICAL_TO = (char)0x2262;
			/// <summary> (This is a composition; consider avoiding.) Formerly NOT LESS THAN. </summary>
			public const char NOT_LESS_THAN = (char)0x226E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_NORMAL_SUBGROUP_OF = (char)0x22EA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_NORMAL_SUBGROUP_OF_OR_EQUAL_TO = (char)0x22EC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_PARALLEL_TO = (char)0x2226;
			public const char NOT_SIGN = (char)0x00AC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_SQUARE_IMAGE_OF_OR_EQUAL_TO = (char)0x22E2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_SQUARE_ORIGINAL_OF_OR_EQUAL_TO = (char)0x22E3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_TILDE = (char)0x2241;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char NOT_TRUE = (char)0x22AD;
			/// <summary> (This is a composition; consider avoiding.) Formerly NON-BREAKING SPACE. </summary>
			public const char NO_BREAK_SPACE = (char)0x00A0;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER EIGHTEEN PERIOD. </summary>
			public const char NUMBER_EIGHTEEN_FULL_STOP = (char)0x2499;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER ELEVEN PERIOD. </summary>
			public const char NUMBER_ELEVEN_FULL_STOP = (char)0x2492;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER FIFTEEN PERIOD. </summary>
			public const char NUMBER_FIFTEEN_FULL_STOP = (char)0x2496;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER FOURTEEN PERIOD. </summary>
			public const char NUMBER_FOURTEEN_FULL_STOP = (char)0x2495;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER NINETEEN PERIOD. </summary>
			public const char NUMBER_NINETEEN_FULL_STOP = (char)0x249A;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER SEVENTEEN PERIOD. </summary>
			public const char NUMBER_SEVENTEEN_FULL_STOP = (char)0x2498;
			public const char NUMBER_SIGN = (char)0x0023;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER SIXTEEN PERIOD. </summary>
			public const char NUMBER_SIXTEEN_FULL_STOP = (char)0x2497;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER TEN PERIOD. </summary>
			public const char NUMBER_TEN_FULL_STOP = (char)0x2491;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER THIRTEEN PERIOD. </summary>
			public const char NUMBER_THIRTEEN_FULL_STOP = (char)0x2494;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER TWELVE PERIOD. </summary>
			public const char NUMBER_TWELVE_FULL_STOP = (char)0x2493;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMBER TWENTY PERIOD. </summary>
			public const char NUMBER_TWENTY_FULL_STOP = (char)0x249B;
			/// <summary> (This is a composition; consider avoiding.) Formerly NUMERO. </summary>
			public const char NUMERO_SIGN = (char)0x2116;
			public const char N_ARY_CIRCLED_DOT_OPERATOR = (char)0x2A00;
			public const char N_ARY_CIRCLED_PLUS_OPERATOR = (char)0x2A01;
			public const char N_ARY_CIRCLED_TIMES_OPERATOR = (char)0x2A02;
			public const char N_ARY_COPRODUCT = (char)0x2210;
			public const char N_ARY_INTERSECTION = (char)0x22C2;
			public const char N_ARY_LOGICAL_AND = (char)0x22C0;
			public const char N_ARY_LOGICAL_OR = (char)0x22C1;
			public const char N_ARY_PRODUCT = (char)0x220F;
			public const char N_ARY_SQUARE_INTERSECTION_OPERATOR = (char)0x2A05;
			public const char N_ARY_SQUARE_UNION_OPERATOR = (char)0x2A06;
			public const char N_ARY_SUMMATION = (char)0x2211;
			public const char N_ARY_TIMES_OPERATOR = (char)0x2A09;
			public const char N_ARY_UNION = (char)0x22C3;
			public const char N_ARY_UNION_OPERATOR_WITH_DOT = (char)0x2A03;
			public const char N_ARY_UNION_OPERATOR_WITH_PLUS = (char)0x2A04;
			public const char N_ARY_WHITE_VERTICAL_BAR = (char)0x2AFF;
		}
		public class O {
			public const char OBJECT_REPLACEMENT_CHARACTER = (char)0xFFFC;
			public const char OBLIQUE_ANGLE_OPENING_DOWN = (char)0x29A7;
			public const char OBLIQUE_ANGLE_OPENING_UP = (char)0x29A6;
			public const char OCR_AMOUNT_OF_CHECK = (char)0x2447;
			public const char OCR_BELT_BUCKLE = (char)0x2444;
			public const char OCR_BOW_TIE = (char)0x2445;
			public const char OCR_BRANCH_BANK_IDENTIFICATION = (char)0x2446;
			public const char OCR_CHAIR = (char)0x2441;
			public const char OCR_CUSTOMER_ACCOUNT_NUMBER = (char)0x2449;
			public const char OCR_DASH = (char)0x2448;
			public const char OCR_DOUBLE_BACKSLASH = (char)0x244A;
			public const char OCR_FORK = (char)0x2442;
			public const char OCR_HOOK = (char)0x2440;
			public const char OCR_INVERTED_FORK = (char)0x2443;
			public const char OGHAM_FEATHER_MARK = (char)0x169B;
			public const char OGHAM_LETTER_AILM = (char)0x1690;
			public const char OGHAM_LETTER_BEITH = (char)0x1681;
			public const char OGHAM_LETTER_CEIRT = (char)0x168A;
			public const char OGHAM_LETTER_COLL = (char)0x1689;
			public const char OGHAM_LETTER_DAIR = (char)0x1687;
			public const char OGHAM_LETTER_EABHADH = (char)0x1695;
			public const char OGHAM_LETTER_EADHADH = (char)0x1693;
			public const char OGHAM_LETTER_EAMHANCHOLL = (char)0x1699;
			public const char OGHAM_LETTER_FEARN = (char)0x1683;
			public const char OGHAM_LETTER_GORT = (char)0x168C;
			public const char OGHAM_LETTER_IFIN = (char)0x1698;
			public const char OGHAM_LETTER_IODHADH = (char)0x1694;
			public const char OGHAM_LETTER_LUIS = (char)0x1682;
			public const char OGHAM_LETTER_MUIN = (char)0x168B;
			public const char OGHAM_LETTER_NGEADAL = (char)0x168D;
			public const char OGHAM_LETTER_NION = (char)0x1685;
			public const char OGHAM_LETTER_ONN = (char)0x1691;
			public const char OGHAM_LETTER_OR = (char)0x1696;
			public const char OGHAM_LETTER_PEITH = (char)0x169A;
			public const char OGHAM_LETTER_RUIS = (char)0x168F;
			public const char OGHAM_LETTER_SAIL = (char)0x1684;
			public const char OGHAM_LETTER_STRAIF = (char)0x168E;
			public const char OGHAM_LETTER_TINNE = (char)0x1688;
			public const char OGHAM_LETTER_UATH = (char)0x1686;
			public const char OGHAM_LETTER_UILLEANN = (char)0x1697;
			public const char OGHAM_LETTER_UR = (char)0x1692;
			public const char OGHAM_REVERSED_FEATHER_MARK = (char)0x169C;
			public const char OGHAM_SPACE_MARK = (char)0x1680;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING OGONEK. </summary>
			public const char OGONEK = (char)0x02DB;
			/// <summary> (This is a composition; consider avoiding.) Formerly OHM. </summary>
			public const char OHM_SIGN = (char)0x2126;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ONE_DOT_LEADER = (char)0x2024;
			public const char OPEN_BOX = (char)0x2423;
			/// <summary> Formerly OPEN CENTER ASTERISK. </summary>
			public const char OPEN_CENTRE_ASTERISK = (char)0x2732;
			/// <summary> Formerly OPEN CENTER BLACK STAR. </summary>
			public const char OPEN_CENTRE_BLACK_STAR = (char)0x272B;
			/// <summary> Formerly OPEN CENTER CROSS. </summary>
			public const char OPEN_CENTRE_CROSS = (char)0x271B;
			/// <summary> Formerly OPEN CENTER TEARDROP-SPOKED ASTERISK. </summary>
			public const char OPEN_CENTRE_TEARDROP_SPOKED_ASTERISK = (char)0x273C;
			public const char OPEN_CIRCUIT_OUTPUT_H_TYPE_SYMBOL = (char)0x238F;
			public const char OPEN_CIRCUIT_OUTPUT_L_TYPE_SYMBOL = (char)0x2390;
			/// <summary> Formerly OPEN-OUTLINED RIGHT ARROW. </summary>
			public const char OPEN_OUTLINED_RIGHTWARDS_ARROW = (char)0x27BE;
			public const char OPEN_SUBSET = (char)0x27C3;
			public const char OPEN_SUPERSET = (char)0x27C4;
			public const char OPPOSITION = (char)0x260D;
			public const char OPTION_KEY = (char)0x2325;
			public const char ORIGINAL_OF = (char)0x22B6;
			public const char ORIYA_AI_LENGTH_MARK = (char)0x0B56;
			public const char ORIYA_AU_LENGTH_MARK = (char)0x0B57;
			public const char ORIYA_DIGIT_EIGHT = (char)0x0B6E;
			public const char ORIYA_DIGIT_FIVE = (char)0x0B6B;
			public const char ORIYA_DIGIT_FOUR = (char)0x0B6A;
			public const char ORIYA_DIGIT_NINE = (char)0x0B6F;
			public const char ORIYA_DIGIT_ONE = (char)0x0B67;
			public const char ORIYA_DIGIT_SEVEN = (char)0x0B6D;
			public const char ORIYA_DIGIT_SIX = (char)0x0B6C;
			public const char ORIYA_DIGIT_THREE = (char)0x0B69;
			public const char ORIYA_DIGIT_TWO = (char)0x0B68;
			public const char ORIYA_DIGIT_ZERO = (char)0x0B66;
			public const char ORIYA_ISSHAR = (char)0x0B70;
			public const char ORIYA_LETTER_A = (char)0x0B05;
			public const char ORIYA_LETTER_AA = (char)0x0B06;
			public const char ORIYA_LETTER_AI = (char)0x0B10;
			public const char ORIYA_LETTER_AU = (char)0x0B14;
			public const char ORIYA_LETTER_BA = (char)0x0B2C;
			public const char ORIYA_LETTER_BHA = (char)0x0B2D;
			public const char ORIYA_LETTER_CA = (char)0x0B1A;
			public const char ORIYA_LETTER_CHA = (char)0x0B1B;
			public const char ORIYA_LETTER_DA = (char)0x0B26;
			public const char ORIYA_LETTER_DDA = (char)0x0B21;
			public const char ORIYA_LETTER_DDHA = (char)0x0B22;
			public const char ORIYA_LETTER_DHA = (char)0x0B27;
			public const char ORIYA_LETTER_E = (char)0x0B0F;
			public const char ORIYA_LETTER_GA = (char)0x0B17;
			public const char ORIYA_LETTER_GHA = (char)0x0B18;
			public const char ORIYA_LETTER_HA = (char)0x0B39;
			public const char ORIYA_LETTER_I = (char)0x0B07;
			public const char ORIYA_LETTER_II = (char)0x0B08;
			public const char ORIYA_LETTER_JA = (char)0x0B1C;
			public const char ORIYA_LETTER_JHA = (char)0x0B1D;
			public const char ORIYA_LETTER_KA = (char)0x0B15;
			public const char ORIYA_LETTER_KHA = (char)0x0B16;
			public const char ORIYA_LETTER_LA = (char)0x0B32;
			public const char ORIYA_LETTER_LLA = (char)0x0B33;
			public const char ORIYA_LETTER_MA = (char)0x0B2E;
			public const char ORIYA_LETTER_NA = (char)0x0B28;
			public const char ORIYA_LETTER_NGA = (char)0x0B19;
			public const char ORIYA_LETTER_NNA = (char)0x0B23;
			public const char ORIYA_LETTER_NYA = (char)0x0B1E;
			public const char ORIYA_LETTER_O = (char)0x0B13;
			public const char ORIYA_LETTER_PA = (char)0x0B2A;
			public const char ORIYA_LETTER_PHA = (char)0x0B2B;
			public const char ORIYA_LETTER_RA = (char)0x0B30;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ORIYA_LETTER_RHA = (char)0x0B5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ORIYA_LETTER_RRA = (char)0x0B5C;
			public const char ORIYA_LETTER_SA = (char)0x0B38;
			public const char ORIYA_LETTER_SHA = (char)0x0B36;
			public const char ORIYA_LETTER_SSA = (char)0x0B37;
			public const char ORIYA_LETTER_TA = (char)0x0B24;
			public const char ORIYA_LETTER_THA = (char)0x0B25;
			public const char ORIYA_LETTER_TTA = (char)0x0B1F;
			public const char ORIYA_LETTER_TTHA = (char)0x0B20;
			public const char ORIYA_LETTER_U = (char)0x0B09;
			public const char ORIYA_LETTER_UU = (char)0x0B0A;
			public const char ORIYA_LETTER_VA = (char)0x0B35;
			public const char ORIYA_LETTER_VOCALIC_L = (char)0x0B0C;
			public const char ORIYA_LETTER_VOCALIC_LL = (char)0x0B61;
			public const char ORIYA_LETTER_VOCALIC_R = (char)0x0B0B;
			public const char ORIYA_LETTER_VOCALIC_RR = (char)0x0B60;
			public const char ORIYA_LETTER_WA = (char)0x0B71;
			public const char ORIYA_LETTER_YA = (char)0x0B2F;
			public const char ORIYA_LETTER_YYA = (char)0x0B5F;
			public const char ORIYA_SIGN_ANUSVARA = (char)0x0B02;
			public const char ORIYA_SIGN_AVAGRAHA = (char)0x0B3D;
			public const char ORIYA_SIGN_CANDRABINDU = (char)0x0B01;
			public const char ORIYA_SIGN_NUKTA = (char)0x0B3C;
			public const char ORIYA_SIGN_VIRAMA = (char)0x0B4D;
			public const char ORIYA_SIGN_VISARGA = (char)0x0B03;
			public const char ORIYA_VOWEL_SIGN_AA = (char)0x0B3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ORIYA_VOWEL_SIGN_AI = (char)0x0B48;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ORIYA_VOWEL_SIGN_AU = (char)0x0B4C;
			public const char ORIYA_VOWEL_SIGN_E = (char)0x0B47;
			public const char ORIYA_VOWEL_SIGN_I = (char)0x0B3F;
			public const char ORIYA_VOWEL_SIGN_II = (char)0x0B40;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ORIYA_VOWEL_SIGN_O = (char)0x0B4B;
			public const char ORIYA_VOWEL_SIGN_U = (char)0x0B41;
			public const char ORIYA_VOWEL_SIGN_UU = (char)0x0B42;
			public const char ORIYA_VOWEL_SIGN_VOCALIC_R = (char)0x0B43;
			public const char ORNATE_LEFT_PARENTHESIS = (char)0xFD3E;
			public const char ORNATE_RIGHT_PARENTHESIS = (char)0xFD3F;
			public const char ORTHODOX_CROSS = (char)0x2626;
			/// <summary> Formerly OUNCE. </summary>
			public const char OUNCE_SIGN = (char)0x2125;
			public const char OUTLINED_BLACK_STAR = (char)0x272D;
			public const char OUTLINED_GREEK_CROSS = (char)0x2719;
			public const char OUTLINED_LATIN_CROSS = (char)0x271F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING OVERSCORE. </summary>
			public const char OVERLINE = (char)0x203E;
		}
		public class P {
			public const char PARAGRAPHOS = (char)0x2E0F;
			public const char PARAGRAPH_SEPARATOR = (char)0x2029;
			public const char PARALLEL_TO = (char)0x2225;
			public const char PARALLEL_WITH_HORIZONTAL_STROKE = (char)0x2AF2;
			public const char PARALLEL_WITH_TILDE_OPERATOR = (char)0x2AF3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_EIGHT = (char)0x247B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_FIVE = (char)0x2478;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_FOUR = (char)0x2477;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_NINE = (char)0x247C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_ONE = (char)0x2474;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_SEVEN = (char)0x247A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_SIX = (char)0x2479;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_THREE = (char)0x2476;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_DIGIT_TWO = (char)0x2475;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL CIEUC. </summary>
			public const char PARENTHESIZED_HANGUL_CHIEUCH = (char)0x3209;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL CA. </summary>
			public const char PARENTHESIZED_HANGUL_CHIEUCH_A = (char)0x3217;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL JIEUJ. </summary>
			public const char PARENTHESIZED_HANGUL_CIEUC = (char)0x3208;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL JA. </summary>
			public const char PARENTHESIZED_HANGUL_CIEUC_A = (char)0x3216;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL JU. </summary>
			public const char PARENTHESIZED_HANGUL_CIEUC_U = (char)0x321C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_HANGUL_HIEUH = (char)0x320D;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL HA. </summary>
			public const char PARENTHESIZED_HANGUL_HIEUH_A = (char)0x321B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_HANGUL_IEUNG = (char)0x3207;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL A. </summary>
			public const char PARENTHESIZED_HANGUL_IEUNG_A = (char)0x3215;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL KIYEOK. </summary>
			public const char PARENTHESIZED_HANGUL_KHIEUKH = (char)0x320A;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL KA. </summary>
			public const char PARENTHESIZED_HANGUL_KHIEUKH_A = (char)0x3218;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL GIYEOG. </summary>
			public const char PARENTHESIZED_HANGUL_KIYEOK = (char)0x3200;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL GA. </summary>
			public const char PARENTHESIZED_HANGUL_KIYEOK_A = (char)0x320E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_HANGUL_MIEUM = (char)0x3204;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL MA. </summary>
			public const char PARENTHESIZED_HANGUL_MIEUM_A = (char)0x3212;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_HANGUL_NIEUN = (char)0x3201;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL NA. </summary>
			public const char PARENTHESIZED_HANGUL_NIEUN_A = (char)0x320F;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL PIEUP. </summary>
			public const char PARENTHESIZED_HANGUL_PHIEUPH = (char)0x320C;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL PA. </summary>
			public const char PARENTHESIZED_HANGUL_PHIEUPH_A = (char)0x321A;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL BIEUB. </summary>
			public const char PARENTHESIZED_HANGUL_PIEUP = (char)0x3205;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL BA. </summary>
			public const char PARENTHESIZED_HANGUL_PIEUP_A = (char)0x3213;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL LIEUL. </summary>
			public const char PARENTHESIZED_HANGUL_RIEUL = (char)0x3203;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL LA. </summary>
			public const char PARENTHESIZED_HANGUL_RIEUL_A = (char)0x3211;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_HANGUL_SIOS = (char)0x3206;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL SA. </summary>
			public const char PARENTHESIZED_HANGUL_SIOS_A = (char)0x3214;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL TIEUT. </summary>
			public const char PARENTHESIZED_HANGUL_THIEUTH = (char)0x320B;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL TA. </summary>
			public const char PARENTHESIZED_HANGUL_THIEUTH_A = (char)0x3219;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL DIGEUD. </summary>
			public const char PARENTHESIZED_HANGUL_TIKEUT = (char)0x3202;
			/// <summary> (This is a composition; consider avoiding.) Formerly PARENTHESIZED HANGUL DA. </summary>
			public const char PARENTHESIZED_HANGUL_TIKEUT_A = (char)0x3210;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_ALLIANCE = (char)0x323F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_CALL = (char)0x323A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_CONGRATULATION = (char)0x3237;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_EARTH = (char)0x322F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_EIGHT = (char)0x3227;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_ENTERPRISE = (char)0x323D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_FESTIVAL = (char)0x3240;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_FINANCIAL = (char)0x3236;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_FIRE = (char)0x322B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_FIVE = (char)0x3224;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_FOUR = (char)0x3223;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_HAVE = (char)0x3232;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_LABOR = (char)0x3238;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_METAL = (char)0x322E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_MOON = (char)0x322A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_NAME = (char)0x3234;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_NINE = (char)0x3228;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_ONE = (char)0x3220;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_REACH = (char)0x3243;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_REPRESENT = (char)0x3239;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_RESOURCE = (char)0x323E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_REST = (char)0x3241;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_SELF = (char)0x3242;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_SEVEN = (char)0x3226;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_SIX = (char)0x3225;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_SOCIETY = (char)0x3233;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_SPECIAL = (char)0x3235;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_STOCK = (char)0x3231;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_STUDY = (char)0x323B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_SUN = (char)0x3230;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_SUPERVISE = (char)0x323C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_TEN = (char)0x3229;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_THREE = (char)0x3222;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_TWO = (char)0x3221;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_WATER = (char)0x322C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_IDEOGRAPH_WOOD = (char)0x322D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_KOREAN_CHARACTER_OJEON = (char)0x321D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_KOREAN_CHARACTER_O_HU = (char)0x321E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_A = (char)0x249C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_B = (char)0x249D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_C = (char)0x249E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_D = (char)0x249F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_E = (char)0x24A0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_F = (char)0x24A1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_G = (char)0x24A2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_H = (char)0x24A3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_I = (char)0x24A4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_J = (char)0x24A5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_K = (char)0x24A6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_L = (char)0x24A7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_M = (char)0x24A8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_N = (char)0x24A9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_O = (char)0x24AA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_P = (char)0x24AB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_Q = (char)0x24AC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_R = (char)0x24AD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_S = (char)0x24AE;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_T = (char)0x24AF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_U = (char)0x24B0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_V = (char)0x24B1;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_W = (char)0x24B2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_X = (char)0x24B3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_Y = (char)0x24B4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_LATIN_SMALL_LETTER_Z = (char)0x24B5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_EIGHTEEN = (char)0x2485;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_ELEVEN = (char)0x247E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_FIFTEEN = (char)0x2482;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_FOURTEEN = (char)0x2481;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_NINETEEN = (char)0x2486;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_SEVENTEEN = (char)0x2484;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_SIXTEEN = (char)0x2483;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_TEN = (char)0x247D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_THIRTEEN = (char)0x2480;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_TWELVE = (char)0x247F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARENTHESIZED_NUMBER_TWENTY = (char)0x2487;
			public const char PARTIALLY_RECYCLED_PAPER_SYMBOL = (char)0x267D;
			public const char PARTIAL_DIFFERENTIAL = (char)0x2202;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PARTNERSHIP_SIGN = (char)0x3250;
			public const char PART_ALTERNATION_MARK = (char)0x303D;
			public const char PASSIVE_PULL_DOWN_OUTPUT_SYMBOL = (char)0x2391;
			public const char PASSIVE_PULL_UP_OUTPUT_SYMBOL = (char)0x2392;
			public const char PEACE_SYMBOL = (char)0x262E;
			public const char PENCIL = (char)0x270F;
			public const char PERCENT_SIGN = (char)0x0025;
			public const char PERMANENT_PAPER_SIGN = (char)0x267E;
			public const char PERPENDICULAR = (char)0x27C2;
			public const char PERPENDICULAR_WITH_S = (char)0x2AE1;
			public const char PERSPECTIVE = (char)0x2306;
			public const char PER_MILLE_SIGN = (char)0x2030;
			public const char PER_SIGN = (char)0x214C;
			public const char PER_TEN_THOUSAND_SIGN = (char)0x2031;
			public const char PESETA_SIGN = (char)0x20A7;
			public const char PESO_SIGN = (char)0x20B1;
			public const char PHILIPPINE_DOUBLE_PUNCTUATION = (char)0x1736;
			public const char PHILIPPINE_SINGLE_PUNCTUATION = (char)0x1735;
			/// <summary> Formerly PARAGRAPH SIGN. </summary>
			public const char PILCROW_SIGN = (char)0x00B6;
			public const char PINWHEEL_STAR = (char)0x272F;
			public const char PISCES = (char)0x2653;
			public const char PITCHFORK = (char)0x22D4;
			public const char PITCHFORK_WITH_TEE_TOP = (char)0x2ADA;
			/// <summary> Formerly COMMAND KEY. </summary>
			public const char PLACE_OF_INTEREST_SIGN = (char)0x2318;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PLANCK_CONSTANT = (char)0x210E;
			/// <summary> (This is a composition; consider avoiding.) Formerly PLANCK CONSTANT OVER 2 PI. </summary>
			public const char PLANCK_CONSTANT_OVER_TWO_PI = (char)0x210F;
			/// <summary> Formerly PLUS-OR-MINUS SIGN. </summary>
			public const char PLUS_MINUS_SIGN = (char)0x00B1;
			public const char PLUS_SIGN = (char)0x002B;
			public const char PLUS_SIGN_ABOVE_EQUALS_SIGN = (char)0x2A72;
			public const char PLUS_SIGN_IN_LEFT_HALF_CIRCLE = (char)0x2A2D;
			public const char PLUS_SIGN_IN_RIGHT_HALF_CIRCLE = (char)0x2A2E;
			public const char PLUS_SIGN_IN_TRIANGLE = (char)0x2A39;
			public const char PLUS_SIGN_WITH_BLACK_TRIANGLE = (char)0x2A28;
			public const char PLUS_SIGN_WITH_CIRCUMFLEX_ACCENT_ABOVE = (char)0x2A23;
			public const char PLUS_SIGN_WITH_DOT_BELOW = (char)0x2A25;
			public const char PLUS_SIGN_WITH_SMALL_CIRCLE_ABOVE = (char)0x2A22;
			public const char PLUS_SIGN_WITH_SUBSCRIPT_TWO = (char)0x2A27;
			public const char PLUS_SIGN_WITH_TILDE_ABOVE = (char)0x2A24;
			public const char PLUS_SIGN_WITH_TILDE_BELOW = (char)0x2A26;
			public const char PLUTO = (char)0x2647;
			public const char POP_DIRECTIONAL_FORMATTING = (char)0x202C;
			public const char POSITION_INDICATOR = (char)0x2316;
			public const char POSTAL_MARK = (char)0x3012;
			public const char POSTAL_MARK_FACE = (char)0x3020;
			public const char POUND_SIGN = (char)0x00A3;
			public const char PRECEDES = (char)0x227A;
			public const char PRECEDES_ABOVE_ALMOST_EQUAL_TO = (char)0x2AB7;
			public const char PRECEDES_ABOVE_EQUALS_SIGN = (char)0x2AB3;
			public const char PRECEDES_ABOVE_NOT_ALMOST_EQUAL_TO = (char)0x2AB9;
			public const char PRECEDES_ABOVE_NOT_EQUAL_TO = (char)0x2AB5;
			public const char PRECEDES_ABOVE_SINGLE_LINE_EQUALS_SIGN = (char)0x2AAF;
			public const char PRECEDES_ABOVE_SINGLE_LINE_NOT_EQUAL_TO = (char)0x2AB1;
			public const char PRECEDES_BUT_NOT_EQUIVALENT_TO = (char)0x22E8;
			public const char PRECEDES_OR_EQUAL_TO = (char)0x227C;
			public const char PRECEDES_OR_EQUIVALENT_TO = (char)0x227E;
			public const char PRECEDES_UNDER_RELATION = (char)0x22B0;
			public const char PRESCRIPTION_TAKE = (char)0x211E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_COLON = (char)0xFE13;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_COMMA = (char)0xFE10;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL EM DASH. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_EM_DASH = (char)0xFE31;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL EN DASH. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_EN_DASH = (char)0xFE32;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_EXCLAMATION_MARK = (char)0xFE15;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_HORIZONTAL_ELLIPSIS = (char)0xFE19;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_COMMA = (char)0xFE11;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_IDEOGRAPHIC_FULL_STOP = (char)0xFE12;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL OPENING ANGLE BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_ANGLE_BRACKET = (char)0xFE3F;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL OPENING BLACK LENTICULAR BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_BLACK_LENTICULAR_BRACKET = (char)0xFE3B;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL OPENING CORNER BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_CORNER_BRACKET = (char)0xFE41;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL OPENING CURLY BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_CURLY_BRACKET = (char)0xFE37;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL OPENING DOUBLE ANGLE BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_DOUBLE_ANGLE_BRACKET = (char)0xFE3D;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL OPENING PARENTHESIS. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_PARENTHESIS = (char)0xFE35;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_SQUARE_BRACKET = (char)0xFE47;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL OPENING TORTOISE SHELL BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_TORTOISE_SHELL_BRACKET = (char)0xFE39;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL OPENING WHITE CORNER BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_CORNER_BRACKET = (char)0xFE43;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LEFT_WHITE_LENTICULAR_BRACKET = (char)0xFE17;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL SPACING UNDERSCORE. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_LOW_LINE = (char)0xFE33;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_QUESTION_MARK = (char)0xFE16;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL CLOSING ANGLE BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_ANGLE_BRACKET = (char)0xFE40;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL CLOSING BLACK LENTICULAR BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_BLACK_LENTICULAR_BRACKET = (char)0xFE3C;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL CLOSING CORNER BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CORNER_BRACKET = (char)0xFE42;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL CLOSING CURLY BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_CURLY_BRACKET = (char)0xFE38;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL CLOSING DOUBLE ANGLE BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_DOUBLE_ANGLE_BRACKET = (char)0xFE3E;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL CLOSING PARENTHESIS. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_PARENTHESIS = (char)0xFE36;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_SQUARE_BRACKET = (char)0xFE48;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL CLOSING TORTOISE SHELL BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_TORTOISE_SHELL_BRACKET = (char)0xFE3A;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL CLOSING WHITE CORNER BRACKET. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_CORNER_BRACKET = (char)0xFE44;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_RIGHT_WHITE_LENTICULAR_BRAKCET = (char)0xFE18;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_SEMICOLON = (char)0xFE14;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL TWO DOT LEADER. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_TWO_DOT_LEADER = (char)0xFE30;
			/// <summary> (This is a composition; consider avoiding.) Formerly GLYPH FOR VERTICAL SPACING WAVY UNDERSCORE. </summary>
			public const char PRESENTATION_FORM_FOR_VERTICAL_WAVY_LOW_LINE = (char)0xFE34;
			public const char PREVIOUS_PAGE = (char)0x2397;
			public const char PRIME = (char)0x2032;
			public const char PRINT_SCREEN_SYMBOL = (char)0x2399;
			public const char PROJECTIVE = (char)0x2305;
			public const char PROPERTY_LINE = (char)0x214A;
			public const char PROPORTION = (char)0x2237;
			public const char PROPORTIONAL_TO = (char)0x221D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char PUNCTUATION_SPACE = (char)0x2008;
		}
		public class Q {
			public const char QUADRANT_LOWER_LEFT = (char)0x2596;
			public const char QUADRANT_LOWER_RIGHT = (char)0x2597;
			public const char QUADRANT_UPPER_LEFT = (char)0x2598;
			public const char QUADRANT_UPPER_LEFT_AND_LOWER_LEFT_AND_LOWER_RIGHT = (char)0x2599;
			public const char QUADRANT_UPPER_LEFT_AND_LOWER_RIGHT = (char)0x259A;
			public const char QUADRANT_UPPER_LEFT_AND_UPPER_RIGHT_AND_LOWER_LEFT = (char)0x259B;
			public const char QUADRANT_UPPER_LEFT_AND_UPPER_RIGHT_AND_LOWER_RIGHT = (char)0x259C;
			public const char QUADRANT_UPPER_RIGHT = (char)0x259D;
			public const char QUADRANT_UPPER_RIGHT_AND_LOWER_LEFT = (char)0x259E;
			public const char QUADRANT_UPPER_RIGHT_AND_LOWER_LEFT_AND_LOWER_RIGHT = (char)0x259F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char QUADRUPLE_INTEGRAL_OPERATOR = (char)0x2A0C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char QUADRUPLE_PRIME = (char)0x2057;
			public const char QUARTER_NOTE = (char)0x2669;
			public const char QUATERNION_INTEGRAL_OPERATOR = (char)0x2A16;
			public const char QUESTIONED_EQUAL_TO = (char)0x225F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char QUESTION_EXCLAMATION_MARK = (char)0x2048;
			public const char QUESTION_MARK = (char)0x003F;
			public const char QUOTATION_MARK = (char)0x0022;
		}
		public class R {
			public const char RADICAL_SYMBOL_BOTTOM = (char)0x23B7;
			public const char RADIOACTIVE_SIGN = (char)0x2622;
			public const char RAISED_DOTTED_INTERPOLATION_MARKER = (char)0x2E07;
			public const char RAISED_INTERPOLATION_MARKER = (char)0x2E06;
			public const char RAISED_SQUARE = (char)0x2E0B;
			public const char RATIO = (char)0x2236;
			public const char RECYCLED_PAPER_SYMBOL = (char)0x267C;
			public const char RECYCLING_SYMBOL_FOR_GENERIC_MATERIALS = (char)0x267A;
			public const char RECYCLING_SYMBOL_FOR_TYPE_1_PLASTICS = (char)0x2673;
			public const char RECYCLING_SYMBOL_FOR_TYPE_2_PLASTICS = (char)0x2674;
			public const char RECYCLING_SYMBOL_FOR_TYPE_3_PLASTICS = (char)0x2675;
			public const char RECYCLING_SYMBOL_FOR_TYPE_4_PLASTICS = (char)0x2676;
			public const char RECYCLING_SYMBOL_FOR_TYPE_5_PLASTICS = (char)0x2677;
			public const char RECYCLING_SYMBOL_FOR_TYPE_6_PLASTICS = (char)0x2678;
			public const char RECYCLING_SYMBOL_FOR_TYPE_7_PLASTICS = (char)0x2679;
			public const char REFERENCE_MARK = (char)0x203B;
			/// <summary> Formerly REGISTERED TRADE MARK SIGN. </summary>
			public const char REGISTERED_SIGN = (char)0x00AE;
			public const char REPLACEMENT_CHARACTER = (char)0xFFFD;
			public const char RESPONSE = (char)0x211F;
			public const char RETURN_SYMBOL = (char)0x23CE;
			public const char REVERSED_ANGLE = (char)0x29A3;
			public const char REVERSED_ANGLE_WITH_UNDERBAR = (char)0x29A5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char REVERSED_DOUBLE_PRIME = (char)0x2036;
			public const char REVERSED_DOUBLE_PRIME_QUOTATION_MARK = (char)0x301D;
			public const char REVERSED_DOUBLE_STROKE_NOT_SIGN = (char)0x2AED;
			public const char REVERSED_EMPTY_SET = (char)0x29B0;
			public const char REVERSED_FORKED_PARAGRAPHOS = (char)0x2E11;
			public const char REVERSED_NOT_SIGN = (char)0x2310;
			public const char REVERSED_PILCROW_SIGN = (char)0x204B;
			public const char REVERSED_PRIME = (char)0x2035;
			public const char REVERSED_ROTATED_FLORAL_HEART_BULLET = (char)0x2619;
			public const char REVERSED_SANS_SERIF_CAPITAL_L = (char)0x2143;
			public const char REVERSED_SEMICOLON = (char)0x204F;
			public const char REVERSED_TILDE = (char)0x223D;
			public const char REVERSED_TILDE_EQUALS = (char)0x22CD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char REVERSED_TRIPLE_PRIME = (char)0x2037;
			/// <summary> Formerly BACKSLASH. </summary>
			public const char REVERSE_SOLIDUS = (char)0x005C;
			public const char REVERSE_SOLIDUS_OPERATOR = (char)0x29F5;
			public const char REVERSE_SOLIDUS_WITH_HORIZONTAL_STROKE = (char)0x29F7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char RIAL_SIGN = (char)0xFDFC;
			public const char RIGHTHAND_INTERIOR_PRODUCT = (char)0x2A3D;
			/// <summary> Formerly RIGHT ARROW. </summary>
			public const char RIGHTWARDS_ARROW = (char)0x2192;
			public const char RIGHTWARDS_ARROW_ABOVE_ALMOST_EQUAL_TO = (char)0x2975;
			public const char RIGHTWARDS_ARROW_ABOVE_SHORT_LEFTWARDS_ARROW = (char)0x2942;
			public const char RIGHTWARDS_ARROW_ABOVE_TILDE_OPERATOR = (char)0x2974;
			/// <summary> Formerly RIGHT ARROW FROM BAR. </summary>
			public const char RIGHTWARDS_ARROW_FROM_BAR = (char)0x21A6;
			public const char RIGHTWARDS_ARROW_FROM_BAR_TO_BLACK_DIAMOND = (char)0x2920;
			/// <summary> Formerly RIGHT ARROW OVER LEFT ARROW. </summary>
			public const char RIGHTWARDS_ARROW_OVER_LEFTWARDS_ARROW = (char)0x21C4;
			public const char RIGHTWARDS_ARROW_TAIL = (char)0x291A;
			public const char RIGHTWARDS_ARROW_THROUGH_X = (char)0x2947;
			/// <summary> Formerly RIGHT ARROW TO BAR. </summary>
			public const char RIGHTWARDS_ARROW_TO_BAR = (char)0x21E5;
			public const char RIGHTWARDS_ARROW_TO_BLACK_DIAMOND = (char)0x291E;
			/// <summary> Formerly RIGHT ARROW WITH CORNER DOWN. </summary>
			public const char RIGHTWARDS_ARROW_WITH_CORNER_DOWNWARDS = (char)0x21B4;
			public const char RIGHTWARDS_ARROW_WITH_DOTTED_STEM = (char)0x2911;
			public const char RIGHTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE = (char)0x21FB;
			/// <summary> Formerly RIGHT ARROW WITH HOOK. </summary>
			public const char RIGHTWARDS_ARROW_WITH_HOOK = (char)0x21AA;
			/// <summary> Formerly RIGHT ARROW WITH LOOP. </summary>
			public const char RIGHTWARDS_ARROW_WITH_LOOP = (char)0x21AC;
			public const char RIGHTWARDS_ARROW_WITH_PLUS_BELOW = (char)0x2945;
			/// <summary> (This is a composition; consider avoiding.) Formerly RIGHT ARROW WITH STROKE. </summary>
			public const char RIGHTWARDS_ARROW_WITH_STROKE = (char)0x219B;
			/// <summary> Formerly RIGHT ARROW WITH TAIL. </summary>
			public const char RIGHTWARDS_ARROW_WITH_TAIL = (char)0x21A3;
			public const char RIGHTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE = (char)0x2915;
			public const char RIGHTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE = (char)0x2914;
			public const char RIGHTWARDS_ARROW_WITH_TIP_DOWNWARDS = (char)0x2B0E;
			public const char RIGHTWARDS_ARROW_WITH_TIP_UPWARDS = (char)0x2B0F;
			public const char RIGHTWARDS_ARROW_WITH_VERTICAL_STROKE = (char)0x21F8;
			/// <summary> Formerly RIGHT DASHED ARROW. </summary>
			public const char RIGHTWARDS_DASHED_ARROW = (char)0x21E2;
			/// <summary> Formerly RIGHT DOUBLE ARROW. </summary>
			public const char RIGHTWARDS_DOUBLE_ARROW = (char)0x21D2;
			public const char RIGHTWARDS_DOUBLE_ARROW_FROM_BAR = (char)0x2907;
			public const char RIGHTWARDS_DOUBLE_ARROW_TAIL = (char)0x291C;
			/// <summary> (This is a composition; consider avoiding.) Formerly RIGHT DOUBLE ARROW WITH STROKE. </summary>
			public const char RIGHTWARDS_DOUBLE_ARROW_WITH_STROKE = (char)0x21CF;
			public const char RIGHTWARDS_DOUBLE_ARROW_WITH_VERTICAL_STROKE = (char)0x2903;
			public const char RIGHTWARDS_DOUBLE_DASH_ARROW = (char)0x290D;
			/// <summary> Formerly RIGHT HARPOON OVER LEFT HARPOON. </summary>
			public const char RIGHTWARDS_HARPOON_OVER_LEFTWARDS_HARPOON = (char)0x21CC;
			/// <summary> Formerly RIGHT HARPOON WITH BARB DOWN. </summary>
			public const char RIGHTWARDS_HARPOON_WITH_BARB_DOWNWARDS = (char)0x21C1;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_DOWN_ABOVE_LEFTWARDS_HARPOON_WITH_BARB_DOWN = (char)0x2969;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_DOWN_BELOW_LONG_DASH = (char)0x296D;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_DOWN_FROM_BAR = (char)0x295F;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_DOWN_TO_BAR = (char)0x2957;
			/// <summary> Formerly RIGHT HARPOON WITH BARB UP. </summary>
			public const char RIGHTWARDS_HARPOON_WITH_BARB_UPWARDS = (char)0x21C0;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_UP_ABOVE_LEFTWARDS_HARPOON_WITH_BARB_UP = (char)0x2968;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_UP_ABOVE_LONG_DASH = (char)0x296C;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_UP_ABOVE_RIGHTWARDS_HARPOON_WITH_BARB_DOWN = (char)0x2964;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_UP_FROM_BAR = (char)0x295B;
			public const char RIGHTWARDS_HARPOON_WITH_BARB_UP_TO_BAR = (char)0x2953;
			public const char RIGHTWARDS_OPEN_HEADED_ARROW = (char)0x21FE;
			/// <summary> Formerly RIGHT PAIRED ARROWS. </summary>
			public const char RIGHTWARDS_PAIRED_ARROWS = (char)0x21C9;
			/// <summary> Formerly RIGHT SQUIGGLE ARROW. </summary>
			public const char RIGHTWARDS_SQUIGGLE_ARROW = (char)0x21DD;
			/// <summary> Formerly RIGHT TRIPLE ARROW. </summary>
			public const char RIGHTWARDS_TRIPLE_ARROW = (char)0x21DB;
			public const char RIGHTWARDS_TRIPLE_DASH_ARROW = (char)0x290F;
			/// <summary> Formerly RIGHT TWO HEADED ARROW. </summary>
			public const char RIGHTWARDS_TWO_HEADED_ARROW = (char)0x21A0;
			public const char RIGHTWARDS_TWO_HEADED_ARROW_FROM_BAR = (char)0x2905;
			public const char RIGHTWARDS_TWO_HEADED_ARROW_WITH_DOUBLE_VERTICAL_STROKE = (char)0x2901;
			public const char RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL = (char)0x2916;
			public const char RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE = (char)0x2918;
			public const char RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE = (char)0x2917;
			public const char RIGHTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE = (char)0x2900;
			public const char RIGHTWARDS_TWO_HEADED_TRIPLE_DASH_ARROW = (char)0x2910;
			/// <summary> Formerly RIGHT WAVE ARROW. </summary>
			public const char RIGHTWARDS_WAVE_ARROW = (char)0x219D;
			/// <summary> Formerly WHITE RIGHT ARROW. </summary>
			public const char RIGHTWARDS_WHITE_ARROW = (char)0x21E8;
			public const char RIGHTWARDS_WHITE_ARROW_FROM_WALL = (char)0x21F0;
			public const char RIGHT_ANGLE = (char)0x221F;
			/// <summary> Formerly CLOSING ANGLE BRACKET. </summary>
			public const char RIGHT_ANGLE_BRACKET = (char)0x3009;
			public const char RIGHT_ANGLE_BRACKET_WITH_DOT = (char)0x2992;
			public const char RIGHT_ANGLE_DOTTED_SUBSTITUTION_MARKER = (char)0x2E01;
			public const char RIGHT_ANGLE_SUBSTITUTION_MARKER = (char)0x2E00;
			public const char RIGHT_ANGLE_VARIANT_WITH_SQUARE = (char)0x299C;
			public const char RIGHT_ANGLE_WITH_ARC = (char)0x22BE;
			public const char RIGHT_ANGLE_WITH_DOWNWARDS_ZIGZAG_ARROW = (char)0x237C;
			public const char RIGHT_ARC_GREATER_THAN_BRACKET = (char)0x2994;
			public const char RIGHT_ARROW_WITH_CIRCLED_PLUS = (char)0x27F4;
			public const char RIGHT_ARROW_WITH_SMALL_CIRCLE = (char)0x21F4;
			/// <summary> Formerly CLOSING BLACK LENTICULAR BRACKET. </summary>
			public const char RIGHT_BLACK_LENTICULAR_BRACKET = (char)0x3011;
			public const char RIGHT_BLACK_TORTOISE_SHELL_BRACKET = (char)0x2998;
			public const char RIGHT_CEILING = (char)0x2309;
			/// <summary> Formerly CLOSING CORNER BRACKET. </summary>
			public const char RIGHT_CORNER_BRACKET = (char)0x300D;
			/// <summary> Formerly CLOSING CURLY BRACKET. </summary>
			public const char RIGHT_CURLY_BRACKET = (char)0x007D;
			public const char RIGHT_CURLY_BRACKET_LOWER_HOOK = (char)0x23AD;
			public const char RIGHT_CURLY_BRACKET_MIDDLE_PIECE = (char)0x23AC;
			public const char RIGHT_CURLY_BRACKET_UPPER_HOOK = (char)0x23AB;
			public const char RIGHT_DOTTED_SUBSTITUTION_BRACKET = (char)0x2E05;
			/// <summary> Formerly CLOSING DOUBLE ANGLE BRACKET. </summary>
			public const char RIGHT_DOUBLE_ANGLE_BRACKET = (char)0x300B;
			public const char RIGHT_DOUBLE_ARROW_WITH_ROUNDED_HEAD = (char)0x2970;
			/// <summary> Formerly DOUBLE COMMA QUOTATION MARK. </summary>
			public const char RIGHT_DOUBLE_QUOTATION_MARK = (char)0x201D;
			public const char RIGHT_DOUBLE_WIGGLY_FENCE = (char)0x29DB;
			public const char RIGHT_FISH_TAIL = (char)0x297D;
			public const char RIGHT_FLOOR = (char)0x230B;
			public const char RIGHT_HALF_BLACK_CIRCLE = (char)0x25D7;
			public const char RIGHT_HALF_BLOCK = (char)0x2590;
			public const char RIGHT_LOW_PARAPHRASE_BRACKET = (char)0x2E1D;
			public const char RIGHT_NORMAL_FACTOR_SEMIDIRECT_PRODUCT = (char)0x22CA;
			public const char RIGHT_ONE_EIGHTH_BLOCK = (char)0x2595;
			public const char RIGHT_OUTER_JOIN = (char)0x27D6;
			/// <summary> Formerly CLOSING PARENTHESIS. </summary>
			public const char RIGHT_PARENTHESIS = (char)0x0029;
			public const char RIGHT_PARENTHESIS_EXTENSION = (char)0x239F;
			public const char RIGHT_PARENTHESIS_LOWER_HOOK = (char)0x23A0;
			public const char RIGHT_PARENTHESIS_UPPER_HOOK = (char)0x239E;
			/// <summary> (This is a composition; consider avoiding.) Formerly KET. </summary>
			public const char RIGHT_POINTING_ANGLE_BRACKET = (char)0x232A;
			public const char RIGHT_POINTING_CURVED_ANGLE_BRACKET = (char)0x29FD;
			/// <summary> Formerly RIGHT POINTING GUILLEMET. </summary>
			public const char RIGHT_POINTING_DOUBLE_ANGLE_QUOTATION_MARK = (char)0x00BB;
			public const char RIGHT_RAISED_OMISSION_BRACKET = (char)0x2E0D;
			public const char RIGHT_SEMIDIRECT_PRODUCT = (char)0x22CC;
			/// <summary> Formerly RIGHT-SHADED WHITE RIGHT ARROW. </summary>
			public const char RIGHT_SHADED_WHITE_RIGHTWARDS_ARROW = (char)0x27A9;
			public const char RIGHT_SIDE_ARC_CLOCKWISE_ARROW = (char)0x2938;
			/// <summary> Formerly SINGLE COMMA QUOTATION MARK. </summary>
			public const char RIGHT_SINGLE_QUOTATION_MARK = (char)0x2019;
			/// <summary> Formerly CLOSING SQUARE BRACKET. </summary>
			public const char RIGHT_SQUARE_BRACKET = (char)0x005D;
			public const char RIGHT_SQUARE_BRACKET_EXTENSION = (char)0x23A5;
			public const char RIGHT_SQUARE_BRACKET_LOWER_CORNER = (char)0x23A6;
			public const char RIGHT_SQUARE_BRACKET_UPPER_CORNER = (char)0x23A4;
			public const char RIGHT_SQUARE_BRACKET_WITH_QUILL = (char)0x2046;
			public const char RIGHT_SQUARE_BRACKET_WITH_TICK_IN_BOTTOM_CORNER = (char)0x298E;
			public const char RIGHT_SQUARE_BRACKET_WITH_TICK_IN_TOP_CORNER = (char)0x2990;
			public const char RIGHT_SQUARE_BRACKET_WITH_UNDERBAR = (char)0x298C;
			public const char RIGHT_SUBSTITUTION_BRACKET = (char)0x2E03;
			public const char RIGHT_S_SHAPED_BAG_DELIMITER = (char)0x27C6;
			public const char RIGHT_TACK = (char)0x22A2;
			/// <summary> Formerly CLOSING TORTOISE SHELL BRACKET. </summary>
			public const char RIGHT_TORTOISE_SHELL_BRACKET = (char)0x3015;
			public const char RIGHT_TO_LEFT_EMBEDDING = (char)0x202B;
			public const char RIGHT_TO_LEFT_MARK = (char)0x200F;
			public const char RIGHT_TO_LEFT_OVERRIDE = (char)0x202E;
			public const char RIGHT_TRANSPOSITION_BRACKET = (char)0x2E0A;
			public const char RIGHT_TRIANGLE = (char)0x22BF;
			public const char RIGHT_TRIANGLE_ABOVE_LEFT_TRIANGLE = (char)0x29CE;
			public const char RIGHT_VERTICAL_BOX_LINE = (char)0x23B9;
			/// <summary> Formerly CLOSING WHITE CORNER BRACKET. </summary>
			public const char RIGHT_WHITE_CORNER_BRACKET = (char)0x300F;
			public const char RIGHT_WHITE_CURLY_BRACKET = (char)0x2984;
			/// <summary> Formerly CLOSING WHITE LENTICULAR BRACKET. </summary>
			public const char RIGHT_WHITE_LENTICULAR_BRACKET = (char)0x3017;
			public const char RIGHT_WHITE_PARENTHESIS = (char)0x2986;
			/// <summary> Formerly CLOSING WHITE SQUARE BRACKET. </summary>
			public const char RIGHT_WHITE_SQUARE_BRACKET = (char)0x301B;
			/// <summary> Formerly CLOSING WHITE TORTOISE SHELL BRACKET. </summary>
			public const char RIGHT_WHITE_TORTOISE_SHELL_BRACKET = (char)0x3019;
			public const char RIGHT_WIGGLY_FENCE = (char)0x29D9;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING RING ABOVE. </summary>
			public const char RING_ABOVE = (char)0x02DA;
			public const char RING_EQUAL_TO = (char)0x2257;
			public const char RING_IN_EQUAL_TO = (char)0x2256;
			public const char RING_OPERATOR = (char)0x2218;
			public const char RISING_DIAGONAL_CROSSING_FALLING_DIAGONAL = (char)0x292B;
			public const char RISING_DIAGONAL_CROSSING_SOUTH_EAST_ARROW = (char)0x2930;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_EIGHT = (char)0x2167;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_ELEVEN = (char)0x216A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_FIFTY = (char)0x216C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_FIVE = (char)0x2164;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_FIVE_HUNDRED = (char)0x216E;
			public const char ROMAN_NUMERAL_FIVE_THOUSAND = (char)0x2181;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_FOUR = (char)0x2163;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_NINE = (char)0x2168;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_ONE = (char)0x2160;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_ONE_HUNDRED = (char)0x216D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_ONE_THOUSAND = (char)0x216F;
			public const char ROMAN_NUMERAL_ONE_THOUSAND_C_D = (char)0x2180;
			public const char ROMAN_NUMERAL_REVERSED_ONE_HUNDRED = (char)0x2183;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_SEVEN = (char)0x2166;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_SIX = (char)0x2165;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_TEN = (char)0x2169;
			public const char ROMAN_NUMERAL_TEN_THOUSAND = (char)0x2182;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_THREE = (char)0x2162;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_TWELVE = (char)0x216B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char ROMAN_NUMERAL_TWO = (char)0x2161;
			public const char ROTATED_CAPITAL_Q = (char)0x213A;
			public const char ROTATED_FLORAL_HEART_BULLET = (char)0x2767;
			public const char ROTATED_HEAVY_BLACK_HEART_BULLET = (char)0x2765;
			public const char RULE_DELAYED = (char)0x29F4;
			public const char RUNIC_ARLAUG_SYMBOL = (char)0x16EE;
			public const char RUNIC_BELGTHOR_SYMBOL = (char)0x16F0;
			public const char RUNIC_CROSS_PUNCTUATION = (char)0x16ED;
			public const char RUNIC_LETTER_AC_A = (char)0x16AA;
			public const char RUNIC_LETTER_AESC = (char)0x16AB;
			public const char RUNIC_LETTER_ALGIZ_EOLHX = (char)0x16C9;
			public const char RUNIC_LETTER_ANSUZ_A = (char)0x16A8;
			public const char RUNIC_LETTER_BERKANAN_BEORC_BJARKAN_B = (char)0x16D2;
			public const char RUNIC_LETTER_C = (char)0x16CD;
			public const char RUNIC_LETTER_CALC = (char)0x16E3;
			public const char RUNIC_LETTER_CEALC = (char)0x16E4;
			public const char RUNIC_LETTER_CEN = (char)0x16B3;
			public const char RUNIC_LETTER_CWEORTH = (char)0x16E2;
			public const char RUNIC_LETTER_D = (char)0x16D1;
			public const char RUNIC_LETTER_DAGAZ_DAEG_D = (char)0x16DE;
			public const char RUNIC_LETTER_DOTTED_L = (char)0x16DB;
			public const char RUNIC_LETTER_DOTTED_N = (char)0x16C0;
			public const char RUNIC_LETTER_DOTTED_P = (char)0x16D4;
			public const char RUNIC_LETTER_E = (char)0x16C2;
			public const char RUNIC_LETTER_EAR = (char)0x16E0;
			public const char RUNIC_LETTER_EHWAZ_EH_E = (char)0x16D6;
			public const char RUNIC_LETTER_ENG = (char)0x16B6;
			public const char RUNIC_LETTER_ETH = (char)0x16A7;
			public const char RUNIC_LETTER_FEHU_FEOH_FE_F = (char)0x16A0;
			public const char RUNIC_LETTER_G = (char)0x16B5;
			public const char RUNIC_LETTER_GAR = (char)0x16B8;
			public const char RUNIC_LETTER_GEBO_GYFU_G = (char)0x16B7;
			public const char RUNIC_LETTER_GER = (char)0x16C4;
			public const char RUNIC_LETTER_HAEGL_H = (char)0x16BB;
			public const char RUNIC_LETTER_HAGLAZ_H = (char)0x16BA;
			public const char RUNIC_LETTER_ICELANDIC_YR = (char)0x16E8;
			public const char RUNIC_LETTER_ING = (char)0x16DD;
			public const char RUNIC_LETTER_INGWAZ = (char)0x16DC;
			public const char RUNIC_LETTER_IOR = (char)0x16E1;
			public const char RUNIC_LETTER_ISAZ_IS_ISS_I = (char)0x16C1;
			public const char RUNIC_LETTER_IWAZ_EOH = (char)0x16C7;
			public const char RUNIC_LETTER_JERAN_J = (char)0x16C3;
			public const char RUNIC_LETTER_KAUNA = (char)0x16B2;
			public const char RUNIC_LETTER_KAUN_K = (char)0x16B4;
			public const char RUNIC_LETTER_LAUKAZ_LAGU_LOGR_L = (char)0x16DA;
			public const char RUNIC_LETTER_LONG_BRANCH_AR_AE = (char)0x16C5;
			public const char RUNIC_LETTER_LONG_BRANCH_HAGALL_H = (char)0x16BC;
			public const char RUNIC_LETTER_LONG_BRANCH_MADR_M = (char)0x16D8;
			public const char RUNIC_LETTER_LONG_BRANCH_OSS_O = (char)0x16AC;
			public const char RUNIC_LETTER_LONG_BRANCH_YR = (char)0x16E6;
			public const char RUNIC_LETTER_MANNAZ_MAN_M = (char)0x16D7;
			public const char RUNIC_LETTER_NAUDIZ_NYD_NAUD_N = (char)0x16BE;
			public const char RUNIC_LETTER_O = (char)0x16AE;
			public const char RUNIC_LETTER_OE = (char)0x16AF;
			public const char RUNIC_LETTER_ON = (char)0x16B0;
			public const char RUNIC_LETTER_OPEN_P = (char)0x16D5;
			public const char RUNIC_LETTER_OS_O = (char)0x16A9;
			public const char RUNIC_LETTER_OTHALAN_ETHEL_O = (char)0x16DF;
			public const char RUNIC_LETTER_PERTHO_PEORTH_P = (char)0x16C8;
			public const char RUNIC_LETTER_Q = (char)0x16E9;
			public const char RUNIC_LETTER_RAIDO_RAD_REID_R = (char)0x16B1;
			public const char RUNIC_LETTER_SHORT_TWIG_AR_A = (char)0x16C6;
			public const char RUNIC_LETTER_SHORT_TWIG_BJARKAN_B = (char)0x16D3;
			public const char RUNIC_LETTER_SHORT_TWIG_HAGALL_H = (char)0x16BD;
			public const char RUNIC_LETTER_SHORT_TWIG_MADR_M = (char)0x16D9;
			public const char RUNIC_LETTER_SHORT_TWIG_NAUD_N = (char)0x16BF;
			public const char RUNIC_LETTER_SHORT_TWIG_OSS_O = (char)0x16AD;
			public const char RUNIC_LETTER_SHORT_TWIG_SOL_S = (char)0x16CC;
			public const char RUNIC_LETTER_SHORT_TWIG_TYR_T = (char)0x16D0;
			public const char RUNIC_LETTER_SHORT_TWIG_YR = (char)0x16E7;
			public const char RUNIC_LETTER_SIGEL_LONG_BRANCH_SOL_S = (char)0x16CB;
			public const char RUNIC_LETTER_SOWILO_S = (char)0x16CA;
			public const char RUNIC_LETTER_STAN = (char)0x16E5;
			public const char RUNIC_LETTER_THURISAZ_THURS_THORN = (char)0x16A6;
			public const char RUNIC_LETTER_TIWAZ_TIR_TYR_T = (char)0x16CF;
			public const char RUNIC_LETTER_URUZ_UR_U = (char)0x16A2;
			public const char RUNIC_LETTER_V = (char)0x16A1;
			public const char RUNIC_LETTER_W = (char)0x16A5;
			public const char RUNIC_LETTER_WUNJO_WYNN_W = (char)0x16B9;
			public const char RUNIC_LETTER_X = (char)0x16EA;
			public const char RUNIC_LETTER_Y = (char)0x16A4;
			public const char RUNIC_LETTER_YR = (char)0x16A3;
			public const char RUNIC_LETTER_Z = (char)0x16CE;
			public const char RUNIC_MULTIPLE_PUNCTUATION = (char)0x16EC;
			public const char RUNIC_SINGLE_PUNCTUATION = (char)0x16EB;
			public const char RUNIC_TVIMADUR_SYMBOL = (char)0x16EF;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char RUPEE_SIGN = (char)0x20A8;
		}
		public class S {
			public const char SAGITTARIUS = (char)0x2650;
			public const char SALTIRE = (char)0x2613;
			public const char SATURN = (char)0x2644;
			public const char SCALES = (char)0x2696;
			public const char SCORPIUS = (char)0x264F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SCRIPT B. </summary>
			public const char SCRIPT_CAPITAL_B = (char)0x212C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SCRIPT E. </summary>
			public const char SCRIPT_CAPITAL_E = (char)0x2130;
			/// <summary> (This is a composition; consider avoiding.) Formerly SCRIPT F. </summary>
			public const char SCRIPT_CAPITAL_F = (char)0x2131;
			/// <summary> (This is a composition; consider avoiding.) Formerly SCRIPT H. </summary>
			public const char SCRIPT_CAPITAL_H = (char)0x210B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SCRIPT I. </summary>
			public const char SCRIPT_CAPITAL_I = (char)0x2110;
			/// <summary> (This is a composition; consider avoiding.) Formerly SCRIPT L. </summary>
			public const char SCRIPT_CAPITAL_L = (char)0x2112;
			/// <summary> (This is a composition; consider avoiding.) Formerly SCRIPT M. </summary>
			public const char SCRIPT_CAPITAL_M = (char)0x2133;
			/// <summary> Formerly SCRIPT P. </summary>
			public const char SCRIPT_CAPITAL_P = (char)0x2118;
			/// <summary> (This is a composition; consider avoiding.) Formerly SCRIPT R. </summary>
			public const char SCRIPT_CAPITAL_R = (char)0x211B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SCRIPT_SMALL_E = (char)0x212F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SCRIPT_SMALL_G = (char)0x210A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SCRIPT_SMALL_L = (char)0x2113;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SCRIPT_SMALL_O = (char)0x2134;
			public const char SCRUPLE = (char)0x2108;
			public const char SECTION_SIGN = (char)0x00A7;
			public const char SECTOR = (char)0x2314;
			public const char SEGMENT = (char)0x2313;
			public const char SEMICOLON = (char)0x003B;
			public const char SEMIDIRECT_PRODUCT_WITH_BOTTOM_CLOSED = (char)0x2A32;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SERVICE_MARK = (char)0x2120;
			public const char SESAME_DOT = (char)0xFE45;
			public const char SET_MINUS = (char)0x2216;
			public const char SHADOWED_WHITE_CIRCLE = (char)0x274D;
			public const char SHADOWED_WHITE_LATIN_CROSS = (char)0x271E;
			public const char SHADOWED_WHITE_STAR = (char)0x2730;
			public const char SHAMROCK = (char)0x2618;
			public const char SHORT_DOWN_TACK = (char)0x2ADF;
			public const char SHORT_DOWN_TACK_WITH_OVERBAR = (char)0x2AE7;
			public const char SHORT_LEFT_TACK = (char)0x2ADE;
			public const char SHORT_RIGHTWARDS_ARROW_ABOVE_LEFTWARDS_ARROW = (char)0x2944;
			public const char SHORT_UP_TACK = (char)0x2AE0;
			public const char SHORT_UP_TACK_ABOVE_SHORT_DOWN_TACK = (char)0x2AE9;
			public const char SHORT_UP_TACK_WITH_UNDERBAR = (char)0x2AE8;
			public const char SHOULDERED_OPEN_BOX = (char)0x237D;
			public const char SHUFFLE_PRODUCT = (char)0x29E2;
			public const char SIMILAR_ABOVE_GREATER_THAN_ABOVE_EQUALS_SIGN = (char)0x2AA0;
			public const char SIMILAR_ABOVE_LESS_THAN_ABOVE_EQUALS_SIGN = (char)0x2A9F;
			public const char SIMILAR_MINUS_SIMILAR = (char)0x2A6C;
			public const char SIMILAR_OR_GREATER_THAN = (char)0x2A9E;
			public const char SIMILAR_OR_LESS_THAN = (char)0x2A9D;
			public const char SINE_WAVE = (char)0x223F;
			/// <summary> Formerly SINGLE REVERSED COMMA QUOTATION MARK. </summary>
			public const char SINGLE_HIGH_REVERSED_9_QUOTATION_MARK = (char)0x201B;
			/// <summary> Formerly LEFT POINTING SINGLE GUILLEMET. </summary>
			public const char SINGLE_LEFT_POINTING_ANGLE_QUOTATION_MARK = (char)0x2039;
			/// <summary> Formerly LOW SINGLE COMMA QUOTATION MARK. </summary>
			public const char SINGLE_LOW_9_QUOTATION_MARK = (char)0x201A;
			/// <summary> Formerly RIGHT POINTING SINGLE GUILLEMET. </summary>
			public const char SINGLE_RIGHT_POINTING_ANGLE_QUOTATION_MARK = (char)0x203A;
			public const char SINHALA_LETTER_AAYANNA = (char)0x0D86;
			public const char SINHALA_LETTER_AEEYANNA = (char)0x0D88;
			public const char SINHALA_LETTER_AEYANNA = (char)0x0D87;
			public const char SINHALA_LETTER_AIYANNA = (char)0x0D93;
			public const char SINHALA_LETTER_ALPAPRAANA_BAYANNA = (char)0x0DB6;
			public const char SINHALA_LETTER_ALPAPRAANA_CAYANNA = (char)0x0DA0;
			public const char SINHALA_LETTER_ALPAPRAANA_DAYANNA = (char)0x0DAF;
			public const char SINHALA_LETTER_ALPAPRAANA_DDAYANNA = (char)0x0DA9;
			public const char SINHALA_LETTER_ALPAPRAANA_GAYANNA = (char)0x0D9C;
			public const char SINHALA_LETTER_ALPAPRAANA_JAYANNA = (char)0x0DA2;
			public const char SINHALA_LETTER_ALPAPRAANA_KAYANNA = (char)0x0D9A;
			public const char SINHALA_LETTER_ALPAPRAANA_PAYANNA = (char)0x0DB4;
			public const char SINHALA_LETTER_ALPAPRAANA_TAYANNA = (char)0x0DAD;
			public const char SINHALA_LETTER_ALPAPRAANA_TTAYANNA = (char)0x0DA7;
			public const char SINHALA_LETTER_AMBA_BAYANNA = (char)0x0DB9;
			public const char SINHALA_LETTER_AUYANNA = (char)0x0D96;
			public const char SINHALA_LETTER_AYANNA = (char)0x0D85;
			public const char SINHALA_LETTER_DANTAJA_LAYANNA = (char)0x0DBD;
			public const char SINHALA_LETTER_DANTAJA_NAYANNA = (char)0x0DB1;
			public const char SINHALA_LETTER_DANTAJA_SAYANNA = (char)0x0DC3;
			public const char SINHALA_LETTER_EEYANNA = (char)0x0D92;
			public const char SINHALA_LETTER_EYANNA = (char)0x0D91;
			public const char SINHALA_LETTER_FAYANNA = (char)0x0DC6;
			public const char SINHALA_LETTER_HAYANNA = (char)0x0DC4;
			public const char SINHALA_LETTER_IIYANNA = (char)0x0D8A;
			public const char SINHALA_LETTER_ILUUYANNA = (char)0x0D90;
			public const char SINHALA_LETTER_ILUYANNA = (char)0x0D8F;
			public const char SINHALA_LETTER_IRUUYANNA = (char)0x0D8E;
			public const char SINHALA_LETTER_IRUYANNA = (char)0x0D8D;
			public const char SINHALA_LETTER_IYANNA = (char)0x0D89;
			public const char SINHALA_LETTER_KANTAJA_NAASIKYAYA = (char)0x0D9E;
			public const char SINHALA_LETTER_MAHAAPRAANA_BAYANNA = (char)0x0DB7;
			public const char SINHALA_LETTER_MAHAAPRAANA_CAYANNA = (char)0x0DA1;
			public const char SINHALA_LETTER_MAHAAPRAANA_DAYANNA = (char)0x0DB0;
			public const char SINHALA_LETTER_MAHAAPRAANA_DDAYANNA = (char)0x0DAA;
			public const char SINHALA_LETTER_MAHAAPRAANA_GAYANNA = (char)0x0D9D;
			public const char SINHALA_LETTER_MAHAAPRAANA_JAYANNA = (char)0x0DA3;
			public const char SINHALA_LETTER_MAHAAPRAANA_KAYANNA = (char)0x0D9B;
			public const char SINHALA_LETTER_MAHAAPRAANA_PAYANNA = (char)0x0DB5;
			public const char SINHALA_LETTER_MAHAAPRAANA_TAYANNA = (char)0x0DAE;
			public const char SINHALA_LETTER_MAHAAPRAANA_TTAYANNA = (char)0x0DA8;
			public const char SINHALA_LETTER_MAYANNA = (char)0x0DB8;
			public const char SINHALA_LETTER_MUURDHAJA_LAYANNA = (char)0x0DC5;
			public const char SINHALA_LETTER_MUURDHAJA_NAYANNA = (char)0x0DAB;
			public const char SINHALA_LETTER_MUURDHAJA_SAYANNA = (char)0x0DC2;
			public const char SINHALA_LETTER_OOYANNA = (char)0x0D95;
			public const char SINHALA_LETTER_OYANNA = (char)0x0D94;
			public const char SINHALA_LETTER_RAYANNA = (char)0x0DBB;
			public const char SINHALA_LETTER_SANYAKA_DAYANNA = (char)0x0DB3;
			public const char SINHALA_LETTER_SANYAKA_DDAYANNA = (char)0x0DAC;
			public const char SINHALA_LETTER_SANYAKA_GAYANNA = (char)0x0D9F;
			public const char SINHALA_LETTER_SANYAKA_JAYANNA = (char)0x0DA6;
			public const char SINHALA_LETTER_TAALUJA_NAASIKYAYA = (char)0x0DA4;
			public const char SINHALA_LETTER_TAALUJA_SANYOOGA_NAAKSIKYAYA = (char)0x0DA5;
			public const char SINHALA_LETTER_TAALUJA_SAYANNA = (char)0x0DC1;
			public const char SINHALA_LETTER_UUYANNA = (char)0x0D8C;
			public const char SINHALA_LETTER_UYANNA = (char)0x0D8B;
			public const char SINHALA_LETTER_VAYANNA = (char)0x0DC0;
			public const char SINHALA_LETTER_YAYANNA = (char)0x0DBA;
			public const char SINHALA_PUNCTUATION_KUNDDALIYA = (char)0x0DF4;
			public const char SINHALA_SIGN_AL_LAKUNA = (char)0x0DCA;
			public const char SINHALA_SIGN_ANUSVARAYA = (char)0x0D82;
			public const char SINHALA_SIGN_VISARGAYA = (char)0x0D83;
			public const char SINHALA_VOWEL_SIGN_AELA_PILLA = (char)0x0DCF;
			public const char SINHALA_VOWEL_SIGN_DIGA_AEDA_PILLA = (char)0x0DD1;
			public const char SINHALA_VOWEL_SIGN_DIGA_GAETTA_PILLA = (char)0x0DF2;
			public const char SINHALA_VOWEL_SIGN_DIGA_GAYANUKITTA = (char)0x0DF3;
			public const char SINHALA_VOWEL_SIGN_DIGA_IS_PILLA = (char)0x0DD3;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SINHALA_VOWEL_SIGN_DIGA_KOMBUVA = (char)0x0DDA;
			public const char SINHALA_VOWEL_SIGN_DIGA_PAA_PILLA = (char)0x0DD6;
			public const char SINHALA_VOWEL_SIGN_GAETTA_PILLA = (char)0x0DD8;
			public const char SINHALA_VOWEL_SIGN_GAYANUKITTA = (char)0x0DDF;
			public const char SINHALA_VOWEL_SIGN_KETTI_AEDA_PILLA = (char)0x0DD0;
			public const char SINHALA_VOWEL_SIGN_KETTI_IS_PILLA = (char)0x0DD2;
			public const char SINHALA_VOWEL_SIGN_KETTI_PAA_PILLA = (char)0x0DD4;
			public const char SINHALA_VOWEL_SIGN_KOMBUVA = (char)0x0DD9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SINHALA_VOWEL_SIGN_KOMBUVA_HAA_AELA_PILLA = (char)0x0DDC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SINHALA_VOWEL_SIGN_KOMBUVA_HAA_DIGA_AELA_PILLA = (char)0x0DDD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SINHALA_VOWEL_SIGN_KOMBUVA_HAA_GAYANUKITTA = (char)0x0DDE;
			public const char SINHALA_VOWEL_SIGN_KOMBU_DEKA = (char)0x0DDB;
			public const char SIXTEEN_POINTED_ASTERISK = (char)0x273A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SIX_PER_EM_SPACE = (char)0x2006;
			public const char SIX_PETALLED_BLACK_AND_WHITE_FLORETTE = (char)0x273E;
			public const char SIX_POINTED_BLACK_STAR = (char)0x2736;
			public const char SKULL_AND_CROSSBONES = (char)0x2620;
			public const char SLANTED_EQUAL_TO_OR_GREATER_THAN = (char)0x2A96;
			public const char SLANTED_EQUAL_TO_OR_GREATER_THAN_WITH_DOT_INSIDE = (char)0x2A98;
			public const char SLANTED_EQUAL_TO_OR_LESS_THAN = (char)0x2A95;
			public const char SLANTED_EQUAL_TO_OR_LESS_THAN_WITH_DOT_INSIDE = (char)0x2A97;
			public const char SLOPE = (char)0x2333;
			public const char SLOPING_LARGE_AND = (char)0x2A58;
			public const char SLOPING_LARGE_OR = (char)0x2A57;
			public const char SMALLER_THAN = (char)0x2AAA;
			public const char SMALLER_THAN_OR_EQUAL_TO = (char)0x2AAC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_AMPERSAND = (char)0xFE60;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ASTERISK = (char)0xFE61;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_COLON = (char)0xFE55;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_COMMA = (char)0xFE50;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_COMMERCIAL_AT = (char)0xFE6B;
			public const char SMALL_CONTAINS_AS_MEMBER = (char)0x220D;
			public const char SMALL_CONTAINS_WITH_OVERBAR = (char)0x22FE;
			public const char SMALL_CONTAINS_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE = (char)0x22FC;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_DOLLAR_SIGN = (char)0xFE69;
			public const char SMALL_ELEMENT_OF = (char)0x220A;
			public const char SMALL_ELEMENT_OF_WITH_OVERBAR = (char)0x22F7;
			public const char SMALL_ELEMENT_OF_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE = (char)0x22F4;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_EM_DASH = (char)0xFE58;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_EQUALS_SIGN = (char)0xFE66;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_EXCLAMATION_MARK = (char)0xFE57;
			/// <summary> (This is a composition; consider avoiding.) Formerly SMALL PERIOD. </summary>
			public const char SMALL_FULL_STOP = (char)0xFE52;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_GREATER_THAN_SIGN = (char)0xFE65;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_HYPHEN_MINUS = (char)0xFE63;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_IDEOGRAPHIC_COMMA = (char)0xFE51;
			/// <summary> (This is a composition; consider avoiding.) Formerly SMALL OPENING CURLY BRACKET. </summary>
			public const char SMALL_LEFT_CURLY_BRACKET = (char)0xFE5B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SMALL OPENING PARENTHESIS. </summary>
			public const char SMALL_LEFT_PARENTHESIS = (char)0xFE59;
			/// <summary> (This is a composition; consider avoiding.) Formerly SMALL OPENING TORTOISE SHELL BRACKET. </summary>
			public const char SMALL_LEFT_TORTOISE_SHELL_BRACKET = (char)0xFE5D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_LESS_THAN_SIGN = (char)0xFE64;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_NUMBER_SIGN = (char)0xFE5F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_PERCENT_SIGN = (char)0xFE6A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_PLUS_SIGN = (char)0xFE62;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_QUESTION_MARK = (char)0xFE56;
			/// <summary> (This is a composition; consider avoiding.) Formerly SMALL BACKSLASH. </summary>
			public const char SMALL_REVERSE_SOLIDUS = (char)0xFE68;
			/// <summary> (This is a composition; consider avoiding.) Formerly SMALL CLOSING CURLY BRACKET. </summary>
			public const char SMALL_RIGHT_CURLY_BRACKET = (char)0xFE5C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SMALL CLOSING PARENTHESIS. </summary>
			public const char SMALL_RIGHT_PARENTHESIS = (char)0xFE5A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SMALL CLOSING TORTOISE SHELL BRACKET. </summary>
			public const char SMALL_RIGHT_TORTOISE_SHELL_BRACKET = (char)0xFE5E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_EIGHT = (char)0x2177;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_ELEVEN = (char)0x217A;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_FIFTY = (char)0x217C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_FIVE = (char)0x2174;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_FIVE_HUNDRED = (char)0x217E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_FOUR = (char)0x2173;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_NINE = (char)0x2178;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_ONE = (char)0x2170;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_ONE_HUNDRED = (char)0x217D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_ONE_THOUSAND = (char)0x217F;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_SEVEN = (char)0x2176;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_SIX = (char)0x2175;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_TEN = (char)0x2179;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_THREE = (char)0x2172;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_TWELVE = (char)0x217B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_ROMAN_NUMERAL_TWO = (char)0x2171;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SMALL_SEMICOLON = (char)0xFE54;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING TILDE. </summary>
			public const char SMALL_TILDE = (char)0x02DC;
			public const char SMALL_VEE_WITH_UNDERBAR = (char)0x2A61;
			public const char SMASH_PRODUCT = (char)0x2A33;
			public const char SMILE = (char)0x2323;
			public const char SNOWFLAKE = (char)0x2744;
			public const char SNOWMAN = (char)0x2603;
			public const char SOFTWARE_FUNCTION_SYMBOL = (char)0x2394;
			public const char SOFT_HYPHEN = (char)0x00AD;
			/// <summary> Formerly SLASH. </summary>
			public const char SOLIDUS = (char)0x002F;
			public const char SOLIDUS_WITH_OVERBAR = (char)0x29F6;
			public const char SOUND_RECORDING_COPYRIGHT = (char)0x2117;
			/// <summary> Formerly LOWER RIGHT ARROW. </summary>
			public const char SOUTH_EAST_ARROW = (char)0x2198;
			public const char SOUTH_EAST_ARROW_AND_SOUTH_WEST_ARROW = (char)0x2929;
			public const char SOUTH_EAST_ARROW_CROSSING_NORTH_EAST_ARROW = (char)0x292D;
			public const char SOUTH_EAST_ARROW_TO_CORNER = (char)0x21F2;
			public const char SOUTH_EAST_ARROW_WITH_HOOK = (char)0x2925;
			public const char SOUTH_EAST_BLACK_ARROW = (char)0x2B0A;
			/// <summary> Formerly LOWER RIGHT DOUBLE ARROW. </summary>
			public const char SOUTH_EAST_DOUBLE_ARROW = (char)0x21D8;
			public const char SOUTH_EAST_WHITE_ARROW = (char)0x2B02;
			/// <summary> Formerly LOWER LEFT ARROW. </summary>
			public const char SOUTH_WEST_ARROW = (char)0x2199;
			public const char SOUTH_WEST_ARROW_AND_NORTH_WEST_ARROW = (char)0x292A;
			public const char SOUTH_WEST_ARROW_WITH_HOOK = (char)0x2926;
			public const char SOUTH_WEST_BLACK_ARROW = (char)0x2B0B;
			/// <summary> Formerly LOWER LEFT DOUBLE ARROW. </summary>
			public const char SOUTH_WEST_DOUBLE_ARROW = (char)0x21D9;
			public const char SOUTH_WEST_WHITE_ARROW = (char)0x2B03;
			public const char SPACE = (char)0x0020;
			public const char SPARKLE = (char)0x2747;
			public const char SPHERICAL_ANGLE = (char)0x2222;
			public const char SPHERICAL_ANGLE_OPENING_LEFT = (char)0x29A0;
			public const char SPHERICAL_ANGLE_OPENING_UP = (char)0x29A1;
			public const char SQUARED_ASTERISK = (char)0x29C6;
			public const char SQUARED_DOT_OPERATOR = (char)0x22A1;
			public const char SQUARED_FALLING_DIAGONAL_SLASH = (char)0x29C5;
			public const char SQUARED_MINUS = (char)0x229F;
			public const char SQUARED_PLUS = (char)0x229E;
			public const char SQUARED_RISING_DIAGONAL_SLASH = (char)0x29C4;
			public const char SQUARED_SMALL_CIRCLE = (char)0x29C7;
			public const char SQUARED_SQUARE = (char)0x29C8;
			public const char SQUARED_TIMES = (char)0x22A0;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED AARU. </summary>
			public const char SQUARE_AARU = (char)0x3303;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED AM. </summary>
			public const char SQUARE_AM = (char)0x33C2;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED ANPEA. </summary>
			public const char SQUARE_ANPEA = (char)0x3302;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED APAATO. </summary>
			public const char SQUARE_APAATO = (char)0x3300;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED ARUHUA. </summary>
			public const char SQUARE_ARUHUA = (char)0x3301;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_AU = (char)0x3373;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_A_OVER_M = (char)0x33DF;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED BAARERU. </summary>
			public const char SQUARE_BAARERU = (char)0x332D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_BAR = (char)0x3374;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED BEETA. </summary>
			public const char SQUARE_BEETA = (char)0x333C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED BIRU. </summary>
			public const char SQUARE_BIRU = (char)0x3331;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED BORUTO. </summary>
			public const char SQUARE_BORUTO = (char)0x333E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED BQ. </summary>
			public const char SQUARE_BQ = (char)0x33C3;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED BUSSYERU. </summary>
			public const char SQUARE_BUSSYERU = (char)0x3334;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED CAL. </summary>
			public const char SQUARE_CAL = (char)0x3388;
			public const char SQUARE_CAP = (char)0x2293;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED CC. </summary>
			public const char SQUARE_CC = (char)0x33C4;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED CD. </summary>
			public const char SQUARE_CD = (char)0x33C5;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED CM. </summary>
			public const char SQUARE_CM = (char)0x339D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED CM CUBED. </summary>
			public const char SQUARE_CM_CUBED = (char)0x33A4;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED CM SQUARED. </summary>
			public const char SQUARE_CM_SQUARED = (char)0x33A0;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED CO. </summary>
			public const char SQUARE_CO = (char)0x33C7;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED FOUR IDEOGRAPHS CORPORATION. </summary>
			public const char SQUARE_CORPORATION = (char)0x337F;
			public const char SQUARE_CUP = (char)0x2294;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED C OVER KG. </summary>
			public const char SQUARE_C_OVER_KG = (char)0x33C6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_DA = (char)0x3372;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED DAASU. </summary>
			public const char SQUARE_DAASU = (char)0x3324;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED DB. </summary>
			public const char SQUARE_DB = (char)0x33C8;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED DESI. </summary>
			public const char SQUARE_DESI = (char)0x3325;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED DL. </summary>
			public const char SQUARE_DL = (char)0x3397;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_DM = (char)0x3377;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_DM_CUBED = (char)0x3379;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_DM_SQUARED = (char)0x3378;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED DORU. </summary>
			public const char SQUARE_DORU = (char)0x3326;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED EEKAA. </summary>
			public const char SQUARE_EEKAA = (char)0x3308;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED TWO IDEOGRAPHS ERA NAME HEISEI. </summary>
			public const char SQUARE_ERA_NAME_HEISEI = (char)0x337B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED TWO IDEOGRAPHS ERA NAME MEIZI. </summary>
			public const char SQUARE_ERA_NAME_MEIZI = (char)0x337E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED TWO IDEOGRAPHS ERA NAME SYOUWA. </summary>
			public const char SQUARE_ERA_NAME_SYOUWA = (char)0x337C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED TWO IDEOGRAPHS ERA NAME TAISYOU. </summary>
			public const char SQUARE_ERA_NAME_TAISYOU = (char)0x337D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_ERG = (char)0x32CD;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED ESUKUUDO. </summary>
			public const char SQUARE_ESUKUUDO = (char)0x3307;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_EV = (char)0x32CE;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED FM. </summary>
			public const char SQUARE_FM = (char)0x3399;
			public const char SQUARE_FOOT = (char)0x23CD;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_GAL = (char)0x33FF;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GANMA. </summary>
			public const char SQUARE_GANMA = (char)0x330F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GARON. </summary>
			public const char SQUARE_GARON = (char)0x330E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GB. </summary>
			public const char SQUARE_GB = (char)0x3387;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GHZ. </summary>
			public const char SQUARE_GHZ = (char)0x3393;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GIGA. </summary>
			public const char SQUARE_GIGA = (char)0x3310;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GINII. </summary>
			public const char SQUARE_GINII = (char)0x3311;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GIRUDAA. </summary>
			public const char SQUARE_GIRUDAA = (char)0x3313;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GPA. </summary>
			public const char SQUARE_GPA = (char)0x33AC;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GURAMU. </summary>
			public const char SQUARE_GURAMU = (char)0x3318;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GURAMUTON. </summary>
			public const char SQUARE_GURAMUTON = (char)0x3319;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED GY. </summary>
			public const char SQUARE_GY = (char)0x33C9;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HA. </summary>
			public const char SQUARE_HA = (char)0x33CA;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HAITU. </summary>
			public const char SQUARE_HAITU = (char)0x332A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HEKUTAARU. </summary>
			public const char SQUARE_HEKUTAARU = (char)0x3336;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HERUTU. </summary>
			public const char SQUARE_HERUTU = (char)0x3339;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_HG = (char)0x32CC;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HON. </summary>
			public const char SQUARE_HON = (char)0x333F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HOON. </summary>
			public const char SQUARE_HOON = (char)0x3342;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HOORU. </summary>
			public const char SQUARE_HOORU = (char)0x3341;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HP. </summary>
			public const char SQUARE_HP = (char)0x33CB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_HPA = (char)0x3371;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HUARADDO. </summary>
			public const char SQUARE_HUARADDO = (char)0x3332;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HUIITO. </summary>
			public const char SQUARE_HUIITO = (char)0x3333;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HURAN. </summary>
			public const char SQUARE_HURAN = (char)0x3335;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED HZ. </summary>
			public const char SQUARE_HZ = (char)0x3390;
			public const char SQUARE_IMAGE_OF = (char)0x228F;
			public const char SQUARE_IMAGE_OF_OR_EQUAL_TO = (char)0x2291;
			public const char SQUARE_IMAGE_OF_OR_NOT_EQUAL_TO = (char)0x22E4;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED IN. </summary>
			public const char SQUARE_IN = (char)0x33CC;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED ININGU. </summary>
			public const char SQUARE_ININGU = (char)0x3304;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED INTI. </summary>
			public const char SQUARE_INTI = (char)0x3305;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_IU = (char)0x337A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KA. </summary>
			public const char SQUARE_KA = (char)0x3384;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KAIRI. </summary>
			public const char SQUARE_KAIRI = (char)0x330B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KARATTO. </summary>
			public const char SQUARE_KARATTO = (char)0x330C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KARORII. </summary>
			public const char SQUARE_KARORII = (char)0x330D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KB. </summary>
			public const char SQUARE_KB = (char)0x3385;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KCAL. </summary>
			public const char SQUARE_KCAL = (char)0x3389;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KEESU. </summary>
			public const char SQUARE_KEESU = (char)0x331C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KG. </summary>
			public const char SQUARE_KG = (char)0x338F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KHZ. </summary>
			public const char SQUARE_KHZ = (char)0x3391;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KIRO. </summary>
			public const char SQUARE_KIRO = (char)0x3314;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KIROGURAMU. </summary>
			public const char SQUARE_KIROGURAMU = (char)0x3315;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KIROMEETORU. </summary>
			public const char SQUARE_KIROMEETORU = (char)0x3316;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KIROWATTO. </summary>
			public const char SQUARE_KIROWATTO = (char)0x3317;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KK. </summary>
			public const char SQUARE_KK = (char)0x33CD;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KL. </summary>
			public const char SQUARE_KL = (char)0x3398;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KM. </summary>
			public const char SQUARE_KM = (char)0x339E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KM CAPITAL. </summary>
			public const char SQUARE_KM_CAPITAL = (char)0x33CE;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KM CUBED. </summary>
			public const char SQUARE_KM_CUBED = (char)0x33A6;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KM SQUARED. </summary>
			public const char SQUARE_KM_SQUARED = (char)0x33A2;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KOOPO. </summary>
			public const char SQUARE_KOOPO = (char)0x331E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KORUNA. </summary>
			public const char SQUARE_KORUNA = (char)0x331D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KPA. </summary>
			public const char SQUARE_KPA = (char)0x33AA;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KT. </summary>
			public const char SQUARE_KT = (char)0x33CF;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KUROONE. </summary>
			public const char SQUARE_KUROONE = (char)0x331B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KURUZEIRO. </summary>
			public const char SQUARE_KURUZEIRO = (char)0x331A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KV. </summary>
			public const char SQUARE_KV = (char)0x33B8;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KW. </summary>
			public const char SQUARE_KW = (char)0x33BE;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED KYURII. </summary>
			public const char SQUARE_KYURII = (char)0x3312;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED K OHM. </summary>
			public const char SQUARE_K_OHM = (char)0x33C0;
			public const char SQUARE_LEFT_OPEN_BOX_OPERATOR = (char)0x2ACD;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED LM. </summary>
			public const char SQUARE_LM = (char)0x33D0;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED LN. </summary>
			public const char SQUARE_LN = (char)0x33D1;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED LOG. </summary>
			public const char SQUARE_LOG = (char)0x33D2;
			public const char SQUARE_LOZENGE = (char)0x2311;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED LX. </summary>
			public const char SQUARE_LX = (char)0x33D3;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MA. </summary>
			public const char SQUARE_MA = (char)0x3383;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MAHHA. </summary>
			public const char SQUARE_MAHHA = (char)0x3345;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MAIKURO. </summary>
			public const char SQUARE_MAIKURO = (char)0x3343;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MAIRU. </summary>
			public const char SQUARE_MAIRU = (char)0x3344;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MANSYON. </summary>
			public const char SQUARE_MANSYON = (char)0x3347;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MARUKU. </summary>
			public const char SQUARE_MARUKU = (char)0x3346;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MB. </summary>
			public const char SQUARE_MB = (char)0x3386;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MB SMALL. </summary>
			public const char SQUARE_MB_SMALL = (char)0x33D4;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MEETORU. </summary>
			public const char SQUARE_MEETORU = (char)0x334D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MEGA. </summary>
			public const char SQUARE_MEGA = (char)0x334B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MEGATON. </summary>
			public const char SQUARE_MEGATON = (char)0x334C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MG. </summary>
			public const char SQUARE_MG = (char)0x338E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MHZ. </summary>
			public const char SQUARE_MHZ = (char)0x3392;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MIKURON. </summary>
			public const char SQUARE_MIKURON = (char)0x3348;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MIL. </summary>
			public const char SQUARE_MIL = (char)0x33D5;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MIRI. </summary>
			public const char SQUARE_MIRI = (char)0x3349;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MIRIBAARU. </summary>
			public const char SQUARE_MIRIBAARU = (char)0x334A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED ML. </summary>
			public const char SQUARE_ML = (char)0x3396;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MM. </summary>
			public const char SQUARE_MM = (char)0x339C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MM CUBED. </summary>
			public const char SQUARE_MM_CUBED = (char)0x33A3;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MM SQUARED. </summary>
			public const char SQUARE_MM_SQUARED = (char)0x339F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MOL. </summary>
			public const char SQUARE_MOL = (char)0x33D6;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MPA. </summary>
			public const char SQUARE_MPA = (char)0x33AB;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MS. </summary>
			public const char SQUARE_MS = (char)0x33B3;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MU A. </summary>
			public const char SQUARE_MU_A = (char)0x3382;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MU F. </summary>
			public const char SQUARE_MU_F = (char)0x338C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MU G. </summary>
			public const char SQUARE_MU_G = (char)0x338D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MU L. </summary>
			public const char SQUARE_MU_L = (char)0x3395;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MU M. </summary>
			public const char SQUARE_MU_M = (char)0x339B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MU S. </summary>
			public const char SQUARE_MU_S = (char)0x33B2;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MU V. </summary>
			public const char SQUARE_MU_V = (char)0x33B6;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MU W. </summary>
			public const char SQUARE_MU_W = (char)0x33BC;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MV. </summary>
			public const char SQUARE_MV = (char)0x33B7;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MV MEGA. </summary>
			public const char SQUARE_MV_MEGA = (char)0x33B9;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MW. </summary>
			public const char SQUARE_MW = (char)0x33BD;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED MW MEGA. </summary>
			public const char SQUARE_MW_MEGA = (char)0x33BF;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED M CUBED. </summary>
			public const char SQUARE_M_CUBED = (char)0x33A5;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED M OHM. </summary>
			public const char SQUARE_M_OHM = (char)0x33C1;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED M OVER S. </summary>
			public const char SQUARE_M_OVER_S = (char)0x33A7;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED M OVER S SQUARED. </summary>
			public const char SQUARE_M_OVER_S_SQUARED = (char)0x33A8;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED M SQUARED. </summary>
			public const char SQUARE_M_SQUARED = (char)0x33A1;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED NA. </summary>
			public const char SQUARE_NA = (char)0x3381;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED NANO. </summary>
			public const char SQUARE_NANO = (char)0x3328;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED NF. </summary>
			public const char SQUARE_NF = (char)0x338B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED NM. </summary>
			public const char SQUARE_NM = (char)0x339A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED NOTTO. </summary>
			public const char SQUARE_NOTTO = (char)0x3329;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED NS. </summary>
			public const char SQUARE_NS = (char)0x33B1;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED NV. </summary>
			public const char SQUARE_NV = (char)0x33B5;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED NW. </summary>
			public const char SQUARE_NW = (char)0x33BB;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED ONSU. </summary>
			public const char SQUARE_ONSU = (char)0x3309;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED OOMU. </summary>
			public const char SQUARE_OOMU = (char)0x330A;
			public const char SQUARE_ORIGINAL_OF = (char)0x2290;
			public const char SQUARE_ORIGINAL_OF_OR_EQUAL_TO = (char)0x2292;
			public const char SQUARE_ORIGINAL_OF_OR_NOT_EQUAL_TO = (char)0x22E5;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_OV = (char)0x3375;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PA. </summary>
			public const char SQUARE_PA = (char)0x33A9;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PAASENTO. </summary>
			public const char SQUARE_PAASENTO = (char)0x332B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PAATU. </summary>
			public const char SQUARE_PAATU = (char)0x332C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PA AMPS. </summary>
			public const char SQUARE_PA_AMPS = (char)0x3380;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_PC = (char)0x3376;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PEEZI. </summary>
			public const char SQUARE_PEEZI = (char)0x333B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PENIHI. </summary>
			public const char SQUARE_PENIHI = (char)0x3338;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PENSU. </summary>
			public const char SQUARE_PENSU = (char)0x333A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PESO. </summary>
			public const char SQUARE_PESO = (char)0x3337;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PF. </summary>
			public const char SQUARE_PF = (char)0x338A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PH. </summary>
			public const char SQUARE_PH = (char)0x33D7;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PIASUTORU. </summary>
			public const char SQUARE_PIASUTORU = (char)0x332E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PIKO. </summary>
			public const char SQUARE_PIKO = (char)0x3330;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PIKURU. </summary>
			public const char SQUARE_PIKURU = (char)0x332F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PM. </summary>
			public const char SQUARE_PM = (char)0x33D8;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED POINTO. </summary>
			public const char SQUARE_POINTO = (char)0x333D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PONDO. </summary>
			public const char SQUARE_PONDO = (char)0x3340;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PPM. </summary>
			public const char SQUARE_PPM = (char)0x33D9;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PR. </summary>
			public const char SQUARE_PR = (char)0x33DA;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PS. </summary>
			public const char SQUARE_PS = (char)0x33B0;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PV. </summary>
			public const char SQUARE_PV = (char)0x33B4;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED PW. </summary>
			public const char SQUARE_PW = (char)0x33BA;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED RAD. </summary>
			public const char SQUARE_RAD = (char)0x33AD;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED RAD OVER S. </summary>
			public const char SQUARE_RAD_OVER_S = (char)0x33AE;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED RAD OVER S SQUARED. </summary>
			public const char SQUARE_RAD_OVER_S_SQUARED = (char)0x33AF;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED REMU. </summary>
			public const char SQUARE_REMU = (char)0x3355;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED RENTOGEN. </summary>
			public const char SQUARE_RENTOGEN = (char)0x3356;
			public const char SQUARE_RIGHT_OPEN_BOX_OPERATOR = (char)0x2ACE;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED RIRA. </summary>
			public const char SQUARE_RIRA = (char)0x3352;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED RITTORU. </summary>
			public const char SQUARE_RITTORU = (char)0x3351;
			public const char SQUARE_ROOT = (char)0x221A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED RUPII. </summary>
			public const char SQUARE_RUPII = (char)0x3353;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED RUUBURU. </summary>
			public const char SQUARE_RUUBURU = (char)0x3354;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED SAIKURU. </summary>
			public const char SQUARE_SAIKURU = (char)0x331F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED SANTIIMU. </summary>
			public const char SQUARE_SANTIIMU = (char)0x3320;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED SENTI. </summary>
			public const char SQUARE_SENTI = (char)0x3322;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED SENTO. </summary>
			public const char SQUARE_SENTO = (char)0x3323;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED SIRINGU. </summary>
			public const char SQUARE_SIRINGU = (char)0x3321;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED SR. </summary>
			public const char SQUARE_SR = (char)0x33DB;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED SV. </summary>
			public const char SQUARE_SV = (char)0x33DC;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED THZ. </summary>
			public const char SQUARE_THZ = (char)0x3394;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED TON. </summary>
			public const char SQUARE_TON = (char)0x3327;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED UON. </summary>
			public const char SQUARE_UON = (char)0x3306;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SQUARE_V_OVER_M = (char)0x33DE;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED WATTO. </summary>
			public const char SQUARE_WATTO = (char)0x3357;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED WB. </summary>
			public const char SQUARE_WB = (char)0x33DD;
			public const char SQUARE_WITH_BOTTOM_HALF_BLACK = (char)0x2B13;
			public const char SQUARE_WITH_CONTOURED_OUTLINE = (char)0x29E0;
			public const char SQUARE_WITH_DIAGONAL_CROSSHATCH_FILL = (char)0x25A9;
			public const char SQUARE_WITH_HORIZONTAL_FILL = (char)0x25A4;
			public const char SQUARE_WITH_LEFT_HALF_BLACK = (char)0x25E7;
			public const char SQUARE_WITH_LOWER_RIGHT_DIAGONAL_HALF_BLACK = (char)0x25EA;
			public const char SQUARE_WITH_ORTHOGONAL_CROSSHATCH_FILL = (char)0x25A6;
			public const char SQUARE_WITH_RIGHT_HALF_BLACK = (char)0x25E8;
			public const char SQUARE_WITH_TOP_HALF_BLACK = (char)0x2B12;
			public const char SQUARE_WITH_UPPER_LEFT_DIAGONAL_HALF_BLACK = (char)0x25E9;
			public const char SQUARE_WITH_UPPER_LEFT_TO_LOWER_RIGHT_FILL = (char)0x25A7;
			public const char SQUARE_WITH_UPPER_RIGHT_TO_LOWER_LEFT_FILL = (char)0x25A8;
			public const char SQUARE_WITH_VERTICAL_FILL = (char)0x25A5;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED YAADO. </summary>
			public const char SQUARE_YAADO = (char)0x334E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED YAARU. </summary>
			public const char SQUARE_YAARU = (char)0x334F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SQUARED YUAN. </summary>
			public const char SQUARE_YUAN = (char)0x3350;
			/// <summary> Formerly SQUAT BLACK RIGHT ARROW. </summary>
			public const char SQUAT_BLACK_RIGHTWARDS_ARROW = (char)0x27A7;
			public const char STAFF_OF_AESCULAPIUS = (char)0x2695;
			public const char STAFF_OF_HERMES = (char)0x269A;
			public const char STAR_AND_CRESCENT = (char)0x262A;
			public const char STAR_EQUALS = (char)0x225B;
			public const char STAR_OF_DAVID = (char)0x2721;
			public const char STAR_OPERATOR = (char)0x22C6;
			public const char STRESS_OUTLINED_WHITE_STAR = (char)0x2729;
			public const char STRICTLY_EQUIVALENT_TO = (char)0x2263;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT EIGHT. </summary>
			public const char SUBSCRIPT_EIGHT = (char)0x2088;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SUBSCRIPT_EQUALS_SIGN = (char)0x208C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT FIVE. </summary>
			public const char SUBSCRIPT_FIVE = (char)0x2085;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT FOUR. </summary>
			public const char SUBSCRIPT_FOUR = (char)0x2084;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT OPENING PARENTHESIS. </summary>
			public const char SUBSCRIPT_LEFT_PARENTHESIS = (char)0x208D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT HYPHEN-MINUS. </summary>
			public const char SUBSCRIPT_MINUS = (char)0x208B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT NINE. </summary>
			public const char SUBSCRIPT_NINE = (char)0x2089;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT ONE. </summary>
			public const char SUBSCRIPT_ONE = (char)0x2081;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SUBSCRIPT_PLUS_SIGN = (char)0x208A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT CLOSING PARENTHESIS. </summary>
			public const char SUBSCRIPT_RIGHT_PARENTHESIS = (char)0x208E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT SEVEN. </summary>
			public const char SUBSCRIPT_SEVEN = (char)0x2087;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT SIX. </summary>
			public const char SUBSCRIPT_SIX = (char)0x2086;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT THREE. </summary>
			public const char SUBSCRIPT_THREE = (char)0x2083;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT TWO. </summary>
			public const char SUBSCRIPT_TWO = (char)0x2082;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUBSCRIPT DIGIT ZERO. </summary>
			public const char SUBSCRIPT_ZERO = (char)0x2080;
			public const char SUBSET_ABOVE_RIGHTWARDS_ARROW = (char)0x2979;
			public const char SUBSET_ABOVE_SUBSET = (char)0x2AD5;
			public const char SUBSET_ABOVE_SUPERSET = (char)0x2AD3;
			public const char SUBSET_OF = (char)0x2282;
			public const char SUBSET_OF_ABOVE_ALMOST_EQUAL_TO = (char)0x2AC9;
			public const char SUBSET_OF_ABOVE_EQUALS_SIGN = (char)0x2AC5;
			public const char SUBSET_OF_ABOVE_NOT_EQUAL_TO = (char)0x2ACB;
			public const char SUBSET_OF_ABOVE_TILDE_OPERATOR = (char)0x2AC7;
			public const char SUBSET_OF_OR_EQUAL_TO = (char)0x2286;
			public const char SUBSET_OF_OR_EQUAL_TO_WITH_DOT_ABOVE = (char)0x2AC3;
			/// <summary> Formerly SUBSET OF OR NOT EQUAL TO. </summary>
			public const char SUBSET_OF_WITH_NOT_EQUAL_TO = (char)0x228A;
			public const char SUBSET_WITH_DOT = (char)0x2ABD;
			public const char SUBSET_WITH_MULTIPLICATION_SIGN_BELOW = (char)0x2AC1;
			public const char SUBSET_WITH_PLUS_SIGN_BELOW = (char)0x2ABF;
			public const char SUCCEEDS = (char)0x227B;
			public const char SUCCEEDS_ABOVE_ALMOST_EQUAL_TO = (char)0x2AB8;
			public const char SUCCEEDS_ABOVE_EQUALS_SIGN = (char)0x2AB4;
			public const char SUCCEEDS_ABOVE_NOT_ALMOST_EQUAL_TO = (char)0x2ABA;
			public const char SUCCEEDS_ABOVE_NOT_EQUAL_TO = (char)0x2AB6;
			public const char SUCCEEDS_ABOVE_SINGLE_LINE_EQUALS_SIGN = (char)0x2AB0;
			public const char SUCCEEDS_ABOVE_SINGLE_LINE_NOT_EQUAL_TO = (char)0x2AB2;
			public const char SUCCEEDS_BUT_NOT_EQUIVALENT_TO = (char)0x22E9;
			public const char SUCCEEDS_OR_EQUAL_TO = (char)0x227D;
			public const char SUCCEEDS_OR_EQUIVALENT_TO = (char)0x227F;
			public const char SUCCEEDS_UNDER_RELATION = (char)0x22B1;
			public const char SUMMATION_BOTTOM = (char)0x23B3;
			public const char SUMMATION_TOP = (char)0x23B2;
			public const char SUMMATION_WITH_INTEGRAL = (char)0x2A0B;
			public const char SUN = (char)0x2609;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT EIGHT. </summary>
			public const char SUPERSCRIPT_EIGHT = (char)0x2078;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SUPERSCRIPT_EQUALS_SIGN = (char)0x207C;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT FIVE. </summary>
			public const char SUPERSCRIPT_FIVE = (char)0x2075;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT FOUR. </summary>
			public const char SUPERSCRIPT_FOUR = (char)0x2074;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SUPERSCRIPT_LATIN_SMALL_LETTER_I = (char)0x2071;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SUPERSCRIPT_LATIN_SMALL_LETTER_N = (char)0x207F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT OPENING PARENTHESIS. </summary>
			public const char SUPERSCRIPT_LEFT_PARENTHESIS = (char)0x207D;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT HYPHEN-MINUS. </summary>
			public const char SUPERSCRIPT_MINUS = (char)0x207B;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT NINE. </summary>
			public const char SUPERSCRIPT_NINE = (char)0x2079;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT ONE. </summary>
			public const char SUPERSCRIPT_ONE = (char)0x00B9;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SUPERSCRIPT_PLUS_SIGN = (char)0x207A;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT CLOSING PARENTHESIS. </summary>
			public const char SUPERSCRIPT_RIGHT_PARENTHESIS = (char)0x207E;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT SEVEN. </summary>
			public const char SUPERSCRIPT_SEVEN = (char)0x2077;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT SIX. </summary>
			public const char SUPERSCRIPT_SIX = (char)0x2076;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT THREE. </summary>
			public const char SUPERSCRIPT_THREE = (char)0x00B3;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT TWO. </summary>
			public const char SUPERSCRIPT_TWO = (char)0x00B2;
			/// <summary> (This is a composition; consider avoiding.) Formerly SUPERSCRIPT DIGIT ZERO. </summary>
			public const char SUPERSCRIPT_ZERO = (char)0x2070;
			public const char SUPERSET_ABOVE_LEFTWARDS_ARROW = (char)0x297B;
			public const char SUPERSET_ABOVE_SUBSET = (char)0x2AD4;
			public const char SUPERSET_ABOVE_SUPERSET = (char)0x2AD6;
			public const char SUPERSET_BESIDE_AND_JOINED_BY_DASH_WITH_SUBSET = (char)0x2AD8;
			public const char SUPERSET_BESIDE_SUBSET = (char)0x2AD7;
			public const char SUPERSET_OF = (char)0x2283;
			public const char SUPERSET_OF_ABOVE_ALMOST_EQUAL_TO = (char)0x2ACA;
			public const char SUPERSET_OF_ABOVE_EQUALS_SIGN = (char)0x2AC6;
			public const char SUPERSET_OF_ABOVE_NOT_EQUAL_TO = (char)0x2ACC;
			public const char SUPERSET_OF_ABOVE_TILDE_OPERATOR = (char)0x2AC8;
			public const char SUPERSET_OF_OR_EQUAL_TO = (char)0x2287;
			public const char SUPERSET_OF_OR_EQUAL_TO_WITH_DOT_ABOVE = (char)0x2AC4;
			/// <summary> Formerly SUPERSET OF OR NOT EQUAL TO. </summary>
			public const char SUPERSET_OF_WITH_NOT_EQUAL_TO = (char)0x228B;
			public const char SUPERSET_WITH_DOT = (char)0x2ABE;
			public const char SUPERSET_WITH_MULTIPLICATION_SIGN_BELOW = (char)0x2AC2;
			public const char SUPERSET_WITH_PLUS_SIGN_BELOW = (char)0x2AC0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char SURFACE_INTEGRAL = (char)0x222F;
			public const char SWUNG_DASH = (char)0x2053;
			public const char SYLOTI_NAGRI_LETTER_A = (char)0xA800;
			public const char SYLOTI_NAGRI_LETTER_BHO = (char)0xA81C;
			public const char SYLOTI_NAGRI_LETTER_BO = (char)0xA81B;
			public const char SYLOTI_NAGRI_LETTER_CHO = (char)0xA80D;
			public const char SYLOTI_NAGRI_LETTER_CO = (char)0xA80C;
			public const char SYLOTI_NAGRI_LETTER_DDHO = (char)0xA813;
			public const char SYLOTI_NAGRI_LETTER_DDO = (char)0xA812;
			public const char SYLOTI_NAGRI_LETTER_DHO = (char)0xA817;
			public const char SYLOTI_NAGRI_LETTER_DO = (char)0xA816;
			public const char SYLOTI_NAGRI_LETTER_E = (char)0xA804;
			public const char SYLOTI_NAGRI_LETTER_GHO = (char)0xA80A;
			public const char SYLOTI_NAGRI_LETTER_GO = (char)0xA809;
			public const char SYLOTI_NAGRI_LETTER_HO = (char)0xA822;
			public const char SYLOTI_NAGRI_LETTER_I = (char)0xA801;
			public const char SYLOTI_NAGRI_LETTER_JHO = (char)0xA80F;
			public const char SYLOTI_NAGRI_LETTER_JO = (char)0xA80E;
			public const char SYLOTI_NAGRI_LETTER_KHO = (char)0xA808;
			public const char SYLOTI_NAGRI_LETTER_KO = (char)0xA807;
			public const char SYLOTI_NAGRI_LETTER_LO = (char)0xA81F;
			public const char SYLOTI_NAGRI_LETTER_MO = (char)0xA81D;
			public const char SYLOTI_NAGRI_LETTER_NO = (char)0xA818;
			public const char SYLOTI_NAGRI_LETTER_O = (char)0xA805;
			public const char SYLOTI_NAGRI_LETTER_PHO = (char)0xA81A;
			public const char SYLOTI_NAGRI_LETTER_PO = (char)0xA819;
			public const char SYLOTI_NAGRI_LETTER_RO = (char)0xA81E;
			public const char SYLOTI_NAGRI_LETTER_RRO = (char)0xA820;
			public const char SYLOTI_NAGRI_LETTER_SO = (char)0xA821;
			public const char SYLOTI_NAGRI_LETTER_THO = (char)0xA815;
			public const char SYLOTI_NAGRI_LETTER_TO = (char)0xA814;
			public const char SYLOTI_NAGRI_LETTER_TTHO = (char)0xA811;
			public const char SYLOTI_NAGRI_LETTER_TTO = (char)0xA810;
			public const char SYLOTI_NAGRI_LETTER_U = (char)0xA803;
			public const char SYLOTI_NAGRI_POETRY_MARK_1 = (char)0xA828;
			public const char SYLOTI_NAGRI_POETRY_MARK_2 = (char)0xA829;
			public const char SYLOTI_NAGRI_POETRY_MARK_3 = (char)0xA82A;
			public const char SYLOTI_NAGRI_POETRY_MARK_4 = (char)0xA82B;
			public const char SYLOTI_NAGRI_SIGN_ANUSVARA = (char)0xA80B;
			public const char SYLOTI_NAGRI_SIGN_DVISVARA = (char)0xA802;
			public const char SYLOTI_NAGRI_SIGN_HASANTA = (char)0xA806;
			public const char SYLOTI_NAGRI_VOWEL_SIGN_A = (char)0xA823;
			public const char SYLOTI_NAGRI_VOWEL_SIGN_E = (char)0xA826;
			public const char SYLOTI_NAGRI_VOWEL_SIGN_I = (char)0xA824;
			public const char SYLOTI_NAGRI_VOWEL_SIGN_OO = (char)0xA827;
			public const char SYLOTI_NAGRI_VOWEL_SIGN_U = (char)0xA825;
			/// <summary> Formerly GRAPHIC FOR ACKNOWLEDGE. </summary>
			public const char SYMBOL_FOR_ACKNOWLEDGE = (char)0x2406;
			/// <summary> Formerly GRAPHIC FOR BACKSPACE. </summary>
			public const char SYMBOL_FOR_BACKSPACE = (char)0x2408;
			/// <summary> Formerly GRAPHIC FOR BELL. </summary>
			public const char SYMBOL_FOR_BELL = (char)0x2407;
			/// <summary> Formerly GRAPHIC FOR CANCEL. </summary>
			public const char SYMBOL_FOR_CANCEL = (char)0x2418;
			/// <summary> Formerly GRAPHIC FOR CARRIAGE RETURN. </summary>
			public const char SYMBOL_FOR_CARRIAGE_RETURN = (char)0x240D;
			/// <summary> Formerly GRAPHIC FOR DATA LINK ESCAPE. </summary>
			public const char SYMBOL_FOR_DATA_LINK_ESCAPE = (char)0x2410;
			/// <summary> Formerly GRAPHIC FOR DELETE. </summary>
			public const char SYMBOL_FOR_DELETE = (char)0x2421;
			public const char SYMBOL_FOR_DELETE_FORM_TWO = (char)0x2425;
			/// <summary> Formerly GRAPHIC FOR DEVICE CONTROL FOUR. </summary>
			public const char SYMBOL_FOR_DEVICE_CONTROL_FOUR = (char)0x2414;
			/// <summary> Formerly GRAPHIC FOR DEVICE CONTROL ONE. </summary>
			public const char SYMBOL_FOR_DEVICE_CONTROL_ONE = (char)0x2411;
			/// <summary> Formerly GRAPHIC FOR DEVICE CONTROL THREE. </summary>
			public const char SYMBOL_FOR_DEVICE_CONTROL_THREE = (char)0x2413;
			/// <summary> Formerly GRAPHIC FOR DEVICE CONTROL TWO. </summary>
			public const char SYMBOL_FOR_DEVICE_CONTROL_TWO = (char)0x2412;
			/// <summary> Formerly GRAPHIC FOR END OF MEDIUM. </summary>
			public const char SYMBOL_FOR_END_OF_MEDIUM = (char)0x2419;
			/// <summary> Formerly GRAPHIC FOR END OF TEXT. </summary>
			public const char SYMBOL_FOR_END_OF_TEXT = (char)0x2403;
			/// <summary> Formerly GRAPHIC FOR END OF TRANSMISSION. </summary>
			public const char SYMBOL_FOR_END_OF_TRANSMISSION = (char)0x2404;
			/// <summary> Formerly GRAPHIC FOR END OF TRANSMISSION BLOCK. </summary>
			public const char SYMBOL_FOR_END_OF_TRANSMISSION_BLOCK = (char)0x2417;
			/// <summary> Formerly GRAPHIC FOR ENQUIRY. </summary>
			public const char SYMBOL_FOR_ENQUIRY = (char)0x2405;
			/// <summary> Formerly GRAPHIC FOR ESCAPE. </summary>
			public const char SYMBOL_FOR_ESCAPE = (char)0x241B;
			/// <summary> Formerly GRAPHIC FOR FILE SEPARATOR. </summary>
			public const char SYMBOL_FOR_FILE_SEPARATOR = (char)0x241C;
			/// <summary> Formerly GRAPHIC FOR FORM FEED. </summary>
			public const char SYMBOL_FOR_FORM_FEED = (char)0x240C;
			/// <summary> Formerly GRAPHIC FOR GROUP SEPARATOR. </summary>
			public const char SYMBOL_FOR_GROUP_SEPARATOR = (char)0x241D;
			/// <summary> Formerly GRAPHIC FOR HORIZONTAL TABULATION. </summary>
			public const char SYMBOL_FOR_HORIZONTAL_TABULATION = (char)0x2409;
			/// <summary> Formerly GRAPHIC FOR LINE FEED. </summary>
			public const char SYMBOL_FOR_LINE_FEED = (char)0x240A;
			/// <summary> Formerly GRAPHIC FOR NEGATIVE ACKNOWLEDGE. </summary>
			public const char SYMBOL_FOR_NEGATIVE_ACKNOWLEDGE = (char)0x2415;
			/// <summary> Formerly GRAPHIC FOR NEWLINE. </summary>
			public const char SYMBOL_FOR_NEWLINE = (char)0x2424;
			/// <summary> Formerly GRAPHIC FOR NULL. </summary>
			public const char SYMBOL_FOR_NULL = (char)0x2400;
			/// <summary> Formerly GRAPHIC FOR RECORD SEPARATOR. </summary>
			public const char SYMBOL_FOR_RECORD_SEPARATOR = (char)0x241E;
			/// <summary> Formerly GRAPHIC FOR SHIFT IN. </summary>
			public const char SYMBOL_FOR_SHIFT_IN = (char)0x240F;
			/// <summary> Formerly GRAPHIC FOR SHIFT OUT. </summary>
			public const char SYMBOL_FOR_SHIFT_OUT = (char)0x240E;
			/// <summary> Formerly GRAPHIC FOR SPACE. </summary>
			public const char SYMBOL_FOR_SPACE = (char)0x2420;
			/// <summary> Formerly GRAPHIC FOR START OF HEADING. </summary>
			public const char SYMBOL_FOR_START_OF_HEADING = (char)0x2401;
			/// <summary> Formerly GRAPHIC FOR START OF TEXT. </summary>
			public const char SYMBOL_FOR_START_OF_TEXT = (char)0x2402;
			/// <summary> Formerly GRAPHIC FOR SUBSTITUTE. </summary>
			public const char SYMBOL_FOR_SUBSTITUTE = (char)0x241A;
			public const char SYMBOL_FOR_SUBSTITUTE_FORM_TWO = (char)0x2426;
			/// <summary> Formerly GRAPHIC FOR SYNCHRONOUS IDLE. </summary>
			public const char SYMBOL_FOR_SYNCHRONOUS_IDLE = (char)0x2416;
			/// <summary> Formerly GRAPHIC FOR UNIT SEPARATOR. </summary>
			public const char SYMBOL_FOR_UNIT_SEPARATOR = (char)0x241F;
			/// <summary> Formerly GRAPHIC FOR VERTICAL TABULATION. </summary>
			public const char SYMBOL_FOR_VERTICAL_TABULATION = (char)0x240B;
			public const char SYMMETRY = (char)0x232F;
			public const char SYRIAC_ABBREVIATION_MARK = (char)0x070F;
			public const char SYRIAC_BARREKH = (char)0x074A;
			public const char SYRIAC_COLON_SKEWED_LEFT = (char)0x0706;
			public const char SYRIAC_COLON_SKEWED_RIGHT = (char)0x0707;
			public const char SYRIAC_CONTRACTION = (char)0x070A;
			public const char SYRIAC_DOTTED_ZLAMA_ANGULAR = (char)0x0739;
			public const char SYRIAC_DOTTED_ZLAMA_HORIZONTAL = (char)0x0738;
			public const char SYRIAC_END_OF_PARAGRAPH = (char)0x0700;
			public const char SYRIAC_ESASA_ABOVE = (char)0x073D;
			public const char SYRIAC_ESASA_BELOW = (char)0x073E;
			public const char SYRIAC_FEMININE_DOT = (char)0x0740;
			public const char SYRIAC_HARKLEAN_ASTERISCUS = (char)0x070D;
			public const char SYRIAC_HARKLEAN_METOBELUS = (char)0x070C;
			public const char SYRIAC_HARKLEAN_OBELUS = (char)0x070B;
			public const char SYRIAC_HBASA_ABOVE = (char)0x073A;
			public const char SYRIAC_HBASA_BELOW = (char)0x073B;
			public const char SYRIAC_HBASA_ESASA_DOTTED = (char)0x073C;
			public const char SYRIAC_HORIZONTAL_COLON = (char)0x0705;
			public const char SYRIAC_LETTER_ALAPH = (char)0x0710;
			public const char SYRIAC_LETTER_BETH = (char)0x0712;
			public const char SYRIAC_LETTER_DALATH = (char)0x0715;
			public const char SYRIAC_LETTER_DOTLESS_DALATH_RISH = (char)0x0716;
			public const char SYRIAC_LETTER_E = (char)0x0725;
			public const char SYRIAC_LETTER_FINAL_SEMKATH = (char)0x0724;
			public const char SYRIAC_LETTER_GAMAL = (char)0x0713;
			public const char SYRIAC_LETTER_GAMAL_GARSHUNI = (char)0x0714;
			public const char SYRIAC_LETTER_HE = (char)0x0717;
			public const char SYRIAC_LETTER_HETH = (char)0x071A;
			public const char SYRIAC_LETTER_KAPH = (char)0x071F;
			public const char SYRIAC_LETTER_LAMADH = (char)0x0720;
			public const char SYRIAC_LETTER_MIM = (char)0x0721;
			public const char SYRIAC_LETTER_NUN = (char)0x0722;
			public const char SYRIAC_LETTER_PE = (char)0x0726;
			public const char SYRIAC_LETTER_PERSIAN_BHETH = (char)0x072D;
			public const char SYRIAC_LETTER_PERSIAN_DHALATH = (char)0x072F;
			public const char SYRIAC_LETTER_PERSIAN_GHAMAL = (char)0x072E;
			public const char SYRIAC_LETTER_QAPH = (char)0x0729;
			public const char SYRIAC_LETTER_REVERSED_PE = (char)0x0727;
			public const char SYRIAC_LETTER_RISH = (char)0x072A;
			public const char SYRIAC_LETTER_SADHE = (char)0x0728;
			public const char SYRIAC_LETTER_SEMKATH = (char)0x0723;
			public const char SYRIAC_LETTER_SHIN = (char)0x072B;
			public const char SYRIAC_LETTER_SOGDIAN_FE = (char)0x074F;
			public const char SYRIAC_LETTER_SOGDIAN_KHAPH = (char)0x074E;
			public const char SYRIAC_LETTER_SOGDIAN_ZHAIN = (char)0x074D;
			public const char SYRIAC_LETTER_SUPERSCRIPT_ALAPH = (char)0x0711;
			public const char SYRIAC_LETTER_TAW = (char)0x072C;
			public const char SYRIAC_LETTER_TETH = (char)0x071B;
			public const char SYRIAC_LETTER_TETH_GARSHUNI = (char)0x071C;
			public const char SYRIAC_LETTER_WAW = (char)0x0718;
			public const char SYRIAC_LETTER_YUDH = (char)0x071D;
			public const char SYRIAC_LETTER_YUDH_HE = (char)0x071E;
			public const char SYRIAC_LETTER_ZAIN = (char)0x0719;
			public const char SYRIAC_MUSIC = (char)0x0749;
			public const char SYRIAC_OBLIQUE_LINE_ABOVE = (char)0x0747;
			public const char SYRIAC_OBLIQUE_LINE_BELOW = (char)0x0748;
			public const char SYRIAC_PTHAHA_ABOVE = (char)0x0730;
			public const char SYRIAC_PTHAHA_BELOW = (char)0x0731;
			public const char SYRIAC_PTHAHA_DOTTED = (char)0x0732;
			public const char SYRIAC_QUSHSHAYA = (char)0x0741;
			public const char SYRIAC_RBASA_ABOVE = (char)0x0736;
			public const char SYRIAC_RBASA_BELOW = (char)0x0737;
			public const char SYRIAC_RUKKAKHA = (char)0x0742;
			public const char SYRIAC_RWAHA = (char)0x073F;
			public const char SYRIAC_SUBLINEAR_COLON = (char)0x0704;
			public const char SYRIAC_SUBLINEAR_COLON_SKEWED_RIGHT = (char)0x0709;
			public const char SYRIAC_SUBLINEAR_FULL_STOP = (char)0x0702;
			public const char SYRIAC_SUPRALINEAR_COLON = (char)0x0703;
			public const char SYRIAC_SUPRALINEAR_COLON_SKEWED_LEFT = (char)0x0708;
			public const char SYRIAC_SUPRALINEAR_FULL_STOP = (char)0x0701;
			public const char SYRIAC_THREE_DOTS_ABOVE = (char)0x0745;
			public const char SYRIAC_THREE_DOTS_BELOW = (char)0x0746;
			public const char SYRIAC_TWO_VERTICAL_DOTS_ABOVE = (char)0x0743;
			public const char SYRIAC_TWO_VERTICAL_DOTS_BELOW = (char)0x0744;
			public const char SYRIAC_ZQAPHA_ABOVE = (char)0x0733;
			public const char SYRIAC_ZQAPHA_BELOW = (char)0x0734;
			public const char SYRIAC_ZQAPHA_DOTTED = (char)0x0735;
			public const char S_IN_TRIANGLE = (char)0x29CC;
		}
		public class T {
			public const char TAGALOG_LETTER_A = (char)0x1700;
			public const char TAGALOG_LETTER_BA = (char)0x170A;
			public const char TAGALOG_LETTER_DA = (char)0x1707;
			public const char TAGALOG_LETTER_GA = (char)0x1704;
			public const char TAGALOG_LETTER_HA = (char)0x1711;
			public const char TAGALOG_LETTER_I = (char)0x1701;
			public const char TAGALOG_LETTER_KA = (char)0x1703;
			public const char TAGALOG_LETTER_LA = (char)0x170E;
			public const char TAGALOG_LETTER_MA = (char)0x170B;
			public const char TAGALOG_LETTER_NA = (char)0x1708;
			public const char TAGALOG_LETTER_NGA = (char)0x1705;
			public const char TAGALOG_LETTER_PA = (char)0x1709;
			public const char TAGALOG_LETTER_SA = (char)0x1710;
			public const char TAGALOG_LETTER_TA = (char)0x1706;
			public const char TAGALOG_LETTER_U = (char)0x1702;
			public const char TAGALOG_LETTER_WA = (char)0x170F;
			public const char TAGALOG_LETTER_YA = (char)0x170C;
			public const char TAGALOG_SIGN_VIRAMA = (char)0x1714;
			public const char TAGALOG_VOWEL_SIGN_I = (char)0x1712;
			public const char TAGALOG_VOWEL_SIGN_U = (char)0x1713;
			public const char TAGBANWA_LETTER_A = (char)0x1760;
			public const char TAGBANWA_LETTER_BA = (char)0x176A;
			public const char TAGBANWA_LETTER_DA = (char)0x1767;
			public const char TAGBANWA_LETTER_GA = (char)0x1764;
			public const char TAGBANWA_LETTER_I = (char)0x1761;
			public const char TAGBANWA_LETTER_KA = (char)0x1763;
			public const char TAGBANWA_LETTER_LA = (char)0x176E;
			public const char TAGBANWA_LETTER_MA = (char)0x176B;
			public const char TAGBANWA_LETTER_NA = (char)0x1768;
			public const char TAGBANWA_LETTER_NGA = (char)0x1765;
			public const char TAGBANWA_LETTER_PA = (char)0x1769;
			public const char TAGBANWA_LETTER_SA = (char)0x1770;
			public const char TAGBANWA_LETTER_TA = (char)0x1766;
			public const char TAGBANWA_LETTER_U = (char)0x1762;
			public const char TAGBANWA_LETTER_WA = (char)0x176F;
			public const char TAGBANWA_LETTER_YA = (char)0x176C;
			public const char TAGBANWA_VOWEL_SIGN_I = (char)0x1772;
			public const char TAGBANWA_VOWEL_SIGN_U = (char)0x1773;
			public const char TAI_LE_LETTER_A = (char)0x1963;
			public const char TAI_LE_LETTER_AI = (char)0x196D;
			public const char TAI_LE_LETTER_AUE = (char)0x196C;
			public const char TAI_LE_LETTER_E = (char)0x196B;
			public const char TAI_LE_LETTER_EE = (char)0x1965;
			public const char TAI_LE_LETTER_EH = (char)0x1966;
			public const char TAI_LE_LETTER_FA = (char)0x195C;
			public const char TAI_LE_LETTER_HA = (char)0x195E;
			public const char TAI_LE_LETTER_I = (char)0x1964;
			public const char TAI_LE_LETTER_KA = (char)0x1950;
			public const char TAI_LE_LETTER_KHA = (char)0x1960;
			public const char TAI_LE_LETTER_LA = (char)0x1958;
			public const char TAI_LE_LETTER_MA = (char)0x195B;
			public const char TAI_LE_LETTER_NA = (char)0x1962;
			public const char TAI_LE_LETTER_NGA = (char)0x1952;
			public const char TAI_LE_LETTER_O = (char)0x1969;
			public const char TAI_LE_LETTER_OO = (char)0x1968;
			public const char TAI_LE_LETTER_PA = (char)0x1959;
			public const char TAI_LE_LETTER_PHA = (char)0x195A;
			public const char TAI_LE_LETTER_QA = (char)0x195F;
			public const char TAI_LE_LETTER_SA = (char)0x1954;
			public const char TAI_LE_LETTER_TA = (char)0x1956;
			public const char TAI_LE_LETTER_THA = (char)0x1957;
			public const char TAI_LE_LETTER_TONE_2 = (char)0x1970;
			public const char TAI_LE_LETTER_TONE_3 = (char)0x1971;
			public const char TAI_LE_LETTER_TONE_4 = (char)0x1972;
			public const char TAI_LE_LETTER_TONE_5 = (char)0x1973;
			public const char TAI_LE_LETTER_TONE_6 = (char)0x1974;
			public const char TAI_LE_LETTER_TSA = (char)0x1953;
			public const char TAI_LE_LETTER_TSHA = (char)0x1961;
			public const char TAI_LE_LETTER_U = (char)0x1967;
			public const char TAI_LE_LETTER_UE = (char)0x196A;
			public const char TAI_LE_LETTER_VA = (char)0x195D;
			public const char TAI_LE_LETTER_XA = (char)0x1951;
			public const char TAI_LE_LETTER_YA = (char)0x1955;
			public const char TAMIL_AS_ABOVE_SIGN = (char)0x0BF8;
			public const char TAMIL_AU_LENGTH_MARK = (char)0x0BD7;
			public const char TAMIL_CREDIT_SIGN = (char)0x0BF7;
			public const char TAMIL_DAY_SIGN = (char)0x0BF3;
			public const char TAMIL_DEBIT_SIGN = (char)0x0BF6;
			public const char TAMIL_DIGIT_EIGHT = (char)0x0BEE;
			public const char TAMIL_DIGIT_FIVE = (char)0x0BEB;
			public const char TAMIL_DIGIT_FOUR = (char)0x0BEA;
			public const char TAMIL_DIGIT_NINE = (char)0x0BEF;
			public const char TAMIL_DIGIT_ONE = (char)0x0BE7;
			public const char TAMIL_DIGIT_SEVEN = (char)0x0BED;
			public const char TAMIL_DIGIT_SIX = (char)0x0BEC;
			public const char TAMIL_DIGIT_THREE = (char)0x0BE9;
			public const char TAMIL_DIGIT_TWO = (char)0x0BE8;
			public const char TAMIL_DIGIT_ZERO = (char)0x0BE6;
			public const char TAMIL_LETTER_A = (char)0x0B85;
			public const char TAMIL_LETTER_AA = (char)0x0B86;
			public const char TAMIL_LETTER_AI = (char)0x0B90;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TAMIL_LETTER_AU = (char)0x0B94;
			public const char TAMIL_LETTER_CA = (char)0x0B9A;
			public const char TAMIL_LETTER_E = (char)0x0B8E;
			public const char TAMIL_LETTER_EE = (char)0x0B8F;
			public const char TAMIL_LETTER_HA = (char)0x0BB9;
			public const char TAMIL_LETTER_I = (char)0x0B87;
			public const char TAMIL_LETTER_II = (char)0x0B88;
			public const char TAMIL_LETTER_JA = (char)0x0B9C;
			public const char TAMIL_LETTER_KA = (char)0x0B95;
			public const char TAMIL_LETTER_LA = (char)0x0BB2;
			public const char TAMIL_LETTER_LLA = (char)0x0BB3;
			public const char TAMIL_LETTER_LLLA = (char)0x0BB4;
			public const char TAMIL_LETTER_MA = (char)0x0BAE;
			public const char TAMIL_LETTER_NA = (char)0x0BA8;
			public const char TAMIL_LETTER_NGA = (char)0x0B99;
			public const char TAMIL_LETTER_NNA = (char)0x0BA3;
			public const char TAMIL_LETTER_NNNA = (char)0x0BA9;
			public const char TAMIL_LETTER_NYA = (char)0x0B9E;
			public const char TAMIL_LETTER_O = (char)0x0B92;
			public const char TAMIL_LETTER_OO = (char)0x0B93;
			public const char TAMIL_LETTER_PA = (char)0x0BAA;
			public const char TAMIL_LETTER_RA = (char)0x0BB0;
			public const char TAMIL_LETTER_RRA = (char)0x0BB1;
			public const char TAMIL_LETTER_SA = (char)0x0BB8;
			public const char TAMIL_LETTER_SHA = (char)0x0BB6;
			public const char TAMIL_LETTER_SSA = (char)0x0BB7;
			public const char TAMIL_LETTER_TA = (char)0x0BA4;
			public const char TAMIL_LETTER_TTA = (char)0x0B9F;
			public const char TAMIL_LETTER_U = (char)0x0B89;
			public const char TAMIL_LETTER_UU = (char)0x0B8A;
			public const char TAMIL_LETTER_VA = (char)0x0BB5;
			public const char TAMIL_LETTER_YA = (char)0x0BAF;
			public const char TAMIL_MONTH_SIGN = (char)0x0BF4;
			public const char TAMIL_NUMBER_ONE_HUNDRED = (char)0x0BF1;
			public const char TAMIL_NUMBER_ONE_THOUSAND = (char)0x0BF2;
			public const char TAMIL_NUMBER_SIGN = (char)0x0BFA;
			public const char TAMIL_NUMBER_TEN = (char)0x0BF0;
			public const char TAMIL_RUPEE_SIGN = (char)0x0BF9;
			public const char TAMIL_SIGN_ANUSVARA = (char)0x0B82;
			public const char TAMIL_SIGN_VIRAMA = (char)0x0BCD;
			public const char TAMIL_SIGN_VISARGA = (char)0x0B83;
			public const char TAMIL_VOWEL_SIGN_AA = (char)0x0BBE;
			public const char TAMIL_VOWEL_SIGN_AI = (char)0x0BC8;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TAMIL_VOWEL_SIGN_AU = (char)0x0BCC;
			public const char TAMIL_VOWEL_SIGN_E = (char)0x0BC6;
			public const char TAMIL_VOWEL_SIGN_EE = (char)0x0BC7;
			public const char TAMIL_VOWEL_SIGN_I = (char)0x0BBF;
			public const char TAMIL_VOWEL_SIGN_II = (char)0x0BC0;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TAMIL_VOWEL_SIGN_O = (char)0x0BCA;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TAMIL_VOWEL_SIGN_OO = (char)0x0BCB;
			public const char TAMIL_VOWEL_SIGN_U = (char)0x0BC1;
			public const char TAMIL_VOWEL_SIGN_UU = (char)0x0BC2;
			public const char TAMIL_YEAR_SIGN = (char)0x0BF5;
			public const char TAPE_DRIVE = (char)0x2707;
			public const char TAURUS = (char)0x2649;
			/// <summary> Formerly TEARDROP-BARBED RIGHT ARROW. </summary>
			public const char TEARDROP_BARBED_RIGHTWARDS_ARROW = (char)0x27BA;
			public const char TEARDROP_SPOKED_ASTERISK = (char)0x273B;
			public const char TELEPHONE_LOCATION_SIGN = (char)0x2706;
			public const char TELEPHONE_RECORDER = (char)0x2315;
			/// <summary> (This is a composition; consider avoiding.) Formerly T E L SYMBOL. </summary>
			public const char TELEPHONE_SIGN = (char)0x2121;
			public const char TELUGU_AI_LENGTH_MARK = (char)0x0C56;
			public const char TELUGU_DIGIT_EIGHT = (char)0x0C6E;
			public const char TELUGU_DIGIT_FIVE = (char)0x0C6B;
			public const char TELUGU_DIGIT_FOUR = (char)0x0C6A;
			public const char TELUGU_DIGIT_NINE = (char)0x0C6F;
			public const char TELUGU_DIGIT_ONE = (char)0x0C67;
			public const char TELUGU_DIGIT_SEVEN = (char)0x0C6D;
			public const char TELUGU_DIGIT_SIX = (char)0x0C6C;
			public const char TELUGU_DIGIT_THREE = (char)0x0C69;
			public const char TELUGU_DIGIT_TWO = (char)0x0C68;
			public const char TELUGU_DIGIT_ZERO = (char)0x0C66;
			public const char TELUGU_LENGTH_MARK = (char)0x0C55;
			public const char TELUGU_LETTER_A = (char)0x0C05;
			public const char TELUGU_LETTER_AA = (char)0x0C06;
			public const char TELUGU_LETTER_AI = (char)0x0C10;
			public const char TELUGU_LETTER_AU = (char)0x0C14;
			public const char TELUGU_LETTER_BA = (char)0x0C2C;
			public const char TELUGU_LETTER_BHA = (char)0x0C2D;
			public const char TELUGU_LETTER_CA = (char)0x0C1A;
			public const char TELUGU_LETTER_CHA = (char)0x0C1B;
			public const char TELUGU_LETTER_DA = (char)0x0C26;
			public const char TELUGU_LETTER_DDA = (char)0x0C21;
			public const char TELUGU_LETTER_DDHA = (char)0x0C22;
			public const char TELUGU_LETTER_DHA = (char)0x0C27;
			public const char TELUGU_LETTER_E = (char)0x0C0E;
			public const char TELUGU_LETTER_EE = (char)0x0C0F;
			public const char TELUGU_LETTER_GA = (char)0x0C17;
			public const char TELUGU_LETTER_GHA = (char)0x0C18;
			public const char TELUGU_LETTER_HA = (char)0x0C39;
			public const char TELUGU_LETTER_I = (char)0x0C07;
			public const char TELUGU_LETTER_II = (char)0x0C08;
			public const char TELUGU_LETTER_JA = (char)0x0C1C;
			public const char TELUGU_LETTER_JHA = (char)0x0C1D;
			public const char TELUGU_LETTER_KA = (char)0x0C15;
			public const char TELUGU_LETTER_KHA = (char)0x0C16;
			public const char TELUGU_LETTER_LA = (char)0x0C32;
			public const char TELUGU_LETTER_LLA = (char)0x0C33;
			public const char TELUGU_LETTER_MA = (char)0x0C2E;
			public const char TELUGU_LETTER_NA = (char)0x0C28;
			public const char TELUGU_LETTER_NGA = (char)0x0C19;
			public const char TELUGU_LETTER_NNA = (char)0x0C23;
			public const char TELUGU_LETTER_NYA = (char)0x0C1E;
			public const char TELUGU_LETTER_O = (char)0x0C12;
			public const char TELUGU_LETTER_OO = (char)0x0C13;
			public const char TELUGU_LETTER_PA = (char)0x0C2A;
			public const char TELUGU_LETTER_PHA = (char)0x0C2B;
			public const char TELUGU_LETTER_RA = (char)0x0C30;
			public const char TELUGU_LETTER_RRA = (char)0x0C31;
			public const char TELUGU_LETTER_SA = (char)0x0C38;
			public const char TELUGU_LETTER_SHA = (char)0x0C36;
			public const char TELUGU_LETTER_SSA = (char)0x0C37;
			public const char TELUGU_LETTER_TA = (char)0x0C24;
			public const char TELUGU_LETTER_THA = (char)0x0C25;
			public const char TELUGU_LETTER_TTA = (char)0x0C1F;
			public const char TELUGU_LETTER_TTHA = (char)0x0C20;
			public const char TELUGU_LETTER_U = (char)0x0C09;
			public const char TELUGU_LETTER_UU = (char)0x0C0A;
			public const char TELUGU_LETTER_VA = (char)0x0C35;
			public const char TELUGU_LETTER_VOCALIC_L = (char)0x0C0C;
			public const char TELUGU_LETTER_VOCALIC_LL = (char)0x0C61;
			public const char TELUGU_LETTER_VOCALIC_R = (char)0x0C0B;
			public const char TELUGU_LETTER_VOCALIC_RR = (char)0x0C60;
			public const char TELUGU_LETTER_YA = (char)0x0C2F;
			public const char TELUGU_SIGN_ANUSVARA = (char)0x0C02;
			public const char TELUGU_SIGN_CANDRABINDU = (char)0x0C01;
			public const char TELUGU_SIGN_VIRAMA = (char)0x0C4D;
			public const char TELUGU_SIGN_VISARGA = (char)0x0C03;
			public const char TELUGU_VOWEL_SIGN_AA = (char)0x0C3E;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TELUGU_VOWEL_SIGN_AI = (char)0x0C48;
			public const char TELUGU_VOWEL_SIGN_AU = (char)0x0C4C;
			public const char TELUGU_VOWEL_SIGN_E = (char)0x0C46;
			public const char TELUGU_VOWEL_SIGN_EE = (char)0x0C47;
			public const char TELUGU_VOWEL_SIGN_I = (char)0x0C3F;
			public const char TELUGU_VOWEL_SIGN_II = (char)0x0C40;
			public const char TELUGU_VOWEL_SIGN_O = (char)0x0C4A;
			public const char TELUGU_VOWEL_SIGN_OO = (char)0x0C4B;
			public const char TELUGU_VOWEL_SIGN_U = (char)0x0C41;
			public const char TELUGU_VOWEL_SIGN_UU = (char)0x0C42;
			public const char TELUGU_VOWEL_SIGN_VOCALIC_R = (char)0x0C43;
			public const char TELUGU_VOWEL_SIGN_VOCALIC_RR = (char)0x0C44;
			public const char THAANA_AABAAFILI = (char)0x07A7;
			public const char THAANA_ABAFILI = (char)0x07A6;
			public const char THAANA_EBEFILI = (char)0x07AC;
			public const char THAANA_EEBEEFILI = (char)0x07A9;
			public const char THAANA_EYBEYFILI = (char)0x07AD;
			public const char THAANA_IBIFILI = (char)0x07A8;
			public const char THAANA_LETTER_AINU = (char)0x07A2;
			public const char THAANA_LETTER_ALIFU = (char)0x0787;
			public const char THAANA_LETTER_BAA = (char)0x0784;
			public const char THAANA_LETTER_CHAVIYANI = (char)0x0797;
			public const char THAANA_LETTER_DAADHU = (char)0x079F;
			public const char THAANA_LETTER_DAVIYANI = (char)0x0791;
			public const char THAANA_LETTER_DHAALU = (char)0x078B;
			public const char THAANA_LETTER_FAAFU = (char)0x078A;
			public const char THAANA_LETTER_GAAFU = (char)0x078E;
			public const char THAANA_LETTER_GHAINU = (char)0x07A3;
			public const char THAANA_LETTER_GNAVIYANI = (char)0x078F;
			public const char THAANA_LETTER_HAA = (char)0x0780;
			public const char THAANA_LETTER_HHAA = (char)0x0799;
			public const char THAANA_LETTER_JAVIYANI = (char)0x0796;
			public const char THAANA_LETTER_KAAFU = (char)0x0786;
			public const char THAANA_LETTER_KHAA = (char)0x079A;
			public const char THAANA_LETTER_LAAMU = (char)0x078D;
			public const char THAANA_LETTER_LHAVIYANI = (char)0x0785;
			public const char THAANA_LETTER_MEEMU = (char)0x0789;
			public const char THAANA_LETTER_NAA = (char)0x07B1;
			public const char THAANA_LETTER_NOONU = (char)0x0782;
			public const char THAANA_LETTER_PAVIYANI = (char)0x0795;
			public const char THAANA_LETTER_QAAFU = (char)0x07A4;
			public const char THAANA_LETTER_RAA = (char)0x0783;
			public const char THAANA_LETTER_SAADHU = (char)0x079E;
			public const char THAANA_LETTER_SEENU = (char)0x0790;
			public const char THAANA_LETTER_SHAVIYANI = (char)0x0781;
			public const char THAANA_LETTER_SHEENU = (char)0x079D;
			public const char THAANA_LETTER_TAVIYANI = (char)0x0793;
			public const char THAANA_LETTER_THAA = (char)0x078C;
			public const char THAANA_LETTER_THAALU = (char)0x079B;
			public const char THAANA_LETTER_TO = (char)0x07A0;
			public const char THAANA_LETTER_TTAA = (char)0x0798;
			public const char THAANA_LETTER_VAAVU = (char)0x0788;
			public const char THAANA_LETTER_WAAVU = (char)0x07A5;
			public const char THAANA_LETTER_YAA = (char)0x0794;
			public const char THAANA_LETTER_ZAA = (char)0x079C;
			public const char THAANA_LETTER_ZAVIYANI = (char)0x0792;
			public const char THAANA_LETTER_ZO = (char)0x07A1;
			public const char THAANA_OABOAFILI = (char)0x07AF;
			public const char THAANA_OBOFILI = (char)0x07AE;
			public const char THAANA_OOBOOFILI = (char)0x07AB;
			public const char THAANA_SUKUN = (char)0x07B0;
			public const char THAANA_UBUFILI = (char)0x07AA;
			/// <summary> Formerly THAI ANGKHANKHU. </summary>
			public const char THAI_CHARACTER_ANGKHANKHU = (char)0x0E5A;
			/// <summary> Formerly THAI LETTER BO BAIMAI. </summary>
			public const char THAI_CHARACTER_BO_BAIMAI = (char)0x0E1A;
			/// <summary> Formerly THAI LETTER CHO CHAN. </summary>
			public const char THAI_CHARACTER_CHO_CHAN = (char)0x0E08;
			/// <summary> Formerly THAI LETTER CHO CHANG. </summary>
			public const char THAI_CHARACTER_CHO_CHANG = (char)0x0E0A;
			/// <summary> Formerly THAI LETTER CHO CHING. </summary>
			public const char THAI_CHARACTER_CHO_CHING = (char)0x0E09;
			/// <summary> Formerly THAI LETTER CHO CHOE. </summary>
			public const char THAI_CHARACTER_CHO_CHOE = (char)0x0E0C;
			/// <summary> Formerly THAI LETTER DO CHADA. </summary>
			public const char THAI_CHARACTER_DO_CHADA = (char)0x0E0E;
			/// <summary> Formerly THAI LETTER DO DEK. </summary>
			public const char THAI_CHARACTER_DO_DEK = (char)0x0E14;
			/// <summary> Formerly THAI FONGMAN. </summary>
			public const char THAI_CHARACTER_FONGMAN = (char)0x0E4F;
			/// <summary> Formerly THAI LETTER FO FA. </summary>
			public const char THAI_CHARACTER_FO_FA = (char)0x0E1D;
			/// <summary> Formerly THAI LETTER FO FAN. </summary>
			public const char THAI_CHARACTER_FO_FAN = (char)0x0E1F;
			/// <summary> Formerly THAI LETTER HO HIP. </summary>
			public const char THAI_CHARACTER_HO_HIP = (char)0x0E2B;
			/// <summary> Formerly THAI LETTER HO NOK HUK. </summary>
			public const char THAI_CHARACTER_HO_NOKHUK = (char)0x0E2E;
			/// <summary> Formerly THAI KHOMUT. </summary>
			public const char THAI_CHARACTER_KHOMUT = (char)0x0E5B;
			/// <summary> Formerly THAI LETTER KHO KHAI. </summary>
			public const char THAI_CHARACTER_KHO_KHAI = (char)0x0E02;
			/// <summary> Formerly THAI LETTER KHO KHON. </summary>
			public const char THAI_CHARACTER_KHO_KHON = (char)0x0E05;
			/// <summary> Formerly THAI LETTER KHO KHUAT. </summary>
			public const char THAI_CHARACTER_KHO_KHUAT = (char)0x0E03;
			/// <summary> Formerly THAI LETTER KHO KHWAI. </summary>
			public const char THAI_CHARACTER_KHO_KHWAI = (char)0x0E04;
			/// <summary> Formerly THAI LETTER KHO RAKHANG. </summary>
			public const char THAI_CHARACTER_KHO_RAKHANG = (char)0x0E06;
			/// <summary> Formerly THAI LETTER KO KAI. </summary>
			public const char THAI_CHARACTER_KO_KAI = (char)0x0E01;
			/// <summary> Formerly THAI LAK KHANG YAO. </summary>
			public const char THAI_CHARACTER_LAKKHANGYAO = (char)0x0E45;
			/// <summary> Formerly THAI LETTER LO CHULA. </summary>
			public const char THAI_CHARACTER_LO_CHULA = (char)0x0E2C;
			/// <summary> Formerly THAI LETTER LO LING. </summary>
			public const char THAI_CHARACTER_LO_LING = (char)0x0E25;
			/// <summary> Formerly THAI LETTER LU. </summary>
			public const char THAI_CHARACTER_LU = (char)0x0E26;
			/// <summary> Formerly THAI VOWEL SIGN MAI TAI KHU. </summary>
			public const char THAI_CHARACTER_MAITAIKHU = (char)0x0E47;
			/// <summary> Formerly THAI MAI YAMOK. </summary>
			public const char THAI_CHARACTER_MAIYAMOK = (char)0x0E46;
			/// <summary> Formerly THAI TONE MAI CHATTAWA. </summary>
			public const char THAI_CHARACTER_MAI_CHATTAWA = (char)0x0E4B;
			/// <summary> Formerly THAI TONE MAI EK. </summary>
			public const char THAI_CHARACTER_MAI_EK = (char)0x0E48;
			/// <summary> Formerly THAI VOWEL SIGN MAI HAN-AKAT. </summary>
			public const char THAI_CHARACTER_MAI_HAN_AKAT = (char)0x0E31;
			/// <summary> Formerly THAI TONE MAI THO. </summary>
			public const char THAI_CHARACTER_MAI_THO = (char)0x0E49;
			/// <summary> Formerly THAI TONE MAI TRI. </summary>
			public const char THAI_CHARACTER_MAI_TRI = (char)0x0E4A;
			/// <summary> Formerly THAI LETTER MO MA. </summary>
			public const char THAI_CHARACTER_MO_MA = (char)0x0E21;
			/// <summary> Formerly THAI LETTER NGO NGU. </summary>
			public const char THAI_CHARACTER_NGO_NGU = (char)0x0E07;
			/// <summary> Formerly THAI NIKKHAHIT. </summary>
			public const char THAI_CHARACTER_NIKHAHIT = (char)0x0E4D;
			/// <summary> Formerly THAI LETTER NO NEN. </summary>
			public const char THAI_CHARACTER_NO_NEN = (char)0x0E13;
			/// <summary> Formerly THAI LETTER NO NU. </summary>
			public const char THAI_CHARACTER_NO_NU = (char)0x0E19;
			/// <summary> Formerly THAI LETTER O ANG. </summary>
			public const char THAI_CHARACTER_O_ANG = (char)0x0E2D;
			/// <summary> Formerly THAI PAI YAN NOI. </summary>
			public const char THAI_CHARACTER_PAIYANNOI = (char)0x0E2F;
			/// <summary> Formerly THAI VOWEL SIGN PHINTHU. </summary>
			public const char THAI_CHARACTER_PHINTHU = (char)0x0E3A;
			/// <summary> Formerly THAI LETTER PHO PHAN. </summary>
			public const char THAI_CHARACTER_PHO_PHAN = (char)0x0E1E;
			/// <summary> Formerly THAI LETTER PHO PHUNG. </summary>
			public const char THAI_CHARACTER_PHO_PHUNG = (char)0x0E1C;
			/// <summary> Formerly THAI LETTER PHO SAMPHAO. </summary>
			public const char THAI_CHARACTER_PHO_SAMPHAO = (char)0x0E20;
			/// <summary> Formerly THAI LETTER PO PLA. </summary>
			public const char THAI_CHARACTER_PO_PLA = (char)0x0E1B;
			/// <summary> Formerly THAI LETTER RO RUA. </summary>
			public const char THAI_CHARACTER_RO_RUA = (char)0x0E23;
			/// <summary> Formerly THAI LETTER RU. </summary>
			public const char THAI_CHARACTER_RU = (char)0x0E24;
			/// <summary> Formerly THAI VOWEL SIGN SARA A. </summary>
			public const char THAI_CHARACTER_SARA_A = (char)0x0E30;
			/// <summary> Formerly THAI VOWEL SIGN SARA AA. </summary>
			public const char THAI_CHARACTER_SARA_AA = (char)0x0E32;
			/// <summary> Formerly THAI VOWEL SIGN SARA AE. </summary>
			public const char THAI_CHARACTER_SARA_AE = (char)0x0E41;
			/// <summary> Formerly THAI VOWEL SIGN SARA MAI MALAI. </summary>
			public const char THAI_CHARACTER_SARA_AI_MAIMALAI = (char)0x0E44;
			/// <summary> Formerly THAI VOWEL SIGN SARA MAI MUAN. </summary>
			public const char THAI_CHARACTER_SARA_AI_MAIMUAN = (char)0x0E43;
			/// <summary> (This is a composition; consider avoiding.) Formerly THAI VOWEL SIGN SARA AM. </summary>
			public const char THAI_CHARACTER_SARA_AM = (char)0x0E33;
			/// <summary> Formerly THAI VOWEL SIGN SARA E. </summary>
			public const char THAI_CHARACTER_SARA_E = (char)0x0E40;
			/// <summary> Formerly THAI VOWEL SIGN SARA I. </summary>
			public const char THAI_CHARACTER_SARA_I = (char)0x0E34;
			/// <summary> Formerly THAI VOWEL SIGN SARA II. </summary>
			public const char THAI_CHARACTER_SARA_II = (char)0x0E35;
			/// <summary> Formerly THAI VOWEL SIGN SARA O. </summary>
			public const char THAI_CHARACTER_SARA_O = (char)0x0E42;
			/// <summary> Formerly THAI VOWEL SIGN SARA U. </summary>
			public const char THAI_CHARACTER_SARA_U = (char)0x0E38;
			/// <summary> Formerly THAI VOWEL SIGN SARA UE. </summary>
			public const char THAI_CHARACTER_SARA_UE = (char)0x0E36;
			/// <summary> Formerly THAI VOWEL SIGN SARA UEE. </summary>
			public const char THAI_CHARACTER_SARA_UEE = (char)0x0E37;
			/// <summary> Formerly THAI VOWEL SIGN SARA UU. </summary>
			public const char THAI_CHARACTER_SARA_UU = (char)0x0E39;
			/// <summary> Formerly THAI LETTER SO RUSI. </summary>
			public const char THAI_CHARACTER_SO_RUSI = (char)0x0E29;
			/// <summary> Formerly THAI LETTER SO SALA. </summary>
			public const char THAI_CHARACTER_SO_SALA = (char)0x0E28;
			/// <summary> Formerly THAI LETTER SO SO. </summary>
			public const char THAI_CHARACTER_SO_SO = (char)0x0E0B;
			/// <summary> Formerly THAI LETTER SO SUA. </summary>
			public const char THAI_CHARACTER_SO_SUA = (char)0x0E2A;
			/// <summary> Formerly THAI THANTHAKHAT. </summary>
			public const char THAI_CHARACTER_THANTHAKHAT = (char)0x0E4C;
			/// <summary> Formerly THAI LETTER THO NANGMONTHO. </summary>
			public const char THAI_CHARACTER_THO_NANGMONTHO = (char)0x0E11;
			/// <summary> Formerly THAI LETTER THO PHUTHAO. </summary>
			public const char THAI_CHARACTER_THO_PHUTHAO = (char)0x0E12;
			/// <summary> Formerly THAI LETTER THO THAHAN. </summary>
			public const char THAI_CHARACTER_THO_THAHAN = (char)0x0E17;
			/// <summary> Formerly THAI LETTER THO THAN. </summary>
			public const char THAI_CHARACTER_THO_THAN = (char)0x0E10;
			/// <summary> Formerly THAI LETTER THO THONG. </summary>
			public const char THAI_CHARACTER_THO_THONG = (char)0x0E18;
			/// <summary> Formerly THAI LETTER THO THUNG. </summary>
			public const char THAI_CHARACTER_THO_THUNG = (char)0x0E16;
			/// <summary> Formerly THAI LETTER TO PATAK. </summary>
			public const char THAI_CHARACTER_TO_PATAK = (char)0x0E0F;
			/// <summary> Formerly THAI LETTER TO TAO. </summary>
			public const char THAI_CHARACTER_TO_TAO = (char)0x0E15;
			/// <summary> Formerly THAI LETTER WO WAEN. </summary>
			public const char THAI_CHARACTER_WO_WAEN = (char)0x0E27;
			/// <summary> Formerly THAI YAMAKKAN. </summary>
			public const char THAI_CHARACTER_YAMAKKAN = (char)0x0E4E;
			/// <summary> Formerly THAI LETTER YO YAK. </summary>
			public const char THAI_CHARACTER_YO_YAK = (char)0x0E22;
			/// <summary> Formerly THAI LETTER YO YING. </summary>
			public const char THAI_CHARACTER_YO_YING = (char)0x0E0D;
			/// <summary> Formerly THAI BAHT SIGN. </summary>
			public const char THAI_CURRENCY_SYMBOL_BAHT = (char)0x0E3F;
			public const char THAI_DIGIT_EIGHT = (char)0x0E58;
			public const char THAI_DIGIT_FIVE = (char)0x0E55;
			public const char THAI_DIGIT_FOUR = (char)0x0E54;
			public const char THAI_DIGIT_NINE = (char)0x0E59;
			public const char THAI_DIGIT_ONE = (char)0x0E51;
			public const char THAI_DIGIT_SEVEN = (char)0x0E57;
			public const char THAI_DIGIT_SIX = (char)0x0E56;
			public const char THAI_DIGIT_THREE = (char)0x0E53;
			public const char THAI_DIGIT_TWO = (char)0x0E52;
			public const char THAI_DIGIT_ZERO = (char)0x0E50;
			public const char THEREFORE = (char)0x2234;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char THERE_DOES_NOT_EXIST = (char)0x2204;
			public const char THERE_EXISTS = (char)0x2203;
			public const char THERMODYNAMIC = (char)0x29E7;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char THIN_SPACE = (char)0x2009;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char THREE_CONSECUTIVE_EQUALS_SIGNS = (char)0x2A76;
			public const char THREE_DIMENSIONAL_ANGLE = (char)0x27C0;
			public const char THREE_DOT_PUNCTUATION = (char)0x2056;
			/// <summary> Formerly THREE-D BOTTOM-LIGHTED RIGHT ARROWHEAD. </summary>
			public const char THREE_D_BOTTOM_LIGHTED_RIGHTWARDS_ARROWHEAD = (char)0x27A3;
			/// <summary> Formerly THREE-D TOP-LIGHTED RIGHT ARROWHEAD. </summary>
			public const char THREE_D_TOP_LIGHTED_RIGHTWARDS_ARROWHEAD = (char)0x27A2;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char THREE_PER_EM_SPACE = (char)0x2004;
			public const char THREE_RIGHTWARDS_ARROWS = (char)0x21F6;
			public const char THUNDERSTORM = (char)0x2608;
			public const char TIBETAN_ASTROLOGICAL_SIGN_SDONG_TSHUGS = (char)0x0F19;
			public const char TIBETAN_ASTROLOGICAL_SIGN_SGRA_GCAN__CHAR_RTAGS = (char)0x0F17;
			public const char TIBETAN_ASTROLOGICAL_SIGN__KHYUD_PA = (char)0x0F18;
			public const char TIBETAN_CANTILLATION_SIGN_CANG_TE_U = (char)0x0FC2;
			public const char TIBETAN_CANTILLATION_SIGN_HEAVY_BEAT = (char)0x0FC0;
			public const char TIBETAN_CANTILLATION_SIGN_LIGHT_BEAT = (char)0x0FC1;
			public const char TIBETAN_CANTILLATION_SIGN_SBUB__CHAL = (char)0x0FC3;
			public const char TIBETAN_DIGIT_EIGHT = (char)0x0F28;
			public const char TIBETAN_DIGIT_FIVE = (char)0x0F25;
			public const char TIBETAN_DIGIT_FOUR = (char)0x0F24;
			public const char TIBETAN_DIGIT_HALF_EIGHT = (char)0x0F31;
			public const char TIBETAN_DIGIT_HALF_FIVE = (char)0x0F2E;
			public const char TIBETAN_DIGIT_HALF_FOUR = (char)0x0F2D;
			public const char TIBETAN_DIGIT_HALF_NINE = (char)0x0F32;
			public const char TIBETAN_DIGIT_HALF_ONE = (char)0x0F2A;
			public const char TIBETAN_DIGIT_HALF_SEVEN = (char)0x0F30;
			public const char TIBETAN_DIGIT_HALF_SIX = (char)0x0F2F;
			public const char TIBETAN_DIGIT_HALF_THREE = (char)0x0F2C;
			public const char TIBETAN_DIGIT_HALF_TWO = (char)0x0F2B;
			public const char TIBETAN_DIGIT_HALF_ZERO = (char)0x0F33;
			public const char TIBETAN_DIGIT_NINE = (char)0x0F29;
			public const char TIBETAN_DIGIT_ONE = (char)0x0F21;
			public const char TIBETAN_DIGIT_SEVEN = (char)0x0F27;
			public const char TIBETAN_DIGIT_SIX = (char)0x0F26;
			public const char TIBETAN_DIGIT_THREE = (char)0x0F23;
			public const char TIBETAN_DIGIT_TWO = (char)0x0F22;
			public const char TIBETAN_DIGIT_ZERO = (char)0x0F20;
			public const char TIBETAN_KU_RU_KHA = (char)0x0FBE;
			public const char TIBETAN_KU_RU_KHA_BZHI_MIG_CAN = (char)0x0FBF;
			public const char TIBETAN_LETTER_A = (char)0x0F68;
			public const char TIBETAN_LETTER_BA = (char)0x0F56;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_LETTER_BHA = (char)0x0F57;
			public const char TIBETAN_LETTER_CA = (char)0x0F45;
			public const char TIBETAN_LETTER_CHA = (char)0x0F46;
			public const char TIBETAN_LETTER_DA = (char)0x0F51;
			/// <summary> Formerly TIBETAN LETTER REVERSED DA. </summary>
			public const char TIBETAN_LETTER_DDA = (char)0x0F4C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_LETTER_DDHA = (char)0x0F4D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_LETTER_DHA = (char)0x0F52;
			public const char TIBETAN_LETTER_DZA = (char)0x0F5B;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_LETTER_DZHA = (char)0x0F5C;
			public const char TIBETAN_LETTER_FIXED_FORM_RA = (char)0x0F6A;
			public const char TIBETAN_LETTER_GA = (char)0x0F42;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_LETTER_GHA = (char)0x0F43;
			public const char TIBETAN_LETTER_HA = (char)0x0F67;
			public const char TIBETAN_LETTER_JA = (char)0x0F47;
			public const char TIBETAN_LETTER_KA = (char)0x0F40;
			public const char TIBETAN_LETTER_KHA = (char)0x0F41;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_LETTER_KSSA = (char)0x0F69;
			public const char TIBETAN_LETTER_LA = (char)0x0F63;
			public const char TIBETAN_LETTER_MA = (char)0x0F58;
			public const char TIBETAN_LETTER_NA = (char)0x0F53;
			public const char TIBETAN_LETTER_NGA = (char)0x0F44;
			/// <summary> Formerly TIBETAN LETTER REVERSED NA. </summary>
			public const char TIBETAN_LETTER_NNA = (char)0x0F4E;
			public const char TIBETAN_LETTER_NYA = (char)0x0F49;
			public const char TIBETAN_LETTER_PA = (char)0x0F54;
			public const char TIBETAN_LETTER_PHA = (char)0x0F55;
			public const char TIBETAN_LETTER_RA = (char)0x0F62;
			public const char TIBETAN_LETTER_SA = (char)0x0F66;
			public const char TIBETAN_LETTER_SHA = (char)0x0F64;
			/// <summary> Formerly TIBETAN LETTER REVERSED SHA. </summary>
			public const char TIBETAN_LETTER_SSA = (char)0x0F65;
			public const char TIBETAN_LETTER_TA = (char)0x0F4F;
			public const char TIBETAN_LETTER_THA = (char)0x0F50;
			public const char TIBETAN_LETTER_TSA = (char)0x0F59;
			public const char TIBETAN_LETTER_TSHA = (char)0x0F5A;
			/// <summary> Formerly TIBETAN LETTER REVERSED TA. </summary>
			public const char TIBETAN_LETTER_TTA = (char)0x0F4A;
			/// <summary> Formerly TIBETAN LETTER REVERSED THA. </summary>
			public const char TIBETAN_LETTER_TTHA = (char)0x0F4B;
			public const char TIBETAN_LETTER_WA = (char)0x0F5D;
			public const char TIBETAN_LETTER_YA = (char)0x0F61;
			public const char TIBETAN_LETTER_ZA = (char)0x0F5F;
			public const char TIBETAN_LETTER_ZHA = (char)0x0F5E;
			/// <summary> Formerly TIBETAN LETTER AA. </summary>
			public const char TIBETAN_LETTER__A = (char)0x0F60;
			public const char TIBETAN_LOGOTYPE_SIGN_CHAD_RTAGS = (char)0x0F15;
			public const char TIBETAN_LOGOTYPE_SIGN_LHAG_RTAGS = (char)0x0F16;
			/// <summary> Formerly TIBETAN RIGHT BRACE. </summary>
			public const char TIBETAN_MARK_ANG_KHANG_GYAS = (char)0x0F3D;
			/// <summary> Formerly TIBETAN LEFT BRACE. </summary>
			public const char TIBETAN_MARK_ANG_KHANG_GYON = (char)0x0F3C;
			public const char TIBETAN_MARK_BKA__SHOG_YIG_MGO = (char)0x0F0A;
			public const char TIBETAN_MARK_BSDUS_RTAGS = (char)0x0F34;
			public const char TIBETAN_MARK_BSKA__SHOG_GI_MGO_RGYAN = (char)0x0FD0;
			public const char TIBETAN_MARK_BSKUR_YIG_MGO = (char)0x0F09;
			public const char TIBETAN_MARK_CARET_YIG_MGO_PHUR_SHAD_MA = (char)0x0F06;
			public const char TIBETAN_MARK_CARET__DZUD_RTAGS_BZHI_MIG_CAN = (char)0x0F36;
			public const char TIBETAN_MARK_CARET__DZUD_RTAGS_ME_LONG_CAN = (char)0x0F13;
			public const char TIBETAN_MARK_CHE_MGO = (char)0x0F38;
			public const char TIBETAN_MARK_CLOSING_YIG_MGO_SGAB_MA = (char)0x0F05;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_MARK_DELIMITER_TSHEG_BSTAR = (char)0x0F0C;
			/// <summary> Formerly TIBETAN COMMA. </summary>
			public const char TIBETAN_MARK_GTER_TSHEG = (char)0x0F14;
			public const char TIBETAN_MARK_GTER_YIG_MGO_TRUNCATED_A = (char)0x0F01;
			public const char TIBETAN_MARK_GTER_YIG_MGO__UM_GTER_TSHEG_MA = (char)0x0F03;
			public const char TIBETAN_MARK_GTER_YIG_MGO__UM_RNAM_BCAD_MA = (char)0x0F02;
			public const char TIBETAN_MARK_GUG_RTAGS_GYAS = (char)0x0F3B;
			public const char TIBETAN_MARK_GUG_RTAGS_GYON = (char)0x0F3A;
			/// <summary> Formerly TIBETAN VIRAMA. </summary>
			public const char TIBETAN_MARK_HALANTA = (char)0x0F84;
			/// <summary> Formerly TIBETAN SINGLE ORNAMENT. </summary>
			public const char TIBETAN_MARK_INITIAL_YIG_MGO_MDUN_MA = (char)0x0F04;
			/// <summary> Formerly TIBETAN TSEG. </summary>
			public const char TIBETAN_MARK_INTERSYLLABIC_TSHEG = (char)0x0F0B;
			public const char TIBETAN_MARK_MNYAM_YIG_GI_MGO_RGYAN = (char)0x0FD1;
			/// <summary> Formerly TIBETAN HONORIFIC UNDER RING. </summary>
			public const char TIBETAN_MARK_NGAS_BZUNG_NYI_ZLA = (char)0x0F35;
			/// <summary> Formerly TIBETAN UNDER RING. </summary>
			public const char TIBETAN_MARK_NGAS_BZUNG_SGOR_RTAGS = (char)0x0F37;
			/// <summary> Formerly TIBETAN DOUBLE SHAD. </summary>
			public const char TIBETAN_MARK_NYIS_SHAD = (char)0x0F0E;
			public const char TIBETAN_MARK_NYIS_TSHEG_SHAD = (char)0x0F10;
			/// <summary> Formerly TIBETAN CHUCHENYIGE. </summary>
			public const char TIBETAN_MARK_PALUTA = (char)0x0F85;
			public const char TIBETAN_MARK_RGYA_GRAM_SHAD = (char)0x0F12;
			/// <summary> Formerly TIBETAN RINCHANPHUNGSHAD. </summary>
			public const char TIBETAN_MARK_RIN_CHEN_SPUNGS_SHAD = (char)0x0F11;
			/// <summary> Formerly TIBETAN RGYANSHAD. </summary>
			public const char TIBETAN_MARK_SBRUL_SHAD = (char)0x0F08;
			/// <summary> Formerly TIBETAN SHAD. </summary>
			public const char TIBETAN_MARK_SHAD = (char)0x0F0D;
			/// <summary> Formerly TIBETAN LENITION MARK. </summary>
			public const char TIBETAN_MARK_TSA__PHRU = (char)0x0F39;
			public const char TIBETAN_MARK_TSHEG_SHAD = (char)0x0F0F;
			public const char TIBETAN_MARK_YIG_MGO_TSHEG_SHAD_MA = (char)0x0F07;
			public const char TIBETAN_SIGN_GRU_CAN_RGYINGS = (char)0x0F8A;
			public const char TIBETAN_SIGN_GRU_MED_RGYINGS = (char)0x0F8B;
			public const char TIBETAN_SIGN_LCE_TSA_CAN = (char)0x0F88;
			public const char TIBETAN_SIGN_LCI_RTAGS = (char)0x0F86;
			public const char TIBETAN_SIGN_MAR_TSHES = (char)0x0F3F;
			public const char TIBETAN_SIGN_MCHU_CAN = (char)0x0F89;
			/// <summary> Formerly TIBETAN CANDRABINDU WITH ORNAMENT. </summary>
			public const char TIBETAN_SIGN_NYI_ZLA_NAA_DA = (char)0x0F82;
			public const char TIBETAN_SIGN_RDEL_DKAR_GCIG = (char)0x0F1A;
			public const char TIBETAN_SIGN_RDEL_DKAR_GNYIS = (char)0x0F1B;
			public const char TIBETAN_SIGN_RDEL_DKAR_GSUM = (char)0x0F1C;
			public const char TIBETAN_SIGN_RDEL_DKAR_RDEL_NAG = (char)0x0F1F;
			public const char TIBETAN_SIGN_RDEL_NAG_GCIG = (char)0x0F1D;
			public const char TIBETAN_SIGN_RDEL_NAG_GNYIS = (char)0x0F1E;
			public const char TIBETAN_SIGN_RDEL_NAG_GSUM = (char)0x0FCF;
			/// <summary> Formerly TIBETAN ANUSVARA. </summary>
			public const char TIBETAN_SIGN_RJES_SU_NGA_RO = (char)0x0F7E;
			/// <summary> Formerly TIBETAN VISARGA. </summary>
			public const char TIBETAN_SIGN_RNAM_BCAD = (char)0x0F7F;
			/// <summary> Formerly TIBETAN CANDRABINDU. </summary>
			public const char TIBETAN_SIGN_SNA_LDAN = (char)0x0F83;
			public const char TIBETAN_SIGN_YANG_RTAGS = (char)0x0F87;
			public const char TIBETAN_SIGN_YAR_TSHES = (char)0x0F3E;
			public const char TIBETAN_SUBJOINED_LETTER_A = (char)0x0FB8;
			public const char TIBETAN_SUBJOINED_LETTER_BA = (char)0x0FA6;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_SUBJOINED_LETTER_BHA = (char)0x0FA7;
			public const char TIBETAN_SUBJOINED_LETTER_CA = (char)0x0F95;
			public const char TIBETAN_SUBJOINED_LETTER_CHA = (char)0x0F96;
			public const char TIBETAN_SUBJOINED_LETTER_DA = (char)0x0FA1;
			public const char TIBETAN_SUBJOINED_LETTER_DDA = (char)0x0F9C;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_SUBJOINED_LETTER_DDHA = (char)0x0F9D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_SUBJOINED_LETTER_DHA = (char)0x0FA2;
			public const char TIBETAN_SUBJOINED_LETTER_DZA = (char)0x0FAB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_SUBJOINED_LETTER_DZHA = (char)0x0FAC;
			public const char TIBETAN_SUBJOINED_LETTER_FIXED_FORM_RA = (char)0x0FBC;
			public const char TIBETAN_SUBJOINED_LETTER_FIXED_FORM_WA = (char)0x0FBA;
			public const char TIBETAN_SUBJOINED_LETTER_FIXED_FORM_YA = (char)0x0FBB;
			public const char TIBETAN_SUBJOINED_LETTER_GA = (char)0x0F92;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_SUBJOINED_LETTER_GHA = (char)0x0F93;
			public const char TIBETAN_SUBJOINED_LETTER_HA = (char)0x0FB7;
			public const char TIBETAN_SUBJOINED_LETTER_JA = (char)0x0F97;
			public const char TIBETAN_SUBJOINED_LETTER_KA = (char)0x0F90;
			public const char TIBETAN_SUBJOINED_LETTER_KHA = (char)0x0F91;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_SUBJOINED_LETTER_KSSA = (char)0x0FB9;
			public const char TIBETAN_SUBJOINED_LETTER_LA = (char)0x0FB3;
			public const char TIBETAN_SUBJOINED_LETTER_MA = (char)0x0FA8;
			public const char TIBETAN_SUBJOINED_LETTER_NA = (char)0x0FA3;
			public const char TIBETAN_SUBJOINED_LETTER_NGA = (char)0x0F94;
			public const char TIBETAN_SUBJOINED_LETTER_NNA = (char)0x0F9E;
			public const char TIBETAN_SUBJOINED_LETTER_NYA = (char)0x0F99;
			public const char TIBETAN_SUBJOINED_LETTER_PA = (char)0x0FA4;
			public const char TIBETAN_SUBJOINED_LETTER_PHA = (char)0x0FA5;
			public const char TIBETAN_SUBJOINED_LETTER_RA = (char)0x0FB2;
			public const char TIBETAN_SUBJOINED_LETTER_SA = (char)0x0FB6;
			public const char TIBETAN_SUBJOINED_LETTER_SHA = (char)0x0FB4;
			public const char TIBETAN_SUBJOINED_LETTER_SSA = (char)0x0FB5;
			public const char TIBETAN_SUBJOINED_LETTER_TA = (char)0x0F9F;
			public const char TIBETAN_SUBJOINED_LETTER_THA = (char)0x0FA0;
			public const char TIBETAN_SUBJOINED_LETTER_TSA = (char)0x0FA9;
			public const char TIBETAN_SUBJOINED_LETTER_TSHA = (char)0x0FAA;
			public const char TIBETAN_SUBJOINED_LETTER_TTA = (char)0x0F9A;
			public const char TIBETAN_SUBJOINED_LETTER_TTHA = (char)0x0F9B;
			public const char TIBETAN_SUBJOINED_LETTER_WA = (char)0x0FAD;
			public const char TIBETAN_SUBJOINED_LETTER_YA = (char)0x0FB1;
			public const char TIBETAN_SUBJOINED_LETTER_ZA = (char)0x0FAF;
			public const char TIBETAN_SUBJOINED_LETTER_ZHA = (char)0x0FAE;
			public const char TIBETAN_SUBJOINED_LETTER__A = (char)0x0FB0;
			public const char TIBETAN_SYLLABLE_OM = (char)0x0F00;
			public const char TIBETAN_SYMBOL_DRIL_BU = (char)0x0FC4;
			public const char TIBETAN_SYMBOL_NOR_BU = (char)0x0FC9;
			public const char TIBETAN_SYMBOL_NOR_BU_BZHI__KHYIL = (char)0x0FCC;
			public const char TIBETAN_SYMBOL_NOR_BU_GSUM__KHYIL = (char)0x0FCB;
			public const char TIBETAN_SYMBOL_NOR_BU_NYIS__KHYIL = (char)0x0FCA;
			public const char TIBETAN_SYMBOL_PADMA_GDAN = (char)0x0FC6;
			public const char TIBETAN_SYMBOL_PHUR_PA = (char)0x0FC8;
			public const char TIBETAN_SYMBOL_RDO_RJE = (char)0x0FC5;
			public const char TIBETAN_SYMBOL_RDO_RJE_RGYA_GRAM = (char)0x0FC7;
			public const char TIBETAN_VOWEL_SIGN_AA = (char)0x0F71;
			public const char TIBETAN_VOWEL_SIGN_E = (char)0x0F7A;
			/// <summary> Formerly TIBETAN VOWEL SIGN AI. </summary>
			public const char TIBETAN_VOWEL_SIGN_EE = (char)0x0F7B;
			public const char TIBETAN_VOWEL_SIGN_I = (char)0x0F72;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_VOWEL_SIGN_II = (char)0x0F73;
			public const char TIBETAN_VOWEL_SIGN_O = (char)0x0F7C;
			/// <summary> Formerly TIBETAN VOWEL SIGN AU. </summary>
			public const char TIBETAN_VOWEL_SIGN_OO = (char)0x0F7D;
			/// <summary> Formerly TIBETAN VOWEL SIGN SHORT I. </summary>
			public const char TIBETAN_VOWEL_SIGN_REVERSED_I = (char)0x0F80;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_VOWEL_SIGN_REVERSED_II = (char)0x0F81;
			public const char TIBETAN_VOWEL_SIGN_U = (char)0x0F74;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_VOWEL_SIGN_UU = (char)0x0F75;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_VOWEL_SIGN_VOCALIC_L = (char)0x0F78;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_VOWEL_SIGN_VOCALIC_LL = (char)0x0F79;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_VOWEL_SIGN_VOCALIC_R = (char)0x0F76;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIBETAN_VOWEL_SIGN_VOCALIC_RR = (char)0x0F77;
			public const char TIE_OVER_INFINITY = (char)0x29DD;
			public const char TIFINAGH_LETTER_AHAGGAR_YAZH = (char)0x2D4B;
			public const char TIFINAGH_LETTER_AYER_YAGH = (char)0x2D58;
			public const char TIFINAGH_LETTER_BERBER_ACADEMY_YAH = (char)0x2D41;
			public const char TIFINAGH_LETTER_BERBER_ACADEMY_YAJ = (char)0x2D35;
			public const char TIFINAGH_LETTER_TAWELLEMET_YAZ = (char)0x2D64;
			public const char TIFINAGH_LETTER_TUAREG_YAGH = (char)0x2D57;
			public const char TIFINAGH_LETTER_TUAREG_YAGN = (char)0x2D50;
			public const char TIFINAGH_LETTER_TUAREG_YAH = (char)0x2D42;
			public const char TIFINAGH_LETTER_TUAREG_YAK = (char)0x2D3E;
			public const char TIFINAGH_LETTER_TUAREG_YAKH = (char)0x2D46;
			public const char TIFINAGH_LETTER_TUAREG_YANG = (char)0x2D51;
			public const char TIFINAGH_LETTER_TUAREG_YAQ = (char)0x2D48;
			public const char TIFINAGH_LETTER_TUAREG_YAZH = (char)0x2D4C;
			public const char TIFINAGH_LETTER_YA = (char)0x2D30;
			public const char TIFINAGH_LETTER_YAA = (char)0x2D44;
			public const char TIFINAGH_LETTER_YAB = (char)0x2D31;
			public const char TIFINAGH_LETTER_YABH = (char)0x2D32;
			public const char TIFINAGH_LETTER_YACH = (char)0x2D5E;
			public const char TIFINAGH_LETTER_YAD = (char)0x2D37;
			public const char TIFINAGH_LETTER_YADD = (char)0x2D39;
			public const char TIFINAGH_LETTER_YADDH = (char)0x2D3A;
			public const char TIFINAGH_LETTER_YADH = (char)0x2D38;
			public const char TIFINAGH_LETTER_YAF = (char)0x2D3C;
			public const char TIFINAGH_LETTER_YAG = (char)0x2D33;
			public const char TIFINAGH_LETTER_YAGH = (char)0x2D56;
			public const char TIFINAGH_LETTER_YAGHH = (char)0x2D34;
			public const char TIFINAGH_LETTER_YAH = (char)0x2D40;
			public const char TIFINAGH_LETTER_YAHH = (char)0x2D43;
			public const char TIFINAGH_LETTER_YAJ = (char)0x2D36;
			public const char TIFINAGH_LETTER_YAK = (char)0x2D3D;
			public const char TIFINAGH_LETTER_YAKH = (char)0x2D45;
			public const char TIFINAGH_LETTER_YAKHH = (char)0x2D3F;
			public const char TIFINAGH_LETTER_YAL = (char)0x2D4D;
			public const char TIFINAGH_LETTER_YAM = (char)0x2D4E;
			public const char TIFINAGH_LETTER_YAN = (char)0x2D4F;
			public const char TIFINAGH_LETTER_YAP = (char)0x2D52;
			public const char TIFINAGH_LETTER_YAQ = (char)0x2D47;
			public const char TIFINAGH_LETTER_YAR = (char)0x2D54;
			public const char TIFINAGH_LETTER_YARR = (char)0x2D55;
			public const char TIFINAGH_LETTER_YAS = (char)0x2D59;
			public const char TIFINAGH_LETTER_YASH = (char)0x2D5B;
			public const char TIFINAGH_LETTER_YASS = (char)0x2D5A;
			public const char TIFINAGH_LETTER_YAT = (char)0x2D5C;
			public const char TIFINAGH_LETTER_YATH = (char)0x2D5D;
			public const char TIFINAGH_LETTER_YATT = (char)0x2D5F;
			public const char TIFINAGH_LETTER_YAV = (char)0x2D60;
			public const char TIFINAGH_LETTER_YAW = (char)0x2D61;
			public const char TIFINAGH_LETTER_YAY = (char)0x2D62;
			public const char TIFINAGH_LETTER_YAZ = (char)0x2D63;
			public const char TIFINAGH_LETTER_YAZH = (char)0x2D4A;
			public const char TIFINAGH_LETTER_YAZZ = (char)0x2D65;
			public const char TIFINAGH_LETTER_YEY = (char)0x2D3B;
			public const char TIFINAGH_LETTER_YI = (char)0x2D49;
			public const char TIFINAGH_LETTER_YU = (char)0x2D53;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TIFINAGH_MODIFIER_LETTER_LABIALIZATION_MARK = (char)0x2D6F;
			public const char TIGHT_TRIFOLIATE_SNOWFLAKE = (char)0x2745;
			public const char TILDE = (char)0x007E;
			public const char TILDE_OPERATOR = (char)0x223C;
			public const char TILDE_OPERATOR_ABOVE_RIGHTWARDS_ARROW = (char)0x2972;
			public const char TILDE_OPERATOR_WITH_DOT_ABOVE = (char)0x2A6A;
			public const char TILDE_OPERATOR_WITH_RISING_DOTS = (char)0x2A6B;
			public const char TIMES_WITH_LEFT_HALF_BLACK = (char)0x29D4;
			public const char TIMES_WITH_RIGHT_HALF_BLACK = (char)0x29D5;
			public const char TINY = (char)0x29FE;
			public const char TIRONIAN_SIGN_ET = (char)0x204A;
			public const char TOP_ARC_ANTICLOCKWISE_ARROW = (char)0x293A;
			public const char TOP_ARC_ANTICLOCKWISE_ARROW_WITH_PLUS = (char)0x293D;
			public const char TOP_ARC_CLOCKWISE_ARROW_WITH_MINUS = (char)0x293C;
			public const char TOP_HALF_INTEGRAL = (char)0x2320;
			public const char TOP_LEFT_CORNER = (char)0x231C;
			public const char TOP_LEFT_CROP = (char)0x230F;
			public const char TOP_RIGHT_CORNER = (char)0x231D;
			public const char TOP_RIGHT_CROP = (char)0x230E;
			public const char TOP_SQUARE_BRACKET = (char)0x23B4;
			public const char TOTAL_RUNOUT = (char)0x2330;
			/// <summary> (This is a composition; consider avoiding.) Formerly TRADEMARK. </summary>
			public const char TRADE_MARK_SIGN = (char)0x2122;
			public const char TRANSVERSAL_INTERSECTION = (char)0x2ADB;
			/// <summary> Formerly TRIANGLE-HEADED RIGHT ARROW. </summary>
			public const char TRIANGLE_HEADED_RIGHTWARDS_ARROW = (char)0x279D;
			public const char TRIANGLE_WITH_DOT_ABOVE = (char)0x29CA;
			public const char TRIANGLE_WITH_SERIFS_AT_BOTTOM = (char)0x29CD;
			public const char TRIANGLE_WITH_UNDERBAR = (char)0x29CB;
			public const char TRIANGULAR_BULLET = (char)0x2023;
			public const char TRICOLON = (char)0x205D;
			public const char TRIGRAM_FOR_EARTH = (char)0x2637;
			public const char TRIGRAM_FOR_FIRE = (char)0x2632;
			public const char TRIGRAM_FOR_HEAVEN = (char)0x2630;
			public const char TRIGRAM_FOR_LAKE = (char)0x2631;
			public const char TRIGRAM_FOR_MOUNTAIN = (char)0x2636;
			public const char TRIGRAM_FOR_THUNDER = (char)0x2633;
			public const char TRIGRAM_FOR_WATER = (char)0x2635;
			public const char TRIGRAM_FOR_WIND = (char)0x2634;
			public const char TRIPLE_COLON_OPERATOR = (char)0x2AF6;
			public const char TRIPLE_HORIZONTAL_BAR_WITH_DOUBLE_VERTICAL_STROKE = (char)0x2A68;
			public const char TRIPLE_HORIZONTAL_BAR_WITH_TRIPLE_VERTICAL_STROKE = (char)0x2A69;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TRIPLE_INTEGRAL = (char)0x222D;
			public const char TRIPLE_NESTED_GREATER_THAN = (char)0x2AF8;
			public const char TRIPLE_NESTED_LESS_THAN = (char)0x2AF7;
			public const char TRIPLE_PLUS = (char)0x29FB;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TRIPLE_PRIME = (char)0x2034;
			public const char TRIPLE_SOLIDUS_BINARY_RELATION = (char)0x2AFB;
			public const char TRIPLE_TILDE = (char)0x224B;
			public const char TRIPLE_VERTICAL_BAR_BINARY_RELATION = (char)0x2AF4;
			public const char TRIPLE_VERTICAL_BAR_DELIMITER = (char)0x2980;
			public const char TRIPLE_VERTICAL_BAR_RIGHT_TURNSTILE = (char)0x22AA;
			public const char TRIPLE_VERTICAL_BAR_WITH_HORIZONTAL_STROKE = (char)0x2AF5;
			public const char TRUE = (char)0x22A8;
			public const char TUGRIK_SIGN = (char)0x20AE;
			public const char TURNED_AMPERSAND = (char)0x214B;
			public const char TURNED_ANGLE = (char)0x29A2;
			/// <summary> Formerly TURNED F. </summary>
			public const char TURNED_CAPITAL_F = (char)0x2132;
			public const char TURNED_GREEK_SMALL_LETTER_IOTA = (char)0x2129;
			public const char TURNED_NOT_SIGN = (char)0x2319;
			public const char TURNED_SANS_SERIF_CAPITAL_G = (char)0x2141;
			public const char TURNED_SANS_SERIF_CAPITAL_L = (char)0x2142;
			public const char TURNED_SANS_SERIF_CAPITAL_Y = (char)0x2144;
			public const char TWELVE_POINTED_BLACK_STAR = (char)0x2739;
			public const char TWO_ASTERISKS_ALIGNED_VERTICALLY = (char)0x2051;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TWO_CONSECUTIVE_EQUALS_SIGNS = (char)0x2A75;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char TWO_DOT_LEADER = (char)0x2025;
			public const char TWO_DOT_PUNCTUATION = (char)0x205A;
			public const char TWO_INTERSECTING_LOGICAL_AND = (char)0x2A55;
			public const char TWO_INTERSECTING_LOGICAL_OR = (char)0x2A56;
			public const char TWO_JOINED_SQUARES = (char)0x29C9;
			public const char TWO_LOGICAL_AND_OPERATOR = (char)0x2A07;
			public const char TWO_LOGICAL_OR_OPERATOR = (char)0x2A08;
		}
		public class U {
			public const char UMBRELLA = (char)0x2602;
			public const char UMBRELLA_WITH_RAIN_DROPS = (char)0x2614;
			public const char UNDERTIE = (char)0x203F;
			public const char UNDO_SYMBOL = (char)0x238C;
			public const char UNION = (char)0x222A;
			public const char UNION_ABOVE_BAR_ABOVE_INTERSECTION = (char)0x2A48;
			public const char UNION_ABOVE_INTERSECTION = (char)0x2A46;
			public const char UNION_BESIDE_AND_JOINED_WITH_UNION = (char)0x2A4A;
			public const char UNION_WITH_LOGICAL_OR = (char)0x2A45;
			public const char UNION_WITH_MINUS_SIGN = (char)0x2A41;
			public const char UNION_WITH_OVERBAR = (char)0x2A42;
			public const char UNIVERSAL_RECYCLING_SYMBOL = (char)0x2672;
			public const char UNMARRIED_PARTNERSHIP_SYMBOL = (char)0x26AF;
			public const char UPPER_BLADE_SCISSORS = (char)0x2701;
			public const char UPPER_HALF_BLOCK = (char)0x2580;
			public const char UPPER_HALF_CIRCLE = (char)0x25E0;
			public const char UPPER_HALF_INVERSE_WHITE_CIRCLE = (char)0x25DA;
			public const char UPPER_LEFT_CORNER_WITH_DOT = (char)0x27D4;
			public const char UPPER_LEFT_OR_LOWER_RIGHT_CURLY_BRACKET_SECTION = (char)0x23B0;
			public const char UPPER_LEFT_QUADRANT_CIRCULAR_ARC = (char)0x25DC;
			public const char UPPER_LEFT_TRIANGLE = (char)0x25F8;
			public const char UPPER_ONE_EIGHTH_BLOCK = (char)0x2594;
			public const char UPPER_RIGHT_DROP_SHADOWED_WHITE_SQUARE = (char)0x2750;
			public const char UPPER_RIGHT_OR_LOWER_LEFT_CURLY_BRACKET_SECTION = (char)0x23B1;
			public const char UPPER_RIGHT_PENCIL = (char)0x2710;
			public const char UPPER_RIGHT_QUADRANT_CIRCULAR_ARC = (char)0x25DD;
			public const char UPPER_RIGHT_SHADOWED_WHITE_SQUARE = (char)0x2752;
			public const char UPPER_RIGHT_TRIANGLE = (char)0x25F9;
			public const char UPWARDS_ANCORA = (char)0x2E15;
			/// <summary> Formerly UP ARROW. </summary>
			public const char UPWARDS_ARROW = (char)0x2191;
			/// <summary> Formerly UP ARROW FROM BAR. </summary>
			public const char UPWARDS_ARROW_FROM_BAR = (char)0x21A5;
			/// <summary> Formerly UP ARROW LEFT OF DOWN ARROW. </summary>
			public const char UPWARDS_ARROW_LEFTWARDS_OF_DOWNWARDS_ARROW = (char)0x21C5;
			public const char UPWARDS_ARROW_TO_BAR = (char)0x2912;
			/// <summary> Formerly UP ARROW WITH DOUBLE STROKE. </summary>
			public const char UPWARDS_ARROW_WITH_DOUBLE_STROKE = (char)0x21DE;
			public const char UPWARDS_ARROW_WITH_HORIZONTAL_STROKE = (char)0x2909;
			/// <summary> Formerly UP ARROW WITH TIP LEFT. </summary>
			public const char UPWARDS_ARROW_WITH_TIP_LEFTWARDS = (char)0x21B0;
			/// <summary> Formerly UP ARROW WITH TIP RIGHT. </summary>
			public const char UPWARDS_ARROW_WITH_TIP_RIGHTWARDS = (char)0x21B1;
			public const char UPWARDS_BLACK_ARROW = (char)0x2B06;
			/// <summary> Formerly UP DASHED ARROW. </summary>
			public const char UPWARDS_DASHED_ARROW = (char)0x21E1;
			/// <summary> Formerly UP DOUBLE ARROW. </summary>
			public const char UPWARDS_DOUBLE_ARROW = (char)0x21D1;
			/// <summary> Formerly UP HARPOON WITH BARB LEFT. </summary>
			public const char UPWARDS_HARPOON_WITH_BARB_LEFTWARDS = (char)0x21BF;
			public const char UPWARDS_HARPOON_WITH_BARB_LEFT_BESIDE_DOWNWARDS_HARPOON_WITH_BARB_RIGHT = (char)0x296E;
			public const char UPWARDS_HARPOON_WITH_BARB_LEFT_BESIDE_UPWARDS_HARPOON_WITH_BARB_RIGHT = (char)0x2963;
			public const char UPWARDS_HARPOON_WITH_BARB_LEFT_FROM_BAR = (char)0x2960;
			public const char UPWARDS_HARPOON_WITH_BARB_LEFT_TO_BAR = (char)0x2958;
			/// <summary> Formerly UP HARPOON WITH BARB RIGHT. </summary>
			public const char UPWARDS_HARPOON_WITH_BARB_RIGHTWARDS = (char)0x21BE;
			public const char UPWARDS_HARPOON_WITH_BARB_RIGHT_FROM_BAR = (char)0x295C;
			public const char UPWARDS_HARPOON_WITH_BARB_RIGHT_TO_BAR = (char)0x2954;
			/// <summary> Formerly UP PAIRED ARROWS. </summary>
			public const char UPWARDS_PAIRED_ARROWS = (char)0x21C8;
			public const char UPWARDS_QUADRUPLE_ARROW = (char)0x27F0;
			public const char UPWARDS_TRIPLE_ARROW = (char)0x290A;
			/// <summary> Formerly UP TWO HEADED ARROW. </summary>
			public const char UPWARDS_TWO_HEADED_ARROW = (char)0x219F;
			public const char UPWARDS_TWO_HEADED_ARROW_FROM_SMALL_CIRCLE = (char)0x2949;
			/// <summary> Formerly WHITE UP ARROW. </summary>
			public const char UPWARDS_WHITE_ARROW = (char)0x21E7;
			/// <summary> Formerly WHITE UP ARROW FROM BAR. </summary>
			public const char UPWARDS_WHITE_ARROW_FROM_BAR = (char)0x21EA;
			public const char UPWARDS_WHITE_ARROW_ON_PEDESTAL = (char)0x21EB;
			public const char UPWARDS_WHITE_ARROW_ON_PEDESTAL_WITH_HORIZONTAL_BAR = (char)0x21EC;
			public const char UPWARDS_WHITE_ARROW_ON_PEDESTAL_WITH_VERTICAL_BAR = (char)0x21ED;
			public const char UPWARDS_WHITE_DOUBLE_ARROW = (char)0x21EE;
			public const char UPWARDS_WHITE_DOUBLE_ARROW_ON_PEDESTAL = (char)0x21EF;
			public const char UP_ARROWHEAD = (char)0x2303;
			/// <summary> Formerly ENTER KEY. </summary>
			public const char UP_ARROWHEAD_BETWEEN_TWO_HORIZONTAL_BARS = (char)0x2324;
			public const char UP_ARROW_THROUGH_CIRCLE = (char)0x29BD;
			public const char UP_BARB_LEFT_DOWN_BARB_LEFT_HARPOON = (char)0x2951;
			public const char UP_BARB_LEFT_DOWN_BARB_RIGHT_HARPOON = (char)0x294D;
			public const char UP_BARB_RIGHT_DOWN_BARB_LEFT_HARPOON = (char)0x294C;
			public const char UP_BARB_RIGHT_DOWN_BARB_RIGHT_HARPOON = (char)0x294F;
			public const char UP_DOWN_ARROW = (char)0x2195;
			public const char UP_DOWN_ARROW_WITH_BASE = (char)0x21A8;
			public const char UP_DOWN_BLACK_ARROW = (char)0x2B0D;
			public const char UP_DOWN_DOUBLE_ARROW = (char)0x21D5;
			public const char UP_DOWN_WHITE_ARROW = (char)0x21F3;
			public const char UP_FISH_TAIL = (char)0x297E;
			/// <summary> Formerly UP POINTING TRIANGLE WITH LEFT HALF BLACK. </summary>
			public const char UP_POINTING_TRIANGLE_WITH_LEFT_HALF_BLACK = (char)0x25ED;
			/// <summary> Formerly UP POINTING TRIANGLE WITH RIGHT HALF BLACK. </summary>
			public const char UP_POINTING_TRIANGLE_WITH_RIGHT_HALF_BLACK = (char)0x25EE;
			public const char UP_RIGHT_DIAGONAL_ELLIPSIS = (char)0x22F0;
			public const char UP_TACK = (char)0x22A5;
			public const char UP_TACK_WITH_CIRCLE_ABOVE = (char)0x27DF;
			public const char URANUS = (char)0x2645;
		}
		public class V {
			public const char VARIATION_SELECTOR_1 = (char)0xFE00;
			public const char VARIATION_SELECTOR_10 = (char)0xFE09;
			public const char VARIATION_SELECTOR_11 = (char)0xFE0A;
			public const char VARIATION_SELECTOR_12 = (char)0xFE0B;
			public const char VARIATION_SELECTOR_13 = (char)0xFE0C;
			public const char VARIATION_SELECTOR_14 = (char)0xFE0D;
			public const char VARIATION_SELECTOR_15 = (char)0xFE0E;
			public const char VARIATION_SELECTOR_16 = (char)0xFE0F;
			public const char VARIATION_SELECTOR_2 = (char)0xFE01;
			public const char VARIATION_SELECTOR_3 = (char)0xFE02;
			public const char VARIATION_SELECTOR_4 = (char)0xFE03;
			public const char VARIATION_SELECTOR_5 = (char)0xFE04;
			public const char VARIATION_SELECTOR_6 = (char)0xFE05;
			public const char VARIATION_SELECTOR_7 = (char)0xFE06;
			public const char VARIATION_SELECTOR_8 = (char)0xFE07;
			public const char VARIATION_SELECTOR_9 = (char)0xFE08;
			public const char VECTOR_OR_CROSS_PRODUCT = (char)0x2A2F;
			public const char VERSICLE = (char)0x2123;
			public const char VERTICAL_BAR_BESIDE_RIGHT_TRIANGLE = (char)0x29D0;
			public const char VERTICAL_BAR_DOUBLE_LEFT_TURNSTILE = (char)0x2AE4;
			public const char VERTICAL_BAR_TRIPLE_RIGHT_TURNSTILE = (char)0x2AE2;
			public const char VERTICAL_ELLIPSIS = (char)0x22EE;
			public const char VERTICAL_FOUR_DOTS = (char)0x205E;
			public const char VERTICAL_IDEOGRAPHIC_ITERATION_MARK = (char)0x303B;
			public const char VERTICAL_KANA_REPEAT_MARK = (char)0x3031;
			public const char VERTICAL_KANA_REPEAT_MARK_LOWER_HALF = (char)0x3035;
			public const char VERTICAL_KANA_REPEAT_MARK_UPPER_HALF = (char)0x3033;
			public const char VERTICAL_KANA_REPEAT_WITH_VOICED_SOUND_MARK = (char)0x3032;
			public const char VERTICAL_KANA_REPEAT_WITH_VOICED_SOUND_MARK_UPPER_HALF = (char)0x3034;
			/// <summary> Formerly VERTICAL BAR. </summary>
			public const char VERTICAL_LINE = (char)0x007C;
			public const char VERTICAL_LINE_EXTENSION = (char)0x23D0;
			public const char VERTICAL_LINE_WITH_CIRCLE_ABOVE = (char)0x2AEF;
			public const char VERTICAL_LINE_WITH_CIRCLE_BELOW = (char)0x2AF0;
			public const char VERTICAL_LINE_WITH_MIDDLE_DOT = (char)0x237F;
			public const char VERTICAL_MALE_WITH_STROKE_SIGN = (char)0x26A8;
			public const char VERTICAL_ZIGZAG_LINE = (char)0x299A;
			/// <summary> Formerly VERY MUCH GREATER THAN. </summary>
			public const char VERY_MUCH_GREATER_THAN = (char)0x22D9;
			/// <summary> Formerly VERY MUCH LESS THAN. </summary>
			public const char VERY_MUCH_LESS_THAN = (char)0x22D8;
			public const char VICTORY_HAND = (char)0x270C;
			public const char VIEWDATA_SQUARE = (char)0x2317;
			public const char VIRGO = (char)0x264D;
			/// <summary> (This is a composition; consider avoiding.) </summary>
			public const char VOLUME_INTEGRAL = (char)0x2230;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION FIVE EIGHTHS. </summary>
			public const char VULGAR_FRACTION_FIVE_EIGHTHS = (char)0x215D;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION FIVE SIXTHS. </summary>
			public const char VULGAR_FRACTION_FIVE_SIXTHS = (char)0x215A;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION FOUR FIFTHS. </summary>
			public const char VULGAR_FRACTION_FOUR_FIFTHS = (char)0x2158;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION ONE EIGHTH. </summary>
			public const char VULGAR_FRACTION_ONE_EIGHTH = (char)0x215B;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION ONE FIFTH. </summary>
			public const char VULGAR_FRACTION_ONE_FIFTH = (char)0x2155;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION ONE HALF. </summary>
			public const char VULGAR_FRACTION_ONE_HALF = (char)0x00BD;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION ONE QUARTER. </summary>
			public const char VULGAR_FRACTION_ONE_QUARTER = (char)0x00BC;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION ONE SIXTH. </summary>
			public const char VULGAR_FRACTION_ONE_SIXTH = (char)0x2159;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION ONE THIRD. </summary>
			public const char VULGAR_FRACTION_ONE_THIRD = (char)0x2153;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION SEVEN EIGHTHS. </summary>
			public const char VULGAR_FRACTION_SEVEN_EIGHTHS = (char)0x215E;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION THREE EIGHTHS. </summary>
			public const char VULGAR_FRACTION_THREE_EIGHTHS = (char)0x215C;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION THREE FIFTHS. </summary>
			public const char VULGAR_FRACTION_THREE_FIFTHS = (char)0x2157;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION THREE QUARTERS. </summary>
			public const char VULGAR_FRACTION_THREE_QUARTERS = (char)0x00BE;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION TWO FIFTHS. </summary>
			public const char VULGAR_FRACTION_TWO_FIFTHS = (char)0x2156;
			/// <summary> (This is a composition; consider avoiding.) Formerly FRACTION TWO THIRDS. </summary>
			public const char VULGAR_FRACTION_TWO_THIRDS = (char)0x2154;
		}
		public class W {
			public const char WARNING_SIGN = (char)0x26A0;
			public const char WATCH = (char)0x231A;
			public const char WAVE_ARROW_POINTING_DIRECTLY_RIGHT = (char)0x2933;
			public const char WAVE_DASH = (char)0x301C;
			public const char WAVY_DASH = (char)0x3030;
			public const char WAVY_LINE = (char)0x2307;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING WAVY UNDERSCORE. </summary>
			public const char WAVY_LOW_LINE = (char)0xFE4F;
			/// <summary> (This is a composition; consider avoiding.) Formerly SPACING WAVY OVERSCORE. </summary>
			public const char WAVY_OVERLINE = (char)0xFE4B;
			/// <summary> Formerly WEDGE-TAILED RIGHT ARROW. </summary>
			public const char WEDGE_TAILED_RIGHTWARDS_ARROW = (char)0x27BC;
			public const char WEST_SYRIAC_CROSS = (char)0x2670;
			public const char WHEELCHAIR_SYMBOL = (char)0x267F;
			public const char WHEEL_OF_DHARMA = (char)0x2638;
			public const char WHITE_BULLET = (char)0x25E6;
			public const char WHITE_CHESS_BISHOP = (char)0x2657;
			public const char WHITE_CHESS_KING = (char)0x2654;
			public const char WHITE_CHESS_KNIGHT = (char)0x2658;
			public const char WHITE_CHESS_PAWN = (char)0x2659;
			public const char WHITE_CHESS_QUEEN = (char)0x2655;
			public const char WHITE_CHESS_ROOK = (char)0x2656;
			public const char WHITE_CIRCLE = (char)0x25CB;
			public const char WHITE_CIRCLE_WITH_DOT_RIGHT = (char)0x2686;
			public const char WHITE_CIRCLE_WITH_DOWN_ARROW = (char)0x29EC;
			public const char WHITE_CIRCLE_WITH_LOWER_LEFT_QUADRANT = (char)0x25F5;
			public const char WHITE_CIRCLE_WITH_LOWER_RIGHT_QUADRANT = (char)0x25F6;
			public const char WHITE_CIRCLE_WITH_TWO_DOTS = (char)0x2687;
			public const char WHITE_CIRCLE_WITH_UPPER_LEFT_QUADRANT = (char)0x25F4;
			public const char WHITE_CIRCLE_WITH_UPPER_RIGHT_QUADRANT = (char)0x25F7;
			public const char WHITE_CLUB_SUIT = (char)0x2667;
			public const char WHITE_CONCAVE_SIDED_DIAMOND = (char)0x27E1;
			public const char WHITE_CONCAVE_SIDED_DIAMOND_WITH_LEFTWARDS_TICK = (char)0x27E2;
			public const char WHITE_CONCAVE_SIDED_DIAMOND_WITH_RIGHTWARDS_TICK = (char)0x27E3;
			public const char WHITE_DIAMOND = (char)0x25C7;
			public const char WHITE_DIAMOND_CONTAINING_BLACK_SMALL_DIAMOND = (char)0x25C8;
			public const char WHITE_DIAMOND_SUIT = (char)0x2662;
			public const char WHITE_DIAMOND_WITH_CENTRED_DOT = (char)0x27D0;
			public const char WHITE_DOWN_POINTING_INDEX = (char)0x261F;
			/// <summary> Formerly WHITE DOWN POINTING SMALL TRIANGLE. </summary>
			public const char WHITE_DOWN_POINTING_SMALL_TRIANGLE = (char)0x25BF;
			/// <summary> Formerly WHITE DOWN POINTING TRIANGLE. </summary>
			public const char WHITE_DOWN_POINTING_TRIANGLE = (char)0x25BD;
			/// <summary> Formerly WHITE-FEATHERED RIGHT ARROW. </summary>
			public const char WHITE_FEATHERED_RIGHTWARDS_ARROW = (char)0x27B3;
			public const char WHITE_FLAG = (char)0x2690;
			public const char WHITE_FLORETTE = (char)0x2740;
			public const char WHITE_FOUR_POINTED_STAR = (char)0x2727;
			public const char WHITE_FROWNING_FACE = (char)0x2639;
			public const char WHITE_HEART_SUIT = (char)0x2661;
			public const char WHITE_HOURGLASS = (char)0x29D6;
			public const char WHITE_LEFT_POINTING_INDEX = (char)0x261C;
			/// <summary> Formerly WHITE LEFT POINTING POINTER. </summary>
			public const char WHITE_LEFT_POINTING_POINTER = (char)0x25C5;
			/// <summary> Formerly WHITE LEFT POINTING SMALL TRIANGLE. </summary>
			public const char WHITE_LEFT_POINTING_SMALL_TRIANGLE = (char)0x25C3;
			/// <summary> Formerly WHITE LEFT POINTING TRIANGLE. </summary>
			public const char WHITE_LEFT_POINTING_TRIANGLE = (char)0x25C1;
			public const char WHITE_MEDIUM_SMALL_SQUARE = (char)0x25FD;
			public const char WHITE_MEDIUM_SQUARE = (char)0x25FB;
			public const char WHITE_NIB = (char)0x2711;
			public const char WHITE_PARALLELOGRAM = (char)0x25B1;
			public const char WHITE_RECTANGLE = (char)0x25AD;
			public const char WHITE_RIGHT_POINTING_INDEX = (char)0x261E;
			/// <summary> Formerly WHITE RIGHT POINTING POINTER. </summary>
			public const char WHITE_RIGHT_POINTING_POINTER = (char)0x25BB;
			/// <summary> Formerly WHITE RIGHT POINTING SMALL TRIANGLE. </summary>
			public const char WHITE_RIGHT_POINTING_SMALL_TRIANGLE = (char)0x25B9;
			/// <summary> Formerly WHITE RIGHT POINTING TRIANGLE. </summary>
			public const char WHITE_RIGHT_POINTING_TRIANGLE = (char)0x25B7;
			public const char WHITE_SCISSORS = (char)0x2704;
			public const char WHITE_SESAME_DOT = (char)0xFE46;
			public const char WHITE_SHOGI_PIECE = (char)0x2616;
			public const char WHITE_SMALL_SQUARE = (char)0x25AB;
			public const char WHITE_SMILING_FACE = (char)0x263A;
			public const char WHITE_SPADE_SUIT = (char)0x2664;
			public const char WHITE_SQUARE = (char)0x25A1;
			public const char WHITE_SQUARE_CONTAINING_BLACK_SMALL_SQUARE = (char)0x25A3;
			public const char WHITE_SQUARE_WITH_CENTRE_VERTICAL_LINE = (char)0x2385;
			public const char WHITE_SQUARE_WITH_LEFTWARDS_TICK = (char)0x27E4;
			public const char WHITE_SQUARE_WITH_LOWER_LEFT_QUADRANT = (char)0x25F1;
			public const char WHITE_SQUARE_WITH_LOWER_RIGHT_QUADRANT = (char)0x25F2;
			public const char WHITE_SQUARE_WITH_RIGHTWARDS_TICK = (char)0x27E5;
			public const char WHITE_SQUARE_WITH_ROUNDED_CORNERS = (char)0x25A2;
			public const char WHITE_SQUARE_WITH_UPPER_LEFT_QUADRANT = (char)0x25F0;
			public const char WHITE_SQUARE_WITH_UPPER_RIGHT_QUADRANT = (char)0x25F3;
			public const char WHITE_SQUARE_WITH_VERTICAL_BISECTING_LINE = (char)0x25EB;
			public const char WHITE_STAR = (char)0x2606;
			public const char WHITE_SUN_WITH_RAYS = (char)0x263C;
			public const char WHITE_TELEPHONE = (char)0x260F;
			public const char WHITE_TRIANGLE_CONTAINING_SMALL_WHITE_TRIANGLE = (char)0x27C1;
			public const char WHITE_UP_POINTING_INDEX = (char)0x261D;
			/// <summary> Formerly WHITE UP POINTING SMALL TRIANGLE. </summary>
			public const char WHITE_UP_POINTING_SMALL_TRIANGLE = (char)0x25B5;
			/// <summary> Formerly WHITE UP POINTING TRIANGLE. </summary>
			public const char WHITE_UP_POINTING_TRIANGLE = (char)0x25B3;
			/// <summary> Formerly WHITE UP POINTING TRIANGLE WITH DOT. </summary>
			public const char WHITE_UP_POINTING_TRIANGLE_WITH_DOT = (char)0x25EC;
			public const char WHITE_VERTICAL_BAR = (char)0x2AFE;
			public const char WHITE_VERTICAL_RECTANGLE = (char)0x25AF;
			public const char WON_SIGN = (char)0x20A9;
			public const char WORD_JOINER = (char)0x2060;
			public const char WREATH_PRODUCT = (char)0x2240;
			public const char WRITING_HAND = (char)0x270D;
		}
		public class X {
			public const char XOR = (char)0x22BB;
			/// <summary> Formerly CLEAR KEY. </summary>
			public const char X_IN_A_RECTANGLE_BOX = (char)0x2327;
		}
		public class Y {
			public const char YEN_SIGN = (char)0x00A5;
			public const char YIN_YANG = (char)0x262F;
			public const char YI_RADICAL_BBUT = (char)0xA49B;
			public const char YI_RADICAL_BUR = (char)0xA4A5;
			public const char YI_RADICAL_CHE = (char)0xA4C3;
			public const char YI_RADICAL_CIP = (char)0xA4BE;
			public const char YI_RADICAL_CUOP = (char)0xA4BD;
			public const char YI_RADICAL_CY = (char)0xA4BC;
			public const char YI_RADICAL_CYP = (char)0xA494;
			public const char YI_RADICAL_CYT = (char)0xA4A3;
			public const char YI_RADICAL_DDUR = (char)0xA4A4;
			public const char YI_RADICAL_DU = (char)0xA4B9;
			public const char YI_RADICAL_GA = (char)0xA4A1;
			public const char YI_RADICAL_GEP = (char)0xA497;
			public const char YI_RADICAL_GGOP = (char)0xA496;
			public const char YI_RADICAL_GGUO = (char)0xA4A6;
			public const char YI_RADICAL_GOT = (char)0xA4B6;
			public const char YI_RADICAL_HMO = (char)0xA4AD;
			public const char YI_RADICAL_HXIT = (char)0xA499;
			public const char YI_RADICAL_HXOP = (char)0xA4BF;
			public const char YI_RADICAL_HXUO = (char)0xA49F;
			public const char YI_RADICAL_JJIE = (char)0xA4B7;
			public const char YI_RADICAL_JJUT = (char)0xA4AA;
			public const char YI_RADICAL_JJY = (char)0xA4B5;
			public const char YI_RADICAL_JO = (char)0xA4B3;
			public const char YI_RADICAL_KE = (char)0xA4C6;
			public const char YI_RADICAL_KIT = (char)0xA492;
			public const char YI_RADICAL_LI = (char)0xA491;
			public const char YI_RADICAL_LIE = (char)0xA4BB;
			public const char YI_RADICAL_LYR = (char)0xA49A;
			public const char YI_RADICAL_MI = (char)0xA498;
			public const char YI_RADICAL_MOP = (char)0xA49C;
			public const char YI_RADICAL_NBIE = (char)0xA4C5;
			public const char YI_RADICAL_NYIP = (char)0xA493;
			public const char YI_RADICAL_NYOP = (char)0xA4A7;
			public const char YI_RADICAL_NZUP = (char)0xA4B4;
			public const char YI_RADICAL_OP = (char)0xA4A9;
			public const char YI_RADICAL_PUT = (char)0xA49E;
			public const char YI_RADICAL_PYT = (char)0xA4AC;
			public const char YI_RADICAL_QOT = (char)0xA490;
			public const char YI_RADICAL_SHAT = (char)0xA4C0;
			public const char YI_RADICAL_SHOP = (char)0xA4C2;
			public const char YI_RADICAL_SHUR = (char)0xA4BA;
			public const char YI_RADICAL_SHY = (char)0xA4B0;
			public const char YI_RADICAL_SSI = (char)0xA495;
			public const char YI_RADICAL_TAT = (char)0xA4A0;
			public const char YI_RADICAL_TU = (char)0xA4A8;
			public const char YI_RADICAL_VEP = (char)0xA4B1;
			public const char YI_RADICAL_VUR = (char)0xA4AF;
			public const char YI_RADICAL_WO = (char)0xA4B8;
			public const char YI_RADICAL_YIT = (char)0xA4AE;
			public const char YI_RADICAL_YO = (char)0xA49D;
			public const char YI_RADICAL_ZA = (char)0xA4B2;
			public const char YI_RADICAL_ZOT = (char)0xA4AB;
			public const char YI_RADICAL_ZUP = (char)0xA4A2;
			public const char YI_RADICAL_ZUR = (char)0xA4C1;
			public const char YI_RADICAL_ZZIET = (char)0xA4C4;
			public const char YI_SYLLABLE_A = (char)0xA00A;
			public const char YI_SYLLABLE_AP = (char)0xA00B;
			public const char YI_SYLLABLE_AT = (char)0xA008;
			public const char YI_SYLLABLE_AX = (char)0xA009;
			public const char YI_SYLLABLE_BA = (char)0xA020;
			public const char YI_SYLLABLE_BAP = (char)0xA021;
			public const char YI_SYLLABLE_BAT = (char)0xA01E;
			public const char YI_SYLLABLE_BAX = (char)0xA01F;
			public const char YI_SYLLABLE_BBA = (char)0xA060;
			public const char YI_SYLLABLE_BBAP = (char)0xA061;
			public const char YI_SYLLABLE_BBAT = (char)0xA05E;
			public const char YI_SYLLABLE_BBAX = (char)0xA05F;
			public const char YI_SYLLABLE_BBE = (char)0xA06A;
			public const char YI_SYLLABLE_BBEP = (char)0xA06B;
			public const char YI_SYLLABLE_BBEX = (char)0xA069;
			public const char YI_SYLLABLE_BBI = (char)0xA058;
			public const char YI_SYLLABLE_BBIE = (char)0xA05C;
			public const char YI_SYLLABLE_BBIEP = (char)0xA05D;
			public const char YI_SYLLABLE_BBIET = (char)0xA05A;
			public const char YI_SYLLABLE_BBIEX = (char)0xA05B;
			public const char YI_SYLLABLE_BBIP = (char)0xA059;
			public const char YI_SYLLABLE_BBIT = (char)0xA056;
			public const char YI_SYLLABLE_BBIX = (char)0xA057;
			public const char YI_SYLLABLE_BBO = (char)0xA067;
			public const char YI_SYLLABLE_BBOP = (char)0xA068;
			public const char YI_SYLLABLE_BBOT = (char)0xA065;
			public const char YI_SYLLABLE_BBOX = (char)0xA066;
			public const char YI_SYLLABLE_BBU = (char)0xA06E;
			public const char YI_SYLLABLE_BBUO = (char)0xA063;
			public const char YI_SYLLABLE_BBUOP = (char)0xA064;
			public const char YI_SYLLABLE_BBUOX = (char)0xA062;
			public const char YI_SYLLABLE_BBUP = (char)0xA06F;
			public const char YI_SYLLABLE_BBUR = (char)0xA071;
			public const char YI_SYLLABLE_BBURX = (char)0xA070;
			public const char YI_SYLLABLE_BBUT = (char)0xA06C;
			public const char YI_SYLLABLE_BBUX = (char)0xA06D;
			public const char YI_SYLLABLE_BBY = (char)0xA074;
			public const char YI_SYLLABLE_BBYP = (char)0xA075;
			public const char YI_SYLLABLE_BBYT = (char)0xA072;
			public const char YI_SYLLABLE_BBYX = (char)0xA073;
			public const char YI_SYLLABLE_BE = (char)0xA02A;
			public const char YI_SYLLABLE_BEP = (char)0xA02B;
			public const char YI_SYLLABLE_BEX = (char)0xA029;
			public const char YI_SYLLABLE_BI = (char)0xA018;
			public const char YI_SYLLABLE_BIE = (char)0xA01C;
			public const char YI_SYLLABLE_BIEP = (char)0xA01D;
			public const char YI_SYLLABLE_BIET = (char)0xA01A;
			public const char YI_SYLLABLE_BIEX = (char)0xA01B;
			public const char YI_SYLLABLE_BIP = (char)0xA019;
			public const char YI_SYLLABLE_BIT = (char)0xA016;
			public const char YI_SYLLABLE_BIX = (char)0xA017;
			public const char YI_SYLLABLE_BO = (char)0xA027;
			public const char YI_SYLLABLE_BOP = (char)0xA028;
			public const char YI_SYLLABLE_BOT = (char)0xA025;
			public const char YI_SYLLABLE_BOX = (char)0xA026;
			public const char YI_SYLLABLE_BU = (char)0xA02E;
			public const char YI_SYLLABLE_BUO = (char)0xA023;
			public const char YI_SYLLABLE_BUOP = (char)0xA024;
			public const char YI_SYLLABLE_BUOX = (char)0xA022;
			public const char YI_SYLLABLE_BUP = (char)0xA02F;
			public const char YI_SYLLABLE_BUR = (char)0xA031;
			public const char YI_SYLLABLE_BURX = (char)0xA030;
			public const char YI_SYLLABLE_BUT = (char)0xA02C;
			public const char YI_SYLLABLE_BUX = (char)0xA02D;
			public const char YI_SYLLABLE_BY = (char)0xA034;
			public const char YI_SYLLABLE_BYP = (char)0xA035;
			public const char YI_SYLLABLE_BYR = (char)0xA037;
			public const char YI_SYLLABLE_BYRX = (char)0xA036;
			public const char YI_SYLLABLE_BYT = (char)0xA032;
			public const char YI_SYLLABLE_BYX = (char)0xA033;
			public const char YI_SYLLABLE_CA = (char)0xA2B8;
			public const char YI_SYLLABLE_CAP = (char)0xA2B9;
			public const char YI_SYLLABLE_CAT = (char)0xA2B6;
			public const char YI_SYLLABLE_CAX = (char)0xA2B7;
			public const char YI_SYLLABLE_CE = (char)0xA2C2;
			public const char YI_SYLLABLE_CEP = (char)0xA2C3;
			public const char YI_SYLLABLE_CEX = (char)0xA2C1;
			public const char YI_SYLLABLE_CHA = (char)0xA363;
			public const char YI_SYLLABLE_CHAP = (char)0xA364;
			public const char YI_SYLLABLE_CHAT = (char)0xA361;
			public const char YI_SYLLABLE_CHAX = (char)0xA362;
			public const char YI_SYLLABLE_CHE = (char)0xA36F;
			public const char YI_SYLLABLE_CHEP = (char)0xA370;
			public const char YI_SYLLABLE_CHET = (char)0xA36D;
			public const char YI_SYLLABLE_CHEX = (char)0xA36E;
			public const char YI_SYLLABLE_CHO = (char)0xA36B;
			public const char YI_SYLLABLE_CHOP = (char)0xA36C;
			public const char YI_SYLLABLE_CHOT = (char)0xA369;
			public const char YI_SYLLABLE_CHOX = (char)0xA36A;
			public const char YI_SYLLABLE_CHU = (char)0xA372;
			public const char YI_SYLLABLE_CHUO = (char)0xA367;
			public const char YI_SYLLABLE_CHUOP = (char)0xA368;
			public const char YI_SYLLABLE_CHUOT = (char)0xA365;
			public const char YI_SYLLABLE_CHUOX = (char)0xA366;
			public const char YI_SYLLABLE_CHUP = (char)0xA373;
			public const char YI_SYLLABLE_CHUR = (char)0xA375;
			public const char YI_SYLLABLE_CHURX = (char)0xA374;
			public const char YI_SYLLABLE_CHUX = (char)0xA371;
			public const char YI_SYLLABLE_CHY = (char)0xA378;
			public const char YI_SYLLABLE_CHYP = (char)0xA379;
			public const char YI_SYLLABLE_CHYR = (char)0xA37B;
			public const char YI_SYLLABLE_CHYRX = (char)0xA37A;
			public const char YI_SYLLABLE_CHYT = (char)0xA376;
			public const char YI_SYLLABLE_CHYX = (char)0xA377;
			public const char YI_SYLLABLE_CI = (char)0xA2B0;
			public const char YI_SYLLABLE_CIE = (char)0xA2B4;
			public const char YI_SYLLABLE_CIEP = (char)0xA2B5;
			public const char YI_SYLLABLE_CIET = (char)0xA2B2;
			public const char YI_SYLLABLE_CIEX = (char)0xA2B3;
			public const char YI_SYLLABLE_CIP = (char)0xA2B1;
			public const char YI_SYLLABLE_CIT = (char)0xA2AE;
			public const char YI_SYLLABLE_CIX = (char)0xA2AF;
			public const char YI_SYLLABLE_CO = (char)0xA2BF;
			public const char YI_SYLLABLE_COP = (char)0xA2C0;
			public const char YI_SYLLABLE_COT = (char)0xA2BD;
			public const char YI_SYLLABLE_COX = (char)0xA2BE;
			public const char YI_SYLLABLE_CU = (char)0xA2C6;
			public const char YI_SYLLABLE_CUO = (char)0xA2BB;
			public const char YI_SYLLABLE_CUOP = (char)0xA2BC;
			public const char YI_SYLLABLE_CUOX = (char)0xA2BA;
			public const char YI_SYLLABLE_CUP = (char)0xA2C7;
			public const char YI_SYLLABLE_CUR = (char)0xA2C9;
			public const char YI_SYLLABLE_CURX = (char)0xA2C8;
			public const char YI_SYLLABLE_CUT = (char)0xA2C4;
			public const char YI_SYLLABLE_CUX = (char)0xA2C5;
			public const char YI_SYLLABLE_CY = (char)0xA2CC;
			public const char YI_SYLLABLE_CYP = (char)0xA2CD;
			public const char YI_SYLLABLE_CYR = (char)0xA2CF;
			public const char YI_SYLLABLE_CYRX = (char)0xA2CE;
			public const char YI_SYLLABLE_CYT = (char)0xA2CA;
			public const char YI_SYLLABLE_CYX = (char)0xA2CB;
			public const char YI_SYLLABLE_DA = (char)0xA109;
			public const char YI_SYLLABLE_DAP = (char)0xA10A;
			public const char YI_SYLLABLE_DAT = (char)0xA107;
			public const char YI_SYLLABLE_DAX = (char)0xA108;
			public const char YI_SYLLABLE_DDA = (char)0xA13F;
			public const char YI_SYLLABLE_DDAP = (char)0xA140;
			public const char YI_SYLLABLE_DDAT = (char)0xA13D;
			public const char YI_SYLLABLE_DDAX = (char)0xA13E;
			public const char YI_SYLLABLE_DDE = (char)0xA149;
			public const char YI_SYLLABLE_DDEP = (char)0xA14A;
			public const char YI_SYLLABLE_DDEX = (char)0xA148;
			public const char YI_SYLLABLE_DDI = (char)0xA138;
			public const char YI_SYLLABLE_DDIE = (char)0xA13B;
			public const char YI_SYLLABLE_DDIEP = (char)0xA13C;
			public const char YI_SYLLABLE_DDIEX = (char)0xA13A;
			public const char YI_SYLLABLE_DDIP = (char)0xA139;
			public const char YI_SYLLABLE_DDIT = (char)0xA136;
			public const char YI_SYLLABLE_DDIX = (char)0xA137;
			public const char YI_SYLLABLE_DDO = (char)0xA146;
			public const char YI_SYLLABLE_DDOP = (char)0xA147;
			public const char YI_SYLLABLE_DDOT = (char)0xA144;
			public const char YI_SYLLABLE_DDOX = (char)0xA145;
			public const char YI_SYLLABLE_DDU = (char)0xA14D;
			public const char YI_SYLLABLE_DDUO = (char)0xA142;
			public const char YI_SYLLABLE_DDUOP = (char)0xA143;
			public const char YI_SYLLABLE_DDUOX = (char)0xA141;
			public const char YI_SYLLABLE_DDUP = (char)0xA14E;
			public const char YI_SYLLABLE_DDUR = (char)0xA150;
			public const char YI_SYLLABLE_DDURX = (char)0xA14F;
			public const char YI_SYLLABLE_DDUT = (char)0xA14B;
			public const char YI_SYLLABLE_DDUX = (char)0xA14C;
			public const char YI_SYLLABLE_DE = (char)0xA112;
			public const char YI_SYLLABLE_DEP = (char)0xA113;
			public const char YI_SYLLABLE_DEX = (char)0xA111;
			public const char YI_SYLLABLE_DI = (char)0xA102;
			public const char YI_SYLLABLE_DIE = (char)0xA105;
			public const char YI_SYLLABLE_DIEP = (char)0xA106;
			public const char YI_SYLLABLE_DIEX = (char)0xA104;
			public const char YI_SYLLABLE_DIP = (char)0xA103;
			public const char YI_SYLLABLE_DIT = (char)0xA100;
			public const char YI_SYLLABLE_DIX = (char)0xA101;
			public const char YI_SYLLABLE_DO = (char)0xA10F;
			public const char YI_SYLLABLE_DOP = (char)0xA110;
			public const char YI_SYLLABLE_DOT = (char)0xA10D;
			public const char YI_SYLLABLE_DOX = (char)0xA10E;
			public const char YI_SYLLABLE_DU = (char)0xA116;
			public const char YI_SYLLABLE_DUO = (char)0xA10C;
			public const char YI_SYLLABLE_DUOX = (char)0xA10B;
			public const char YI_SYLLABLE_DUP = (char)0xA117;
			public const char YI_SYLLABLE_DUR = (char)0xA119;
			public const char YI_SYLLABLE_DURX = (char)0xA118;
			public const char YI_SYLLABLE_DUT = (char)0xA114;
			public const char YI_SYLLABLE_DUX = (char)0xA115;
			public const char YI_SYLLABLE_E = (char)0xA014;
			public const char YI_SYLLABLE_EX = (char)0xA013;
			public const char YI_SYLLABLE_FA = (char)0xA0D3;
			public const char YI_SYLLABLE_FAP = (char)0xA0D4;
			public const char YI_SYLLABLE_FAT = (char)0xA0D1;
			public const char YI_SYLLABLE_FAX = (char)0xA0D2;
			public const char YI_SYLLABLE_FI = (char)0xA0CF;
			public const char YI_SYLLABLE_FIP = (char)0xA0D0;
			public const char YI_SYLLABLE_FIT = (char)0xA0CD;
			public const char YI_SYLLABLE_FIX = (char)0xA0CE;
			public const char YI_SYLLABLE_FO = (char)0xA0D6;
			public const char YI_SYLLABLE_FOP = (char)0xA0D7;
			public const char YI_SYLLABLE_FOX = (char)0xA0D5;
			public const char YI_SYLLABLE_FU = (char)0xA0DA;
			public const char YI_SYLLABLE_FUP = (char)0xA0DB;
			public const char YI_SYLLABLE_FUR = (char)0xA0DD;
			public const char YI_SYLLABLE_FURX = (char)0xA0DC;
			public const char YI_SYLLABLE_FUT = (char)0xA0D8;
			public const char YI_SYLLABLE_FUX = (char)0xA0D9;
			public const char YI_SYLLABLE_FY = (char)0xA0E0;
			public const char YI_SYLLABLE_FYP = (char)0xA0E1;
			public const char YI_SYLLABLE_FYT = (char)0xA0DE;
			public const char YI_SYLLABLE_FYX = (char)0xA0DF;
			public const char YI_SYLLABLE_GA = (char)0xA1E4;
			public const char YI_SYLLABLE_GAP = (char)0xA1E5;
			public const char YI_SYLLABLE_GAT = (char)0xA1E2;
			public const char YI_SYLLABLE_GAX = (char)0xA1E3;
			public const char YI_SYLLABLE_GE = (char)0xA1F0;
			public const char YI_SYLLABLE_GEP = (char)0xA1F1;
			public const char YI_SYLLABLE_GET = (char)0xA1EE;
			public const char YI_SYLLABLE_GEX = (char)0xA1EF;
			public const char YI_SYLLABLE_GGA = (char)0xA21C;
			public const char YI_SYLLABLE_GGAP = (char)0xA21D;
			public const char YI_SYLLABLE_GGAT = (char)0xA21A;
			public const char YI_SYLLABLE_GGAX = (char)0xA21B;
			public const char YI_SYLLABLE_GGE = (char)0xA228;
			public const char YI_SYLLABLE_GGEP = (char)0xA229;
			public const char YI_SYLLABLE_GGET = (char)0xA226;
			public const char YI_SYLLABLE_GGEX = (char)0xA227;
			public const char YI_SYLLABLE_GGI = (char)0xA216;
			public const char YI_SYLLABLE_GGIE = (char)0xA218;
			public const char YI_SYLLABLE_GGIEP = (char)0xA219;
			public const char YI_SYLLABLE_GGIEX = (char)0xA217;
			public const char YI_SYLLABLE_GGIT = (char)0xA214;
			public const char YI_SYLLABLE_GGIX = (char)0xA215;
			public const char YI_SYLLABLE_GGO = (char)0xA224;
			public const char YI_SYLLABLE_GGOP = (char)0xA225;
			public const char YI_SYLLABLE_GGOT = (char)0xA222;
			public const char YI_SYLLABLE_GGOX = (char)0xA223;
			public const char YI_SYLLABLE_GGU = (char)0xA22C;
			public const char YI_SYLLABLE_GGUO = (char)0xA220;
			public const char YI_SYLLABLE_GGUOP = (char)0xA221;
			public const char YI_SYLLABLE_GGUOT = (char)0xA21E;
			public const char YI_SYLLABLE_GGUOX = (char)0xA21F;
			public const char YI_SYLLABLE_GGUP = (char)0xA22D;
			public const char YI_SYLLABLE_GGUR = (char)0xA22F;
			public const char YI_SYLLABLE_GGURX = (char)0xA22E;
			public const char YI_SYLLABLE_GGUT = (char)0xA22A;
			public const char YI_SYLLABLE_GGUX = (char)0xA22B;
			public const char YI_SYLLABLE_GI = (char)0xA1DC;
			public const char YI_SYLLABLE_GIE = (char)0xA1E0;
			public const char YI_SYLLABLE_GIEP = (char)0xA1E1;
			public const char YI_SYLLABLE_GIET = (char)0xA1DE;
			public const char YI_SYLLABLE_GIEX = (char)0xA1DF;
			public const char YI_SYLLABLE_GIP = (char)0xA1DD;
			public const char YI_SYLLABLE_GIT = (char)0xA1DA;
			public const char YI_SYLLABLE_GIX = (char)0xA1DB;
			public const char YI_SYLLABLE_GO = (char)0xA1EC;
			public const char YI_SYLLABLE_GOP = (char)0xA1ED;
			public const char YI_SYLLABLE_GOT = (char)0xA1EA;
			public const char YI_SYLLABLE_GOX = (char)0xA1EB;
			public const char YI_SYLLABLE_GU = (char)0xA1F4;
			public const char YI_SYLLABLE_GUO = (char)0xA1E8;
			public const char YI_SYLLABLE_GUOP = (char)0xA1E9;
			public const char YI_SYLLABLE_GUOT = (char)0xA1E6;
			public const char YI_SYLLABLE_GUOX = (char)0xA1E7;
			public const char YI_SYLLABLE_GUP = (char)0xA1F5;
			public const char YI_SYLLABLE_GUR = (char)0xA1F7;
			public const char YI_SYLLABLE_GURX = (char)0xA1F6;
			public const char YI_SYLLABLE_GUT = (char)0xA1F2;
			public const char YI_SYLLABLE_GUX = (char)0xA1F3;
			public const char YI_SYLLABLE_HA = (char)0xA273;
			public const char YI_SYLLABLE_HAP = (char)0xA274;
			public const char YI_SYLLABLE_HAT = (char)0xA271;
			public const char YI_SYLLABLE_HAX = (char)0xA272;
			public const char YI_SYLLABLE_HE = (char)0xA27E;
			public const char YI_SYLLABLE_HEP = (char)0xA27F;
			public const char YI_SYLLABLE_HEX = (char)0xA27D;
			public const char YI_SYLLABLE_HIE = (char)0xA270;
			public const char YI_SYLLABLE_HIEX = (char)0xA26F;
			public const char YI_SYLLABLE_HIT = (char)0xA26E;
			public const char YI_SYLLABLE_HLA = (char)0xA1A0;
			public const char YI_SYLLABLE_HLAP = (char)0xA1A1;
			public const char YI_SYLLABLE_HLAT = (char)0xA19E;
			public const char YI_SYLLABLE_HLAX = (char)0xA19F;
			public const char YI_SYLLABLE_HLE = (char)0xA1A9;
			public const char YI_SYLLABLE_HLEP = (char)0xA1AA;
			public const char YI_SYLLABLE_HLEX = (char)0xA1A8;
			public const char YI_SYLLABLE_HLI = (char)0xA199;
			public const char YI_SYLLABLE_HLIE = (char)0xA19C;
			public const char YI_SYLLABLE_HLIEP = (char)0xA19D;
			public const char YI_SYLLABLE_HLIEX = (char)0xA19B;
			public const char YI_SYLLABLE_HLIP = (char)0xA19A;
			public const char YI_SYLLABLE_HLIT = (char)0xA197;
			public const char YI_SYLLABLE_HLIX = (char)0xA198;
			public const char YI_SYLLABLE_HLO = (char)0xA1A6;
			public const char YI_SYLLABLE_HLOP = (char)0xA1A7;
			public const char YI_SYLLABLE_HLOX = (char)0xA1A5;
			public const char YI_SYLLABLE_HLU = (char)0xA1AD;
			public const char YI_SYLLABLE_HLUO = (char)0xA1A3;
			public const char YI_SYLLABLE_HLUOP = (char)0xA1A4;
			public const char YI_SYLLABLE_HLUOX = (char)0xA1A2;
			public const char YI_SYLLABLE_HLUP = (char)0xA1AE;
			public const char YI_SYLLABLE_HLUR = (char)0xA1B0;
			public const char YI_SYLLABLE_HLURX = (char)0xA1AF;
			public const char YI_SYLLABLE_HLUT = (char)0xA1AB;
			public const char YI_SYLLABLE_HLUX = (char)0xA1AC;
			public const char YI_SYLLABLE_HLY = (char)0xA1B3;
			public const char YI_SYLLABLE_HLYP = (char)0xA1B4;
			public const char YI_SYLLABLE_HLYR = (char)0xA1B6;
			public const char YI_SYLLABLE_HLYRX = (char)0xA1B5;
			public const char YI_SYLLABLE_HLYT = (char)0xA1B1;
			public const char YI_SYLLABLE_HLYX = (char)0xA1B2;
			public const char YI_SYLLABLE_HMA = (char)0xA09A;
			public const char YI_SYLLABLE_HMAP = (char)0xA09B;
			public const char YI_SYLLABLE_HMAT = (char)0xA098;
			public const char YI_SYLLABLE_HMAX = (char)0xA099;
			public const char YI_SYLLABLE_HMI = (char)0xA093;
			public const char YI_SYLLABLE_HMIE = (char)0xA096;
			public const char YI_SYLLABLE_HMIEP = (char)0xA097;
			public const char YI_SYLLABLE_HMIEX = (char)0xA095;
			public const char YI_SYLLABLE_HMIP = (char)0xA094;
			public const char YI_SYLLABLE_HMIT = (char)0xA091;
			public const char YI_SYLLABLE_HMIX = (char)0xA092;
			public const char YI_SYLLABLE_HMO = (char)0xA0A1;
			public const char YI_SYLLABLE_HMOP = (char)0xA0A2;
			public const char YI_SYLLABLE_HMOT = (char)0xA09F;
			public const char YI_SYLLABLE_HMOX = (char)0xA0A0;
			public const char YI_SYLLABLE_HMU = (char)0xA0A5;
			public const char YI_SYLLABLE_HMUO = (char)0xA09D;
			public const char YI_SYLLABLE_HMUOP = (char)0xA09E;
			public const char YI_SYLLABLE_HMUOX = (char)0xA09C;
			public const char YI_SYLLABLE_HMUP = (char)0xA0A6;
			public const char YI_SYLLABLE_HMUR = (char)0xA0A8;
			public const char YI_SYLLABLE_HMURX = (char)0xA0A7;
			public const char YI_SYLLABLE_HMUT = (char)0xA0A3;
			public const char YI_SYLLABLE_HMUX = (char)0xA0A4;
			public const char YI_SYLLABLE_HMY = (char)0xA0AA;
			public const char YI_SYLLABLE_HMYP = (char)0xA0AB;
			public const char YI_SYLLABLE_HMYR = (char)0xA0AD;
			public const char YI_SYLLABLE_HMYRX = (char)0xA0AC;
			public const char YI_SYLLABLE_HMYX = (char)0xA0A9;
			public const char YI_SYLLABLE_HNA = (char)0xA172;
			public const char YI_SYLLABLE_HNAP = (char)0xA173;
			public const char YI_SYLLABLE_HNAT = (char)0xA170;
			public const char YI_SYLLABLE_HNAX = (char)0xA171;
			public const char YI_SYLLABLE_HNE = (char)0xA17A;
			public const char YI_SYLLABLE_HNEP = (char)0xA17B;
			public const char YI_SYLLABLE_HNEX = (char)0xA179;
			public const char YI_SYLLABLE_HNI = (char)0xA16A;
			public const char YI_SYLLABLE_HNIE = (char)0xA16E;
			public const char YI_SYLLABLE_HNIEP = (char)0xA16F;
			public const char YI_SYLLABLE_HNIET = (char)0xA16C;
			public const char YI_SYLLABLE_HNIEX = (char)0xA16D;
			public const char YI_SYLLABLE_HNIP = (char)0xA16B;
			public const char YI_SYLLABLE_HNIT = (char)0xA168;
			public const char YI_SYLLABLE_HNIX = (char)0xA169;
			public const char YI_SYLLABLE_HNOP = (char)0xA178;
			public const char YI_SYLLABLE_HNOT = (char)0xA176;
			public const char YI_SYLLABLE_HNOX = (char)0xA177;
			public const char YI_SYLLABLE_HNUO = (char)0xA175;
			public const char YI_SYLLABLE_HNUOX = (char)0xA174;
			public const char YI_SYLLABLE_HNUT = (char)0xA17C;
			public const char YI_SYLLABLE_HO = (char)0xA27B;
			public const char YI_SYLLABLE_HOP = (char)0xA27C;
			public const char YI_SYLLABLE_HOT = (char)0xA279;
			public const char YI_SYLLABLE_HOX = (char)0xA27A;
			public const char YI_SYLLABLE_HUO = (char)0xA277;
			public const char YI_SYLLABLE_HUOP = (char)0xA278;
			public const char YI_SYLLABLE_HUOT = (char)0xA275;
			public const char YI_SYLLABLE_HUOX = (char)0xA276;
			public const char YI_SYLLABLE_HXA = (char)0xA250;
			public const char YI_SYLLABLE_HXAP = (char)0xA251;
			public const char YI_SYLLABLE_HXAT = (char)0xA24E;
			public const char YI_SYLLABLE_HXAX = (char)0xA24F;
			public const char YI_SYLLABLE_HXE = (char)0xA25B;
			public const char YI_SYLLABLE_HXEP = (char)0xA25C;
			public const char YI_SYLLABLE_HXEX = (char)0xA25A;
			public const char YI_SYLLABLE_HXI = (char)0xA248;
			public const char YI_SYLLABLE_HXIE = (char)0xA24C;
			public const char YI_SYLLABLE_HXIEP = (char)0xA24D;
			public const char YI_SYLLABLE_HXIET = (char)0xA24A;
			public const char YI_SYLLABLE_HXIEX = (char)0xA24B;
			public const char YI_SYLLABLE_HXIP = (char)0xA249;
			public const char YI_SYLLABLE_HXIT = (char)0xA246;
			public const char YI_SYLLABLE_HXIX = (char)0xA247;
			public const char YI_SYLLABLE_HXO = (char)0xA258;
			public const char YI_SYLLABLE_HXOP = (char)0xA259;
			public const char YI_SYLLABLE_HXOT = (char)0xA256;
			public const char YI_SYLLABLE_HXOX = (char)0xA257;
			public const char YI_SYLLABLE_HXUO = (char)0xA254;
			public const char YI_SYLLABLE_HXUOP = (char)0xA255;
			public const char YI_SYLLABLE_HXUOT = (char)0xA252;
			public const char YI_SYLLABLE_HXUOX = (char)0xA253;
			public const char YI_SYLLABLE_I = (char)0xA002;
			public const char YI_SYLLABLE_IE = (char)0xA006;
			public const char YI_SYLLABLE_IEP = (char)0xA007;
			public const char YI_SYLLABLE_IET = (char)0xA004;
			public const char YI_SYLLABLE_IEX = (char)0xA005;
			public const char YI_SYLLABLE_IP = (char)0xA003;
			public const char YI_SYLLABLE_IT = (char)0xA000;
			public const char YI_SYLLABLE_IX = (char)0xA001;
			public const char YI_SYLLABLE_JI = (char)0xA3E2;
			public const char YI_SYLLABLE_JIE = (char)0xA3E6;
			public const char YI_SYLLABLE_JIEP = (char)0xA3E7;
			public const char YI_SYLLABLE_JIET = (char)0xA3E4;
			public const char YI_SYLLABLE_JIEX = (char)0xA3E5;
			public const char YI_SYLLABLE_JIP = (char)0xA3E3;
			public const char YI_SYLLABLE_JIT = (char)0xA3E0;
			public const char YI_SYLLABLE_JIX = (char)0xA3E1;
			public const char YI_SYLLABLE_JJI = (char)0xA41A;
			public const char YI_SYLLABLE_JJIE = (char)0xA41E;
			public const char YI_SYLLABLE_JJIEP = (char)0xA41F;
			public const char YI_SYLLABLE_JJIET = (char)0xA41C;
			public const char YI_SYLLABLE_JJIEX = (char)0xA41D;
			public const char YI_SYLLABLE_JJIP = (char)0xA41B;
			public const char YI_SYLLABLE_JJIT = (char)0xA418;
			public const char YI_SYLLABLE_JJIX = (char)0xA419;
			public const char YI_SYLLABLE_JJO = (char)0xA425;
			public const char YI_SYLLABLE_JJOP = (char)0xA426;
			public const char YI_SYLLABLE_JJOT = (char)0xA423;
			public const char YI_SYLLABLE_JJOX = (char)0xA424;
			public const char YI_SYLLABLE_JJU = (char)0xA429;
			public const char YI_SYLLABLE_JJUO = (char)0xA421;
			public const char YI_SYLLABLE_JJUOP = (char)0xA422;
			public const char YI_SYLLABLE_JJUOX = (char)0xA420;
			public const char YI_SYLLABLE_JJUP = (char)0xA42A;
			public const char YI_SYLLABLE_JJUR = (char)0xA42C;
			public const char YI_SYLLABLE_JJURX = (char)0xA42B;
			public const char YI_SYLLABLE_JJUT = (char)0xA427;
			public const char YI_SYLLABLE_JJUX = (char)0xA428;
			public const char YI_SYLLABLE_JJY = (char)0xA42F;
			public const char YI_SYLLABLE_JJYP = (char)0xA430;
			public const char YI_SYLLABLE_JJYT = (char)0xA42D;
			public const char YI_SYLLABLE_JJYX = (char)0xA42E;
			public const char YI_SYLLABLE_JO = (char)0xA3EE;
			public const char YI_SYLLABLE_JOP = (char)0xA3EF;
			public const char YI_SYLLABLE_JOT = (char)0xA3EC;
			public const char YI_SYLLABLE_JOX = (char)0xA3ED;
			public const char YI_SYLLABLE_JU = (char)0xA3F2;
			public const char YI_SYLLABLE_JUO = (char)0xA3EA;
			public const char YI_SYLLABLE_JUOP = (char)0xA3EB;
			public const char YI_SYLLABLE_JUOT = (char)0xA3E8;
			public const char YI_SYLLABLE_JUOX = (char)0xA3E9;
			public const char YI_SYLLABLE_JUP = (char)0xA3F3;
			public const char YI_SYLLABLE_JUR = (char)0xA3F5;
			public const char YI_SYLLABLE_JURX = (char)0xA3F4;
			public const char YI_SYLLABLE_JUT = (char)0xA3F0;
			public const char YI_SYLLABLE_JUX = (char)0xA3F1;
			public const char YI_SYLLABLE_JY = (char)0xA3F8;
			public const char YI_SYLLABLE_JYP = (char)0xA3F9;
			public const char YI_SYLLABLE_JYR = (char)0xA3FB;
			public const char YI_SYLLABLE_JYRX = (char)0xA3FA;
			public const char YI_SYLLABLE_JYT = (char)0xA3F6;
			public const char YI_SYLLABLE_JYX = (char)0xA3F7;
			public const char YI_SYLLABLE_KA = (char)0xA201;
			public const char YI_SYLLABLE_KAP = (char)0xA202;
			public const char YI_SYLLABLE_KAT = (char)0xA1FF;
			public const char YI_SYLLABLE_KAX = (char)0xA200;
			public const char YI_SYLLABLE_KE = (char)0xA20C;
			public const char YI_SYLLABLE_KEP = (char)0xA20D;
			public const char YI_SYLLABLE_KET = (char)0xA20A;
			public const char YI_SYLLABLE_KEX = (char)0xA20B;
			public const char YI_SYLLABLE_KI = (char)0xA1FA;
			public const char YI_SYLLABLE_KIE = (char)0xA1FD;
			public const char YI_SYLLABLE_KIEP = (char)0xA1FE;
			public const char YI_SYLLABLE_KIEX = (char)0xA1FC;
			public const char YI_SYLLABLE_KIP = (char)0xA1FB;
			public const char YI_SYLLABLE_KIT = (char)0xA1F8;
			public const char YI_SYLLABLE_KIX = (char)0xA1F9;
			public const char YI_SYLLABLE_KO = (char)0xA208;
			public const char YI_SYLLABLE_KOP = (char)0xA209;
			public const char YI_SYLLABLE_KOT = (char)0xA206;
			public const char YI_SYLLABLE_KOX = (char)0xA207;
			public const char YI_SYLLABLE_KU = (char)0xA210;
			public const char YI_SYLLABLE_KUO = (char)0xA204;
			public const char YI_SYLLABLE_KUOP = (char)0xA205;
			public const char YI_SYLLABLE_KUOX = (char)0xA203;
			public const char YI_SYLLABLE_KUP = (char)0xA211;
			public const char YI_SYLLABLE_KUR = (char)0xA213;
			public const char YI_SYLLABLE_KURX = (char)0xA212;
			public const char YI_SYLLABLE_KUT = (char)0xA20E;
			public const char YI_SYLLABLE_KUX = (char)0xA20F;
			public const char YI_SYLLABLE_LA = (char)0xA1C1;
			public const char YI_SYLLABLE_LAP = (char)0xA1C2;
			public const char YI_SYLLABLE_LAT = (char)0xA1BF;
			public const char YI_SYLLABLE_LAX = (char)0xA1C0;
			public const char YI_SYLLABLE_LE = (char)0xA1CC;
			public const char YI_SYLLABLE_LEP = (char)0xA1CD;
			public const char YI_SYLLABLE_LEX = (char)0xA1CB;
			public const char YI_SYLLABLE_LI = (char)0xA1B9;
			public const char YI_SYLLABLE_LIE = (char)0xA1BD;
			public const char YI_SYLLABLE_LIEP = (char)0xA1BE;
			public const char YI_SYLLABLE_LIET = (char)0xA1BB;
			public const char YI_SYLLABLE_LIEX = (char)0xA1BC;
			public const char YI_SYLLABLE_LIP = (char)0xA1BA;
			public const char YI_SYLLABLE_LIT = (char)0xA1B7;
			public const char YI_SYLLABLE_LIX = (char)0xA1B8;
			public const char YI_SYLLABLE_LO = (char)0xA1C9;
			public const char YI_SYLLABLE_LOP = (char)0xA1CA;
			public const char YI_SYLLABLE_LOT = (char)0xA1C7;
			public const char YI_SYLLABLE_LOX = (char)0xA1C8;
			public const char YI_SYLLABLE_LU = (char)0xA1D0;
			public const char YI_SYLLABLE_LUO = (char)0xA1C5;
			public const char YI_SYLLABLE_LUOP = (char)0xA1C6;
			public const char YI_SYLLABLE_LUOT = (char)0xA1C3;
			public const char YI_SYLLABLE_LUOX = (char)0xA1C4;
			public const char YI_SYLLABLE_LUP = (char)0xA1D1;
			public const char YI_SYLLABLE_LUR = (char)0xA1D3;
			public const char YI_SYLLABLE_LURX = (char)0xA1D2;
			public const char YI_SYLLABLE_LUT = (char)0xA1CE;
			public const char YI_SYLLABLE_LUX = (char)0xA1CF;
			public const char YI_SYLLABLE_LY = (char)0xA1D6;
			public const char YI_SYLLABLE_LYP = (char)0xA1D7;
			public const char YI_SYLLABLE_LYR = (char)0xA1D9;
			public const char YI_SYLLABLE_LYRX = (char)0xA1D8;
			public const char YI_SYLLABLE_LYT = (char)0xA1D4;
			public const char YI_SYLLABLE_LYX = (char)0xA1D5;
			public const char YI_SYLLABLE_MA = (char)0xA0B7;
			public const char YI_SYLLABLE_MAP = (char)0xA0B8;
			public const char YI_SYLLABLE_MAT = (char)0xA0B5;
			public const char YI_SYLLABLE_MAX = (char)0xA0B6;
			public const char YI_SYLLABLE_ME = (char)0xA0C2;
			public const char YI_SYLLABLE_MEX = (char)0xA0C1;
			public const char YI_SYLLABLE_MGA = (char)0xA234;
			public const char YI_SYLLABLE_MGAP = (char)0xA235;
			public const char YI_SYLLABLE_MGAT = (char)0xA232;
			public const char YI_SYLLABLE_MGAX = (char)0xA233;
			public const char YI_SYLLABLE_MGE = (char)0xA23E;
			public const char YI_SYLLABLE_MGEP = (char)0xA23F;
			public const char YI_SYLLABLE_MGEX = (char)0xA23D;
			public const char YI_SYLLABLE_MGIE = (char)0xA231;
			public const char YI_SYLLABLE_MGIEX = (char)0xA230;
			public const char YI_SYLLABLE_MGO = (char)0xA23B;
			public const char YI_SYLLABLE_MGOP = (char)0xA23C;
			public const char YI_SYLLABLE_MGOT = (char)0xA239;
			public const char YI_SYLLABLE_MGOX = (char)0xA23A;
			public const char YI_SYLLABLE_MGU = (char)0xA242;
			public const char YI_SYLLABLE_MGUO = (char)0xA237;
			public const char YI_SYLLABLE_MGUOP = (char)0xA238;
			public const char YI_SYLLABLE_MGUOX = (char)0xA236;
			public const char YI_SYLLABLE_MGUP = (char)0xA243;
			public const char YI_SYLLABLE_MGUR = (char)0xA245;
			public const char YI_SYLLABLE_MGURX = (char)0xA244;
			public const char YI_SYLLABLE_MGUT = (char)0xA240;
			public const char YI_SYLLABLE_MGUX = (char)0xA241;
			public const char YI_SYLLABLE_MI = (char)0xA0B0;
			public const char YI_SYLLABLE_MIE = (char)0xA0B3;
			public const char YI_SYLLABLE_MIEP = (char)0xA0B4;
			public const char YI_SYLLABLE_MIEX = (char)0xA0B2;
			public const char YI_SYLLABLE_MIP = (char)0xA0B1;
			public const char YI_SYLLABLE_MIT = (char)0xA0AE;
			public const char YI_SYLLABLE_MIX = (char)0xA0AF;
			public const char YI_SYLLABLE_MO = (char)0xA0BF;
			public const char YI_SYLLABLE_MOP = (char)0xA0C0;
			public const char YI_SYLLABLE_MOT = (char)0xA0BD;
			public const char YI_SYLLABLE_MOX = (char)0xA0BE;
			public const char YI_SYLLABLE_MU = (char)0xA0C5;
			public const char YI_SYLLABLE_MUO = (char)0xA0BB;
			public const char YI_SYLLABLE_MUOP = (char)0xA0BC;
			public const char YI_SYLLABLE_MUOT = (char)0xA0B9;
			public const char YI_SYLLABLE_MUOX = (char)0xA0BA;
			public const char YI_SYLLABLE_MUP = (char)0xA0C6;
			public const char YI_SYLLABLE_MUR = (char)0xA0C8;
			public const char YI_SYLLABLE_MURX = (char)0xA0C7;
			public const char YI_SYLLABLE_MUT = (char)0xA0C3;
			public const char YI_SYLLABLE_MUX = (char)0xA0C4;
			public const char YI_SYLLABLE_MY = (char)0xA0CB;
			public const char YI_SYLLABLE_MYP = (char)0xA0CC;
			public const char YI_SYLLABLE_MYT = (char)0xA0C9;
			public const char YI_SYLLABLE_MYX = (char)0xA0CA;
			public const char YI_SYLLABLE_NA = (char)0xA185;
			public const char YI_SYLLABLE_NAP = (char)0xA186;
			public const char YI_SYLLABLE_NAX = (char)0xA184;
			public const char YI_SYLLABLE_NBA = (char)0xA07F;
			public const char YI_SYLLABLE_NBAP = (char)0xA080;
			public const char YI_SYLLABLE_NBAT = (char)0xA07D;
			public const char YI_SYLLABLE_NBAX = (char)0xA07E;
			public const char YI_SYLLABLE_NBI = (char)0xA078;
			public const char YI_SYLLABLE_NBIE = (char)0xA07B;
			public const char YI_SYLLABLE_NBIEP = (char)0xA07C;
			public const char YI_SYLLABLE_NBIEX = (char)0xA07A;
			public const char YI_SYLLABLE_NBIP = (char)0xA079;
			public const char YI_SYLLABLE_NBIT = (char)0xA076;
			public const char YI_SYLLABLE_NBIX = (char)0xA077;
			public const char YI_SYLLABLE_NBO = (char)0xA083;
			public const char YI_SYLLABLE_NBOP = (char)0xA084;
			public const char YI_SYLLABLE_NBOT = (char)0xA081;
			public const char YI_SYLLABLE_NBOX = (char)0xA082;
			public const char YI_SYLLABLE_NBU = (char)0xA087;
			public const char YI_SYLLABLE_NBUP = (char)0xA088;
			public const char YI_SYLLABLE_NBUR = (char)0xA08A;
			public const char YI_SYLLABLE_NBURX = (char)0xA089;
			public const char YI_SYLLABLE_NBUT = (char)0xA085;
			public const char YI_SYLLABLE_NBUX = (char)0xA086;
			public const char YI_SYLLABLE_NBY = (char)0xA08D;
			public const char YI_SYLLABLE_NBYP = (char)0xA08E;
			public const char YI_SYLLABLE_NBYR = (char)0xA090;
			public const char YI_SYLLABLE_NBYRX = (char)0xA08F;
			public const char YI_SYLLABLE_NBYT = (char)0xA08B;
			public const char YI_SYLLABLE_NBYX = (char)0xA08C;
			public const char YI_SYLLABLE_NDA = (char)0xA159;
			public const char YI_SYLLABLE_NDAP = (char)0xA15A;
			public const char YI_SYLLABLE_NDAT = (char)0xA157;
			public const char YI_SYLLABLE_NDAX = (char)0xA158;
			public const char YI_SYLLABLE_NDE = (char)0xA160;
			public const char YI_SYLLABLE_NDEP = (char)0xA161;
			public const char YI_SYLLABLE_NDEX = (char)0xA15F;
			public const char YI_SYLLABLE_NDI = (char)0xA153;
			public const char YI_SYLLABLE_NDIE = (char)0xA156;
			public const char YI_SYLLABLE_NDIEX = (char)0xA155;
			public const char YI_SYLLABLE_NDIP = (char)0xA154;
			public const char YI_SYLLABLE_NDIT = (char)0xA151;
			public const char YI_SYLLABLE_NDIX = (char)0xA152;
			public const char YI_SYLLABLE_NDO = (char)0xA15D;
			public const char YI_SYLLABLE_NDOP = (char)0xA15E;
			public const char YI_SYLLABLE_NDOT = (char)0xA15B;
			public const char YI_SYLLABLE_NDOX = (char)0xA15C;
			public const char YI_SYLLABLE_NDU = (char)0xA164;
			public const char YI_SYLLABLE_NDUP = (char)0xA165;
			public const char YI_SYLLABLE_NDUR = (char)0xA167;
			public const char YI_SYLLABLE_NDURX = (char)0xA166;
			public const char YI_SYLLABLE_NDUT = (char)0xA162;
			public const char YI_SYLLABLE_NDUX = (char)0xA163;
			public const char YI_SYLLABLE_NE = (char)0xA18F;
			public const char YI_SYLLABLE_NEP = (char)0xA190;
			public const char YI_SYLLABLE_NEX = (char)0xA18E;
			public const char YI_SYLLABLE_NGA = (char)0xA262;
			public const char YI_SYLLABLE_NGAP = (char)0xA263;
			public const char YI_SYLLABLE_NGAT = (char)0xA260;
			public const char YI_SYLLABLE_NGAX = (char)0xA261;
			public const char YI_SYLLABLE_NGE = (char)0xA26C;
			public const char YI_SYLLABLE_NGEP = (char)0xA26D;
			public const char YI_SYLLABLE_NGEX = (char)0xA26B;
			public const char YI_SYLLABLE_NGIE = (char)0xA25E;
			public const char YI_SYLLABLE_NGIEP = (char)0xA25F;
			public const char YI_SYLLABLE_NGIEX = (char)0xA25D;
			public const char YI_SYLLABLE_NGO = (char)0xA269;
			public const char YI_SYLLABLE_NGOP = (char)0xA26A;
			public const char YI_SYLLABLE_NGOT = (char)0xA267;
			public const char YI_SYLLABLE_NGOX = (char)0xA268;
			public const char YI_SYLLABLE_NGUO = (char)0xA266;
			public const char YI_SYLLABLE_NGUOT = (char)0xA264;
			public const char YI_SYLLABLE_NGUOX = (char)0xA265;
			public const char YI_SYLLABLE_NI = (char)0xA17F;
			public const char YI_SYLLABLE_NIE = (char)0xA182;
			public const char YI_SYLLABLE_NIEP = (char)0xA183;
			public const char YI_SYLLABLE_NIEX = (char)0xA181;
			public const char YI_SYLLABLE_NIP = (char)0xA180;
			public const char YI_SYLLABLE_NIT = (char)0xA17D;
			public const char YI_SYLLABLE_NIX = (char)0xA17E;
			public const char YI_SYLLABLE_NJI = (char)0xA433;
			public const char YI_SYLLABLE_NJIE = (char)0xA437;
			public const char YI_SYLLABLE_NJIEP = (char)0xA438;
			public const char YI_SYLLABLE_NJIET = (char)0xA435;
			public const char YI_SYLLABLE_NJIEX = (char)0xA436;
			public const char YI_SYLLABLE_NJIP = (char)0xA434;
			public const char YI_SYLLABLE_NJIT = (char)0xA431;
			public const char YI_SYLLABLE_NJIX = (char)0xA432;
			public const char YI_SYLLABLE_NJO = (char)0xA43D;
			public const char YI_SYLLABLE_NJOP = (char)0xA43E;
			public const char YI_SYLLABLE_NJOT = (char)0xA43B;
			public const char YI_SYLLABLE_NJOX = (char)0xA43C;
			public const char YI_SYLLABLE_NJU = (char)0xA440;
			public const char YI_SYLLABLE_NJUO = (char)0xA43A;
			public const char YI_SYLLABLE_NJUOX = (char)0xA439;
			public const char YI_SYLLABLE_NJUP = (char)0xA441;
			public const char YI_SYLLABLE_NJUR = (char)0xA443;
			public const char YI_SYLLABLE_NJURX = (char)0xA442;
			public const char YI_SYLLABLE_NJUX = (char)0xA43F;
			public const char YI_SYLLABLE_NJY = (char)0xA446;
			public const char YI_SYLLABLE_NJYP = (char)0xA447;
			public const char YI_SYLLABLE_NJYR = (char)0xA449;
			public const char YI_SYLLABLE_NJYRX = (char)0xA448;
			public const char YI_SYLLABLE_NJYT = (char)0xA444;
			public const char YI_SYLLABLE_NJYX = (char)0xA445;
			public const char YI_SYLLABLE_NO = (char)0xA18C;
			public const char YI_SYLLABLE_NOP = (char)0xA18D;
			public const char YI_SYLLABLE_NOT = (char)0xA18A;
			public const char YI_SYLLABLE_NOX = (char)0xA18B;
			public const char YI_SYLLABLE_NRA = (char)0xA396;
			public const char YI_SYLLABLE_NRAP = (char)0xA397;
			public const char YI_SYLLABLE_NRAT = (char)0xA394;
			public const char YI_SYLLABLE_NRAX = (char)0xA395;
			public const char YI_SYLLABLE_NRE = (char)0xA39D;
			public const char YI_SYLLABLE_NREP = (char)0xA39E;
			public const char YI_SYLLABLE_NRET = (char)0xA39B;
			public const char YI_SYLLABLE_NREX = (char)0xA39C;
			public const char YI_SYLLABLE_NRO = (char)0xA399;
			public const char YI_SYLLABLE_NROP = (char)0xA39A;
			public const char YI_SYLLABLE_NROX = (char)0xA398;
			public const char YI_SYLLABLE_NRU = (char)0xA3A1;
			public const char YI_SYLLABLE_NRUP = (char)0xA3A2;
			public const char YI_SYLLABLE_NRUR = (char)0xA3A4;
			public const char YI_SYLLABLE_NRURX = (char)0xA3A3;
			public const char YI_SYLLABLE_NRUT = (char)0xA39F;
			public const char YI_SYLLABLE_NRUX = (char)0xA3A0;
			public const char YI_SYLLABLE_NRY = (char)0xA3A7;
			public const char YI_SYLLABLE_NRYP = (char)0xA3A8;
			public const char YI_SYLLABLE_NRYR = (char)0xA3AA;
			public const char YI_SYLLABLE_NRYRX = (char)0xA3A9;
			public const char YI_SYLLABLE_NRYT = (char)0xA3A5;
			public const char YI_SYLLABLE_NRYX = (char)0xA3A6;
			public const char YI_SYLLABLE_NU = (char)0xA193;
			public const char YI_SYLLABLE_NUO = (char)0xA188;
			public const char YI_SYLLABLE_NUOP = (char)0xA189;
			public const char YI_SYLLABLE_NUOX = (char)0xA187;
			public const char YI_SYLLABLE_NUP = (char)0xA194;
			public const char YI_SYLLABLE_NUR = (char)0xA196;
			public const char YI_SYLLABLE_NURX = (char)0xA195;
			public const char YI_SYLLABLE_NUT = (char)0xA191;
			public const char YI_SYLLABLE_NUX = (char)0xA192;
			public const char YI_SYLLABLE_NYI = (char)0xA44C;
			public const char YI_SYLLABLE_NYIE = (char)0xA450;
			public const char YI_SYLLABLE_NYIEP = (char)0xA451;
			public const char YI_SYLLABLE_NYIET = (char)0xA44E;
			public const char YI_SYLLABLE_NYIEX = (char)0xA44F;
			public const char YI_SYLLABLE_NYIP = (char)0xA44D;
			public const char YI_SYLLABLE_NYIT = (char)0xA44A;
			public const char YI_SYLLABLE_NYIX = (char)0xA44B;
			public const char YI_SYLLABLE_NYO = (char)0xA457;
			public const char YI_SYLLABLE_NYOP = (char)0xA458;
			public const char YI_SYLLABLE_NYOT = (char)0xA455;
			public const char YI_SYLLABLE_NYOX = (char)0xA456;
			public const char YI_SYLLABLE_NYU = (char)0xA45B;
			public const char YI_SYLLABLE_NYUO = (char)0xA453;
			public const char YI_SYLLABLE_NYUOP = (char)0xA454;
			public const char YI_SYLLABLE_NYUOX = (char)0xA452;
			public const char YI_SYLLABLE_NYUP = (char)0xA45C;
			public const char YI_SYLLABLE_NYUT = (char)0xA459;
			public const char YI_SYLLABLE_NYUX = (char)0xA45A;
			public const char YI_SYLLABLE_NZA = (char)0xA2F6;
			public const char YI_SYLLABLE_NZAP = (char)0xA2F7;
			public const char YI_SYLLABLE_NZAT = (char)0xA2F4;
			public const char YI_SYLLABLE_NZAX = (char)0xA2F5;
			public const char YI_SYLLABLE_NZE = (char)0xA2FD;
			public const char YI_SYLLABLE_NZEX = (char)0xA2FC;
			public const char YI_SYLLABLE_NZI = (char)0xA2EF;
			public const char YI_SYLLABLE_NZIE = (char)0xA2F2;
			public const char YI_SYLLABLE_NZIEP = (char)0xA2F3;
			public const char YI_SYLLABLE_NZIEX = (char)0xA2F1;
			public const char YI_SYLLABLE_NZIP = (char)0xA2F0;
			public const char YI_SYLLABLE_NZIT = (char)0xA2ED;
			public const char YI_SYLLABLE_NZIX = (char)0xA2EE;
			public const char YI_SYLLABLE_NZOP = (char)0xA2FB;
			public const char YI_SYLLABLE_NZOX = (char)0xA2FA;
			public const char YI_SYLLABLE_NZU = (char)0xA2FF;
			public const char YI_SYLLABLE_NZUO = (char)0xA2F9;
			public const char YI_SYLLABLE_NZUOX = (char)0xA2F8;
			public const char YI_SYLLABLE_NZUP = (char)0xA300;
			public const char YI_SYLLABLE_NZUR = (char)0xA302;
			public const char YI_SYLLABLE_NZURX = (char)0xA301;
			public const char YI_SYLLABLE_NZUX = (char)0xA2FE;
			public const char YI_SYLLABLE_NZY = (char)0xA305;
			public const char YI_SYLLABLE_NZYP = (char)0xA306;
			public const char YI_SYLLABLE_NZYR = (char)0xA308;
			public const char YI_SYLLABLE_NZYRX = (char)0xA307;
			public const char YI_SYLLABLE_NZYT = (char)0xA303;
			public const char YI_SYLLABLE_NZYX = (char)0xA304;
			public const char YI_SYLLABLE_O = (char)0xA011;
			public const char YI_SYLLABLE_OP = (char)0xA012;
			public const char YI_SYLLABLE_OT = (char)0xA00F;
			public const char YI_SYLLABLE_OX = (char)0xA010;
			public const char YI_SYLLABLE_PA = (char)0xA041;
			public const char YI_SYLLABLE_PAP = (char)0xA042;
			public const char YI_SYLLABLE_PAT = (char)0xA03F;
			public const char YI_SYLLABLE_PAX = (char)0xA040;
			public const char YI_SYLLABLE_PI = (char)0xA03A;
			public const char YI_SYLLABLE_PIE = (char)0xA03D;
			public const char YI_SYLLABLE_PIEP = (char)0xA03E;
			public const char YI_SYLLABLE_PIEX = (char)0xA03C;
			public const char YI_SYLLABLE_PIP = (char)0xA03B;
			public const char YI_SYLLABLE_PIT = (char)0xA038;
			public const char YI_SYLLABLE_PIX = (char)0xA039;
			public const char YI_SYLLABLE_PO = (char)0xA048;
			public const char YI_SYLLABLE_POP = (char)0xA049;
			public const char YI_SYLLABLE_POT = (char)0xA046;
			public const char YI_SYLLABLE_POX = (char)0xA047;
			public const char YI_SYLLABLE_PU = (char)0xA04C;
			public const char YI_SYLLABLE_PUO = (char)0xA044;
			public const char YI_SYLLABLE_PUOP = (char)0xA045;
			public const char YI_SYLLABLE_PUOX = (char)0xA043;
			public const char YI_SYLLABLE_PUP = (char)0xA04D;
			public const char YI_SYLLABLE_PUR = (char)0xA04F;
			public const char YI_SYLLABLE_PURX = (char)0xA04E;
			public const char YI_SYLLABLE_PUT = (char)0xA04A;
			public const char YI_SYLLABLE_PUX = (char)0xA04B;
			public const char YI_SYLLABLE_PY = (char)0xA052;
			public const char YI_SYLLABLE_PYP = (char)0xA053;
			public const char YI_SYLLABLE_PYR = (char)0xA055;
			public const char YI_SYLLABLE_PYRX = (char)0xA054;
			public const char YI_SYLLABLE_PYT = (char)0xA050;
			public const char YI_SYLLABLE_PYX = (char)0xA051;
			public const char YI_SYLLABLE_QI = (char)0xA3FE;
			public const char YI_SYLLABLE_QIE = (char)0xA402;
			public const char YI_SYLLABLE_QIEP = (char)0xA403;
			public const char YI_SYLLABLE_QIET = (char)0xA400;
			public const char YI_SYLLABLE_QIEX = (char)0xA401;
			public const char YI_SYLLABLE_QIP = (char)0xA3FF;
			public const char YI_SYLLABLE_QIT = (char)0xA3FC;
			public const char YI_SYLLABLE_QIX = (char)0xA3FD;
			public const char YI_SYLLABLE_QO = (char)0xA40A;
			public const char YI_SYLLABLE_QOP = (char)0xA40B;
			public const char YI_SYLLABLE_QOT = (char)0xA408;
			public const char YI_SYLLABLE_QOX = (char)0xA409;
			public const char YI_SYLLABLE_QU = (char)0xA40E;
			public const char YI_SYLLABLE_QUO = (char)0xA406;
			public const char YI_SYLLABLE_QUOP = (char)0xA407;
			public const char YI_SYLLABLE_QUOT = (char)0xA404;
			public const char YI_SYLLABLE_QUOX = (char)0xA405;
			public const char YI_SYLLABLE_QUP = (char)0xA40F;
			public const char YI_SYLLABLE_QUR = (char)0xA411;
			public const char YI_SYLLABLE_QURX = (char)0xA410;
			public const char YI_SYLLABLE_QUT = (char)0xA40C;
			public const char YI_SYLLABLE_QUX = (char)0xA40D;
			public const char YI_SYLLABLE_QY = (char)0xA414;
			public const char YI_SYLLABLE_QYP = (char)0xA415;
			public const char YI_SYLLABLE_QYR = (char)0xA417;
			public const char YI_SYLLABLE_QYRX = (char)0xA416;
			public const char YI_SYLLABLE_QYT = (char)0xA412;
			public const char YI_SYLLABLE_QYX = (char)0xA413;
			public const char YI_SYLLABLE_RA = (char)0xA3C8;
			public const char YI_SYLLABLE_RAP = (char)0xA3C9;
			public const char YI_SYLLABLE_RAT = (char)0xA3C6;
			public const char YI_SYLLABLE_RAX = (char)0xA3C7;
			public const char YI_SYLLABLE_RE = (char)0xA3D2;
			public const char YI_SYLLABLE_REP = (char)0xA3D3;
			public const char YI_SYLLABLE_REX = (char)0xA3D1;
			public const char YI_SYLLABLE_RO = (char)0xA3CF;
			public const char YI_SYLLABLE_ROP = (char)0xA3D0;
			public const char YI_SYLLABLE_ROT = (char)0xA3CD;
			public const char YI_SYLLABLE_ROX = (char)0xA3CE;
			public const char YI_SYLLABLE_RRA = (char)0xA37D;
			public const char YI_SYLLABLE_RRAX = (char)0xA37C;
			public const char YI_SYLLABLE_RRE = (char)0xA386;
			public const char YI_SYLLABLE_RREP = (char)0xA387;
			public const char YI_SYLLABLE_RRET = (char)0xA384;
			public const char YI_SYLLABLE_RREX = (char)0xA385;
			public const char YI_SYLLABLE_RRO = (char)0xA382;
			public const char YI_SYLLABLE_RROP = (char)0xA383;
			public const char YI_SYLLABLE_RROT = (char)0xA380;
			public const char YI_SYLLABLE_RROX = (char)0xA381;
			public const char YI_SYLLABLE_RRU = (char)0xA38A;
			public const char YI_SYLLABLE_RRUO = (char)0xA37F;
			public const char YI_SYLLABLE_RRUOX = (char)0xA37E;
			public const char YI_SYLLABLE_RRUP = (char)0xA38B;
			public const char YI_SYLLABLE_RRUR = (char)0xA38D;
			public const char YI_SYLLABLE_RRURX = (char)0xA38C;
			public const char YI_SYLLABLE_RRUT = (char)0xA388;
			public const char YI_SYLLABLE_RRUX = (char)0xA389;
			public const char YI_SYLLABLE_RRY = (char)0xA390;
			public const char YI_SYLLABLE_RRYP = (char)0xA391;
			public const char YI_SYLLABLE_RRYR = (char)0xA393;
			public const char YI_SYLLABLE_RRYRX = (char)0xA392;
			public const char YI_SYLLABLE_RRYT = (char)0xA38E;
			public const char YI_SYLLABLE_RRYX = (char)0xA38F;
			public const char YI_SYLLABLE_RU = (char)0xA3D6;
			public const char YI_SYLLABLE_RUO = (char)0xA3CB;
			public const char YI_SYLLABLE_RUOP = (char)0xA3CC;
			public const char YI_SYLLABLE_RUOX = (char)0xA3CA;
			public const char YI_SYLLABLE_RUP = (char)0xA3D7;
			public const char YI_SYLLABLE_RUR = (char)0xA3D9;
			public const char YI_SYLLABLE_RURX = (char)0xA3D8;
			public const char YI_SYLLABLE_RUT = (char)0xA3D4;
			public const char YI_SYLLABLE_RUX = (char)0xA3D5;
			public const char YI_SYLLABLE_RY = (char)0xA3DC;
			public const char YI_SYLLABLE_RYP = (char)0xA3DD;
			public const char YI_SYLLABLE_RYR = (char)0xA3DF;
			public const char YI_SYLLABLE_RYRX = (char)0xA3DE;
			public const char YI_SYLLABLE_RYT = (char)0xA3DA;
			public const char YI_SYLLABLE_RYX = (char)0xA3DB;
			public const char YI_SYLLABLE_SA = (char)0xA312;
			public const char YI_SYLLABLE_SAP = (char)0xA313;
			public const char YI_SYLLABLE_SAT = (char)0xA310;
			public const char YI_SYLLABLE_SAX = (char)0xA311;
			public const char YI_SYLLABLE_SE = (char)0xA31C;
			public const char YI_SYLLABLE_SEP = (char)0xA31D;
			public const char YI_SYLLABLE_SEX = (char)0xA31B;
			public const char YI_SYLLABLE_SHA = (char)0xA3AD;
			public const char YI_SYLLABLE_SHAP = (char)0xA3AE;
			public const char YI_SYLLABLE_SHAT = (char)0xA3AB;
			public const char YI_SYLLABLE_SHAX = (char)0xA3AC;
			public const char YI_SYLLABLE_SHE = (char)0xA3B8;
			public const char YI_SYLLABLE_SHEP = (char)0xA3B9;
			public const char YI_SYLLABLE_SHET = (char)0xA3B6;
			public const char YI_SYLLABLE_SHEX = (char)0xA3B7;
			public const char YI_SYLLABLE_SHO = (char)0xA3B4;
			public const char YI_SYLLABLE_SHOP = (char)0xA3B5;
			public const char YI_SYLLABLE_SHOT = (char)0xA3B2;
			public const char YI_SYLLABLE_SHOX = (char)0xA3B3;
			public const char YI_SYLLABLE_SHU = (char)0xA3BC;
			public const char YI_SYLLABLE_SHUO = (char)0xA3B0;
			public const char YI_SYLLABLE_SHUOP = (char)0xA3B1;
			public const char YI_SYLLABLE_SHUOX = (char)0xA3AF;
			public const char YI_SYLLABLE_SHUP = (char)0xA3BD;
			public const char YI_SYLLABLE_SHUR = (char)0xA3BF;
			public const char YI_SYLLABLE_SHURX = (char)0xA3BE;
			public const char YI_SYLLABLE_SHUT = (char)0xA3BA;
			public const char YI_SYLLABLE_SHUX = (char)0xA3BB;
			public const char YI_SYLLABLE_SHY = (char)0xA3C2;
			public const char YI_SYLLABLE_SHYP = (char)0xA3C3;
			public const char YI_SYLLABLE_SHYR = (char)0xA3C5;
			public const char YI_SYLLABLE_SHYRX = (char)0xA3C4;
			public const char YI_SYLLABLE_SHYT = (char)0xA3C0;
			public const char YI_SYLLABLE_SHYX = (char)0xA3C1;
			public const char YI_SYLLABLE_SI = (char)0xA30B;
			public const char YI_SYLLABLE_SIE = (char)0xA30E;
			public const char YI_SYLLABLE_SIEP = (char)0xA30F;
			public const char YI_SYLLABLE_SIEX = (char)0xA30D;
			public const char YI_SYLLABLE_SIP = (char)0xA30C;
			public const char YI_SYLLABLE_SIT = (char)0xA309;
			public const char YI_SYLLABLE_SIX = (char)0xA30A;
			public const char YI_SYLLABLE_SO = (char)0xA319;
			public const char YI_SYLLABLE_SOP = (char)0xA31A;
			public const char YI_SYLLABLE_SOT = (char)0xA317;
			public const char YI_SYLLABLE_SOX = (char)0xA318;
			public const char YI_SYLLABLE_SSA = (char)0xA333;
			public const char YI_SYLLABLE_SSAP = (char)0xA334;
			public const char YI_SYLLABLE_SSAT = (char)0xA331;
			public const char YI_SYLLABLE_SSAX = (char)0xA332;
			public const char YI_SYLLABLE_SSE = (char)0xA33A;
			public const char YI_SYLLABLE_SSEP = (char)0xA33B;
			public const char YI_SYLLABLE_SSEX = (char)0xA339;
			public const char YI_SYLLABLE_SSI = (char)0xA32C;
			public const char YI_SYLLABLE_SSIE = (char)0xA32F;
			public const char YI_SYLLABLE_SSIEP = (char)0xA330;
			public const char YI_SYLLABLE_SSIEX = (char)0xA32E;
			public const char YI_SYLLABLE_SSIP = (char)0xA32D;
			public const char YI_SYLLABLE_SSIT = (char)0xA32A;
			public const char YI_SYLLABLE_SSIX = (char)0xA32B;
			public const char YI_SYLLABLE_SSO = (char)0xA337;
			public const char YI_SYLLABLE_SSOP = (char)0xA338;
			public const char YI_SYLLABLE_SSOT = (char)0xA335;
			public const char YI_SYLLABLE_SSOX = (char)0xA336;
			public const char YI_SYLLABLE_SSU = (char)0xA33E;
			public const char YI_SYLLABLE_SSUP = (char)0xA33F;
			public const char YI_SYLLABLE_SSUT = (char)0xA33C;
			public const char YI_SYLLABLE_SSUX = (char)0xA33D;
			public const char YI_SYLLABLE_SSY = (char)0xA342;
			public const char YI_SYLLABLE_SSYP = (char)0xA343;
			public const char YI_SYLLABLE_SSYR = (char)0xA345;
			public const char YI_SYLLABLE_SSYRX = (char)0xA344;
			public const char YI_SYLLABLE_SSYT = (char)0xA340;
			public const char YI_SYLLABLE_SSYX = (char)0xA341;
			public const char YI_SYLLABLE_SU = (char)0xA320;
			public const char YI_SYLLABLE_SUO = (char)0xA315;
			public const char YI_SYLLABLE_SUOP = (char)0xA316;
			public const char YI_SYLLABLE_SUOX = (char)0xA314;
			public const char YI_SYLLABLE_SUP = (char)0xA321;
			public const char YI_SYLLABLE_SUR = (char)0xA323;
			public const char YI_SYLLABLE_SURX = (char)0xA322;
			public const char YI_SYLLABLE_SUT = (char)0xA31E;
			public const char YI_SYLLABLE_SUX = (char)0xA31F;
			public const char YI_SYLLABLE_SY = (char)0xA326;
			public const char YI_SYLLABLE_SYP = (char)0xA327;
			public const char YI_SYLLABLE_SYR = (char)0xA329;
			public const char YI_SYLLABLE_SYRX = (char)0xA328;
			public const char YI_SYLLABLE_SYT = (char)0xA324;
			public const char YI_SYLLABLE_SYX = (char)0xA325;
			public const char YI_SYLLABLE_TA = (char)0xA123;
			public const char YI_SYLLABLE_TAP = (char)0xA124;
			public const char YI_SYLLABLE_TAT = (char)0xA121;
			public const char YI_SYLLABLE_TAX = (char)0xA122;
			public const char YI_SYLLABLE_TE = (char)0xA12E;
			public const char YI_SYLLABLE_TEP = (char)0xA12F;
			public const char YI_SYLLABLE_TEX = (char)0xA12D;
			public const char YI_SYLLABLE_TI = (char)0xA11C;
			public const char YI_SYLLABLE_TIE = (char)0xA11F;
			public const char YI_SYLLABLE_TIEP = (char)0xA120;
			public const char YI_SYLLABLE_TIEX = (char)0xA11E;
			public const char YI_SYLLABLE_TIP = (char)0xA11D;
			public const char YI_SYLLABLE_TIT = (char)0xA11A;
			public const char YI_SYLLABLE_TIX = (char)0xA11B;
			public const char YI_SYLLABLE_TO = (char)0xA12B;
			public const char YI_SYLLABLE_TOP = (char)0xA12C;
			public const char YI_SYLLABLE_TOT = (char)0xA129;
			public const char YI_SYLLABLE_TOX = (char)0xA12A;
			public const char YI_SYLLABLE_TU = (char)0xA132;
			public const char YI_SYLLABLE_TUO = (char)0xA127;
			public const char YI_SYLLABLE_TUOP = (char)0xA128;
			public const char YI_SYLLABLE_TUOT = (char)0xA125;
			public const char YI_SYLLABLE_TUOX = (char)0xA126;
			public const char YI_SYLLABLE_TUP = (char)0xA133;
			public const char YI_SYLLABLE_TUR = (char)0xA135;
			public const char YI_SYLLABLE_TURX = (char)0xA134;
			public const char YI_SYLLABLE_TUT = (char)0xA130;
			public const char YI_SYLLABLE_TUX = (char)0xA131;
			public const char YI_SYLLABLE_UO = (char)0xA00D;
			public const char YI_SYLLABLE_UOP = (char)0xA00E;
			public const char YI_SYLLABLE_UOX = (char)0xA00C;
			public const char YI_SYLLABLE_VA = (char)0xA0EC;
			public const char YI_SYLLABLE_VAP = (char)0xA0ED;
			public const char YI_SYLLABLE_VAT = (char)0xA0EA;
			public const char YI_SYLLABLE_VAX = (char)0xA0EB;
			public const char YI_SYLLABLE_VEP = (char)0xA0F3;
			public const char YI_SYLLABLE_VEX = (char)0xA0F2;
			public const char YI_SYLLABLE_VI = (char)0xA0E4;
			public const char YI_SYLLABLE_VIE = (char)0xA0E8;
			public const char YI_SYLLABLE_VIEP = (char)0xA0E9;
			public const char YI_SYLLABLE_VIET = (char)0xA0E6;
			public const char YI_SYLLABLE_VIEX = (char)0xA0E7;
			public const char YI_SYLLABLE_VIP = (char)0xA0E5;
			public const char YI_SYLLABLE_VIT = (char)0xA0E2;
			public const char YI_SYLLABLE_VIX = (char)0xA0E3;
			public const char YI_SYLLABLE_VO = (char)0xA0F0;
			public const char YI_SYLLABLE_VOP = (char)0xA0F1;
			public const char YI_SYLLABLE_VOT = (char)0xA0EE;
			public const char YI_SYLLABLE_VOX = (char)0xA0EF;
			public const char YI_SYLLABLE_VU = (char)0xA0F6;
			public const char YI_SYLLABLE_VUP = (char)0xA0F7;
			public const char YI_SYLLABLE_VUR = (char)0xA0F9;
			public const char YI_SYLLABLE_VURX = (char)0xA0F8;
			public const char YI_SYLLABLE_VUT = (char)0xA0F4;
			public const char YI_SYLLABLE_VUX = (char)0xA0F5;
			public const char YI_SYLLABLE_VY = (char)0xA0FC;
			public const char YI_SYLLABLE_VYP = (char)0xA0FD;
			public const char YI_SYLLABLE_VYR = (char)0xA0FF;
			public const char YI_SYLLABLE_VYRX = (char)0xA0FE;
			public const char YI_SYLLABLE_VYT = (char)0xA0FA;
			public const char YI_SYLLABLE_VYX = (char)0xA0FB;
			public const char YI_SYLLABLE_WA = (char)0xA282;
			public const char YI_SYLLABLE_WAP = (char)0xA283;
			public const char YI_SYLLABLE_WAT = (char)0xA280;
			public const char YI_SYLLABLE_WAX = (char)0xA281;
			public const char YI_SYLLABLE_WE = (char)0xA28B;
			public const char YI_SYLLABLE_WEP = (char)0xA28C;
			public const char YI_SYLLABLE_WEX = (char)0xA28A;
			public const char YI_SYLLABLE_WO = (char)0xA288;
			public const char YI_SYLLABLE_WOP = (char)0xA289;
			public const char YI_SYLLABLE_WOX = (char)0xA287;
			public const char YI_SYLLABLE_WU = (char)0xA015;
			public const char YI_SYLLABLE_WUO = (char)0xA285;
			public const char YI_SYLLABLE_WUOP = (char)0xA286;
			public const char YI_SYLLABLE_WUOX = (char)0xA284;
			public const char YI_SYLLABLE_XI = (char)0xA45F;
			public const char YI_SYLLABLE_XIE = (char)0xA463;
			public const char YI_SYLLABLE_XIEP = (char)0xA464;
			public const char YI_SYLLABLE_XIET = (char)0xA461;
			public const char YI_SYLLABLE_XIEX = (char)0xA462;
			public const char YI_SYLLABLE_XIP = (char)0xA460;
			public const char YI_SYLLABLE_XIT = (char)0xA45D;
			public const char YI_SYLLABLE_XIX = (char)0xA45E;
			public const char YI_SYLLABLE_XO = (char)0xA469;
			public const char YI_SYLLABLE_XOP = (char)0xA46A;
			public const char YI_SYLLABLE_XOT = (char)0xA467;
			public const char YI_SYLLABLE_XOX = (char)0xA468;
			public const char YI_SYLLABLE_XUO = (char)0xA466;
			public const char YI_SYLLABLE_XUOX = (char)0xA465;
			public const char YI_SYLLABLE_XY = (char)0xA46D;
			public const char YI_SYLLABLE_XYP = (char)0xA46E;
			public const char YI_SYLLABLE_XYR = (char)0xA470;
			public const char YI_SYLLABLE_XYRX = (char)0xA46F;
			public const char YI_SYLLABLE_XYT = (char)0xA46B;
			public const char YI_SYLLABLE_XYX = (char)0xA46C;
			public const char YI_SYLLABLE_YI = (char)0xA473;
			public const char YI_SYLLABLE_YIE = (char)0xA477;
			public const char YI_SYLLABLE_YIEP = (char)0xA478;
			public const char YI_SYLLABLE_YIET = (char)0xA475;
			public const char YI_SYLLABLE_YIEX = (char)0xA476;
			public const char YI_SYLLABLE_YIP = (char)0xA474;
			public const char YI_SYLLABLE_YIT = (char)0xA471;
			public const char YI_SYLLABLE_YIX = (char)0xA472;
			public const char YI_SYLLABLE_YO = (char)0xA47F;
			public const char YI_SYLLABLE_YOP = (char)0xA480;
			public const char YI_SYLLABLE_YOT = (char)0xA47D;
			public const char YI_SYLLABLE_YOX = (char)0xA47E;
			public const char YI_SYLLABLE_YU = (char)0xA483;
			public const char YI_SYLLABLE_YUO = (char)0xA47B;
			public const char YI_SYLLABLE_YUOP = (char)0xA47C;
			public const char YI_SYLLABLE_YUOT = (char)0xA479;
			public const char YI_SYLLABLE_YUOX = (char)0xA47A;
			public const char YI_SYLLABLE_YUP = (char)0xA484;
			public const char YI_SYLLABLE_YUR = (char)0xA486;
			public const char YI_SYLLABLE_YURX = (char)0xA485;
			public const char YI_SYLLABLE_YUT = (char)0xA481;
			public const char YI_SYLLABLE_YUX = (char)0xA482;
			public const char YI_SYLLABLE_YY = (char)0xA489;
			public const char YI_SYLLABLE_YYP = (char)0xA48A;
			public const char YI_SYLLABLE_YYR = (char)0xA48C;
			public const char YI_SYLLABLE_YYRX = (char)0xA48B;
			public const char YI_SYLLABLE_YYT = (char)0xA487;
			public const char YI_SYLLABLE_YYX = (char)0xA488;
			public const char YI_SYLLABLE_ZA = (char)0xA296;
			public const char YI_SYLLABLE_ZAP = (char)0xA297;
			public const char YI_SYLLABLE_ZAT = (char)0xA294;
			public const char YI_SYLLABLE_ZAX = (char)0xA295;
			public const char YI_SYLLABLE_ZE = (char)0xA2A0;
			public const char YI_SYLLABLE_ZEP = (char)0xA2A1;
			public const char YI_SYLLABLE_ZEX = (char)0xA29F;
			public const char YI_SYLLABLE_ZHA = (char)0xA348;
			public const char YI_SYLLABLE_ZHAP = (char)0xA349;
			public const char YI_SYLLABLE_ZHAT = (char)0xA346;
			public const char YI_SYLLABLE_ZHAX = (char)0xA347;
			public const char YI_SYLLABLE_ZHE = (char)0xA353;
			public const char YI_SYLLABLE_ZHEP = (char)0xA354;
			public const char YI_SYLLABLE_ZHET = (char)0xA351;
			public const char YI_SYLLABLE_ZHEX = (char)0xA352;
			public const char YI_SYLLABLE_ZHO = (char)0xA34F;
			public const char YI_SYLLABLE_ZHOP = (char)0xA350;
			public const char YI_SYLLABLE_ZHOT = (char)0xA34D;
			public const char YI_SYLLABLE_ZHOX = (char)0xA34E;
			public const char YI_SYLLABLE_ZHU = (char)0xA357;
			public const char YI_SYLLABLE_ZHUO = (char)0xA34B;
			public const char YI_SYLLABLE_ZHUOP = (char)0xA34C;
			public const char YI_SYLLABLE_ZHUOX = (char)0xA34A;
			public const char YI_SYLLABLE_ZHUP = (char)0xA358;
			public const char YI_SYLLABLE_ZHUR = (char)0xA35A;
			public const char YI_SYLLABLE_ZHURX = (char)0xA359;
			public const char YI_SYLLABLE_ZHUT = (char)0xA355;
			public const char YI_SYLLABLE_ZHUX = (char)0xA356;
			public const char YI_SYLLABLE_ZHY = (char)0xA35D;
			public const char YI_SYLLABLE_ZHYP = (char)0xA35E;
			public const char YI_SYLLABLE_ZHYR = (char)0xA360;
			public const char YI_SYLLABLE_ZHYRX = (char)0xA35F;
			public const char YI_SYLLABLE_ZHYT = (char)0xA35B;
			public const char YI_SYLLABLE_ZHYX = (char)0xA35C;
			public const char YI_SYLLABLE_ZI = (char)0xA28F;
			public const char YI_SYLLABLE_ZIE = (char)0xA292;
			public const char YI_SYLLABLE_ZIEP = (char)0xA293;
			public const char YI_SYLLABLE_ZIEX = (char)0xA291;
			public const char YI_SYLLABLE_ZIP = (char)0xA290;
			public const char YI_SYLLABLE_ZIT = (char)0xA28D;
			public const char YI_SYLLABLE_ZIX = (char)0xA28E;
			public const char YI_SYLLABLE_ZO = (char)0xA29D;
			public const char YI_SYLLABLE_ZOP = (char)0xA29E;
			public const char YI_SYLLABLE_ZOT = (char)0xA29B;
			public const char YI_SYLLABLE_ZOX = (char)0xA29C;
			public const char YI_SYLLABLE_ZU = (char)0xA2A4;
			public const char YI_SYLLABLE_ZUO = (char)0xA299;
			public const char YI_SYLLABLE_ZUOP = (char)0xA29A;
			public const char YI_SYLLABLE_ZUOX = (char)0xA298;
			public const char YI_SYLLABLE_ZUP = (char)0xA2A5;
			public const char YI_SYLLABLE_ZUR = (char)0xA2A7;
			public const char YI_SYLLABLE_ZURX = (char)0xA2A6;
			public const char YI_SYLLABLE_ZUT = (char)0xA2A2;
			public const char YI_SYLLABLE_ZUX = (char)0xA2A3;
			public const char YI_SYLLABLE_ZY = (char)0xA2AA;
			public const char YI_SYLLABLE_ZYP = (char)0xA2AB;
			public const char YI_SYLLABLE_ZYR = (char)0xA2AD;
			public const char YI_SYLLABLE_ZYRX = (char)0xA2AC;
			public const char YI_SYLLABLE_ZYT = (char)0xA2A8;
			public const char YI_SYLLABLE_ZYX = (char)0xA2A9;
			public const char YI_SYLLABLE_ZZA = (char)0xA2DA;
			public const char YI_SYLLABLE_ZZAP = (char)0xA2DB;
			public const char YI_SYLLABLE_ZZAT = (char)0xA2D8;
			public const char YI_SYLLABLE_ZZAX = (char)0xA2D9;
			public const char YI_SYLLABLE_ZZE = (char)0xA2E0;
			public const char YI_SYLLABLE_ZZEP = (char)0xA2E1;
			public const char YI_SYLLABLE_ZZEX = (char)0xA2DF;
			public const char YI_SYLLABLE_ZZI = (char)0xA2D2;
			public const char YI_SYLLABLE_ZZIE = (char)0xA2D6;
			public const char YI_SYLLABLE_ZZIEP = (char)0xA2D7;
			public const char YI_SYLLABLE_ZZIET = (char)0xA2D4;
			public const char YI_SYLLABLE_ZZIEX = (char)0xA2D5;
			public const char YI_SYLLABLE_ZZIP = (char)0xA2D3;
			public const char YI_SYLLABLE_ZZIT = (char)0xA2D0;
			public const char YI_SYLLABLE_ZZIX = (char)0xA2D1;
			public const char YI_SYLLABLE_ZZO = (char)0xA2DD;
			public const char YI_SYLLABLE_ZZOP = (char)0xA2DE;
			public const char YI_SYLLABLE_ZZOX = (char)0xA2DC;
			public const char YI_SYLLABLE_ZZU = (char)0xA2E3;
			public const char YI_SYLLABLE_ZZUP = (char)0xA2E4;
			public const char YI_SYLLABLE_ZZUR = (char)0xA2E6;
			public const char YI_SYLLABLE_ZZURX = (char)0xA2E5;
			public const char YI_SYLLABLE_ZZUX = (char)0xA2E2;
			public const char YI_SYLLABLE_ZZY = (char)0xA2E9;
			public const char YI_SYLLABLE_ZZYP = (char)0xA2EA;
			public const char YI_SYLLABLE_ZZYR = (char)0xA2EC;
			public const char YI_SYLLABLE_ZZYRX = (char)0xA2EB;
			public const char YI_SYLLABLE_ZZYT = (char)0xA2E7;
			public const char YI_SYLLABLE_ZZYX = (char)0xA2E8;
		}
		public class Z {
			public const char ZERO_WIDTH_JOINER = (char)0x200D;
			public const char ZERO_WIDTH_NON_JOINER = (char)0x200C;
			/// <summary> Formerly BYTE ORDER MARK. </summary>
			public const char ZERO_WIDTH_NO_BREAK_SPACE = (char)0xFEFF;
			public const char ZERO_WIDTH_SPACE = (char)0x200B;
			public const char Z_NOTATION_BAG_MEMBERSHIP = (char)0x22FF;
			public const char Z_NOTATION_DOMAIN_ANTIRESTRICTION = (char)0x2A64;
			public const char Z_NOTATION_LEFT_BINDING_BRACKET = (char)0x2989;
			public const char Z_NOTATION_LEFT_IMAGE_BRACKET = (char)0x2987;
			public const char Z_NOTATION_RANGE_ANTIRESTRICTION = (char)0x2A65;
			public const char Z_NOTATION_RELATIONAL_COMPOSITION = (char)0x2A3E;
			public const char Z_NOTATION_RIGHT_BINDING_BRACKET = (char)0x298A;
			public const char Z_NOTATION_RIGHT_IMAGE_BRACKET = (char)0x2988;
			public const char Z_NOTATION_SCHEMA_COMPOSITION = (char)0x2A1F;
			public const char Z_NOTATION_SCHEMA_PIPING = (char)0x2A20;
			public const char Z_NOTATION_SCHEMA_PROJECTION = (char)0x2A21;
			public const char Z_NOTATION_SPOT = (char)0x2981;
			public const char Z_NOTATION_TYPE_COLON = (char)0x2982;
		}

		private static Dictionary<char,string> _charNames;
		static Unicode() {
			_charNames = new Dictionary<char,string>();
			_charNames[(char)0x0020] = "space";
			_charNames[(char)0x0021] = "exclamation mark";
			_charNames[(char)0x0022] = "quotation mark";
			_charNames[(char)0x0023] = "number sign";
			_charNames[(char)0x0024] = "dollar sign";
			_charNames[(char)0x0025] = "percent sign";
			_charNames[(char)0x0026] = "ampersand";
			_charNames[(char)0x0027] = "apostrophe";
			_charNames[(char)0x0028] = "left parenthesis";
			_charNames[(char)0x0029] = "right parenthesis";
			_charNames[(char)0x002A] = "asterisk";
			_charNames[(char)0x002B] = "plus sign";
			_charNames[(char)0x002C] = "comma";
			_charNames[(char)0x002D] = "hyphen-minus";
			_charNames[(char)0x002E] = "full stop";
			_charNames[(char)0x002F] = "solidus";
			_charNames[(char)0x0030] = "digit zero";
			_charNames[(char)0x0031] = "digit one";
			_charNames[(char)0x0032] = "digit two";
			_charNames[(char)0x0033] = "digit three";
			_charNames[(char)0x0034] = "digit four";
			_charNames[(char)0x0035] = "digit five";
			_charNames[(char)0x0036] = "digit six";
			_charNames[(char)0x0037] = "digit seven";
			_charNames[(char)0x0038] = "digit eight";
			_charNames[(char)0x0039] = "digit nine";
			_charNames[(char)0x003A] = "colon";
			_charNames[(char)0x003B] = "semicolon";
			_charNames[(char)0x003C] = "less-than sign";
			_charNames[(char)0x003D] = "equals sign";
			_charNames[(char)0x003E] = "greater-than sign";
			_charNames[(char)0x003F] = "question mark";
			_charNames[(char)0x0040] = "commercial at";
			_charNames[(char)0x0041] = "latin capital letter a";
			_charNames[(char)0x0042] = "latin capital letter b";
			_charNames[(char)0x0043] = "latin capital letter c";
			_charNames[(char)0x0044] = "latin capital letter d";
			_charNames[(char)0x0045] = "latin capital letter e";
			_charNames[(char)0x0046] = "latin capital letter f";
			_charNames[(char)0x0047] = "latin capital letter g";
			_charNames[(char)0x0048] = "latin capital letter h";
			_charNames[(char)0x0049] = "latin capital letter i";
			_charNames[(char)0x004A] = "latin capital letter j";
			_charNames[(char)0x004B] = "latin capital letter k";
			_charNames[(char)0x004C] = "latin capital letter l";
			_charNames[(char)0x004D] = "latin capital letter m";
			_charNames[(char)0x004E] = "latin capital letter n";
			_charNames[(char)0x004F] = "latin capital letter o";
			_charNames[(char)0x0050] = "latin capital letter p";
			_charNames[(char)0x0051] = "latin capital letter q";
			_charNames[(char)0x0052] = "latin capital letter r";
			_charNames[(char)0x0053] = "latin capital letter s";
			_charNames[(char)0x0054] = "latin capital letter t";
			_charNames[(char)0x0055] = "latin capital letter u";
			_charNames[(char)0x0056] = "latin capital letter v";
			_charNames[(char)0x0057] = "latin capital letter w";
			_charNames[(char)0x0058] = "latin capital letter x";
			_charNames[(char)0x0059] = "latin capital letter y";
			_charNames[(char)0x005A] = "latin capital letter z";
			_charNames[(char)0x005B] = "left square bracket";
			_charNames[(char)0x005C] = "reverse solidus";
			_charNames[(char)0x005D] = "right square bracket";
			_charNames[(char)0x005E] = "circumflex accent";
			_charNames[(char)0x005F] = "low line";
			_charNames[(char)0x0060] = "grave accent";
			_charNames[(char)0x0061] = "latin small letter a";
			_charNames[(char)0x0062] = "latin small letter b";
			_charNames[(char)0x0063] = "latin small letter c";
			_charNames[(char)0x0064] = "latin small letter d";
			_charNames[(char)0x0065] = "latin small letter e";
			_charNames[(char)0x0066] = "latin small letter f";
			_charNames[(char)0x0067] = "latin small letter g";
			_charNames[(char)0x0068] = "latin small letter h";
			_charNames[(char)0x0069] = "latin small letter i";
			_charNames[(char)0x006A] = "latin small letter j";
			_charNames[(char)0x006B] = "latin small letter k";
			_charNames[(char)0x006C] = "latin small letter l";
			_charNames[(char)0x006D] = "latin small letter m";
			_charNames[(char)0x006E] = "latin small letter n";
			_charNames[(char)0x006F] = "latin small letter o";
			_charNames[(char)0x0070] = "latin small letter p";
			_charNames[(char)0x0071] = "latin small letter q";
			_charNames[(char)0x0072] = "latin small letter r";
			_charNames[(char)0x0073] = "latin small letter s";
			_charNames[(char)0x0074] = "latin small letter t";
			_charNames[(char)0x0075] = "latin small letter u";
			_charNames[(char)0x0076] = "latin small letter v";
			_charNames[(char)0x0077] = "latin small letter w";
			_charNames[(char)0x0078] = "latin small letter x";
			_charNames[(char)0x0079] = "latin small letter y";
			_charNames[(char)0x007A] = "latin small letter z";
			_charNames[(char)0x007B] = "left curly bracket";
			_charNames[(char)0x007C] = "vertical line";
			_charNames[(char)0x007D] = "right curly bracket";
			_charNames[(char)0x007E] = "tilde";
			_charNames[(char)0x00A0] = "no-break space";
			_charNames[(char)0x00A1] = "inverted exclamation mark";
			_charNames[(char)0x00A2] = "cent sign";
			_charNames[(char)0x00A3] = "pound sign";
			_charNames[(char)0x00A4] = "currency sign";
			_charNames[(char)0x00A5] = "yen sign";
			_charNames[(char)0x00A6] = "broken bar";
			_charNames[(char)0x00A7] = "section sign";
			_charNames[(char)0x00A8] = "diaeresis";
			_charNames[(char)0x00A9] = "copyright sign";
			_charNames[(char)0x00AA] = "feminine ordinal indicator";
			_charNames[(char)0x00AB] = "left-pointing double angle quotation mark";
			_charNames[(char)0x00AC] = "not sign";
			_charNames[(char)0x00AD] = "soft hyphen";
			_charNames[(char)0x00AE] = "registered sign";
			_charNames[(char)0x00AF] = "macron";
			_charNames[(char)0x00B0] = "degree sign";
			_charNames[(char)0x00B1] = "plus-minus sign";
			_charNames[(char)0x00B2] = "superscript two";
			_charNames[(char)0x00B3] = "superscript three";
			_charNames[(char)0x00B4] = "acute accent";
			_charNames[(char)0x00B5] = "micro sign";
			_charNames[(char)0x00B6] = "pilcrow sign";
			_charNames[(char)0x00B7] = "middle dot";
			_charNames[(char)0x00B8] = "cedilla";
			_charNames[(char)0x00B9] = "superscript one";
			_charNames[(char)0x00BA] = "masculine ordinal indicator";
			_charNames[(char)0x00BB] = "right-pointing double angle quotation mark";
			_charNames[(char)0x00BC] = "vulgar fraction one quarter";
			_charNames[(char)0x00BD] = "vulgar fraction one half";
			_charNames[(char)0x00BE] = "vulgar fraction three quarters";
			_charNames[(char)0x00BF] = "inverted question mark";
			_charNames[(char)0x00C0] = "latin capital letter a with grave";
			_charNames[(char)0x00C1] = "latin capital letter a with acute";
			_charNames[(char)0x00C2] = "latin capital letter a with circumflex";
			_charNames[(char)0x00C3] = "latin capital letter a with tilde";
			_charNames[(char)0x00C4] = "latin capital letter a with diaeresis";
			_charNames[(char)0x00C5] = "latin capital letter a with ring above";
			_charNames[(char)0x00C6] = "latin capital letter ae";
			_charNames[(char)0x00C7] = "latin capital letter c with cedilla";
			_charNames[(char)0x00C8] = "latin capital letter e with grave";
			_charNames[(char)0x00C9] = "latin capital letter e with acute";
			_charNames[(char)0x00CA] = "latin capital letter e with circumflex";
			_charNames[(char)0x00CB] = "latin capital letter e with diaeresis";
			_charNames[(char)0x00CC] = "latin capital letter i with grave";
			_charNames[(char)0x00CD] = "latin capital letter i with acute";
			_charNames[(char)0x00CE] = "latin capital letter i with circumflex";
			_charNames[(char)0x00CF] = "latin capital letter i with diaeresis";
			_charNames[(char)0x00D0] = "latin capital letter eth";
			_charNames[(char)0x00D1] = "latin capital letter n with tilde";
			_charNames[(char)0x00D2] = "latin capital letter o with grave";
			_charNames[(char)0x00D3] = "latin capital letter o with acute";
			_charNames[(char)0x00D4] = "latin capital letter o with circumflex";
			_charNames[(char)0x00D5] = "latin capital letter o with tilde";
			_charNames[(char)0x00D6] = "latin capital letter o with diaeresis";
			_charNames[(char)0x00D7] = "multiplication sign";
			_charNames[(char)0x00D8] = "latin capital letter o with stroke";
			_charNames[(char)0x00D9] = "latin capital letter u with grave";
			_charNames[(char)0x00DA] = "latin capital letter u with acute";
			_charNames[(char)0x00DB] = "latin capital letter u with circumflex";
			_charNames[(char)0x00DC] = "latin capital letter u with diaeresis";
			_charNames[(char)0x00DD] = "latin capital letter y with acute";
			_charNames[(char)0x00DE] = "latin capital letter thorn";
			_charNames[(char)0x00DF] = "latin small letter sharp s";
			_charNames[(char)0x00E0] = "latin small letter a with grave";
			_charNames[(char)0x00E1] = "latin small letter a with acute";
			_charNames[(char)0x00E2] = "latin small letter a with circumflex";
			_charNames[(char)0x00E3] = "latin small letter a with tilde";
			_charNames[(char)0x00E4] = "latin small letter a with diaeresis";
			_charNames[(char)0x00E5] = "latin small letter a with ring above";
			_charNames[(char)0x00E6] = "latin small letter ae";
			_charNames[(char)0x00E7] = "latin small letter c with cedilla";
			_charNames[(char)0x00E8] = "latin small letter e with grave";
			_charNames[(char)0x00E9] = "latin small letter e with acute";
			_charNames[(char)0x00EA] = "latin small letter e with circumflex";
			_charNames[(char)0x00EB] = "latin small letter e with diaeresis";
			_charNames[(char)0x00EC] = "latin small letter i with grave";
			_charNames[(char)0x00ED] = "latin small letter i with acute";
			_charNames[(char)0x00EE] = "latin small letter i with circumflex";
			_charNames[(char)0x00EF] = "latin small letter i with diaeresis";
			_charNames[(char)0x00F0] = "latin small letter eth";
			_charNames[(char)0x00F1] = "latin small letter n with tilde";
			_charNames[(char)0x00F2] = "latin small letter o with grave";
			_charNames[(char)0x00F3] = "latin small letter o with acute";
			_charNames[(char)0x00F4] = "latin small letter o with circumflex";
			_charNames[(char)0x00F5] = "latin small letter o with tilde";
			_charNames[(char)0x00F6] = "latin small letter o with diaeresis";
			_charNames[(char)0x00F7] = "division sign";
			_charNames[(char)0x00F8] = "latin small letter o with stroke";
			_charNames[(char)0x00F9] = "latin small letter u with grave";
			_charNames[(char)0x00FA] = "latin small letter u with acute";
			_charNames[(char)0x00FB] = "latin small letter u with circumflex";
			_charNames[(char)0x00FC] = "latin small letter u with diaeresis";
			_charNames[(char)0x00FD] = "latin small letter y with acute";
			_charNames[(char)0x00FE] = "latin small letter thorn";
			_charNames[(char)0x00FF] = "latin small letter y with diaeresis";
			_charNames[(char)0x0100] = "latin capital letter a with macron";
			_charNames[(char)0x0101] = "latin small letter a with macron";
			_charNames[(char)0x0102] = "latin capital letter a with breve";
			_charNames[(char)0x0103] = "latin small letter a with breve";
			_charNames[(char)0x0104] = "latin capital letter a with ogonek";
			_charNames[(char)0x0105] = "latin small letter a with ogonek";
			_charNames[(char)0x0106] = "latin capital letter c with acute";
			_charNames[(char)0x0107] = "latin small letter c with acute";
			_charNames[(char)0x0108] = "latin capital letter c with circumflex";
			_charNames[(char)0x0109] = "latin small letter c with circumflex";
			_charNames[(char)0x010A] = "latin capital letter c with dot above";
			_charNames[(char)0x010B] = "latin small letter c with dot above";
			_charNames[(char)0x010C] = "latin capital letter c with caron";
			_charNames[(char)0x010D] = "latin small letter c with caron";
			_charNames[(char)0x010E] = "latin capital letter d with caron";
			_charNames[(char)0x010F] = "latin small letter d with caron";
			_charNames[(char)0x0110] = "latin capital letter d with stroke";
			_charNames[(char)0x0111] = "latin small letter d with stroke";
			_charNames[(char)0x0112] = "latin capital letter e with macron";
			_charNames[(char)0x0113] = "latin small letter e with macron";
			_charNames[(char)0x0114] = "latin capital letter e with breve";
			_charNames[(char)0x0115] = "latin small letter e with breve";
			_charNames[(char)0x0116] = "latin capital letter e with dot above";
			_charNames[(char)0x0117] = "latin small letter e with dot above";
			_charNames[(char)0x0118] = "latin capital letter e with ogonek";
			_charNames[(char)0x0119] = "latin small letter e with ogonek";
			_charNames[(char)0x011A] = "latin capital letter e with caron";
			_charNames[(char)0x011B] = "latin small letter e with caron";
			_charNames[(char)0x011C] = "latin capital letter g with circumflex";
			_charNames[(char)0x011D] = "latin small letter g with circumflex";
			_charNames[(char)0x011E] = "latin capital letter g with breve";
			_charNames[(char)0x011F] = "latin small letter g with breve";
			_charNames[(char)0x0120] = "latin capital letter g with dot above";
			_charNames[(char)0x0121] = "latin small letter g with dot above";
			_charNames[(char)0x0122] = "latin capital letter g with cedilla";
			_charNames[(char)0x0123] = "latin small letter g with cedilla";
			_charNames[(char)0x0124] = "latin capital letter h with circumflex";
			_charNames[(char)0x0125] = "latin small letter h with circumflex";
			_charNames[(char)0x0126] = "latin capital letter h with stroke";
			_charNames[(char)0x0127] = "latin small letter h with stroke";
			_charNames[(char)0x0128] = "latin capital letter i with tilde";
			_charNames[(char)0x0129] = "latin small letter i with tilde";
			_charNames[(char)0x012A] = "latin capital letter i with macron";
			_charNames[(char)0x012B] = "latin small letter i with macron";
			_charNames[(char)0x012C] = "latin capital letter i with breve";
			_charNames[(char)0x012D] = "latin small letter i with breve";
			_charNames[(char)0x012E] = "latin capital letter i with ogonek";
			_charNames[(char)0x012F] = "latin small letter i with ogonek";
			_charNames[(char)0x0130] = "latin capital letter i with dot above";
			_charNames[(char)0x0131] = "latin small letter dotless i";
			_charNames[(char)0x0132] = "latin capital ligature ij";
			_charNames[(char)0x0133] = "latin small ligature ij";
			_charNames[(char)0x0134] = "latin capital letter j with circumflex";
			_charNames[(char)0x0135] = "latin small letter j with circumflex";
			_charNames[(char)0x0136] = "latin capital letter k with cedilla";
			_charNames[(char)0x0137] = "latin small letter k with cedilla";
			_charNames[(char)0x0138] = "latin small letter kra";
			_charNames[(char)0x0139] = "latin capital letter l with acute";
			_charNames[(char)0x013A] = "latin small letter l with acute";
			_charNames[(char)0x013B] = "latin capital letter l with cedilla";
			_charNames[(char)0x013C] = "latin small letter l with cedilla";
			_charNames[(char)0x013D] = "latin capital letter l with caron";
			_charNames[(char)0x013E] = "latin small letter l with caron";
			_charNames[(char)0x013F] = "latin capital letter l with middle dot";
			_charNames[(char)0x0140] = "latin small letter l with middle dot";
			_charNames[(char)0x0141] = "latin capital letter l with stroke";
			_charNames[(char)0x0142] = "latin small letter l with stroke";
			_charNames[(char)0x0143] = "latin capital letter n with acute";
			_charNames[(char)0x0144] = "latin small letter n with acute";
			_charNames[(char)0x0145] = "latin capital letter n with cedilla";
			_charNames[(char)0x0146] = "latin small letter n with cedilla";
			_charNames[(char)0x0147] = "latin capital letter n with caron";
			_charNames[(char)0x0148] = "latin small letter n with caron";
			_charNames[(char)0x0149] = "latin small letter n preceded by apostrophe";
			_charNames[(char)0x014A] = "latin capital letter eng";
			_charNames[(char)0x014B] = "latin small letter eng";
			_charNames[(char)0x014C] = "latin capital letter o with macron";
			_charNames[(char)0x014D] = "latin small letter o with macron";
			_charNames[(char)0x014E] = "latin capital letter o with breve";
			_charNames[(char)0x014F] = "latin small letter o with breve";
			_charNames[(char)0x0150] = "latin capital letter o with double acute";
			_charNames[(char)0x0151] = "latin small letter o with double acute";
			_charNames[(char)0x0152] = "latin capital ligature oe";
			_charNames[(char)0x0153] = "latin small ligature oe";
			_charNames[(char)0x0154] = "latin capital letter r with acute";
			_charNames[(char)0x0155] = "latin small letter r with acute";
			_charNames[(char)0x0156] = "latin capital letter r with cedilla";
			_charNames[(char)0x0157] = "latin small letter r with cedilla";
			_charNames[(char)0x0158] = "latin capital letter r with caron";
			_charNames[(char)0x0159] = "latin small letter r with caron";
			_charNames[(char)0x015A] = "latin capital letter s with acute";
			_charNames[(char)0x015B] = "latin small letter s with acute";
			_charNames[(char)0x015C] = "latin capital letter s with circumflex";
			_charNames[(char)0x015D] = "latin small letter s with circumflex";
			_charNames[(char)0x015E] = "latin capital letter s with cedilla";
			_charNames[(char)0x015F] = "latin small letter s with cedilla";
			_charNames[(char)0x0160] = "latin capital letter s with caron";
			_charNames[(char)0x0161] = "latin small letter s with caron";
			_charNames[(char)0x0162] = "latin capital letter t with cedilla";
			_charNames[(char)0x0163] = "latin small letter t with cedilla";
			_charNames[(char)0x0164] = "latin capital letter t with caron";
			_charNames[(char)0x0165] = "latin small letter t with caron";
			_charNames[(char)0x0166] = "latin capital letter t with stroke";
			_charNames[(char)0x0167] = "latin small letter t with stroke";
			_charNames[(char)0x0168] = "latin capital letter u with tilde";
			_charNames[(char)0x0169] = "latin small letter u with tilde";
			_charNames[(char)0x016A] = "latin capital letter u with macron";
			_charNames[(char)0x016B] = "latin small letter u with macron";
			_charNames[(char)0x016C] = "latin capital letter u with breve";
			_charNames[(char)0x016D] = "latin small letter u with breve";
			_charNames[(char)0x016E] = "latin capital letter u with ring above";
			_charNames[(char)0x016F] = "latin small letter u with ring above";
			_charNames[(char)0x0170] = "latin capital letter u with double acute";
			_charNames[(char)0x0171] = "latin small letter u with double acute";
			_charNames[(char)0x0172] = "latin capital letter u with ogonek";
			_charNames[(char)0x0173] = "latin small letter u with ogonek";
			_charNames[(char)0x0174] = "latin capital letter w with circumflex";
			_charNames[(char)0x0175] = "latin small letter w with circumflex";
			_charNames[(char)0x0176] = "latin capital letter y with circumflex";
			_charNames[(char)0x0177] = "latin small letter y with circumflex";
			_charNames[(char)0x0178] = "latin capital letter y with diaeresis";
			_charNames[(char)0x0179] = "latin capital letter z with acute";
			_charNames[(char)0x017A] = "latin small letter z with acute";
			_charNames[(char)0x017B] = "latin capital letter z with dot above";
			_charNames[(char)0x017C] = "latin small letter z with dot above";
			_charNames[(char)0x017D] = "latin capital letter z with caron";
			_charNames[(char)0x017E] = "latin small letter z with caron";
			_charNames[(char)0x017F] = "latin small letter long s";
			_charNames[(char)0x0180] = "latin small letter b with stroke";
			_charNames[(char)0x0181] = "latin capital letter b with hook";
			_charNames[(char)0x0182] = "latin capital letter b with topbar";
			_charNames[(char)0x0183] = "latin small letter b with topbar";
			_charNames[(char)0x0184] = "latin capital letter tone six";
			_charNames[(char)0x0185] = "latin small letter tone six";
			_charNames[(char)0x0186] = "latin capital letter open o";
			_charNames[(char)0x0187] = "latin capital letter c with hook";
			_charNames[(char)0x0188] = "latin small letter c with hook";
			_charNames[(char)0x0189] = "latin capital letter african d";
			_charNames[(char)0x018A] = "latin capital letter d with hook";
			_charNames[(char)0x018B] = "latin capital letter d with topbar";
			_charNames[(char)0x018C] = "latin small letter d with topbar";
			_charNames[(char)0x018D] = "latin small letter turned delta";
			_charNames[(char)0x018E] = "latin capital letter reversed e";
			_charNames[(char)0x018F] = "latin capital letter schwa";
			_charNames[(char)0x0190] = "latin capital letter open e";
			_charNames[(char)0x0191] = "latin capital letter f with hook";
			_charNames[(char)0x0192] = "latin small letter f with hook";
			_charNames[(char)0x0193] = "latin capital letter g with hook";
			_charNames[(char)0x0194] = "latin capital letter gamma";
			_charNames[(char)0x0195] = "latin small letter hv";
			_charNames[(char)0x0196] = "latin capital letter iota";
			_charNames[(char)0x0197] = "latin capital letter i with stroke";
			_charNames[(char)0x0198] = "latin capital letter k with hook";
			_charNames[(char)0x0199] = "latin small letter k with hook";
			_charNames[(char)0x019A] = "latin small letter l with bar";
			_charNames[(char)0x019B] = "latin small letter lambda with stroke";
			_charNames[(char)0x019C] = "latin capital letter turned m";
			_charNames[(char)0x019D] = "latin capital letter n with left hook";
			_charNames[(char)0x019E] = "latin small letter n with long right leg";
			_charNames[(char)0x019F] = "latin capital letter o with middle tilde";
			_charNames[(char)0x01A0] = "latin capital letter o with horn";
			_charNames[(char)0x01A1] = "latin small letter o with horn";
			_charNames[(char)0x01A2] = "latin capital letter oi";
			_charNames[(char)0x01A3] = "latin small letter oi";
			_charNames[(char)0x01A4] = "latin capital letter p with hook";
			_charNames[(char)0x01A5] = "latin small letter p with hook";
			_charNames[(char)0x01A6] = "latin letter yr";
			_charNames[(char)0x01A7] = "latin capital letter tone two";
			_charNames[(char)0x01A8] = "latin small letter tone two";
			_charNames[(char)0x01A9] = "latin capital letter esh";
			_charNames[(char)0x01AA] = "latin letter reversed esh loop";
			_charNames[(char)0x01AB] = "latin small letter t with palatal hook";
			_charNames[(char)0x01AC] = "latin capital letter t with hook";
			_charNames[(char)0x01AD] = "latin small letter t with hook";
			_charNames[(char)0x01AE] = "latin capital letter t with retroflex hook";
			_charNames[(char)0x01AF] = "latin capital letter u with horn";
			_charNames[(char)0x01B0] = "latin small letter u with horn";
			_charNames[(char)0x01B1] = "latin capital letter upsilon";
			_charNames[(char)0x01B2] = "latin capital letter v with hook";
			_charNames[(char)0x01B3] = "latin capital letter y with hook";
			_charNames[(char)0x01B4] = "latin small letter y with hook";
			_charNames[(char)0x01B5] = "latin capital letter z with stroke";
			_charNames[(char)0x01B6] = "latin small letter z with stroke";
			_charNames[(char)0x01B7] = "latin capital letter ezh";
			_charNames[(char)0x01B8] = "latin capital letter ezh reversed";
			_charNames[(char)0x01B9] = "latin small letter ezh reversed";
			_charNames[(char)0x01BA] = "latin small letter ezh with tail";
			_charNames[(char)0x01BB] = "latin letter two with stroke";
			_charNames[(char)0x01BC] = "latin capital letter tone five";
			_charNames[(char)0x01BD] = "latin small letter tone five";
			_charNames[(char)0x01BE] = "latin letter inverted glottal stop with stroke";
			_charNames[(char)0x01BF] = "latin letter wynn";
			_charNames[(char)0x01C0] = "latin letter dental click";
			_charNames[(char)0x01C1] = "latin letter lateral click";
			_charNames[(char)0x01C2] = "latin letter alveolar click";
			_charNames[(char)0x01C3] = "latin letter retroflex click";
			_charNames[(char)0x01C4] = "latin capital letter dz with caron";
			_charNames[(char)0x01C5] = "latin capital letter d with small letter z with caron";
			_charNames[(char)0x01C6] = "latin small letter dz with caron";
			_charNames[(char)0x01C7] = "latin capital letter lj";
			_charNames[(char)0x01C8] = "latin capital letter l with small letter j";
			_charNames[(char)0x01C9] = "latin small letter lj";
			_charNames[(char)0x01CA] = "latin capital letter nj";
			_charNames[(char)0x01CB] = "latin capital letter n with small letter j";
			_charNames[(char)0x01CC] = "latin small letter nj";
			_charNames[(char)0x01CD] = "latin capital letter a with caron";
			_charNames[(char)0x01CE] = "latin small letter a with caron";
			_charNames[(char)0x01CF] = "latin capital letter i with caron";
			_charNames[(char)0x01D0] = "latin small letter i with caron";
			_charNames[(char)0x01D1] = "latin capital letter o with caron";
			_charNames[(char)0x01D2] = "latin small letter o with caron";
			_charNames[(char)0x01D3] = "latin capital letter u with caron";
			_charNames[(char)0x01D4] = "latin small letter u with caron";
			_charNames[(char)0x01D5] = "latin capital letter u with diaeresis and macron";
			_charNames[(char)0x01D6] = "latin small letter u with diaeresis and macron";
			_charNames[(char)0x01D7] = "latin capital letter u with diaeresis and acute";
			_charNames[(char)0x01D8] = "latin small letter u with diaeresis and acute";
			_charNames[(char)0x01D9] = "latin capital letter u with diaeresis and caron";
			_charNames[(char)0x01DA] = "latin small letter u with diaeresis and caron";
			_charNames[(char)0x01DB] = "latin capital letter u with diaeresis and grave";
			_charNames[(char)0x01DC] = "latin small letter u with diaeresis and grave";
			_charNames[(char)0x01DD] = "latin small letter turned e";
			_charNames[(char)0x01DE] = "latin capital letter a with diaeresis and macron";
			_charNames[(char)0x01DF] = "latin small letter a with diaeresis and macron";
			_charNames[(char)0x01E0] = "latin capital letter a with dot above and macron";
			_charNames[(char)0x01E1] = "latin small letter a with dot above and macron";
			_charNames[(char)0x01E2] = "latin capital letter ae with macron";
			_charNames[(char)0x01E3] = "latin small letter ae with macron";
			_charNames[(char)0x01E4] = "latin capital letter g with stroke";
			_charNames[(char)0x01E5] = "latin small letter g with stroke";
			_charNames[(char)0x01E6] = "latin capital letter g with caron";
			_charNames[(char)0x01E7] = "latin small letter g with caron";
			_charNames[(char)0x01E8] = "latin capital letter k with caron";
			_charNames[(char)0x01E9] = "latin small letter k with caron";
			_charNames[(char)0x01EA] = "latin capital letter o with ogonek";
			_charNames[(char)0x01EB] = "latin small letter o with ogonek";
			_charNames[(char)0x01EC] = "latin capital letter o with ogonek and macron";
			_charNames[(char)0x01ED] = "latin small letter o with ogonek and macron";
			_charNames[(char)0x01EE] = "latin capital letter ezh with caron";
			_charNames[(char)0x01EF] = "latin small letter ezh with caron";
			_charNames[(char)0x01F0] = "latin small letter j with caron";
			_charNames[(char)0x01F1] = "latin capital letter dz";
			_charNames[(char)0x01F2] = "latin capital letter d with small letter z";
			_charNames[(char)0x01F3] = "latin small letter dz";
			_charNames[(char)0x01F4] = "latin capital letter g with acute";
			_charNames[(char)0x01F5] = "latin small letter g with acute";
			_charNames[(char)0x01F6] = "latin capital letter hwair";
			_charNames[(char)0x01F7] = "latin capital letter wynn";
			_charNames[(char)0x01F8] = "latin capital letter n with grave";
			_charNames[(char)0x01F9] = "latin small letter n with grave";
			_charNames[(char)0x01FA] = "latin capital letter a with ring above and acute";
			_charNames[(char)0x01FB] = "latin small letter a with ring above and acute";
			_charNames[(char)0x01FC] = "latin capital letter ae with acute";
			_charNames[(char)0x01FD] = "latin small letter ae with acute";
			_charNames[(char)0x01FE] = "latin capital letter o with stroke and acute";
			_charNames[(char)0x01FF] = "latin small letter o with stroke and acute";
			_charNames[(char)0x0200] = "latin capital letter a with double grave";
			_charNames[(char)0x0201] = "latin small letter a with double grave";
			_charNames[(char)0x0202] = "latin capital letter a with inverted breve";
			_charNames[(char)0x0203] = "latin small letter a with inverted breve";
			_charNames[(char)0x0204] = "latin capital letter e with double grave";
			_charNames[(char)0x0205] = "latin small letter e with double grave";
			_charNames[(char)0x0206] = "latin capital letter e with inverted breve";
			_charNames[(char)0x0207] = "latin small letter e with inverted breve";
			_charNames[(char)0x0208] = "latin capital letter i with double grave";
			_charNames[(char)0x0209] = "latin small letter i with double grave";
			_charNames[(char)0x020A] = "latin capital letter i with inverted breve";
			_charNames[(char)0x020B] = "latin small letter i with inverted breve";
			_charNames[(char)0x020C] = "latin capital letter o with double grave";
			_charNames[(char)0x020D] = "latin small letter o with double grave";
			_charNames[(char)0x020E] = "latin capital letter o with inverted breve";
			_charNames[(char)0x020F] = "latin small letter o with inverted breve";
			_charNames[(char)0x0210] = "latin capital letter r with double grave";
			_charNames[(char)0x0211] = "latin small letter r with double grave";
			_charNames[(char)0x0212] = "latin capital letter r with inverted breve";
			_charNames[(char)0x0213] = "latin small letter r with inverted breve";
			_charNames[(char)0x0214] = "latin capital letter u with double grave";
			_charNames[(char)0x0215] = "latin small letter u with double grave";
			_charNames[(char)0x0216] = "latin capital letter u with inverted breve";
			_charNames[(char)0x0217] = "latin small letter u with inverted breve";
			_charNames[(char)0x0218] = "latin capital letter s with comma below";
			_charNames[(char)0x0219] = "latin small letter s with comma below";
			_charNames[(char)0x021A] = "latin capital letter t with comma below";
			_charNames[(char)0x021B] = "latin small letter t with comma below";
			_charNames[(char)0x021C] = "latin capital letter yogh";
			_charNames[(char)0x021D] = "latin small letter yogh";
			_charNames[(char)0x021E] = "latin capital letter h with caron";
			_charNames[(char)0x021F] = "latin small letter h with caron";
			_charNames[(char)0x0220] = "latin capital letter n with long right leg";
			_charNames[(char)0x0221] = "latin small letter d with curl";
			_charNames[(char)0x0222] = "latin capital letter ou";
			_charNames[(char)0x0223] = "latin small letter ou";
			_charNames[(char)0x0224] = "latin capital letter z with hook";
			_charNames[(char)0x0225] = "latin small letter z with hook";
			_charNames[(char)0x0226] = "latin capital letter a with dot above";
			_charNames[(char)0x0227] = "latin small letter a with dot above";
			_charNames[(char)0x0228] = "latin capital letter e with cedilla";
			_charNames[(char)0x0229] = "latin small letter e with cedilla";
			_charNames[(char)0x022A] = "latin capital letter o with diaeresis and macron";
			_charNames[(char)0x022B] = "latin small letter o with diaeresis and macron";
			_charNames[(char)0x022C] = "latin capital letter o with tilde and macron";
			_charNames[(char)0x022D] = "latin small letter o with tilde and macron";
			_charNames[(char)0x022E] = "latin capital letter o with dot above";
			_charNames[(char)0x022F] = "latin small letter o with dot above";
			_charNames[(char)0x0230] = "latin capital letter o with dot above and macron";
			_charNames[(char)0x0231] = "latin small letter o with dot above and macron";
			_charNames[(char)0x0232] = "latin capital letter y with macron";
			_charNames[(char)0x0233] = "latin small letter y with macron";
			_charNames[(char)0x0234] = "latin small letter l with curl";
			_charNames[(char)0x0235] = "latin small letter n with curl";
			_charNames[(char)0x0236] = "latin small letter t with curl";
			_charNames[(char)0x0237] = "latin small letter dotless j";
			_charNames[(char)0x0238] = "latin small letter db digraph";
			_charNames[(char)0x0239] = "latin small letter qp digraph";
			_charNames[(char)0x023A] = "latin capital letter a with stroke";
			_charNames[(char)0x023B] = "latin capital letter c with stroke";
			_charNames[(char)0x023C] = "latin small letter c with stroke";
			_charNames[(char)0x023D] = "latin capital letter l with bar";
			_charNames[(char)0x023E] = "latin capital letter t with diagonal stroke";
			_charNames[(char)0x023F] = "latin small letter s with swash tail";
			_charNames[(char)0x0240] = "latin small letter z with swash tail";
			_charNames[(char)0x0241] = "latin capital letter glottal stop";
			_charNames[(char)0x0250] = "latin small letter turned a";
			_charNames[(char)0x0251] = "latin small letter alpha";
			_charNames[(char)0x0252] = "latin small letter turned alpha";
			_charNames[(char)0x0253] = "latin small letter b with hook";
			_charNames[(char)0x0254] = "latin small letter open o";
			_charNames[(char)0x0255] = "latin small letter c with curl";
			_charNames[(char)0x0256] = "latin small letter d with tail";
			_charNames[(char)0x0257] = "latin small letter d with hook";
			_charNames[(char)0x0258] = "latin small letter reversed e";
			_charNames[(char)0x0259] = "latin small letter schwa";
			_charNames[(char)0x025A] = "latin small letter schwa with hook";
			_charNames[(char)0x025B] = "latin small letter open e";
			_charNames[(char)0x025C] = "latin small letter reversed open e";
			_charNames[(char)0x025D] = "latin small letter reversed open e with hook";
			_charNames[(char)0x025E] = "latin small letter closed reversed open e";
			_charNames[(char)0x025F] = "latin small letter dotless j with stroke";
			_charNames[(char)0x0260] = "latin small letter g with hook";
			_charNames[(char)0x0261] = "latin small letter script g";
			_charNames[(char)0x0262] = "latin letter small capital g";
			_charNames[(char)0x0263] = "latin small letter gamma";
			_charNames[(char)0x0264] = "latin small letter rams horn";
			_charNames[(char)0x0265] = "latin small letter turned h";
			_charNames[(char)0x0266] = "latin small letter h with hook";
			_charNames[(char)0x0267] = "latin small letter heng with hook";
			_charNames[(char)0x0268] = "latin small letter i with stroke";
			_charNames[(char)0x0269] = "latin small letter iota";
			_charNames[(char)0x026A] = "latin letter small capital i";
			_charNames[(char)0x026B] = "latin small letter l with middle tilde";
			_charNames[(char)0x026C] = "latin small letter l with belt";
			_charNames[(char)0x026D] = "latin small letter l with retroflex hook";
			_charNames[(char)0x026E] = "latin small letter lezh";
			_charNames[(char)0x026F] = "latin small letter turned m";
			_charNames[(char)0x0270] = "latin small letter turned m with long leg";
			_charNames[(char)0x0271] = "latin small letter m with hook";
			_charNames[(char)0x0272] = "latin small letter n with left hook";
			_charNames[(char)0x0273] = "latin small letter n with retroflex hook";
			_charNames[(char)0x0274] = "latin letter small capital n";
			_charNames[(char)0x0275] = "latin small letter barred o";
			_charNames[(char)0x0276] = "latin letter small capital oe";
			_charNames[(char)0x0277] = "latin small letter closed omega";
			_charNames[(char)0x0278] = "latin small letter phi";
			_charNames[(char)0x0279] = "latin small letter turned r";
			_charNames[(char)0x027A] = "latin small letter turned r with long leg";
			_charNames[(char)0x027B] = "latin small letter turned r with hook";
			_charNames[(char)0x027C] = "latin small letter r with long leg";
			_charNames[(char)0x027D] = "latin small letter r with tail";
			_charNames[(char)0x027E] = "latin small letter r with fishhook";
			_charNames[(char)0x027F] = "latin small letter reversed r with fishhook";
			_charNames[(char)0x0280] = "latin letter small capital r";
			_charNames[(char)0x0281] = "latin letter small capital inverted r";
			_charNames[(char)0x0282] = "latin small letter s with hook";
			_charNames[(char)0x0283] = "latin small letter esh";
			_charNames[(char)0x0284] = "latin small letter dotless j with stroke and hook";
			_charNames[(char)0x0285] = "latin small letter squat reversed esh";
			_charNames[(char)0x0286] = "latin small letter esh with curl";
			_charNames[(char)0x0287] = "latin small letter turned t";
			_charNames[(char)0x0288] = "latin small letter t with retroflex hook";
			_charNames[(char)0x0289] = "latin small letter u bar";
			_charNames[(char)0x028A] = "latin small letter upsilon";
			_charNames[(char)0x028B] = "latin small letter v with hook";
			_charNames[(char)0x028C] = "latin small letter turned v";
			_charNames[(char)0x028D] = "latin small letter turned w";
			_charNames[(char)0x028E] = "latin small letter turned y";
			_charNames[(char)0x028F] = "latin letter small capital y";
			_charNames[(char)0x0290] = "latin small letter z with retroflex hook";
			_charNames[(char)0x0291] = "latin small letter z with curl";
			_charNames[(char)0x0292] = "latin small letter ezh";
			_charNames[(char)0x0293] = "latin small letter ezh with curl";
			_charNames[(char)0x0294] = "latin letter glottal stop";
			_charNames[(char)0x0295] = "latin letter pharyngeal voiced fricative";
			_charNames[(char)0x0296] = "latin letter inverted glottal stop";
			_charNames[(char)0x0297] = "latin letter stretched c";
			_charNames[(char)0x0298] = "latin letter bilabial click";
			_charNames[(char)0x0299] = "latin letter small capital b";
			_charNames[(char)0x029A] = "latin small letter closed open e";
			_charNames[(char)0x029B] = "latin letter small capital g with hook";
			_charNames[(char)0x029C] = "latin letter small capital h";
			_charNames[(char)0x029D] = "latin small letter j with crossed-tail";
			_charNames[(char)0x029E] = "latin small letter turned k";
			_charNames[(char)0x029F] = "latin letter small capital l";
			_charNames[(char)0x02A0] = "latin small letter q with hook";
			_charNames[(char)0x02A1] = "latin letter glottal stop with stroke";
			_charNames[(char)0x02A2] = "latin letter reversed glottal stop with stroke";
			_charNames[(char)0x02A3] = "latin small letter dz digraph";
			_charNames[(char)0x02A4] = "latin small letter dezh digraph";
			_charNames[(char)0x02A5] = "latin small letter dz digraph with curl";
			_charNames[(char)0x02A6] = "latin small letter ts digraph";
			_charNames[(char)0x02A7] = "latin small letter tesh digraph";
			_charNames[(char)0x02A8] = "latin small letter tc digraph with curl";
			_charNames[(char)0x02A9] = "latin small letter feng digraph";
			_charNames[(char)0x02AA] = "latin small letter ls digraph";
			_charNames[(char)0x02AB] = "latin small letter lz digraph";
			_charNames[(char)0x02AC] = "latin letter bilabial percussive";
			_charNames[(char)0x02AD] = "latin letter bidental percussive";
			_charNames[(char)0x02AE] = "latin small letter turned h with fishhook";
			_charNames[(char)0x02AF] = "latin small letter turned h with fishhook and tail";
			_charNames[(char)0x02B0] = "modifier letter small h";
			_charNames[(char)0x02B1] = "modifier letter small h with hook";
			_charNames[(char)0x02B2] = "modifier letter small j";
			_charNames[(char)0x02B3] = "modifier letter small r";
			_charNames[(char)0x02B4] = "modifier letter small turned r";
			_charNames[(char)0x02B5] = "modifier letter small turned r with hook";
			_charNames[(char)0x02B6] = "modifier letter small capital inverted r";
			_charNames[(char)0x02B7] = "modifier letter small w";
			_charNames[(char)0x02B8] = "modifier letter small y";
			_charNames[(char)0x02B9] = "modifier letter prime";
			_charNames[(char)0x02BA] = "modifier letter double prime";
			_charNames[(char)0x02BB] = "modifier letter turned comma";
			_charNames[(char)0x02BC] = "modifier letter apostrophe";
			_charNames[(char)0x02BD] = "modifier letter reversed comma";
			_charNames[(char)0x02BE] = "modifier letter right half ring";
			_charNames[(char)0x02BF] = "modifier letter left half ring";
			_charNames[(char)0x02C0] = "modifier letter glottal stop";
			_charNames[(char)0x02C1] = "modifier letter reversed glottal stop";
			_charNames[(char)0x02C2] = "modifier letter left arrowhead";
			_charNames[(char)0x02C3] = "modifier letter right arrowhead";
			_charNames[(char)0x02C4] = "modifier letter up arrowhead";
			_charNames[(char)0x02C5] = "modifier letter down arrowhead";
			_charNames[(char)0x02C6] = "modifier letter circumflex accent";
			_charNames[(char)0x02C7] = "caron";
			_charNames[(char)0x02C8] = "modifier letter vertical line";
			_charNames[(char)0x02C9] = "modifier letter macron";
			_charNames[(char)0x02CA] = "modifier letter acute accent";
			_charNames[(char)0x02CB] = "modifier letter grave accent";
			_charNames[(char)0x02CC] = "modifier letter low vertical line";
			_charNames[(char)0x02CD] = "modifier letter low macron";
			_charNames[(char)0x02CE] = "modifier letter low grave accent";
			_charNames[(char)0x02CF] = "modifier letter low acute accent";
			_charNames[(char)0x02D0] = "modifier letter triangular colon";
			_charNames[(char)0x02D1] = "modifier letter half triangular colon";
			_charNames[(char)0x02D2] = "modifier letter centred right half ring";
			_charNames[(char)0x02D3] = "modifier letter centred left half ring";
			_charNames[(char)0x02D4] = "modifier letter up tack";
			_charNames[(char)0x02D5] = "modifier letter down tack";
			_charNames[(char)0x02D6] = "modifier letter plus sign";
			_charNames[(char)0x02D7] = "modifier letter minus sign";
			_charNames[(char)0x02D8] = "breve";
			_charNames[(char)0x02D9] = "dot above";
			_charNames[(char)0x02DA] = "ring above";
			_charNames[(char)0x02DB] = "ogonek";
			_charNames[(char)0x02DC] = "small tilde";
			_charNames[(char)0x02DD] = "double acute accent";
			_charNames[(char)0x02DE] = "modifier letter rhotic hook";
			_charNames[(char)0x02DF] = "modifier letter cross accent";
			_charNames[(char)0x02E0] = "modifier letter small gamma";
			_charNames[(char)0x02E1] = "modifier letter small l";
			_charNames[(char)0x02E2] = "modifier letter small s";
			_charNames[(char)0x02E3] = "modifier letter small x";
			_charNames[(char)0x02E4] = "modifier letter small reversed glottal stop";
			_charNames[(char)0x02E5] = "modifier letter extra-high tone bar";
			_charNames[(char)0x02E6] = "modifier letter high tone bar";
			_charNames[(char)0x02E7] = "modifier letter mid tone bar";
			_charNames[(char)0x02E8] = "modifier letter low tone bar";
			_charNames[(char)0x02E9] = "modifier letter extra-low tone bar";
			_charNames[(char)0x02EA] = "modifier letter yin departing tone mark";
			_charNames[(char)0x02EB] = "modifier letter yang departing tone mark";
			_charNames[(char)0x02EC] = "modifier letter voicing";
			_charNames[(char)0x02ED] = "modifier letter unaspirated";
			_charNames[(char)0x02EE] = "modifier letter double apostrophe";
			_charNames[(char)0x02EF] = "modifier letter low down arrowhead";
			_charNames[(char)0x02F0] = "modifier letter low up arrowhead";
			_charNames[(char)0x02F1] = "modifier letter low left arrowhead";
			_charNames[(char)0x02F2] = "modifier letter low right arrowhead";
			_charNames[(char)0x02F3] = "modifier letter low ring";
			_charNames[(char)0x02F4] = "modifier letter middle grave accent";
			_charNames[(char)0x02F5] = "modifier letter middle double grave accent";
			_charNames[(char)0x02F6] = "modifier letter middle double acute accent";
			_charNames[(char)0x02F7] = "modifier letter low tilde";
			_charNames[(char)0x02F8] = "modifier letter raised colon";
			_charNames[(char)0x02F9] = "modifier letter begin high tone";
			_charNames[(char)0x02FA] = "modifier letter end high tone";
			_charNames[(char)0x02FB] = "modifier letter begin low tone";
			_charNames[(char)0x02FC] = "modifier letter end low tone";
			_charNames[(char)0x02FD] = "modifier letter shelf";
			_charNames[(char)0x02FE] = "modifier letter open shelf";
			_charNames[(char)0x02FF] = "modifier letter low left arrow";
			_charNames[(char)0x0300] = "combining grave accent";
			_charNames[(char)0x0301] = "combining acute accent";
			_charNames[(char)0x0302] = "combining circumflex accent";
			_charNames[(char)0x0303] = "combining tilde";
			_charNames[(char)0x0304] = "combining macron";
			_charNames[(char)0x0305] = "combining overline";
			_charNames[(char)0x0306] = "combining breve";
			_charNames[(char)0x0307] = "combining dot above";
			_charNames[(char)0x0308] = "combining diaeresis";
			_charNames[(char)0x0309] = "combining hook above";
			_charNames[(char)0x030A] = "combining ring above";
			_charNames[(char)0x030B] = "combining double acute accent";
			_charNames[(char)0x030C] = "combining caron";
			_charNames[(char)0x030D] = "combining vertical line above";
			_charNames[(char)0x030E] = "combining double vertical line above";
			_charNames[(char)0x030F] = "combining double grave accent";
			_charNames[(char)0x0310] = "combining candrabindu";
			_charNames[(char)0x0311] = "combining inverted breve";
			_charNames[(char)0x0312] = "combining turned comma above";
			_charNames[(char)0x0313] = "combining comma above";
			_charNames[(char)0x0314] = "combining reversed comma above";
			_charNames[(char)0x0315] = "combining comma above right";
			_charNames[(char)0x0316] = "combining grave accent below";
			_charNames[(char)0x0317] = "combining acute accent below";
			_charNames[(char)0x0318] = "combining left tack below";
			_charNames[(char)0x0319] = "combining right tack below";
			_charNames[(char)0x031A] = "combining left angle above";
			_charNames[(char)0x031B] = "combining horn";
			_charNames[(char)0x031C] = "combining left half ring below";
			_charNames[(char)0x031D] = "combining up tack below";
			_charNames[(char)0x031E] = "combining down tack below";
			_charNames[(char)0x031F] = "combining plus sign below";
			_charNames[(char)0x0320] = "combining minus sign below";
			_charNames[(char)0x0321] = "combining palatalized hook below";
			_charNames[(char)0x0322] = "combining retroflex hook below";
			_charNames[(char)0x0323] = "combining dot below";
			_charNames[(char)0x0324] = "combining diaeresis below";
			_charNames[(char)0x0325] = "combining ring below";
			_charNames[(char)0x0326] = "combining comma below";
			_charNames[(char)0x0327] = "combining cedilla";
			_charNames[(char)0x0328] = "combining ogonek";
			_charNames[(char)0x0329] = "combining vertical line below";
			_charNames[(char)0x032A] = "combining bridge below";
			_charNames[(char)0x032B] = "combining inverted double arch below";
			_charNames[(char)0x032C] = "combining caron below";
			_charNames[(char)0x032D] = "combining circumflex accent below";
			_charNames[(char)0x032E] = "combining breve below";
			_charNames[(char)0x032F] = "combining inverted breve below";
			_charNames[(char)0x0330] = "combining tilde below";
			_charNames[(char)0x0331] = "combining macron below";
			_charNames[(char)0x0332] = "combining low line";
			_charNames[(char)0x0333] = "combining double low line";
			_charNames[(char)0x0334] = "combining tilde overlay";
			_charNames[(char)0x0335] = "combining short stroke overlay";
			_charNames[(char)0x0336] = "combining long stroke overlay";
			_charNames[(char)0x0337] = "combining short solidus overlay";
			_charNames[(char)0x0338] = "combining long solidus overlay";
			_charNames[(char)0x0339] = "combining right half ring below";
			_charNames[(char)0x033A] = "combining inverted bridge below";
			_charNames[(char)0x033B] = "combining square below";
			_charNames[(char)0x033C] = "combining seagull below";
			_charNames[(char)0x033D] = "combining x above";
			_charNames[(char)0x033E] = "combining vertical tilde";
			_charNames[(char)0x033F] = "combining double overline";
			_charNames[(char)0x0340] = "combining grave tone mark";
			_charNames[(char)0x0341] = "combining acute tone mark";
			_charNames[(char)0x0342] = "combining greek perispomeni";
			_charNames[(char)0x0343] = "combining greek koronis";
			_charNames[(char)0x0344] = "combining greek dialytika tonos";
			_charNames[(char)0x0345] = "combining greek ypogegrammeni";
			_charNames[(char)0x0346] = "combining bridge above";
			_charNames[(char)0x0347] = "combining equals sign below";
			_charNames[(char)0x0348] = "combining double vertical line below";
			_charNames[(char)0x0349] = "combining left angle below";
			_charNames[(char)0x034A] = "combining not tilde above";
			_charNames[(char)0x034B] = "combining homothetic above";
			_charNames[(char)0x034C] = "combining almost equal to above";
			_charNames[(char)0x034D] = "combining left right arrow below";
			_charNames[(char)0x034E] = "combining upwards arrow below";
			_charNames[(char)0x034F] = "combining grapheme joiner";
			_charNames[(char)0x0350] = "combining right arrowhead above";
			_charNames[(char)0x0351] = "combining left half ring above";
			_charNames[(char)0x0352] = "combining fermata";
			_charNames[(char)0x0353] = "combining x below";
			_charNames[(char)0x0354] = "combining left arrowhead below";
			_charNames[(char)0x0355] = "combining right arrowhead below";
			_charNames[(char)0x0356] = "combining right arrowhead and up arrowhead below";
			_charNames[(char)0x0357] = "combining right half ring above";
			_charNames[(char)0x0358] = "combining dot above right";
			_charNames[(char)0x0359] = "combining asterisk below";
			_charNames[(char)0x035A] = "combining double ring below";
			_charNames[(char)0x035B] = "combining zigzag above";
			_charNames[(char)0x035C] = "combining double breve below";
			_charNames[(char)0x035D] = "combining double breve";
			_charNames[(char)0x035E] = "combining double macron";
			_charNames[(char)0x035F] = "combining double macron below";
			_charNames[(char)0x0360] = "combining double tilde";
			_charNames[(char)0x0361] = "combining double inverted breve";
			_charNames[(char)0x0362] = "combining double rightwards arrow below";
			_charNames[(char)0x0363] = "combining latin small letter a";
			_charNames[(char)0x0364] = "combining latin small letter e";
			_charNames[(char)0x0365] = "combining latin small letter i";
			_charNames[(char)0x0366] = "combining latin small letter o";
			_charNames[(char)0x0367] = "combining latin small letter u";
			_charNames[(char)0x0368] = "combining latin small letter c";
			_charNames[(char)0x0369] = "combining latin small letter d";
			_charNames[(char)0x036A] = "combining latin small letter h";
			_charNames[(char)0x036B] = "combining latin small letter m";
			_charNames[(char)0x036C] = "combining latin small letter r";
			_charNames[(char)0x036D] = "combining latin small letter t";
			_charNames[(char)0x036E] = "combining latin small letter v";
			_charNames[(char)0x036F] = "combining latin small letter x";
			_charNames[(char)0x0374] = "greek numeral sign";
			_charNames[(char)0x0375] = "greek lower numeral sign";
			_charNames[(char)0x037A] = "greek ypogegrammeni";
			_charNames[(char)0x037E] = "greek question mark";
			_charNames[(char)0x0384] = "greek tonos";
			_charNames[(char)0x0385] = "greek dialytika tonos";
			_charNames[(char)0x0386] = "greek capital letter alpha with tonos";
			_charNames[(char)0x0387] = "greek ano teleia";
			_charNames[(char)0x0388] = "greek capital letter epsilon with tonos";
			_charNames[(char)0x0389] = "greek capital letter eta with tonos";
			_charNames[(char)0x038A] = "greek capital letter iota with tonos";
			_charNames[(char)0x038C] = "greek capital letter omicron with tonos";
			_charNames[(char)0x038E] = "greek capital letter upsilon with tonos";
			_charNames[(char)0x038F] = "greek capital letter omega with tonos";
			_charNames[(char)0x0390] = "greek small letter iota with dialytika and tonos";
			_charNames[(char)0x0391] = "greek capital letter alpha";
			_charNames[(char)0x0392] = "greek capital letter beta";
			_charNames[(char)0x0393] = "greek capital letter gamma";
			_charNames[(char)0x0394] = "greek capital letter delta";
			_charNames[(char)0x0395] = "greek capital letter epsilon";
			_charNames[(char)0x0396] = "greek capital letter zeta";
			_charNames[(char)0x0397] = "greek capital letter eta";
			_charNames[(char)0x0398] = "greek capital letter theta";
			_charNames[(char)0x0399] = "greek capital letter iota";
			_charNames[(char)0x039A] = "greek capital letter kappa";
			_charNames[(char)0x039B] = "greek capital letter lamda";
			_charNames[(char)0x039C] = "greek capital letter mu";
			_charNames[(char)0x039D] = "greek capital letter nu";
			_charNames[(char)0x039E] = "greek capital letter xi";
			_charNames[(char)0x039F] = "greek capital letter omicron";
			_charNames[(char)0x03A0] = "greek capital letter pi";
			_charNames[(char)0x03A1] = "greek capital letter rho";
			_charNames[(char)0x03A3] = "greek capital letter sigma";
			_charNames[(char)0x03A4] = "greek capital letter tau";
			_charNames[(char)0x03A5] = "greek capital letter upsilon";
			_charNames[(char)0x03A6] = "greek capital letter phi";
			_charNames[(char)0x03A7] = "greek capital letter chi";
			_charNames[(char)0x03A8] = "greek capital letter psi";
			_charNames[(char)0x03A9] = "greek capital letter omega";
			_charNames[(char)0x03AA] = "greek capital letter iota with dialytika";
			_charNames[(char)0x03AB] = "greek capital letter upsilon with dialytika";
			_charNames[(char)0x03AC] = "greek small letter alpha with tonos";
			_charNames[(char)0x03AD] = "greek small letter epsilon with tonos";
			_charNames[(char)0x03AE] = "greek small letter eta with tonos";
			_charNames[(char)0x03AF] = "greek small letter iota with tonos";
			_charNames[(char)0x03B0] = "greek small letter upsilon with dialytika and tonos";
			_charNames[(char)0x03B1] = "greek small letter alpha";
			_charNames[(char)0x03B2] = "greek small letter beta";
			_charNames[(char)0x03B3] = "greek small letter gamma";
			_charNames[(char)0x03B4] = "greek small letter delta";
			_charNames[(char)0x03B5] = "greek small letter epsilon";
			_charNames[(char)0x03B6] = "greek small letter zeta";
			_charNames[(char)0x03B7] = "greek small letter eta";
			_charNames[(char)0x03B8] = "greek small letter theta";
			_charNames[(char)0x03B9] = "greek small letter iota";
			_charNames[(char)0x03BA] = "greek small letter kappa";
			_charNames[(char)0x03BB] = "greek small letter lamda";
			_charNames[(char)0x03BC] = "greek small letter mu";
			_charNames[(char)0x03BD] = "greek small letter nu";
			_charNames[(char)0x03BE] = "greek small letter xi";
			_charNames[(char)0x03BF] = "greek small letter omicron";
			_charNames[(char)0x03C0] = "greek small letter pi";
			_charNames[(char)0x03C1] = "greek small letter rho";
			_charNames[(char)0x03C2] = "greek small letter final sigma";
			_charNames[(char)0x03C3] = "greek small letter sigma";
			_charNames[(char)0x03C4] = "greek small letter tau";
			_charNames[(char)0x03C5] = "greek small letter upsilon";
			_charNames[(char)0x03C6] = "greek small letter phi";
			_charNames[(char)0x03C7] = "greek small letter chi";
			_charNames[(char)0x03C8] = "greek small letter psi";
			_charNames[(char)0x03C9] = "greek small letter omega";
			_charNames[(char)0x03CA] = "greek small letter iota with dialytika";
			_charNames[(char)0x03CB] = "greek small letter upsilon with dialytika";
			_charNames[(char)0x03CC] = "greek small letter omicron with tonos";
			_charNames[(char)0x03CD] = "greek small letter upsilon with tonos";
			_charNames[(char)0x03CE] = "greek small letter omega with tonos";
			_charNames[(char)0x03D0] = "greek beta symbol";
			_charNames[(char)0x03D1] = "greek theta symbol";
			_charNames[(char)0x03D2] = "greek upsilon with hook symbol";
			_charNames[(char)0x03D3] = "greek upsilon with acute and hook symbol";
			_charNames[(char)0x03D4] = "greek upsilon with diaeresis and hook symbol";
			_charNames[(char)0x03D5] = "greek phi symbol";
			_charNames[(char)0x03D6] = "greek pi symbol";
			_charNames[(char)0x03D7] = "greek kai symbol";
			_charNames[(char)0x03D8] = "greek letter archaic koppa";
			_charNames[(char)0x03D9] = "greek small letter archaic koppa";
			_charNames[(char)0x03DA] = "greek letter stigma";
			_charNames[(char)0x03DB] = "greek small letter stigma";
			_charNames[(char)0x03DC] = "greek letter digamma";
			_charNames[(char)0x03DD] = "greek small letter digamma";
			_charNames[(char)0x03DE] = "greek letter koppa";
			_charNames[(char)0x03DF] = "greek small letter koppa";
			_charNames[(char)0x03E0] = "greek letter sampi";
			_charNames[(char)0x03E1] = "greek small letter sampi";
			_charNames[(char)0x03E2] = "coptic capital letter shei";
			_charNames[(char)0x03E3] = "coptic small letter shei";
			_charNames[(char)0x03E4] = "coptic capital letter fei";
			_charNames[(char)0x03E5] = "coptic small letter fei";
			_charNames[(char)0x03E6] = "coptic capital letter khei";
			_charNames[(char)0x03E7] = "coptic small letter khei";
			_charNames[(char)0x03E8] = "coptic capital letter hori";
			_charNames[(char)0x03E9] = "coptic small letter hori";
			_charNames[(char)0x03EA] = "coptic capital letter gangia";
			_charNames[(char)0x03EB] = "coptic small letter gangia";
			_charNames[(char)0x03EC] = "coptic capital letter shima";
			_charNames[(char)0x03ED] = "coptic small letter shima";
			_charNames[(char)0x03EE] = "coptic capital letter dei";
			_charNames[(char)0x03EF] = "coptic small letter dei";
			_charNames[(char)0x03F0] = "greek kappa symbol";
			_charNames[(char)0x03F1] = "greek rho symbol";
			_charNames[(char)0x03F2] = "greek lunate sigma symbol";
			_charNames[(char)0x03F3] = "greek letter yot";
			_charNames[(char)0x03F4] = "greek capital theta symbol";
			_charNames[(char)0x03F5] = "greek lunate epsilon symbol";
			_charNames[(char)0x03F6] = "greek reversed lunate epsilon symbol";
			_charNames[(char)0x03F7] = "greek capital letter sho";
			_charNames[(char)0x03F8] = "greek small letter sho";
			_charNames[(char)0x03F9] = "greek capital lunate sigma symbol";
			_charNames[(char)0x03FA] = "greek capital letter san";
			_charNames[(char)0x03FB] = "greek small letter san";
			_charNames[(char)0x03FC] = "greek rho with stroke symbol";
			_charNames[(char)0x03FD] = "greek capital reversed lunate sigma symbol";
			_charNames[(char)0x03FE] = "greek capital dotted lunate sigma symbol";
			_charNames[(char)0x03FF] = "greek capital reversed dotted lunate sigma symbol";
			_charNames[(char)0x0400] = "cyrillic capital letter ie with grave";
			_charNames[(char)0x0401] = "cyrillic capital letter io";
			_charNames[(char)0x0402] = "cyrillic capital letter dje";
			_charNames[(char)0x0403] = "cyrillic capital letter gje";
			_charNames[(char)0x0404] = "cyrillic capital letter ukrainian ie";
			_charNames[(char)0x0405] = "cyrillic capital letter dze";
			_charNames[(char)0x0406] = "cyrillic capital letter byelorussian-ukrainian i";
			_charNames[(char)0x0407] = "cyrillic capital letter yi";
			_charNames[(char)0x0408] = "cyrillic capital letter je";
			_charNames[(char)0x0409] = "cyrillic capital letter lje";
			_charNames[(char)0x040A] = "cyrillic capital letter nje";
			_charNames[(char)0x040B] = "cyrillic capital letter tshe";
			_charNames[(char)0x040C] = "cyrillic capital letter kje";
			_charNames[(char)0x040D] = "cyrillic capital letter i with grave";
			_charNames[(char)0x040E] = "cyrillic capital letter short u";
			_charNames[(char)0x040F] = "cyrillic capital letter dzhe";
			_charNames[(char)0x0410] = "cyrillic capital letter a";
			_charNames[(char)0x0411] = "cyrillic capital letter be";
			_charNames[(char)0x0412] = "cyrillic capital letter ve";
			_charNames[(char)0x0413] = "cyrillic capital letter ghe";
			_charNames[(char)0x0414] = "cyrillic capital letter de";
			_charNames[(char)0x0415] = "cyrillic capital letter ie";
			_charNames[(char)0x0416] = "cyrillic capital letter zhe";
			_charNames[(char)0x0417] = "cyrillic capital letter ze";
			_charNames[(char)0x0418] = "cyrillic capital letter i";
			_charNames[(char)0x0419] = "cyrillic capital letter short i";
			_charNames[(char)0x041A] = "cyrillic capital letter ka";
			_charNames[(char)0x041B] = "cyrillic capital letter el";
			_charNames[(char)0x041C] = "cyrillic capital letter em";
			_charNames[(char)0x041D] = "cyrillic capital letter en";
			_charNames[(char)0x041E] = "cyrillic capital letter o";
			_charNames[(char)0x041F] = "cyrillic capital letter pe";
			_charNames[(char)0x0420] = "cyrillic capital letter er";
			_charNames[(char)0x0421] = "cyrillic capital letter es";
			_charNames[(char)0x0422] = "cyrillic capital letter te";
			_charNames[(char)0x0423] = "cyrillic capital letter u";
			_charNames[(char)0x0424] = "cyrillic capital letter ef";
			_charNames[(char)0x0425] = "cyrillic capital letter ha";
			_charNames[(char)0x0426] = "cyrillic capital letter tse";
			_charNames[(char)0x0427] = "cyrillic capital letter che";
			_charNames[(char)0x0428] = "cyrillic capital letter sha";
			_charNames[(char)0x0429] = "cyrillic capital letter shcha";
			_charNames[(char)0x042A] = "cyrillic capital letter hard sign";
			_charNames[(char)0x042B] = "cyrillic capital letter yeru";
			_charNames[(char)0x042C] = "cyrillic capital letter soft sign";
			_charNames[(char)0x042D] = "cyrillic capital letter e";
			_charNames[(char)0x042E] = "cyrillic capital letter yu";
			_charNames[(char)0x042F] = "cyrillic capital letter ya";
			_charNames[(char)0x0430] = "cyrillic small letter a";
			_charNames[(char)0x0431] = "cyrillic small letter be";
			_charNames[(char)0x0432] = "cyrillic small letter ve";
			_charNames[(char)0x0433] = "cyrillic small letter ghe";
			_charNames[(char)0x0434] = "cyrillic small letter de";
			_charNames[(char)0x0435] = "cyrillic small letter ie";
			_charNames[(char)0x0436] = "cyrillic small letter zhe";
			_charNames[(char)0x0437] = "cyrillic small letter ze";
			_charNames[(char)0x0438] = "cyrillic small letter i";
			_charNames[(char)0x0439] = "cyrillic small letter short i";
			_charNames[(char)0x043A] = "cyrillic small letter ka";
			_charNames[(char)0x043B] = "cyrillic small letter el";
			_charNames[(char)0x043C] = "cyrillic small letter em";
			_charNames[(char)0x043D] = "cyrillic small letter en";
			_charNames[(char)0x043E] = "cyrillic small letter o";
			_charNames[(char)0x043F] = "cyrillic small letter pe";
			_charNames[(char)0x0440] = "cyrillic small letter er";
			_charNames[(char)0x0441] = "cyrillic small letter es";
			_charNames[(char)0x0442] = "cyrillic small letter te";
			_charNames[(char)0x0443] = "cyrillic small letter u";
			_charNames[(char)0x0444] = "cyrillic small letter ef";
			_charNames[(char)0x0445] = "cyrillic small letter ha";
			_charNames[(char)0x0446] = "cyrillic small letter tse";
			_charNames[(char)0x0447] = "cyrillic small letter che";
			_charNames[(char)0x0448] = "cyrillic small letter sha";
			_charNames[(char)0x0449] = "cyrillic small letter shcha";
			_charNames[(char)0x044A] = "cyrillic small letter hard sign";
			_charNames[(char)0x044B] = "cyrillic small letter yeru";
			_charNames[(char)0x044C] = "cyrillic small letter soft sign";
			_charNames[(char)0x044D] = "cyrillic small letter e";
			_charNames[(char)0x044E] = "cyrillic small letter yu";
			_charNames[(char)0x044F] = "cyrillic small letter ya";
			_charNames[(char)0x0450] = "cyrillic small letter ie with grave";
			_charNames[(char)0x0451] = "cyrillic small letter io";
			_charNames[(char)0x0452] = "cyrillic small letter dje";
			_charNames[(char)0x0453] = "cyrillic small letter gje";
			_charNames[(char)0x0454] = "cyrillic small letter ukrainian ie";
			_charNames[(char)0x0455] = "cyrillic small letter dze";
			_charNames[(char)0x0456] = "cyrillic small letter byelorussian-ukrainian i";
			_charNames[(char)0x0457] = "cyrillic small letter yi";
			_charNames[(char)0x0458] = "cyrillic small letter je";
			_charNames[(char)0x0459] = "cyrillic small letter lje";
			_charNames[(char)0x045A] = "cyrillic small letter nje";
			_charNames[(char)0x045B] = "cyrillic small letter tshe";
			_charNames[(char)0x045C] = "cyrillic small letter kje";
			_charNames[(char)0x045D] = "cyrillic small letter i with grave";
			_charNames[(char)0x045E] = "cyrillic small letter short u";
			_charNames[(char)0x045F] = "cyrillic small letter dzhe";
			_charNames[(char)0x0460] = "cyrillic capital letter omega";
			_charNames[(char)0x0461] = "cyrillic small letter omega";
			_charNames[(char)0x0462] = "cyrillic capital letter yat";
			_charNames[(char)0x0463] = "cyrillic small letter yat";
			_charNames[(char)0x0464] = "cyrillic capital letter iotified e";
			_charNames[(char)0x0465] = "cyrillic small letter iotified e";
			_charNames[(char)0x0466] = "cyrillic capital letter little yus";
			_charNames[(char)0x0467] = "cyrillic small letter little yus";
			_charNames[(char)0x0468] = "cyrillic capital letter iotified little yus";
			_charNames[(char)0x0469] = "cyrillic small letter iotified little yus";
			_charNames[(char)0x046A] = "cyrillic capital letter big yus";
			_charNames[(char)0x046B] = "cyrillic small letter big yus";
			_charNames[(char)0x046C] = "cyrillic capital letter iotified big yus";
			_charNames[(char)0x046D] = "cyrillic small letter iotified big yus";
			_charNames[(char)0x046E] = "cyrillic capital letter ksi";
			_charNames[(char)0x046F] = "cyrillic small letter ksi";
			_charNames[(char)0x0470] = "cyrillic capital letter psi";
			_charNames[(char)0x0471] = "cyrillic small letter psi";
			_charNames[(char)0x0472] = "cyrillic capital letter fita";
			_charNames[(char)0x0473] = "cyrillic small letter fita";
			_charNames[(char)0x0474] = "cyrillic capital letter izhitsa";
			_charNames[(char)0x0475] = "cyrillic small letter izhitsa";
			_charNames[(char)0x0476] = "cyrillic capital letter izhitsa with double grave accent";
			_charNames[(char)0x0477] = "cyrillic small letter izhitsa with double grave accent";
			_charNames[(char)0x0478] = "cyrillic capital letter uk";
			_charNames[(char)0x0479] = "cyrillic small letter uk";
			_charNames[(char)0x047A] = "cyrillic capital letter round omega";
			_charNames[(char)0x047B] = "cyrillic small letter round omega";
			_charNames[(char)0x047C] = "cyrillic capital letter omega with titlo";
			_charNames[(char)0x047D] = "cyrillic small letter omega with titlo";
			_charNames[(char)0x047E] = "cyrillic capital letter ot";
			_charNames[(char)0x047F] = "cyrillic small letter ot";
			_charNames[(char)0x0480] = "cyrillic capital letter koppa";
			_charNames[(char)0x0481] = "cyrillic small letter koppa";
			_charNames[(char)0x0482] = "cyrillic thousands sign";
			_charNames[(char)0x0483] = "combining cyrillic titlo";
			_charNames[(char)0x0484] = "combining cyrillic palatalization";
			_charNames[(char)0x0485] = "combining cyrillic dasia pneumata";
			_charNames[(char)0x0486] = "combining cyrillic psili pneumata";
			_charNames[(char)0x0488] = "combining cyrillic hundred thousands sign";
			_charNames[(char)0x0489] = "combining cyrillic millions sign";
			_charNames[(char)0x048A] = "cyrillic capital letter short i with tail";
			_charNames[(char)0x048B] = "cyrillic small letter short i with tail";
			_charNames[(char)0x048C] = "cyrillic capital letter semisoft sign";
			_charNames[(char)0x048D] = "cyrillic small letter semisoft sign";
			_charNames[(char)0x048E] = "cyrillic capital letter er with tick";
			_charNames[(char)0x048F] = "cyrillic small letter er with tick";
			_charNames[(char)0x0490] = "cyrillic capital letter ghe with upturn";
			_charNames[(char)0x0491] = "cyrillic small letter ghe with upturn";
			_charNames[(char)0x0492] = "cyrillic capital letter ghe with stroke";
			_charNames[(char)0x0493] = "cyrillic small letter ghe with stroke";
			_charNames[(char)0x0494] = "cyrillic capital letter ghe with middle hook";
			_charNames[(char)0x0495] = "cyrillic small letter ghe with middle hook";
			_charNames[(char)0x0496] = "cyrillic capital letter zhe with descender";
			_charNames[(char)0x0497] = "cyrillic small letter zhe with descender";
			_charNames[(char)0x0498] = "cyrillic capital letter ze with descender";
			_charNames[(char)0x0499] = "cyrillic small letter ze with descender";
			_charNames[(char)0x049A] = "cyrillic capital letter ka with descender";
			_charNames[(char)0x049B] = "cyrillic small letter ka with descender";
			_charNames[(char)0x049C] = "cyrillic capital letter ka with vertical stroke";
			_charNames[(char)0x049D] = "cyrillic small letter ka with vertical stroke";
			_charNames[(char)0x049E] = "cyrillic capital letter ka with stroke";
			_charNames[(char)0x049F] = "cyrillic small letter ka with stroke";
			_charNames[(char)0x04A0] = "cyrillic capital letter bashkir ka";
			_charNames[(char)0x04A1] = "cyrillic small letter bashkir ka";
			_charNames[(char)0x04A2] = "cyrillic capital letter en with descender";
			_charNames[(char)0x04A3] = "cyrillic small letter en with descender";
			_charNames[(char)0x04A4] = "cyrillic capital ligature en ghe";
			_charNames[(char)0x04A5] = "cyrillic small ligature en ghe";
			_charNames[(char)0x04A6] = "cyrillic capital letter pe with middle hook";
			_charNames[(char)0x04A7] = "cyrillic small letter pe with middle hook";
			_charNames[(char)0x04A8] = "cyrillic capital letter abkhasian ha";
			_charNames[(char)0x04A9] = "cyrillic small letter abkhasian ha";
			_charNames[(char)0x04AA] = "cyrillic capital letter es with descender";
			_charNames[(char)0x04AB] = "cyrillic small letter es with descender";
			_charNames[(char)0x04AC] = "cyrillic capital letter te with descender";
			_charNames[(char)0x04AD] = "cyrillic small letter te with descender";
			_charNames[(char)0x04AE] = "cyrillic capital letter straight u";
			_charNames[(char)0x04AF] = "cyrillic small letter straight u";
			_charNames[(char)0x04B0] = "cyrillic capital letter straight u with stroke";
			_charNames[(char)0x04B1] = "cyrillic small letter straight u with stroke";
			_charNames[(char)0x04B2] = "cyrillic capital letter ha with descender";
			_charNames[(char)0x04B3] = "cyrillic small letter ha with descender";
			_charNames[(char)0x04B4] = "cyrillic capital ligature te tse";
			_charNames[(char)0x04B5] = "cyrillic small ligature te tse";
			_charNames[(char)0x04B6] = "cyrillic capital letter che with descender";
			_charNames[(char)0x04B7] = "cyrillic small letter che with descender";
			_charNames[(char)0x04B8] = "cyrillic capital letter che with vertical stroke";
			_charNames[(char)0x04B9] = "cyrillic small letter che with vertical stroke";
			_charNames[(char)0x04BA] = "cyrillic capital letter shha";
			_charNames[(char)0x04BB] = "cyrillic small letter shha";
			_charNames[(char)0x04BC] = "cyrillic capital letter abkhasian che";
			_charNames[(char)0x04BD] = "cyrillic small letter abkhasian che";
			_charNames[(char)0x04BE] = "cyrillic capital letter abkhasian che with descender";
			_charNames[(char)0x04BF] = "cyrillic small letter abkhasian che with descender";
			_charNames[(char)0x04C0] = "cyrillic letter palochka";
			_charNames[(char)0x04C1] = "cyrillic capital letter zhe with breve";
			_charNames[(char)0x04C2] = "cyrillic small letter zhe with breve";
			_charNames[(char)0x04C3] = "cyrillic capital letter ka with hook";
			_charNames[(char)0x04C4] = "cyrillic small letter ka with hook";
			_charNames[(char)0x04C5] = "cyrillic capital letter el with tail";
			_charNames[(char)0x04C6] = "cyrillic small letter el with tail";
			_charNames[(char)0x04C7] = "cyrillic capital letter en with hook";
			_charNames[(char)0x04C8] = "cyrillic small letter en with hook";
			_charNames[(char)0x04C9] = "cyrillic capital letter en with tail";
			_charNames[(char)0x04CA] = "cyrillic small letter en with tail";
			_charNames[(char)0x04CB] = "cyrillic capital letter khakassian che";
			_charNames[(char)0x04CC] = "cyrillic small letter khakassian che";
			_charNames[(char)0x04CD] = "cyrillic capital letter em with tail";
			_charNames[(char)0x04CE] = "cyrillic small letter em with tail";
			_charNames[(char)0x04D0] = "cyrillic capital letter a with breve";
			_charNames[(char)0x04D1] = "cyrillic small letter a with breve";
			_charNames[(char)0x04D2] = "cyrillic capital letter a with diaeresis";
			_charNames[(char)0x04D3] = "cyrillic small letter a with diaeresis";
			_charNames[(char)0x04D4] = "cyrillic capital ligature a ie";
			_charNames[(char)0x04D5] = "cyrillic small ligature a ie";
			_charNames[(char)0x04D6] = "cyrillic capital letter ie with breve";
			_charNames[(char)0x04D7] = "cyrillic small letter ie with breve";
			_charNames[(char)0x04D8] = "cyrillic capital letter schwa";
			_charNames[(char)0x04D9] = "cyrillic small letter schwa";
			_charNames[(char)0x04DA] = "cyrillic capital letter schwa with diaeresis";
			_charNames[(char)0x04DB] = "cyrillic small letter schwa with diaeresis";
			_charNames[(char)0x04DC] = "cyrillic capital letter zhe with diaeresis";
			_charNames[(char)0x04DD] = "cyrillic small letter zhe with diaeresis";
			_charNames[(char)0x04DE] = "cyrillic capital letter ze with diaeresis";
			_charNames[(char)0x04DF] = "cyrillic small letter ze with diaeresis";
			_charNames[(char)0x04E0] = "cyrillic capital letter abkhasian dze";
			_charNames[(char)0x04E1] = "cyrillic small letter abkhasian dze";
			_charNames[(char)0x04E2] = "cyrillic capital letter i with macron";
			_charNames[(char)0x04E3] = "cyrillic small letter i with macron";
			_charNames[(char)0x04E4] = "cyrillic capital letter i with diaeresis";
			_charNames[(char)0x04E5] = "cyrillic small letter i with diaeresis";
			_charNames[(char)0x04E6] = "cyrillic capital letter o with diaeresis";
			_charNames[(char)0x04E7] = "cyrillic small letter o with diaeresis";
			_charNames[(char)0x04E8] = "cyrillic capital letter barred o";
			_charNames[(char)0x04E9] = "cyrillic small letter barred o";
			_charNames[(char)0x04EA] = "cyrillic capital letter barred o with diaeresis";
			_charNames[(char)0x04EB] = "cyrillic small letter barred o with diaeresis";
			_charNames[(char)0x04EC] = "cyrillic capital letter e with diaeresis";
			_charNames[(char)0x04ED] = "cyrillic small letter e with diaeresis";
			_charNames[(char)0x04EE] = "cyrillic capital letter u with macron";
			_charNames[(char)0x04EF] = "cyrillic small letter u with macron";
			_charNames[(char)0x04F0] = "cyrillic capital letter u with diaeresis";
			_charNames[(char)0x04F1] = "cyrillic small letter u with diaeresis";
			_charNames[(char)0x04F2] = "cyrillic capital letter u with double acute";
			_charNames[(char)0x04F3] = "cyrillic small letter u with double acute";
			_charNames[(char)0x04F4] = "cyrillic capital letter che with diaeresis";
			_charNames[(char)0x04F5] = "cyrillic small letter che with diaeresis";
			_charNames[(char)0x04F6] = "cyrillic capital letter ghe with descender";
			_charNames[(char)0x04F7] = "cyrillic small letter ghe with descender";
			_charNames[(char)0x04F8] = "cyrillic capital letter yeru with diaeresis";
			_charNames[(char)0x04F9] = "cyrillic small letter yeru with diaeresis";
			_charNames[(char)0x0500] = "cyrillic capital letter komi de";
			_charNames[(char)0x0501] = "cyrillic small letter komi de";
			_charNames[(char)0x0502] = "cyrillic capital letter komi dje";
			_charNames[(char)0x0503] = "cyrillic small letter komi dje";
			_charNames[(char)0x0504] = "cyrillic capital letter komi zje";
			_charNames[(char)0x0505] = "cyrillic small letter komi zje";
			_charNames[(char)0x0506] = "cyrillic capital letter komi dzje";
			_charNames[(char)0x0507] = "cyrillic small letter komi dzje";
			_charNames[(char)0x0508] = "cyrillic capital letter komi lje";
			_charNames[(char)0x0509] = "cyrillic small letter komi lje";
			_charNames[(char)0x050A] = "cyrillic capital letter komi nje";
			_charNames[(char)0x050B] = "cyrillic small letter komi nje";
			_charNames[(char)0x050C] = "cyrillic capital letter komi sje";
			_charNames[(char)0x050D] = "cyrillic small letter komi sje";
			_charNames[(char)0x050E] = "cyrillic capital letter komi tje";
			_charNames[(char)0x050F] = "cyrillic small letter komi tje";
			_charNames[(char)0x0531] = "armenian capital letter ayb";
			_charNames[(char)0x0532] = "armenian capital letter ben";
			_charNames[(char)0x0533] = "armenian capital letter gim";
			_charNames[(char)0x0534] = "armenian capital letter da";
			_charNames[(char)0x0535] = "armenian capital letter ech";
			_charNames[(char)0x0536] = "armenian capital letter za";
			_charNames[(char)0x0537] = "armenian capital letter eh";
			_charNames[(char)0x0538] = "armenian capital letter et";
			_charNames[(char)0x0539] = "armenian capital letter to";
			_charNames[(char)0x053A] = "armenian capital letter zhe";
			_charNames[(char)0x053B] = "armenian capital letter ini";
			_charNames[(char)0x053C] = "armenian capital letter liwn";
			_charNames[(char)0x053D] = "armenian capital letter xeh";
			_charNames[(char)0x053E] = "armenian capital letter ca";
			_charNames[(char)0x053F] = "armenian capital letter ken";
			_charNames[(char)0x0540] = "armenian capital letter ho";
			_charNames[(char)0x0541] = "armenian capital letter ja";
			_charNames[(char)0x0542] = "armenian capital letter ghad";
			_charNames[(char)0x0543] = "armenian capital letter cheh";
			_charNames[(char)0x0544] = "armenian capital letter men";
			_charNames[(char)0x0545] = "armenian capital letter yi";
			_charNames[(char)0x0546] = "armenian capital letter now";
			_charNames[(char)0x0547] = "armenian capital letter sha";
			_charNames[(char)0x0548] = "armenian capital letter vo";
			_charNames[(char)0x0549] = "armenian capital letter cha";
			_charNames[(char)0x054A] = "armenian capital letter peh";
			_charNames[(char)0x054B] = "armenian capital letter jheh";
			_charNames[(char)0x054C] = "armenian capital letter ra";
			_charNames[(char)0x054D] = "armenian capital letter seh";
			_charNames[(char)0x054E] = "armenian capital letter vew";
			_charNames[(char)0x054F] = "armenian capital letter tiwn";
			_charNames[(char)0x0550] = "armenian capital letter reh";
			_charNames[(char)0x0551] = "armenian capital letter co";
			_charNames[(char)0x0552] = "armenian capital letter yiwn";
			_charNames[(char)0x0553] = "armenian capital letter piwr";
			_charNames[(char)0x0554] = "armenian capital letter keh";
			_charNames[(char)0x0555] = "armenian capital letter oh";
			_charNames[(char)0x0556] = "armenian capital letter feh";
			_charNames[(char)0x0559] = "armenian modifier letter left half ring";
			_charNames[(char)0x055A] = "armenian apostrophe";
			_charNames[(char)0x055B] = "armenian emphasis mark";
			_charNames[(char)0x055C] = "armenian exclamation mark";
			_charNames[(char)0x055D] = "armenian comma";
			_charNames[(char)0x055E] = "armenian question mark";
			_charNames[(char)0x055F] = "armenian abbreviation mark";
			_charNames[(char)0x0561] = "armenian small letter ayb";
			_charNames[(char)0x0562] = "armenian small letter ben";
			_charNames[(char)0x0563] = "armenian small letter gim";
			_charNames[(char)0x0564] = "armenian small letter da";
			_charNames[(char)0x0565] = "armenian small letter ech";
			_charNames[(char)0x0566] = "armenian small letter za";
			_charNames[(char)0x0567] = "armenian small letter eh";
			_charNames[(char)0x0568] = "armenian small letter et";
			_charNames[(char)0x0569] = "armenian small letter to";
			_charNames[(char)0x056A] = "armenian small letter zhe";
			_charNames[(char)0x056B] = "armenian small letter ini";
			_charNames[(char)0x056C] = "armenian small letter liwn";
			_charNames[(char)0x056D] = "armenian small letter xeh";
			_charNames[(char)0x056E] = "armenian small letter ca";
			_charNames[(char)0x056F] = "armenian small letter ken";
			_charNames[(char)0x0570] = "armenian small letter ho";
			_charNames[(char)0x0571] = "armenian small letter ja";
			_charNames[(char)0x0572] = "armenian small letter ghad";
			_charNames[(char)0x0573] = "armenian small letter cheh";
			_charNames[(char)0x0574] = "armenian small letter men";
			_charNames[(char)0x0575] = "armenian small letter yi";
			_charNames[(char)0x0576] = "armenian small letter now";
			_charNames[(char)0x0577] = "armenian small letter sha";
			_charNames[(char)0x0578] = "armenian small letter vo";
			_charNames[(char)0x0579] = "armenian small letter cha";
			_charNames[(char)0x057A] = "armenian small letter peh";
			_charNames[(char)0x057B] = "armenian small letter jheh";
			_charNames[(char)0x057C] = "armenian small letter ra";
			_charNames[(char)0x057D] = "armenian small letter seh";
			_charNames[(char)0x057E] = "armenian small letter vew";
			_charNames[(char)0x057F] = "armenian small letter tiwn";
			_charNames[(char)0x0580] = "armenian small letter reh";
			_charNames[(char)0x0581] = "armenian small letter co";
			_charNames[(char)0x0582] = "armenian small letter yiwn";
			_charNames[(char)0x0583] = "armenian small letter piwr";
			_charNames[(char)0x0584] = "armenian small letter keh";
			_charNames[(char)0x0585] = "armenian small letter oh";
			_charNames[(char)0x0586] = "armenian small letter feh";
			_charNames[(char)0x0587] = "armenian small ligature ech yiwn";
			_charNames[(char)0x0589] = "armenian full stop";
			_charNames[(char)0x058A] = "armenian hyphen";
			_charNames[(char)0x0591] = "hebrew accent etnahta";
			_charNames[(char)0x0592] = "hebrew accent segol";
			_charNames[(char)0x0593] = "hebrew accent shalshelet";
			_charNames[(char)0x0594] = "hebrew accent zaqef qatan";
			_charNames[(char)0x0595] = "hebrew accent zaqef gadol";
			_charNames[(char)0x0596] = "hebrew accent tipeha";
			_charNames[(char)0x0597] = "hebrew accent revia";
			_charNames[(char)0x0598] = "hebrew accent zarqa";
			_charNames[(char)0x0599] = "hebrew accent pashta";
			_charNames[(char)0x059A] = "hebrew accent yetiv";
			_charNames[(char)0x059B] = "hebrew accent tevir";
			_charNames[(char)0x059C] = "hebrew accent geresh";
			_charNames[(char)0x059D] = "hebrew accent geresh muqdam";
			_charNames[(char)0x059E] = "hebrew accent gershayim";
			_charNames[(char)0x059F] = "hebrew accent qarney para";
			_charNames[(char)0x05A0] = "hebrew accent telisha gedola";
			_charNames[(char)0x05A1] = "hebrew accent pazer";
			_charNames[(char)0x05A2] = "hebrew accent atnah hafukh";
			_charNames[(char)0x05A3] = "hebrew accent munah";
			_charNames[(char)0x05A4] = "hebrew accent mahapakh";
			_charNames[(char)0x05A5] = "hebrew accent merkha";
			_charNames[(char)0x05A6] = "hebrew accent merkha kefula";
			_charNames[(char)0x05A7] = "hebrew accent darga";
			_charNames[(char)0x05A8] = "hebrew accent qadma";
			_charNames[(char)0x05A9] = "hebrew accent telisha qetana";
			_charNames[(char)0x05AA] = "hebrew accent yerah ben yomo";
			_charNames[(char)0x05AB] = "hebrew accent ole";
			_charNames[(char)0x05AC] = "hebrew accent iluy";
			_charNames[(char)0x05AD] = "hebrew accent dehi";
			_charNames[(char)0x05AE] = "hebrew accent zinor";
			_charNames[(char)0x05AF] = "hebrew mark masora circle";
			_charNames[(char)0x05B0] = "hebrew point sheva";
			_charNames[(char)0x05B1] = "hebrew point hataf segol";
			_charNames[(char)0x05B2] = "hebrew point hataf patah";
			_charNames[(char)0x05B3] = "hebrew point hataf qamats";
			_charNames[(char)0x05B4] = "hebrew point hiriq";
			_charNames[(char)0x05B5] = "hebrew point tsere";
			_charNames[(char)0x05B6] = "hebrew point segol";
			_charNames[(char)0x05B7] = "hebrew point patah";
			_charNames[(char)0x05B8] = "hebrew point qamats";
			_charNames[(char)0x05B9] = "hebrew point holam";
			_charNames[(char)0x05BB] = "hebrew point qubuts";
			_charNames[(char)0x05BC] = "hebrew point dagesh or mapiq";
			_charNames[(char)0x05BD] = "hebrew point meteg";
			_charNames[(char)0x05BE] = "hebrew punctuation maqaf";
			_charNames[(char)0x05BF] = "hebrew point rafe";
			_charNames[(char)0x05C0] = "hebrew punctuation paseq";
			_charNames[(char)0x05C1] = "hebrew point shin dot";
			_charNames[(char)0x05C2] = "hebrew point sin dot";
			_charNames[(char)0x05C3] = "hebrew punctuation sof pasuq";
			_charNames[(char)0x05C4] = "hebrew mark upper dot";
			_charNames[(char)0x05C5] = "hebrew mark lower dot";
			_charNames[(char)0x05C6] = "hebrew punctuation nun hafukha";
			_charNames[(char)0x05C7] = "hebrew point qamats qatan";
			_charNames[(char)0x05D0] = "hebrew letter alef";
			_charNames[(char)0x05D1] = "hebrew letter bet";
			_charNames[(char)0x05D2] = "hebrew letter gimel";
			_charNames[(char)0x05D3] = "hebrew letter dalet";
			_charNames[(char)0x05D4] = "hebrew letter he";
			_charNames[(char)0x05D5] = "hebrew letter vav";
			_charNames[(char)0x05D6] = "hebrew letter zayin";
			_charNames[(char)0x05D7] = "hebrew letter het";
			_charNames[(char)0x05D8] = "hebrew letter tet";
			_charNames[(char)0x05D9] = "hebrew letter yod";
			_charNames[(char)0x05DA] = "hebrew letter final kaf";
			_charNames[(char)0x05DB] = "hebrew letter kaf";
			_charNames[(char)0x05DC] = "hebrew letter lamed";
			_charNames[(char)0x05DD] = "hebrew letter final mem";
			_charNames[(char)0x05DE] = "hebrew letter mem";
			_charNames[(char)0x05DF] = "hebrew letter final nun";
			_charNames[(char)0x05E0] = "hebrew letter nun";
			_charNames[(char)0x05E1] = "hebrew letter samekh";
			_charNames[(char)0x05E2] = "hebrew letter ayin";
			_charNames[(char)0x05E3] = "hebrew letter final pe";
			_charNames[(char)0x05E4] = "hebrew letter pe";
			_charNames[(char)0x05E5] = "hebrew letter final tsadi";
			_charNames[(char)0x05E6] = "hebrew letter tsadi";
			_charNames[(char)0x05E7] = "hebrew letter qof";
			_charNames[(char)0x05E8] = "hebrew letter resh";
			_charNames[(char)0x05E9] = "hebrew letter shin";
			_charNames[(char)0x05EA] = "hebrew letter tav";
			_charNames[(char)0x05F0] = "hebrew ligature yiddish double vav";
			_charNames[(char)0x05F1] = "hebrew ligature yiddish vav yod";
			_charNames[(char)0x05F2] = "hebrew ligature yiddish double yod";
			_charNames[(char)0x05F3] = "hebrew punctuation geresh";
			_charNames[(char)0x05F4] = "hebrew punctuation gershayim";
			_charNames[(char)0x0600] = "arabic number sign";
			_charNames[(char)0x0601] = "arabic sign sanah";
			_charNames[(char)0x0602] = "arabic footnote marker";
			_charNames[(char)0x0603] = "arabic sign safha";
			_charNames[(char)0x060B] = "afghani sign";
			_charNames[(char)0x060C] = "arabic comma";
			_charNames[(char)0x060D] = "arabic date separator";
			_charNames[(char)0x060E] = "arabic poetic verse sign";
			_charNames[(char)0x060F] = "arabic sign misra";
			_charNames[(char)0x0610] = "arabic sign sallallahou alayhe wassallam";
			_charNames[(char)0x0611] = "arabic sign alayhe assallam";
			_charNames[(char)0x0612] = "arabic sign rahmatullah alayhe";
			_charNames[(char)0x0613] = "arabic sign radi allahou anhu";
			_charNames[(char)0x0614] = "arabic sign takhallus";
			_charNames[(char)0x0615] = "arabic small high tah";
			_charNames[(char)0x061B] = "arabic semicolon";
			_charNames[(char)0x061E] = "arabic triple dot punctuation mark";
			_charNames[(char)0x061F] = "arabic question mark";
			_charNames[(char)0x0621] = "arabic letter hamza";
			_charNames[(char)0x0622] = "arabic letter alef with madda above";
			_charNames[(char)0x0623] = "arabic letter alef with hamza above";
			_charNames[(char)0x0624] = "arabic letter waw with hamza above";
			_charNames[(char)0x0625] = "arabic letter alef with hamza below";
			_charNames[(char)0x0626] = "arabic letter yeh with hamza above";
			_charNames[(char)0x0627] = "arabic letter alef";
			_charNames[(char)0x0628] = "arabic letter beh";
			_charNames[(char)0x0629] = "arabic letter teh marbuta";
			_charNames[(char)0x062A] = "arabic letter teh";
			_charNames[(char)0x062B] = "arabic letter theh";
			_charNames[(char)0x062C] = "arabic letter jeem";
			_charNames[(char)0x062D] = "arabic letter hah";
			_charNames[(char)0x062E] = "arabic letter khah";
			_charNames[(char)0x062F] = "arabic letter dal";
			_charNames[(char)0x0630] = "arabic letter thal";
			_charNames[(char)0x0631] = "arabic letter reh";
			_charNames[(char)0x0632] = "arabic letter zain";
			_charNames[(char)0x0633] = "arabic letter seen";
			_charNames[(char)0x0634] = "arabic letter sheen";
			_charNames[(char)0x0635] = "arabic letter sad";
			_charNames[(char)0x0636] = "arabic letter dad";
			_charNames[(char)0x0637] = "arabic letter tah";
			_charNames[(char)0x0638] = "arabic letter zah";
			_charNames[(char)0x0639] = "arabic letter ain";
			_charNames[(char)0x063A] = "arabic letter ghain";
			_charNames[(char)0x0640] = "arabic tatweel";
			_charNames[(char)0x0641] = "arabic letter feh";
			_charNames[(char)0x0642] = "arabic letter qaf";
			_charNames[(char)0x0643] = "arabic letter kaf";
			_charNames[(char)0x0644] = "arabic letter lam";
			_charNames[(char)0x0645] = "arabic letter meem";
			_charNames[(char)0x0646] = "arabic letter noon";
			_charNames[(char)0x0647] = "arabic letter heh";
			_charNames[(char)0x0648] = "arabic letter waw";
			_charNames[(char)0x0649] = "arabic letter alef maksura";
			_charNames[(char)0x064A] = "arabic letter yeh";
			_charNames[(char)0x064B] = "arabic fathatan";
			_charNames[(char)0x064C] = "arabic dammatan";
			_charNames[(char)0x064D] = "arabic kasratan";
			_charNames[(char)0x064E] = "arabic fatha";
			_charNames[(char)0x064F] = "arabic damma";
			_charNames[(char)0x0650] = "arabic kasra";
			_charNames[(char)0x0651] = "arabic shadda";
			_charNames[(char)0x0652] = "arabic sukun";
			_charNames[(char)0x0653] = "arabic maddah above";
			_charNames[(char)0x0654] = "arabic hamza above";
			_charNames[(char)0x0655] = "arabic hamza below";
			_charNames[(char)0x0656] = "arabic subscript alef";
			_charNames[(char)0x0657] = "arabic inverted damma";
			_charNames[(char)0x0658] = "arabic mark noon ghunna";
			_charNames[(char)0x0659] = "arabic zwarakay";
			_charNames[(char)0x065A] = "arabic vowel sign small v above";
			_charNames[(char)0x065B] = "arabic vowel sign inverted small v above";
			_charNames[(char)0x065C] = "arabic vowel sign dot below";
			_charNames[(char)0x065D] = "arabic reversed damma";
			_charNames[(char)0x065E] = "arabic fatha with two dots";
			_charNames[(char)0x0660] = "arabic-indic digit zero";
			_charNames[(char)0x0661] = "arabic-indic digit one";
			_charNames[(char)0x0662] = "arabic-indic digit two";
			_charNames[(char)0x0663] = "arabic-indic digit three";
			_charNames[(char)0x0664] = "arabic-indic digit four";
			_charNames[(char)0x0665] = "arabic-indic digit five";
			_charNames[(char)0x0666] = "arabic-indic digit six";
			_charNames[(char)0x0667] = "arabic-indic digit seven";
			_charNames[(char)0x0668] = "arabic-indic digit eight";
			_charNames[(char)0x0669] = "arabic-indic digit nine";
			_charNames[(char)0x066A] = "arabic percent sign";
			_charNames[(char)0x066B] = "arabic decimal separator";
			_charNames[(char)0x066C] = "arabic thousands separator";
			_charNames[(char)0x066D] = "arabic five pointed star";
			_charNames[(char)0x066E] = "arabic letter dotless beh";
			_charNames[(char)0x066F] = "arabic letter dotless qaf";
			_charNames[(char)0x0670] = "arabic letter superscript alef";
			_charNames[(char)0x0671] = "arabic letter alef wasla";
			_charNames[(char)0x0672] = "arabic letter alef with wavy hamza above";
			_charNames[(char)0x0673] = "arabic letter alef with wavy hamza below";
			_charNames[(char)0x0674] = "arabic letter high hamza";
			_charNames[(char)0x0675] = "arabic letter high hamza alef";
			_charNames[(char)0x0676] = "arabic letter high hamza waw";
			_charNames[(char)0x0677] = "arabic letter u with hamza above";
			_charNames[(char)0x0678] = "arabic letter high hamza yeh";
			_charNames[(char)0x0679] = "arabic letter tteh";
			_charNames[(char)0x067A] = "arabic letter tteheh";
			_charNames[(char)0x067B] = "arabic letter beeh";
			_charNames[(char)0x067C] = "arabic letter teh with ring";
			_charNames[(char)0x067D] = "arabic letter teh with three dots above downwards";
			_charNames[(char)0x067E] = "arabic letter peh";
			_charNames[(char)0x067F] = "arabic letter teheh";
			_charNames[(char)0x0680] = "arabic letter beheh";
			_charNames[(char)0x0681] = "arabic letter hah with hamza above";
			_charNames[(char)0x0682] = "arabic letter hah with two dots vertical above";
			_charNames[(char)0x0683] = "arabic letter nyeh";
			_charNames[(char)0x0684] = "arabic letter dyeh";
			_charNames[(char)0x0685] = "arabic letter hah with three dots above";
			_charNames[(char)0x0686] = "arabic letter tcheh";
			_charNames[(char)0x0687] = "arabic letter tcheheh";
			_charNames[(char)0x0688] = "arabic letter ddal";
			_charNames[(char)0x0689] = "arabic letter dal with ring";
			_charNames[(char)0x068A] = "arabic letter dal with dot below";
			_charNames[(char)0x068B] = "arabic letter dal with dot below and small tah";
			_charNames[(char)0x068C] = "arabic letter dahal";
			_charNames[(char)0x068D] = "arabic letter ddahal";
			_charNames[(char)0x068E] = "arabic letter dul";
			_charNames[(char)0x068F] = "arabic letter dal with three dots above downwards";
			_charNames[(char)0x0690] = "arabic letter dal with four dots above";
			_charNames[(char)0x0691] = "arabic letter rreh";
			_charNames[(char)0x0692] = "arabic letter reh with small v";
			_charNames[(char)0x0693] = "arabic letter reh with ring";
			_charNames[(char)0x0694] = "arabic letter reh with dot below";
			_charNames[(char)0x0695] = "arabic letter reh with small v below";
			_charNames[(char)0x0696] = "arabic letter reh with dot below and dot above";
			_charNames[(char)0x0697] = "arabic letter reh with two dots above";
			_charNames[(char)0x0698] = "arabic letter jeh";
			_charNames[(char)0x0699] = "arabic letter reh with four dots above";
			_charNames[(char)0x069A] = "arabic letter seen with dot below and dot above";
			_charNames[(char)0x069B] = "arabic letter seen with three dots below";
			_charNames[(char)0x069C] = "arabic letter seen with three dots below and three dots above";
			_charNames[(char)0x069D] = "arabic letter sad with two dots below";
			_charNames[(char)0x069E] = "arabic letter sad with three dots above";
			_charNames[(char)0x069F] = "arabic letter tah with three dots above";
			_charNames[(char)0x06A0] = "arabic letter ain with three dots above";
			_charNames[(char)0x06A1] = "arabic letter dotless feh";
			_charNames[(char)0x06A2] = "arabic letter feh with dot moved below";
			_charNames[(char)0x06A3] = "arabic letter feh with dot below";
			_charNames[(char)0x06A4] = "arabic letter veh";
			_charNames[(char)0x06A5] = "arabic letter feh with three dots below";
			_charNames[(char)0x06A6] = "arabic letter peheh";
			_charNames[(char)0x06A7] = "arabic letter qaf with dot above";
			_charNames[(char)0x06A8] = "arabic letter qaf with three dots above";
			_charNames[(char)0x06A9] = "arabic letter keheh";
			_charNames[(char)0x06AA] = "arabic letter swash kaf";
			_charNames[(char)0x06AB] = "arabic letter kaf with ring";
			_charNames[(char)0x06AC] = "arabic letter kaf with dot above";
			_charNames[(char)0x06AD] = "arabic letter ng";
			_charNames[(char)0x06AE] = "arabic letter kaf with three dots below";
			_charNames[(char)0x06AF] = "arabic letter gaf";
			_charNames[(char)0x06B0] = "arabic letter gaf with ring";
			_charNames[(char)0x06B1] = "arabic letter ngoeh";
			_charNames[(char)0x06B2] = "arabic letter gaf with two dots below";
			_charNames[(char)0x06B3] = "arabic letter gueh";
			_charNames[(char)0x06B4] = "arabic letter gaf with three dots above";
			_charNames[(char)0x06B5] = "arabic letter lam with small v";
			_charNames[(char)0x06B6] = "arabic letter lam with dot above";
			_charNames[(char)0x06B7] = "arabic letter lam with three dots above";
			_charNames[(char)0x06B8] = "arabic letter lam with three dots below";
			_charNames[(char)0x06B9] = "arabic letter noon with dot below";
			_charNames[(char)0x06BA] = "arabic letter noon ghunna";
			_charNames[(char)0x06BB] = "arabic letter rnoon";
			_charNames[(char)0x06BC] = "arabic letter noon with ring";
			_charNames[(char)0x06BD] = "arabic letter noon with three dots above";
			_charNames[(char)0x06BE] = "arabic letter heh doachashmee";
			_charNames[(char)0x06BF] = "arabic letter tcheh with dot above";
			_charNames[(char)0x06C0] = "arabic letter heh with yeh above";
			_charNames[(char)0x06C1] = "arabic letter heh goal";
			_charNames[(char)0x06C2] = "arabic letter heh goal with hamza above";
			_charNames[(char)0x06C3] = "arabic letter teh marbuta goal";
			_charNames[(char)0x06C4] = "arabic letter waw with ring";
			_charNames[(char)0x06C5] = "arabic letter kirghiz oe";
			_charNames[(char)0x06C6] = "arabic letter oe";
			_charNames[(char)0x06C7] = "arabic letter u";
			_charNames[(char)0x06C8] = "arabic letter yu";
			_charNames[(char)0x06C9] = "arabic letter kirghiz yu";
			_charNames[(char)0x06CA] = "arabic letter waw with two dots above";
			_charNames[(char)0x06CB] = "arabic letter ve";
			_charNames[(char)0x06CC] = "arabic letter farsi yeh";
			_charNames[(char)0x06CD] = "arabic letter yeh with tail";
			_charNames[(char)0x06CE] = "arabic letter yeh with small v";
			_charNames[(char)0x06CF] = "arabic letter waw with dot above";
			_charNames[(char)0x06D0] = "arabic letter e";
			_charNames[(char)0x06D1] = "arabic letter yeh with three dots below";
			_charNames[(char)0x06D2] = "arabic letter yeh barree";
			_charNames[(char)0x06D3] = "arabic letter yeh barree with hamza above";
			_charNames[(char)0x06D4] = "arabic full stop";
			_charNames[(char)0x06D5] = "arabic letter ae";
			_charNames[(char)0x06D6] = "arabic small high ligature sad with lam with alef maksura";
			_charNames[(char)0x06D7] = "arabic small high ligature qaf with lam with alef maksura";
			_charNames[(char)0x06D8] = "arabic small high meem initial form";
			_charNames[(char)0x06D9] = "arabic small high lam alef";
			_charNames[(char)0x06DA] = "arabic small high jeem";
			_charNames[(char)0x06DB] = "arabic small high three dots";
			_charNames[(char)0x06DC] = "arabic small high seen";
			_charNames[(char)0x06DD] = "arabic end of ayah";
			_charNames[(char)0x06DE] = "arabic start of rub el hizb";
			_charNames[(char)0x06DF] = "arabic small high rounded zero";
			_charNames[(char)0x06E0] = "arabic small high upright rectangular zero";
			_charNames[(char)0x06E1] = "arabic small high dotless head of khah";
			_charNames[(char)0x06E2] = "arabic small high meem isolated form";
			_charNames[(char)0x06E3] = "arabic small low seen";
			_charNames[(char)0x06E4] = "arabic small high madda";
			_charNames[(char)0x06E5] = "arabic small waw";
			_charNames[(char)0x06E6] = "arabic small yeh";
			_charNames[(char)0x06E7] = "arabic small high yeh";
			_charNames[(char)0x06E8] = "arabic small high noon";
			_charNames[(char)0x06E9] = "arabic place of sajdah";
			_charNames[(char)0x06EA] = "arabic empty centre low stop";
			_charNames[(char)0x06EB] = "arabic empty centre high stop";
			_charNames[(char)0x06EC] = "arabic rounded high stop with filled centre";
			_charNames[(char)0x06ED] = "arabic small low meem";
			_charNames[(char)0x06EE] = "arabic letter dal with inverted v";
			_charNames[(char)0x06EF] = "arabic letter reh with inverted v";
			_charNames[(char)0x06F0] = "extended arabic-indic digit zero";
			_charNames[(char)0x06F1] = "extended arabic-indic digit one";
			_charNames[(char)0x06F2] = "extended arabic-indic digit two";
			_charNames[(char)0x06F3] = "extended arabic-indic digit three";
			_charNames[(char)0x06F4] = "extended arabic-indic digit four";
			_charNames[(char)0x06F5] = "extended arabic-indic digit five";
			_charNames[(char)0x06F6] = "extended arabic-indic digit six";
			_charNames[(char)0x06F7] = "extended arabic-indic digit seven";
			_charNames[(char)0x06F8] = "extended arabic-indic digit eight";
			_charNames[(char)0x06F9] = "extended arabic-indic digit nine";
			_charNames[(char)0x06FA] = "arabic letter sheen with dot below";
			_charNames[(char)0x06FB] = "arabic letter dad with dot below";
			_charNames[(char)0x06FC] = "arabic letter ghain with dot below";
			_charNames[(char)0x06FD] = "arabic sign sindhi ampersand";
			_charNames[(char)0x06FE] = "arabic sign sindhi postposition men";
			_charNames[(char)0x06FF] = "arabic letter heh with inverted v";
			_charNames[(char)0x0700] = "syriac end of paragraph";
			_charNames[(char)0x0701] = "syriac supralinear full stop";
			_charNames[(char)0x0702] = "syriac sublinear full stop";
			_charNames[(char)0x0703] = "syriac supralinear colon";
			_charNames[(char)0x0704] = "syriac sublinear colon";
			_charNames[(char)0x0705] = "syriac horizontal colon";
			_charNames[(char)0x0706] = "syriac colon skewed left";
			_charNames[(char)0x0707] = "syriac colon skewed right";
			_charNames[(char)0x0708] = "syriac supralinear colon skewed left";
			_charNames[(char)0x0709] = "syriac sublinear colon skewed right";
			_charNames[(char)0x070A] = "syriac contraction";
			_charNames[(char)0x070B] = "syriac harklean obelus";
			_charNames[(char)0x070C] = "syriac harklean metobelus";
			_charNames[(char)0x070D] = "syriac harklean asteriscus";
			_charNames[(char)0x070F] = "syriac abbreviation mark";
			_charNames[(char)0x0710] = "syriac letter alaph";
			_charNames[(char)0x0711] = "syriac letter superscript alaph";
			_charNames[(char)0x0712] = "syriac letter beth";
			_charNames[(char)0x0713] = "syriac letter gamal";
			_charNames[(char)0x0714] = "syriac letter gamal garshuni";
			_charNames[(char)0x0715] = "syriac letter dalath";
			_charNames[(char)0x0716] = "syriac letter dotless dalath rish";
			_charNames[(char)0x0717] = "syriac letter he";
			_charNames[(char)0x0718] = "syriac letter waw";
			_charNames[(char)0x0719] = "syriac letter zain";
			_charNames[(char)0x071A] = "syriac letter heth";
			_charNames[(char)0x071B] = "syriac letter teth";
			_charNames[(char)0x071C] = "syriac letter teth garshuni";
			_charNames[(char)0x071D] = "syriac letter yudh";
			_charNames[(char)0x071E] = "syriac letter yudh he";
			_charNames[(char)0x071F] = "syriac letter kaph";
			_charNames[(char)0x0720] = "syriac letter lamadh";
			_charNames[(char)0x0721] = "syriac letter mim";
			_charNames[(char)0x0722] = "syriac letter nun";
			_charNames[(char)0x0723] = "syriac letter semkath";
			_charNames[(char)0x0724] = "syriac letter final semkath";
			_charNames[(char)0x0725] = "syriac letter e";
			_charNames[(char)0x0726] = "syriac letter pe";
			_charNames[(char)0x0727] = "syriac letter reversed pe";
			_charNames[(char)0x0728] = "syriac letter sadhe";
			_charNames[(char)0x0729] = "syriac letter qaph";
			_charNames[(char)0x072A] = "syriac letter rish";
			_charNames[(char)0x072B] = "syriac letter shin";
			_charNames[(char)0x072C] = "syriac letter taw";
			_charNames[(char)0x072D] = "syriac letter persian bheth";
			_charNames[(char)0x072E] = "syriac letter persian ghamal";
			_charNames[(char)0x072F] = "syriac letter persian dhalath";
			_charNames[(char)0x0730] = "syriac pthaha above";
			_charNames[(char)0x0731] = "syriac pthaha below";
			_charNames[(char)0x0732] = "syriac pthaha dotted";
			_charNames[(char)0x0733] = "syriac zqapha above";
			_charNames[(char)0x0734] = "syriac zqapha below";
			_charNames[(char)0x0735] = "syriac zqapha dotted";
			_charNames[(char)0x0736] = "syriac rbasa above";
			_charNames[(char)0x0737] = "syriac rbasa below";
			_charNames[(char)0x0738] = "syriac dotted zlama horizontal";
			_charNames[(char)0x0739] = "syriac dotted zlama angular";
			_charNames[(char)0x073A] = "syriac hbasa above";
			_charNames[(char)0x073B] = "syriac hbasa below";
			_charNames[(char)0x073C] = "syriac hbasa-esasa dotted";
			_charNames[(char)0x073D] = "syriac esasa above";
			_charNames[(char)0x073E] = "syriac esasa below";
			_charNames[(char)0x073F] = "syriac rwaha";
			_charNames[(char)0x0740] = "syriac feminine dot";
			_charNames[(char)0x0741] = "syriac qushshaya";
			_charNames[(char)0x0742] = "syriac rukkakha";
			_charNames[(char)0x0743] = "syriac two vertical dots above";
			_charNames[(char)0x0744] = "syriac two vertical dots below";
			_charNames[(char)0x0745] = "syriac three dots above";
			_charNames[(char)0x0746] = "syriac three dots below";
			_charNames[(char)0x0747] = "syriac oblique line above";
			_charNames[(char)0x0748] = "syriac oblique line below";
			_charNames[(char)0x0749] = "syriac music";
			_charNames[(char)0x074A] = "syriac barrekh";
			_charNames[(char)0x074D] = "syriac letter sogdian zhain";
			_charNames[(char)0x074E] = "syriac letter sogdian khaph";
			_charNames[(char)0x074F] = "syriac letter sogdian fe";
			_charNames[(char)0x0750] = "arabic letter beh with three dots horizontally below";
			_charNames[(char)0x0751] = "arabic letter beh with dot below and three dots above";
			_charNames[(char)0x0752] = "arabic letter beh with three dots pointing upwards below";
			_charNames[(char)0x0753] = "arabic letter beh with three dots pointing upwards below and two dots above";
			_charNames[(char)0x0754] = "arabic letter beh with two dots below and dot above";
			_charNames[(char)0x0755] = "arabic letter beh with inverted small v below";
			_charNames[(char)0x0756] = "arabic letter beh with small v";
			_charNames[(char)0x0757] = "arabic letter hah with two dots above";
			_charNames[(char)0x0758] = "arabic letter hah with three dots pointing upwards below";
			_charNames[(char)0x0759] = "arabic letter dal with two dots vertically below and small tah";
			_charNames[(char)0x075A] = "arabic letter dal with inverted small v below";
			_charNames[(char)0x075B] = "arabic letter reh with stroke";
			_charNames[(char)0x075C] = "arabic letter seen with four dots above";
			_charNames[(char)0x075D] = "arabic letter ain with two dots above";
			_charNames[(char)0x075E] = "arabic letter ain with three dots pointing downwards above";
			_charNames[(char)0x075F] = "arabic letter ain with two dots vertically above";
			_charNames[(char)0x0760] = "arabic letter feh with two dots below";
			_charNames[(char)0x0761] = "arabic letter feh with three dots pointing upwards below";
			_charNames[(char)0x0762] = "arabic letter keheh with dot above";
			_charNames[(char)0x0763] = "arabic letter keheh with three dots above";
			_charNames[(char)0x0764] = "arabic letter keheh with three dots pointing upwards below";
			_charNames[(char)0x0765] = "arabic letter meem with dot above";
			_charNames[(char)0x0766] = "arabic letter meem with dot below";
			_charNames[(char)0x0767] = "arabic letter noon with two dots below";
			_charNames[(char)0x0768] = "arabic letter noon with small tah";
			_charNames[(char)0x0769] = "arabic letter noon with small v";
			_charNames[(char)0x076A] = "arabic letter lam with bar";
			_charNames[(char)0x076B] = "arabic letter reh with two dots vertically above";
			_charNames[(char)0x076C] = "arabic letter reh with hamza above";
			_charNames[(char)0x076D] = "arabic letter seen with two dots vertically above";
			_charNames[(char)0x0780] = "thaana letter haa";
			_charNames[(char)0x0781] = "thaana letter shaviyani";
			_charNames[(char)0x0782] = "thaana letter noonu";
			_charNames[(char)0x0783] = "thaana letter raa";
			_charNames[(char)0x0784] = "thaana letter baa";
			_charNames[(char)0x0785] = "thaana letter lhaviyani";
			_charNames[(char)0x0786] = "thaana letter kaafu";
			_charNames[(char)0x0787] = "thaana letter alifu";
			_charNames[(char)0x0788] = "thaana letter vaavu";
			_charNames[(char)0x0789] = "thaana letter meemu";
			_charNames[(char)0x078A] = "thaana letter faafu";
			_charNames[(char)0x078B] = "thaana letter dhaalu";
			_charNames[(char)0x078C] = "thaana letter thaa";
			_charNames[(char)0x078D] = "thaana letter laamu";
			_charNames[(char)0x078E] = "thaana letter gaafu";
			_charNames[(char)0x078F] = "thaana letter gnaviyani";
			_charNames[(char)0x0790] = "thaana letter seenu";
			_charNames[(char)0x0791] = "thaana letter daviyani";
			_charNames[(char)0x0792] = "thaana letter zaviyani";
			_charNames[(char)0x0793] = "thaana letter taviyani";
			_charNames[(char)0x0794] = "thaana letter yaa";
			_charNames[(char)0x0795] = "thaana letter paviyani";
			_charNames[(char)0x0796] = "thaana letter javiyani";
			_charNames[(char)0x0797] = "thaana letter chaviyani";
			_charNames[(char)0x0798] = "thaana letter ttaa";
			_charNames[(char)0x0799] = "thaana letter hhaa";
			_charNames[(char)0x079A] = "thaana letter khaa";
			_charNames[(char)0x079B] = "thaana letter thaalu";
			_charNames[(char)0x079C] = "thaana letter zaa";
			_charNames[(char)0x079D] = "thaana letter sheenu";
			_charNames[(char)0x079E] = "thaana letter saadhu";
			_charNames[(char)0x079F] = "thaana letter daadhu";
			_charNames[(char)0x07A0] = "thaana letter to";
			_charNames[(char)0x07A1] = "thaana letter zo";
			_charNames[(char)0x07A2] = "thaana letter ainu";
			_charNames[(char)0x07A3] = "thaana letter ghainu";
			_charNames[(char)0x07A4] = "thaana letter qaafu";
			_charNames[(char)0x07A5] = "thaana letter waavu";
			_charNames[(char)0x07A6] = "thaana abafili";
			_charNames[(char)0x07A7] = "thaana aabaafili";
			_charNames[(char)0x07A8] = "thaana ibifili";
			_charNames[(char)0x07A9] = "thaana eebeefili";
			_charNames[(char)0x07AA] = "thaana ubufili";
			_charNames[(char)0x07AB] = "thaana ooboofili";
			_charNames[(char)0x07AC] = "thaana ebefili";
			_charNames[(char)0x07AD] = "thaana eybeyfili";
			_charNames[(char)0x07AE] = "thaana obofili";
			_charNames[(char)0x07AF] = "thaana oaboafili";
			_charNames[(char)0x07B0] = "thaana sukun";
			_charNames[(char)0x07B1] = "thaana letter naa";
			_charNames[(char)0x0901] = "devanagari sign candrabindu";
			_charNames[(char)0x0902] = "devanagari sign anusvara";
			_charNames[(char)0x0903] = "devanagari sign visarga";
			_charNames[(char)0x0904] = "devanagari letter short a";
			_charNames[(char)0x0905] = "devanagari letter a";
			_charNames[(char)0x0906] = "devanagari letter aa";
			_charNames[(char)0x0907] = "devanagari letter i";
			_charNames[(char)0x0908] = "devanagari letter ii";
			_charNames[(char)0x0909] = "devanagari letter u";
			_charNames[(char)0x090A] = "devanagari letter uu";
			_charNames[(char)0x090B] = "devanagari letter vocalic r";
			_charNames[(char)0x090C] = "devanagari letter vocalic l";
			_charNames[(char)0x090D] = "devanagari letter candra e";
			_charNames[(char)0x090E] = "devanagari letter short e";
			_charNames[(char)0x090F] = "devanagari letter e";
			_charNames[(char)0x0910] = "devanagari letter ai";
			_charNames[(char)0x0911] = "devanagari letter candra o";
			_charNames[(char)0x0912] = "devanagari letter short o";
			_charNames[(char)0x0913] = "devanagari letter o";
			_charNames[(char)0x0914] = "devanagari letter au";
			_charNames[(char)0x0915] = "devanagari letter ka";
			_charNames[(char)0x0916] = "devanagari letter kha";
			_charNames[(char)0x0917] = "devanagari letter ga";
			_charNames[(char)0x0918] = "devanagari letter gha";
			_charNames[(char)0x0919] = "devanagari letter nga";
			_charNames[(char)0x091A] = "devanagari letter ca";
			_charNames[(char)0x091B] = "devanagari letter cha";
			_charNames[(char)0x091C] = "devanagari letter ja";
			_charNames[(char)0x091D] = "devanagari letter jha";
			_charNames[(char)0x091E] = "devanagari letter nya";
			_charNames[(char)0x091F] = "devanagari letter tta";
			_charNames[(char)0x0920] = "devanagari letter ttha";
			_charNames[(char)0x0921] = "devanagari letter dda";
			_charNames[(char)0x0922] = "devanagari letter ddha";
			_charNames[(char)0x0923] = "devanagari letter nna";
			_charNames[(char)0x0924] = "devanagari letter ta";
			_charNames[(char)0x0925] = "devanagari letter tha";
			_charNames[(char)0x0926] = "devanagari letter da";
			_charNames[(char)0x0927] = "devanagari letter dha";
			_charNames[(char)0x0928] = "devanagari letter na";
			_charNames[(char)0x0929] = "devanagari letter nnna";
			_charNames[(char)0x092A] = "devanagari letter pa";
			_charNames[(char)0x092B] = "devanagari letter pha";
			_charNames[(char)0x092C] = "devanagari letter ba";
			_charNames[(char)0x092D] = "devanagari letter bha";
			_charNames[(char)0x092E] = "devanagari letter ma";
			_charNames[(char)0x092F] = "devanagari letter ya";
			_charNames[(char)0x0930] = "devanagari letter ra";
			_charNames[(char)0x0931] = "devanagari letter rra";
			_charNames[(char)0x0932] = "devanagari letter la";
			_charNames[(char)0x0933] = "devanagari letter lla";
			_charNames[(char)0x0934] = "devanagari letter llla";
			_charNames[(char)0x0935] = "devanagari letter va";
			_charNames[(char)0x0936] = "devanagari letter sha";
			_charNames[(char)0x0937] = "devanagari letter ssa";
			_charNames[(char)0x0938] = "devanagari letter sa";
			_charNames[(char)0x0939] = "devanagari letter ha";
			_charNames[(char)0x093C] = "devanagari sign nukta";
			_charNames[(char)0x093D] = "devanagari sign avagraha";
			_charNames[(char)0x093E] = "devanagari vowel sign aa";
			_charNames[(char)0x093F] = "devanagari vowel sign i";
			_charNames[(char)0x0940] = "devanagari vowel sign ii";
			_charNames[(char)0x0941] = "devanagari vowel sign u";
			_charNames[(char)0x0942] = "devanagari vowel sign uu";
			_charNames[(char)0x0943] = "devanagari vowel sign vocalic r";
			_charNames[(char)0x0944] = "devanagari vowel sign vocalic rr";
			_charNames[(char)0x0945] = "devanagari vowel sign candra e";
			_charNames[(char)0x0946] = "devanagari vowel sign short e";
			_charNames[(char)0x0947] = "devanagari vowel sign e";
			_charNames[(char)0x0948] = "devanagari vowel sign ai";
			_charNames[(char)0x0949] = "devanagari vowel sign candra o";
			_charNames[(char)0x094A] = "devanagari vowel sign short o";
			_charNames[(char)0x094B] = "devanagari vowel sign o";
			_charNames[(char)0x094C] = "devanagari vowel sign au";
			_charNames[(char)0x094D] = "devanagari sign virama";
			_charNames[(char)0x0950] = "devanagari om";
			_charNames[(char)0x0951] = "devanagari stress sign udatta";
			_charNames[(char)0x0952] = "devanagari stress sign anudatta";
			_charNames[(char)0x0953] = "devanagari grave accent";
			_charNames[(char)0x0954] = "devanagari acute accent";
			_charNames[(char)0x0958] = "devanagari letter qa";
			_charNames[(char)0x0959] = "devanagari letter khha";
			_charNames[(char)0x095A] = "devanagari letter ghha";
			_charNames[(char)0x095B] = "devanagari letter za";
			_charNames[(char)0x095C] = "devanagari letter dddha";
			_charNames[(char)0x095D] = "devanagari letter rha";
			_charNames[(char)0x095E] = "devanagari letter fa";
			_charNames[(char)0x095F] = "devanagari letter yya";
			_charNames[(char)0x0960] = "devanagari letter vocalic rr";
			_charNames[(char)0x0961] = "devanagari letter vocalic ll";
			_charNames[(char)0x0962] = "devanagari vowel sign vocalic l";
			_charNames[(char)0x0963] = "devanagari vowel sign vocalic ll";
			_charNames[(char)0x0964] = "devanagari danda";
			_charNames[(char)0x0965] = "devanagari double danda";
			_charNames[(char)0x0966] = "devanagari digit zero";
			_charNames[(char)0x0967] = "devanagari digit one";
			_charNames[(char)0x0968] = "devanagari digit two";
			_charNames[(char)0x0969] = "devanagari digit three";
			_charNames[(char)0x096A] = "devanagari digit four";
			_charNames[(char)0x096B] = "devanagari digit five";
			_charNames[(char)0x096C] = "devanagari digit six";
			_charNames[(char)0x096D] = "devanagari digit seven";
			_charNames[(char)0x096E] = "devanagari digit eight";
			_charNames[(char)0x096F] = "devanagari digit nine";
			_charNames[(char)0x0970] = "devanagari abbreviation sign";
			_charNames[(char)0x097D] = "devanagari letter glottal stop";
			_charNames[(char)0x0981] = "bengali sign candrabindu";
			_charNames[(char)0x0982] = "bengali sign anusvara";
			_charNames[(char)0x0983] = "bengali sign visarga";
			_charNames[(char)0x0985] = "bengali letter a";
			_charNames[(char)0x0986] = "bengali letter aa";
			_charNames[(char)0x0987] = "bengali letter i";
			_charNames[(char)0x0988] = "bengali letter ii";
			_charNames[(char)0x0989] = "bengali letter u";
			_charNames[(char)0x098A] = "bengali letter uu";
			_charNames[(char)0x098B] = "bengali letter vocalic r";
			_charNames[(char)0x098C] = "bengali letter vocalic l";
			_charNames[(char)0x098F] = "bengali letter e";
			_charNames[(char)0x0990] = "bengali letter ai";
			_charNames[(char)0x0993] = "bengali letter o";
			_charNames[(char)0x0994] = "bengali letter au";
			_charNames[(char)0x0995] = "bengali letter ka";
			_charNames[(char)0x0996] = "bengali letter kha";
			_charNames[(char)0x0997] = "bengali letter ga";
			_charNames[(char)0x0998] = "bengali letter gha";
			_charNames[(char)0x0999] = "bengali letter nga";
			_charNames[(char)0x099A] = "bengali letter ca";
			_charNames[(char)0x099B] = "bengali letter cha";
			_charNames[(char)0x099C] = "bengali letter ja";
			_charNames[(char)0x099D] = "bengali letter jha";
			_charNames[(char)0x099E] = "bengali letter nya";
			_charNames[(char)0x099F] = "bengali letter tta";
			_charNames[(char)0x09A0] = "bengali letter ttha";
			_charNames[(char)0x09A1] = "bengali letter dda";
			_charNames[(char)0x09A2] = "bengali letter ddha";
			_charNames[(char)0x09A3] = "bengali letter nna";
			_charNames[(char)0x09A4] = "bengali letter ta";
			_charNames[(char)0x09A5] = "bengali letter tha";
			_charNames[(char)0x09A6] = "bengali letter da";
			_charNames[(char)0x09A7] = "bengali letter dha";
			_charNames[(char)0x09A8] = "bengali letter na";
			_charNames[(char)0x09AA] = "bengali letter pa";
			_charNames[(char)0x09AB] = "bengali letter pha";
			_charNames[(char)0x09AC] = "bengali letter ba";
			_charNames[(char)0x09AD] = "bengali letter bha";
			_charNames[(char)0x09AE] = "bengali letter ma";
			_charNames[(char)0x09AF] = "bengali letter ya";
			_charNames[(char)0x09B0] = "bengali letter ra";
			_charNames[(char)0x09B2] = "bengali letter la";
			_charNames[(char)0x09B6] = "bengali letter sha";
			_charNames[(char)0x09B7] = "bengali letter ssa";
			_charNames[(char)0x09B8] = "bengali letter sa";
			_charNames[(char)0x09B9] = "bengali letter ha";
			_charNames[(char)0x09BC] = "bengali sign nukta";
			_charNames[(char)0x09BD] = "bengali sign avagraha";
			_charNames[(char)0x09BE] = "bengali vowel sign aa";
			_charNames[(char)0x09BF] = "bengali vowel sign i";
			_charNames[(char)0x09C0] = "bengali vowel sign ii";
			_charNames[(char)0x09C1] = "bengali vowel sign u";
			_charNames[(char)0x09C2] = "bengali vowel sign uu";
			_charNames[(char)0x09C3] = "bengali vowel sign vocalic r";
			_charNames[(char)0x09C4] = "bengali vowel sign vocalic rr";
			_charNames[(char)0x09C7] = "bengali vowel sign e";
			_charNames[(char)0x09C8] = "bengali vowel sign ai";
			_charNames[(char)0x09CB] = "bengali vowel sign o";
			_charNames[(char)0x09CC] = "bengali vowel sign au";
			_charNames[(char)0x09CD] = "bengali sign virama";
			_charNames[(char)0x09CE] = "bengali letter khanda ta";
			_charNames[(char)0x09D7] = "bengali au length mark";
			_charNames[(char)0x09DC] = "bengali letter rra";
			_charNames[(char)0x09DD] = "bengali letter rha";
			_charNames[(char)0x09DF] = "bengali letter yya";
			_charNames[(char)0x09E0] = "bengali letter vocalic rr";
			_charNames[(char)0x09E1] = "bengali letter vocalic ll";
			_charNames[(char)0x09E2] = "bengali vowel sign vocalic l";
			_charNames[(char)0x09E3] = "bengali vowel sign vocalic ll";
			_charNames[(char)0x09E6] = "bengali digit zero";
			_charNames[(char)0x09E7] = "bengali digit one";
			_charNames[(char)0x09E8] = "bengali digit two";
			_charNames[(char)0x09E9] = "bengali digit three";
			_charNames[(char)0x09EA] = "bengali digit four";
			_charNames[(char)0x09EB] = "bengali digit five";
			_charNames[(char)0x09EC] = "bengali digit six";
			_charNames[(char)0x09ED] = "bengali digit seven";
			_charNames[(char)0x09EE] = "bengali digit eight";
			_charNames[(char)0x09EF] = "bengali digit nine";
			_charNames[(char)0x09F0] = "bengali letter ra with middle diagonal";
			_charNames[(char)0x09F1] = "bengali letter ra with lower diagonal";
			_charNames[(char)0x09F2] = "bengali rupee mark";
			_charNames[(char)0x09F3] = "bengali rupee sign";
			_charNames[(char)0x09F4] = "bengali currency numerator one";
			_charNames[(char)0x09F5] = "bengali currency numerator two";
			_charNames[(char)0x09F6] = "bengali currency numerator three";
			_charNames[(char)0x09F7] = "bengali currency numerator four";
			_charNames[(char)0x09F8] = "bengali currency numerator one less than the denominator";
			_charNames[(char)0x09F9] = "bengali currency denominator sixteen";
			_charNames[(char)0x09FA] = "bengali isshar";
			_charNames[(char)0x0A01] = "gurmukhi sign adak bindi";
			_charNames[(char)0x0A02] = "gurmukhi sign bindi";
			_charNames[(char)0x0A03] = "gurmukhi sign visarga";
			_charNames[(char)0x0A05] = "gurmukhi letter a";
			_charNames[(char)0x0A06] = "gurmukhi letter aa";
			_charNames[(char)0x0A07] = "gurmukhi letter i";
			_charNames[(char)0x0A08] = "gurmukhi letter ii";
			_charNames[(char)0x0A09] = "gurmukhi letter u";
			_charNames[(char)0x0A0A] = "gurmukhi letter uu";
			_charNames[(char)0x0A0F] = "gurmukhi letter ee";
			_charNames[(char)0x0A10] = "gurmukhi letter ai";
			_charNames[(char)0x0A13] = "gurmukhi letter oo";
			_charNames[(char)0x0A14] = "gurmukhi letter au";
			_charNames[(char)0x0A15] = "gurmukhi letter ka";
			_charNames[(char)0x0A16] = "gurmukhi letter kha";
			_charNames[(char)0x0A17] = "gurmukhi letter ga";
			_charNames[(char)0x0A18] = "gurmukhi letter gha";
			_charNames[(char)0x0A19] = "gurmukhi letter nga";
			_charNames[(char)0x0A1A] = "gurmukhi letter ca";
			_charNames[(char)0x0A1B] = "gurmukhi letter cha";
			_charNames[(char)0x0A1C] = "gurmukhi letter ja";
			_charNames[(char)0x0A1D] = "gurmukhi letter jha";
			_charNames[(char)0x0A1E] = "gurmukhi letter nya";
			_charNames[(char)0x0A1F] = "gurmukhi letter tta";
			_charNames[(char)0x0A20] = "gurmukhi letter ttha";
			_charNames[(char)0x0A21] = "gurmukhi letter dda";
			_charNames[(char)0x0A22] = "gurmukhi letter ddha";
			_charNames[(char)0x0A23] = "gurmukhi letter nna";
			_charNames[(char)0x0A24] = "gurmukhi letter ta";
			_charNames[(char)0x0A25] = "gurmukhi letter tha";
			_charNames[(char)0x0A26] = "gurmukhi letter da";
			_charNames[(char)0x0A27] = "gurmukhi letter dha";
			_charNames[(char)0x0A28] = "gurmukhi letter na";
			_charNames[(char)0x0A2A] = "gurmukhi letter pa";
			_charNames[(char)0x0A2B] = "gurmukhi letter pha";
			_charNames[(char)0x0A2C] = "gurmukhi letter ba";
			_charNames[(char)0x0A2D] = "gurmukhi letter bha";
			_charNames[(char)0x0A2E] = "gurmukhi letter ma";
			_charNames[(char)0x0A2F] = "gurmukhi letter ya";
			_charNames[(char)0x0A30] = "gurmukhi letter ra";
			_charNames[(char)0x0A32] = "gurmukhi letter la";
			_charNames[(char)0x0A33] = "gurmukhi letter lla";
			_charNames[(char)0x0A35] = "gurmukhi letter va";
			_charNames[(char)0x0A36] = "gurmukhi letter sha";
			_charNames[(char)0x0A38] = "gurmukhi letter sa";
			_charNames[(char)0x0A39] = "gurmukhi letter ha";
			_charNames[(char)0x0A3C] = "gurmukhi sign nukta";
			_charNames[(char)0x0A3E] = "gurmukhi vowel sign aa";
			_charNames[(char)0x0A3F] = "gurmukhi vowel sign i";
			_charNames[(char)0x0A40] = "gurmukhi vowel sign ii";
			_charNames[(char)0x0A41] = "gurmukhi vowel sign u";
			_charNames[(char)0x0A42] = "gurmukhi vowel sign uu";
			_charNames[(char)0x0A47] = "gurmukhi vowel sign ee";
			_charNames[(char)0x0A48] = "gurmukhi vowel sign ai";
			_charNames[(char)0x0A4B] = "gurmukhi vowel sign oo";
			_charNames[(char)0x0A4C] = "gurmukhi vowel sign au";
			_charNames[(char)0x0A4D] = "gurmukhi sign virama";
			_charNames[(char)0x0A59] = "gurmukhi letter khha";
			_charNames[(char)0x0A5A] = "gurmukhi letter ghha";
			_charNames[(char)0x0A5B] = "gurmukhi letter za";
			_charNames[(char)0x0A5C] = "gurmukhi letter rra";
			_charNames[(char)0x0A5E] = "gurmukhi letter fa";
			_charNames[(char)0x0A66] = "gurmukhi digit zero";
			_charNames[(char)0x0A67] = "gurmukhi digit one";
			_charNames[(char)0x0A68] = "gurmukhi digit two";
			_charNames[(char)0x0A69] = "gurmukhi digit three";
			_charNames[(char)0x0A6A] = "gurmukhi digit four";
			_charNames[(char)0x0A6B] = "gurmukhi digit five";
			_charNames[(char)0x0A6C] = "gurmukhi digit six";
			_charNames[(char)0x0A6D] = "gurmukhi digit seven";
			_charNames[(char)0x0A6E] = "gurmukhi digit eight";
			_charNames[(char)0x0A6F] = "gurmukhi digit nine";
			_charNames[(char)0x0A70] = "gurmukhi tippi";
			_charNames[(char)0x0A71] = "gurmukhi addak";
			_charNames[(char)0x0A72] = "gurmukhi iri";
			_charNames[(char)0x0A73] = "gurmukhi ura";
			_charNames[(char)0x0A74] = "gurmukhi ek onkar";
			_charNames[(char)0x0A81] = "gujarati sign candrabindu";
			_charNames[(char)0x0A82] = "gujarati sign anusvara";
			_charNames[(char)0x0A83] = "gujarati sign visarga";
			_charNames[(char)0x0A85] = "gujarati letter a";
			_charNames[(char)0x0A86] = "gujarati letter aa";
			_charNames[(char)0x0A87] = "gujarati letter i";
			_charNames[(char)0x0A88] = "gujarati letter ii";
			_charNames[(char)0x0A89] = "gujarati letter u";
			_charNames[(char)0x0A8A] = "gujarati letter uu";
			_charNames[(char)0x0A8B] = "gujarati letter vocalic r";
			_charNames[(char)0x0A8C] = "gujarati letter vocalic l";
			_charNames[(char)0x0A8D] = "gujarati vowel candra e";
			_charNames[(char)0x0A8F] = "gujarati letter e";
			_charNames[(char)0x0A90] = "gujarati letter ai";
			_charNames[(char)0x0A91] = "gujarati vowel candra o";
			_charNames[(char)0x0A93] = "gujarati letter o";
			_charNames[(char)0x0A94] = "gujarati letter au";
			_charNames[(char)0x0A95] = "gujarati letter ka";
			_charNames[(char)0x0A96] = "gujarati letter kha";
			_charNames[(char)0x0A97] = "gujarati letter ga";
			_charNames[(char)0x0A98] = "gujarati letter gha";
			_charNames[(char)0x0A99] = "gujarati letter nga";
			_charNames[(char)0x0A9A] = "gujarati letter ca";
			_charNames[(char)0x0A9B] = "gujarati letter cha";
			_charNames[(char)0x0A9C] = "gujarati letter ja";
			_charNames[(char)0x0A9D] = "gujarati letter jha";
			_charNames[(char)0x0A9E] = "gujarati letter nya";
			_charNames[(char)0x0A9F] = "gujarati letter tta";
			_charNames[(char)0x0AA0] = "gujarati letter ttha";
			_charNames[(char)0x0AA1] = "gujarati letter dda";
			_charNames[(char)0x0AA2] = "gujarati letter ddha";
			_charNames[(char)0x0AA3] = "gujarati letter nna";
			_charNames[(char)0x0AA4] = "gujarati letter ta";
			_charNames[(char)0x0AA5] = "gujarati letter tha";
			_charNames[(char)0x0AA6] = "gujarati letter da";
			_charNames[(char)0x0AA7] = "gujarati letter dha";
			_charNames[(char)0x0AA8] = "gujarati letter na";
			_charNames[(char)0x0AAA] = "gujarati letter pa";
			_charNames[(char)0x0AAB] = "gujarati letter pha";
			_charNames[(char)0x0AAC] = "gujarati letter ba";
			_charNames[(char)0x0AAD] = "gujarati letter bha";
			_charNames[(char)0x0AAE] = "gujarati letter ma";
			_charNames[(char)0x0AAF] = "gujarati letter ya";
			_charNames[(char)0x0AB0] = "gujarati letter ra";
			_charNames[(char)0x0AB2] = "gujarati letter la";
			_charNames[(char)0x0AB3] = "gujarati letter lla";
			_charNames[(char)0x0AB5] = "gujarati letter va";
			_charNames[(char)0x0AB6] = "gujarati letter sha";
			_charNames[(char)0x0AB7] = "gujarati letter ssa";
			_charNames[(char)0x0AB8] = "gujarati letter sa";
			_charNames[(char)0x0AB9] = "gujarati letter ha";
			_charNames[(char)0x0ABC] = "gujarati sign nukta";
			_charNames[(char)0x0ABD] = "gujarati sign avagraha";
			_charNames[(char)0x0ABE] = "gujarati vowel sign aa";
			_charNames[(char)0x0ABF] = "gujarati vowel sign i";
			_charNames[(char)0x0AC0] = "gujarati vowel sign ii";
			_charNames[(char)0x0AC1] = "gujarati vowel sign u";
			_charNames[(char)0x0AC2] = "gujarati vowel sign uu";
			_charNames[(char)0x0AC3] = "gujarati vowel sign vocalic r";
			_charNames[(char)0x0AC4] = "gujarati vowel sign vocalic rr";
			_charNames[(char)0x0AC5] = "gujarati vowel sign candra e";
			_charNames[(char)0x0AC7] = "gujarati vowel sign e";
			_charNames[(char)0x0AC8] = "gujarati vowel sign ai";
			_charNames[(char)0x0AC9] = "gujarati vowel sign candra o";
			_charNames[(char)0x0ACB] = "gujarati vowel sign o";
			_charNames[(char)0x0ACC] = "gujarati vowel sign au";
			_charNames[(char)0x0ACD] = "gujarati sign virama";
			_charNames[(char)0x0AD0] = "gujarati om";
			_charNames[(char)0x0AE0] = "gujarati letter vocalic rr";
			_charNames[(char)0x0AE1] = "gujarati letter vocalic ll";
			_charNames[(char)0x0AE2] = "gujarati vowel sign vocalic l";
			_charNames[(char)0x0AE3] = "gujarati vowel sign vocalic ll";
			_charNames[(char)0x0AE6] = "gujarati digit zero";
			_charNames[(char)0x0AE7] = "gujarati digit one";
			_charNames[(char)0x0AE8] = "gujarati digit two";
			_charNames[(char)0x0AE9] = "gujarati digit three";
			_charNames[(char)0x0AEA] = "gujarati digit four";
			_charNames[(char)0x0AEB] = "gujarati digit five";
			_charNames[(char)0x0AEC] = "gujarati digit six";
			_charNames[(char)0x0AED] = "gujarati digit seven";
			_charNames[(char)0x0AEE] = "gujarati digit eight";
			_charNames[(char)0x0AEF] = "gujarati digit nine";
			_charNames[(char)0x0AF1] = "gujarati rupee sign";
			_charNames[(char)0x0B01] = "oriya sign candrabindu";
			_charNames[(char)0x0B02] = "oriya sign anusvara";
			_charNames[(char)0x0B03] = "oriya sign visarga";
			_charNames[(char)0x0B05] = "oriya letter a";
			_charNames[(char)0x0B06] = "oriya letter aa";
			_charNames[(char)0x0B07] = "oriya letter i";
			_charNames[(char)0x0B08] = "oriya letter ii";
			_charNames[(char)0x0B09] = "oriya letter u";
			_charNames[(char)0x0B0A] = "oriya letter uu";
			_charNames[(char)0x0B0B] = "oriya letter vocalic r";
			_charNames[(char)0x0B0C] = "oriya letter vocalic l";
			_charNames[(char)0x0B0F] = "oriya letter e";
			_charNames[(char)0x0B10] = "oriya letter ai";
			_charNames[(char)0x0B13] = "oriya letter o";
			_charNames[(char)0x0B14] = "oriya letter au";
			_charNames[(char)0x0B15] = "oriya letter ka";
			_charNames[(char)0x0B16] = "oriya letter kha";
			_charNames[(char)0x0B17] = "oriya letter ga";
			_charNames[(char)0x0B18] = "oriya letter gha";
			_charNames[(char)0x0B19] = "oriya letter nga";
			_charNames[(char)0x0B1A] = "oriya letter ca";
			_charNames[(char)0x0B1B] = "oriya letter cha";
			_charNames[(char)0x0B1C] = "oriya letter ja";
			_charNames[(char)0x0B1D] = "oriya letter jha";
			_charNames[(char)0x0B1E] = "oriya letter nya";
			_charNames[(char)0x0B1F] = "oriya letter tta";
			_charNames[(char)0x0B20] = "oriya letter ttha";
			_charNames[(char)0x0B21] = "oriya letter dda";
			_charNames[(char)0x0B22] = "oriya letter ddha";
			_charNames[(char)0x0B23] = "oriya letter nna";
			_charNames[(char)0x0B24] = "oriya letter ta";
			_charNames[(char)0x0B25] = "oriya letter tha";
			_charNames[(char)0x0B26] = "oriya letter da";
			_charNames[(char)0x0B27] = "oriya letter dha";
			_charNames[(char)0x0B28] = "oriya letter na";
			_charNames[(char)0x0B2A] = "oriya letter pa";
			_charNames[(char)0x0B2B] = "oriya letter pha";
			_charNames[(char)0x0B2C] = "oriya letter ba";
			_charNames[(char)0x0B2D] = "oriya letter bha";
			_charNames[(char)0x0B2E] = "oriya letter ma";
			_charNames[(char)0x0B2F] = "oriya letter ya";
			_charNames[(char)0x0B30] = "oriya letter ra";
			_charNames[(char)0x0B32] = "oriya letter la";
			_charNames[(char)0x0B33] = "oriya letter lla";
			_charNames[(char)0x0B35] = "oriya letter va";
			_charNames[(char)0x0B36] = "oriya letter sha";
			_charNames[(char)0x0B37] = "oriya letter ssa";
			_charNames[(char)0x0B38] = "oriya letter sa";
			_charNames[(char)0x0B39] = "oriya letter ha";
			_charNames[(char)0x0B3C] = "oriya sign nukta";
			_charNames[(char)0x0B3D] = "oriya sign avagraha";
			_charNames[(char)0x0B3E] = "oriya vowel sign aa";
			_charNames[(char)0x0B3F] = "oriya vowel sign i";
			_charNames[(char)0x0B40] = "oriya vowel sign ii";
			_charNames[(char)0x0B41] = "oriya vowel sign u";
			_charNames[(char)0x0B42] = "oriya vowel sign uu";
			_charNames[(char)0x0B43] = "oriya vowel sign vocalic r";
			_charNames[(char)0x0B47] = "oriya vowel sign e";
			_charNames[(char)0x0B48] = "oriya vowel sign ai";
			_charNames[(char)0x0B4B] = "oriya vowel sign o";
			_charNames[(char)0x0B4C] = "oriya vowel sign au";
			_charNames[(char)0x0B4D] = "oriya sign virama";
			_charNames[(char)0x0B56] = "oriya ai length mark";
			_charNames[(char)0x0B57] = "oriya au length mark";
			_charNames[(char)0x0B5C] = "oriya letter rra";
			_charNames[(char)0x0B5D] = "oriya letter rha";
			_charNames[(char)0x0B5F] = "oriya letter yya";
			_charNames[(char)0x0B60] = "oriya letter vocalic rr";
			_charNames[(char)0x0B61] = "oriya letter vocalic ll";
			_charNames[(char)0x0B66] = "oriya digit zero";
			_charNames[(char)0x0B67] = "oriya digit one";
			_charNames[(char)0x0B68] = "oriya digit two";
			_charNames[(char)0x0B69] = "oriya digit three";
			_charNames[(char)0x0B6A] = "oriya digit four";
			_charNames[(char)0x0B6B] = "oriya digit five";
			_charNames[(char)0x0B6C] = "oriya digit six";
			_charNames[(char)0x0B6D] = "oriya digit seven";
			_charNames[(char)0x0B6E] = "oriya digit eight";
			_charNames[(char)0x0B6F] = "oriya digit nine";
			_charNames[(char)0x0B70] = "oriya isshar";
			_charNames[(char)0x0B71] = "oriya letter wa";
			_charNames[(char)0x0B82] = "tamil sign anusvara";
			_charNames[(char)0x0B83] = "tamil sign visarga";
			_charNames[(char)0x0B85] = "tamil letter a";
			_charNames[(char)0x0B86] = "tamil letter aa";
			_charNames[(char)0x0B87] = "tamil letter i";
			_charNames[(char)0x0B88] = "tamil letter ii";
			_charNames[(char)0x0B89] = "tamil letter u";
			_charNames[(char)0x0B8A] = "tamil letter uu";
			_charNames[(char)0x0B8E] = "tamil letter e";
			_charNames[(char)0x0B8F] = "tamil letter ee";
			_charNames[(char)0x0B90] = "tamil letter ai";
			_charNames[(char)0x0B92] = "tamil letter o";
			_charNames[(char)0x0B93] = "tamil letter oo";
			_charNames[(char)0x0B94] = "tamil letter au";
			_charNames[(char)0x0B95] = "tamil letter ka";
			_charNames[(char)0x0B99] = "tamil letter nga";
			_charNames[(char)0x0B9A] = "tamil letter ca";
			_charNames[(char)0x0B9C] = "tamil letter ja";
			_charNames[(char)0x0B9E] = "tamil letter nya";
			_charNames[(char)0x0B9F] = "tamil letter tta";
			_charNames[(char)0x0BA3] = "tamil letter nna";
			_charNames[(char)0x0BA4] = "tamil letter ta";
			_charNames[(char)0x0BA8] = "tamil letter na";
			_charNames[(char)0x0BA9] = "tamil letter nnna";
			_charNames[(char)0x0BAA] = "tamil letter pa";
			_charNames[(char)0x0BAE] = "tamil letter ma";
			_charNames[(char)0x0BAF] = "tamil letter ya";
			_charNames[(char)0x0BB0] = "tamil letter ra";
			_charNames[(char)0x0BB1] = "tamil letter rra";
			_charNames[(char)0x0BB2] = "tamil letter la";
			_charNames[(char)0x0BB3] = "tamil letter lla";
			_charNames[(char)0x0BB4] = "tamil letter llla";
			_charNames[(char)0x0BB5] = "tamil letter va";
			_charNames[(char)0x0BB6] = "tamil letter sha";
			_charNames[(char)0x0BB7] = "tamil letter ssa";
			_charNames[(char)0x0BB8] = "tamil letter sa";
			_charNames[(char)0x0BB9] = "tamil letter ha";
			_charNames[(char)0x0BBE] = "tamil vowel sign aa";
			_charNames[(char)0x0BBF] = "tamil vowel sign i";
			_charNames[(char)0x0BC0] = "tamil vowel sign ii";
			_charNames[(char)0x0BC1] = "tamil vowel sign u";
			_charNames[(char)0x0BC2] = "tamil vowel sign uu";
			_charNames[(char)0x0BC6] = "tamil vowel sign e";
			_charNames[(char)0x0BC7] = "tamil vowel sign ee";
			_charNames[(char)0x0BC8] = "tamil vowel sign ai";
			_charNames[(char)0x0BCA] = "tamil vowel sign o";
			_charNames[(char)0x0BCB] = "tamil vowel sign oo";
			_charNames[(char)0x0BCC] = "tamil vowel sign au";
			_charNames[(char)0x0BCD] = "tamil sign virama";
			_charNames[(char)0x0BD7] = "tamil au length mark";
			_charNames[(char)0x0BE6] = "tamil digit zero";
			_charNames[(char)0x0BE7] = "tamil digit one";
			_charNames[(char)0x0BE8] = "tamil digit two";
			_charNames[(char)0x0BE9] = "tamil digit three";
			_charNames[(char)0x0BEA] = "tamil digit four";
			_charNames[(char)0x0BEB] = "tamil digit five";
			_charNames[(char)0x0BEC] = "tamil digit six";
			_charNames[(char)0x0BED] = "tamil digit seven";
			_charNames[(char)0x0BEE] = "tamil digit eight";
			_charNames[(char)0x0BEF] = "tamil digit nine";
			_charNames[(char)0x0BF0] = "tamil number ten";
			_charNames[(char)0x0BF1] = "tamil number one hundred";
			_charNames[(char)0x0BF2] = "tamil number one thousand";
			_charNames[(char)0x0BF3] = "tamil day sign";
			_charNames[(char)0x0BF4] = "tamil month sign";
			_charNames[(char)0x0BF5] = "tamil year sign";
			_charNames[(char)0x0BF6] = "tamil debit sign";
			_charNames[(char)0x0BF7] = "tamil credit sign";
			_charNames[(char)0x0BF8] = "tamil as above sign";
			_charNames[(char)0x0BF9] = "tamil rupee sign";
			_charNames[(char)0x0BFA] = "tamil number sign";
			_charNames[(char)0x0C01] = "telugu sign candrabindu";
			_charNames[(char)0x0C02] = "telugu sign anusvara";
			_charNames[(char)0x0C03] = "telugu sign visarga";
			_charNames[(char)0x0C05] = "telugu letter a";
			_charNames[(char)0x0C06] = "telugu letter aa";
			_charNames[(char)0x0C07] = "telugu letter i";
			_charNames[(char)0x0C08] = "telugu letter ii";
			_charNames[(char)0x0C09] = "telugu letter u";
			_charNames[(char)0x0C0A] = "telugu letter uu";
			_charNames[(char)0x0C0B] = "telugu letter vocalic r";
			_charNames[(char)0x0C0C] = "telugu letter vocalic l";
			_charNames[(char)0x0C0E] = "telugu letter e";
			_charNames[(char)0x0C0F] = "telugu letter ee";
			_charNames[(char)0x0C10] = "telugu letter ai";
			_charNames[(char)0x0C12] = "telugu letter o";
			_charNames[(char)0x0C13] = "telugu letter oo";
			_charNames[(char)0x0C14] = "telugu letter au";
			_charNames[(char)0x0C15] = "telugu letter ka";
			_charNames[(char)0x0C16] = "telugu letter kha";
			_charNames[(char)0x0C17] = "telugu letter ga";
			_charNames[(char)0x0C18] = "telugu letter gha";
			_charNames[(char)0x0C19] = "telugu letter nga";
			_charNames[(char)0x0C1A] = "telugu letter ca";
			_charNames[(char)0x0C1B] = "telugu letter cha";
			_charNames[(char)0x0C1C] = "telugu letter ja";
			_charNames[(char)0x0C1D] = "telugu letter jha";
			_charNames[(char)0x0C1E] = "telugu letter nya";
			_charNames[(char)0x0C1F] = "telugu letter tta";
			_charNames[(char)0x0C20] = "telugu letter ttha";
			_charNames[(char)0x0C21] = "telugu letter dda";
			_charNames[(char)0x0C22] = "telugu letter ddha";
			_charNames[(char)0x0C23] = "telugu letter nna";
			_charNames[(char)0x0C24] = "telugu letter ta";
			_charNames[(char)0x0C25] = "telugu letter tha";
			_charNames[(char)0x0C26] = "telugu letter da";
			_charNames[(char)0x0C27] = "telugu letter dha";
			_charNames[(char)0x0C28] = "telugu letter na";
			_charNames[(char)0x0C2A] = "telugu letter pa";
			_charNames[(char)0x0C2B] = "telugu letter pha";
			_charNames[(char)0x0C2C] = "telugu letter ba";
			_charNames[(char)0x0C2D] = "telugu letter bha";
			_charNames[(char)0x0C2E] = "telugu letter ma";
			_charNames[(char)0x0C2F] = "telugu letter ya";
			_charNames[(char)0x0C30] = "telugu letter ra";
			_charNames[(char)0x0C31] = "telugu letter rra";
			_charNames[(char)0x0C32] = "telugu letter la";
			_charNames[(char)0x0C33] = "telugu letter lla";
			_charNames[(char)0x0C35] = "telugu letter va";
			_charNames[(char)0x0C36] = "telugu letter sha";
			_charNames[(char)0x0C37] = "telugu letter ssa";
			_charNames[(char)0x0C38] = "telugu letter sa";
			_charNames[(char)0x0C39] = "telugu letter ha";
			_charNames[(char)0x0C3E] = "telugu vowel sign aa";
			_charNames[(char)0x0C3F] = "telugu vowel sign i";
			_charNames[(char)0x0C40] = "telugu vowel sign ii";
			_charNames[(char)0x0C41] = "telugu vowel sign u";
			_charNames[(char)0x0C42] = "telugu vowel sign uu";
			_charNames[(char)0x0C43] = "telugu vowel sign vocalic r";
			_charNames[(char)0x0C44] = "telugu vowel sign vocalic rr";
			_charNames[(char)0x0C46] = "telugu vowel sign e";
			_charNames[(char)0x0C47] = "telugu vowel sign ee";
			_charNames[(char)0x0C48] = "telugu vowel sign ai";
			_charNames[(char)0x0C4A] = "telugu vowel sign o";
			_charNames[(char)0x0C4B] = "telugu vowel sign oo";
			_charNames[(char)0x0C4C] = "telugu vowel sign au";
			_charNames[(char)0x0C4D] = "telugu sign virama";
			_charNames[(char)0x0C55] = "telugu length mark";
			_charNames[(char)0x0C56] = "telugu ai length mark";
			_charNames[(char)0x0C60] = "telugu letter vocalic rr";
			_charNames[(char)0x0C61] = "telugu letter vocalic ll";
			_charNames[(char)0x0C66] = "telugu digit zero";
			_charNames[(char)0x0C67] = "telugu digit one";
			_charNames[(char)0x0C68] = "telugu digit two";
			_charNames[(char)0x0C69] = "telugu digit three";
			_charNames[(char)0x0C6A] = "telugu digit four";
			_charNames[(char)0x0C6B] = "telugu digit five";
			_charNames[(char)0x0C6C] = "telugu digit six";
			_charNames[(char)0x0C6D] = "telugu digit seven";
			_charNames[(char)0x0C6E] = "telugu digit eight";
			_charNames[(char)0x0C6F] = "telugu digit nine";
			_charNames[(char)0x0C82] = "kannada sign anusvara";
			_charNames[(char)0x0C83] = "kannada sign visarga";
			_charNames[(char)0x0C85] = "kannada letter a";
			_charNames[(char)0x0C86] = "kannada letter aa";
			_charNames[(char)0x0C87] = "kannada letter i";
			_charNames[(char)0x0C88] = "kannada letter ii";
			_charNames[(char)0x0C89] = "kannada letter u";
			_charNames[(char)0x0C8A] = "kannada letter uu";
			_charNames[(char)0x0C8B] = "kannada letter vocalic r";
			_charNames[(char)0x0C8C] = "kannada letter vocalic l";
			_charNames[(char)0x0C8E] = "kannada letter e";
			_charNames[(char)0x0C8F] = "kannada letter ee";
			_charNames[(char)0x0C90] = "kannada letter ai";
			_charNames[(char)0x0C92] = "kannada letter o";
			_charNames[(char)0x0C93] = "kannada letter oo";
			_charNames[(char)0x0C94] = "kannada letter au";
			_charNames[(char)0x0C95] = "kannada letter ka";
			_charNames[(char)0x0C96] = "kannada letter kha";
			_charNames[(char)0x0C97] = "kannada letter ga";
			_charNames[(char)0x0C98] = "kannada letter gha";
			_charNames[(char)0x0C99] = "kannada letter nga";
			_charNames[(char)0x0C9A] = "kannada letter ca";
			_charNames[(char)0x0C9B] = "kannada letter cha";
			_charNames[(char)0x0C9C] = "kannada letter ja";
			_charNames[(char)0x0C9D] = "kannada letter jha";
			_charNames[(char)0x0C9E] = "kannada letter nya";
			_charNames[(char)0x0C9F] = "kannada letter tta";
			_charNames[(char)0x0CA0] = "kannada letter ttha";
			_charNames[(char)0x0CA1] = "kannada letter dda";
			_charNames[(char)0x0CA2] = "kannada letter ddha";
			_charNames[(char)0x0CA3] = "kannada letter nna";
			_charNames[(char)0x0CA4] = "kannada letter ta";
			_charNames[(char)0x0CA5] = "kannada letter tha";
			_charNames[(char)0x0CA6] = "kannada letter da";
			_charNames[(char)0x0CA7] = "kannada letter dha";
			_charNames[(char)0x0CA8] = "kannada letter na";
			_charNames[(char)0x0CAA] = "kannada letter pa";
			_charNames[(char)0x0CAB] = "kannada letter pha";
			_charNames[(char)0x0CAC] = "kannada letter ba";
			_charNames[(char)0x0CAD] = "kannada letter bha";
			_charNames[(char)0x0CAE] = "kannada letter ma";
			_charNames[(char)0x0CAF] = "kannada letter ya";
			_charNames[(char)0x0CB0] = "kannada letter ra";
			_charNames[(char)0x0CB1] = "kannada letter rra";
			_charNames[(char)0x0CB2] = "kannada letter la";
			_charNames[(char)0x0CB3] = "kannada letter lla";
			_charNames[(char)0x0CB5] = "kannada letter va";
			_charNames[(char)0x0CB6] = "kannada letter sha";
			_charNames[(char)0x0CB7] = "kannada letter ssa";
			_charNames[(char)0x0CB8] = "kannada letter sa";
			_charNames[(char)0x0CB9] = "kannada letter ha";
			_charNames[(char)0x0CBC] = "kannada sign nukta";
			_charNames[(char)0x0CBD] = "kannada sign avagraha";
			_charNames[(char)0x0CBE] = "kannada vowel sign aa";
			_charNames[(char)0x0CBF] = "kannada vowel sign i";
			_charNames[(char)0x0CC0] = "kannada vowel sign ii";
			_charNames[(char)0x0CC1] = "kannada vowel sign u";
			_charNames[(char)0x0CC2] = "kannada vowel sign uu";
			_charNames[(char)0x0CC3] = "kannada vowel sign vocalic r";
			_charNames[(char)0x0CC4] = "kannada vowel sign vocalic rr";
			_charNames[(char)0x0CC6] = "kannada vowel sign e";
			_charNames[(char)0x0CC7] = "kannada vowel sign ee";
			_charNames[(char)0x0CC8] = "kannada vowel sign ai";
			_charNames[(char)0x0CCA] = "kannada vowel sign o";
			_charNames[(char)0x0CCB] = "kannada vowel sign oo";
			_charNames[(char)0x0CCC] = "kannada vowel sign au";
			_charNames[(char)0x0CCD] = "kannada sign virama";
			_charNames[(char)0x0CD5] = "kannada length mark";
			_charNames[(char)0x0CD6] = "kannada ai length mark";
			_charNames[(char)0x0CDE] = "kannada letter fa";
			_charNames[(char)0x0CE0] = "kannada letter vocalic rr";
			_charNames[(char)0x0CE1] = "kannada letter vocalic ll";
			_charNames[(char)0x0CE6] = "kannada digit zero";
			_charNames[(char)0x0CE7] = "kannada digit one";
			_charNames[(char)0x0CE8] = "kannada digit two";
			_charNames[(char)0x0CE9] = "kannada digit three";
			_charNames[(char)0x0CEA] = "kannada digit four";
			_charNames[(char)0x0CEB] = "kannada digit five";
			_charNames[(char)0x0CEC] = "kannada digit six";
			_charNames[(char)0x0CED] = "kannada digit seven";
			_charNames[(char)0x0CEE] = "kannada digit eight";
			_charNames[(char)0x0CEF] = "kannada digit nine";
			_charNames[(char)0x0D02] = "malayalam sign anusvara";
			_charNames[(char)0x0D03] = "malayalam sign visarga";
			_charNames[(char)0x0D05] = "malayalam letter a";
			_charNames[(char)0x0D06] = "malayalam letter aa";
			_charNames[(char)0x0D07] = "malayalam letter i";
			_charNames[(char)0x0D08] = "malayalam letter ii";
			_charNames[(char)0x0D09] = "malayalam letter u";
			_charNames[(char)0x0D0A] = "malayalam letter uu";
			_charNames[(char)0x0D0B] = "malayalam letter vocalic r";
			_charNames[(char)0x0D0C] = "malayalam letter vocalic l";
			_charNames[(char)0x0D0E] = "malayalam letter e";
			_charNames[(char)0x0D0F] = "malayalam letter ee";
			_charNames[(char)0x0D10] = "malayalam letter ai";
			_charNames[(char)0x0D12] = "malayalam letter o";
			_charNames[(char)0x0D13] = "malayalam letter oo";
			_charNames[(char)0x0D14] = "malayalam letter au";
			_charNames[(char)0x0D15] = "malayalam letter ka";
			_charNames[(char)0x0D16] = "malayalam letter kha";
			_charNames[(char)0x0D17] = "malayalam letter ga";
			_charNames[(char)0x0D18] = "malayalam letter gha";
			_charNames[(char)0x0D19] = "malayalam letter nga";
			_charNames[(char)0x0D1A] = "malayalam letter ca";
			_charNames[(char)0x0D1B] = "malayalam letter cha";
			_charNames[(char)0x0D1C] = "malayalam letter ja";
			_charNames[(char)0x0D1D] = "malayalam letter jha";
			_charNames[(char)0x0D1E] = "malayalam letter nya";
			_charNames[(char)0x0D1F] = "malayalam letter tta";
			_charNames[(char)0x0D20] = "malayalam letter ttha";
			_charNames[(char)0x0D21] = "malayalam letter dda";
			_charNames[(char)0x0D22] = "malayalam letter ddha";
			_charNames[(char)0x0D23] = "malayalam letter nna";
			_charNames[(char)0x0D24] = "malayalam letter ta";
			_charNames[(char)0x0D25] = "malayalam letter tha";
			_charNames[(char)0x0D26] = "malayalam letter da";
			_charNames[(char)0x0D27] = "malayalam letter dha";
			_charNames[(char)0x0D28] = "malayalam letter na";
			_charNames[(char)0x0D2A] = "malayalam letter pa";
			_charNames[(char)0x0D2B] = "malayalam letter pha";
			_charNames[(char)0x0D2C] = "malayalam letter ba";
			_charNames[(char)0x0D2D] = "malayalam letter bha";
			_charNames[(char)0x0D2E] = "malayalam letter ma";
			_charNames[(char)0x0D2F] = "malayalam letter ya";
			_charNames[(char)0x0D30] = "malayalam letter ra";
			_charNames[(char)0x0D31] = "malayalam letter rra";
			_charNames[(char)0x0D32] = "malayalam letter la";
			_charNames[(char)0x0D33] = "malayalam letter lla";
			_charNames[(char)0x0D34] = "malayalam letter llla";
			_charNames[(char)0x0D35] = "malayalam letter va";
			_charNames[(char)0x0D36] = "malayalam letter sha";
			_charNames[(char)0x0D37] = "malayalam letter ssa";
			_charNames[(char)0x0D38] = "malayalam letter sa";
			_charNames[(char)0x0D39] = "malayalam letter ha";
			_charNames[(char)0x0D3E] = "malayalam vowel sign aa";
			_charNames[(char)0x0D3F] = "malayalam vowel sign i";
			_charNames[(char)0x0D40] = "malayalam vowel sign ii";
			_charNames[(char)0x0D41] = "malayalam vowel sign u";
			_charNames[(char)0x0D42] = "malayalam vowel sign uu";
			_charNames[(char)0x0D43] = "malayalam vowel sign vocalic r";
			_charNames[(char)0x0D46] = "malayalam vowel sign e";
			_charNames[(char)0x0D47] = "malayalam vowel sign ee";
			_charNames[(char)0x0D48] = "malayalam vowel sign ai";
			_charNames[(char)0x0D4A] = "malayalam vowel sign o";
			_charNames[(char)0x0D4B] = "malayalam vowel sign oo";
			_charNames[(char)0x0D4C] = "malayalam vowel sign au";
			_charNames[(char)0x0D4D] = "malayalam sign virama";
			_charNames[(char)0x0D57] = "malayalam au length mark";
			_charNames[(char)0x0D60] = "malayalam letter vocalic rr";
			_charNames[(char)0x0D61] = "malayalam letter vocalic ll";
			_charNames[(char)0x0D66] = "malayalam digit zero";
			_charNames[(char)0x0D67] = "malayalam digit one";
			_charNames[(char)0x0D68] = "malayalam digit two";
			_charNames[(char)0x0D69] = "malayalam digit three";
			_charNames[(char)0x0D6A] = "malayalam digit four";
			_charNames[(char)0x0D6B] = "malayalam digit five";
			_charNames[(char)0x0D6C] = "malayalam digit six";
			_charNames[(char)0x0D6D] = "malayalam digit seven";
			_charNames[(char)0x0D6E] = "malayalam digit eight";
			_charNames[(char)0x0D6F] = "malayalam digit nine";
			_charNames[(char)0x0D82] = "sinhala sign anusvaraya";
			_charNames[(char)0x0D83] = "sinhala sign visargaya";
			_charNames[(char)0x0D85] = "sinhala letter ayanna";
			_charNames[(char)0x0D86] = "sinhala letter aayanna";
			_charNames[(char)0x0D87] = "sinhala letter aeyanna";
			_charNames[(char)0x0D88] = "sinhala letter aeeyanna";
			_charNames[(char)0x0D89] = "sinhala letter iyanna";
			_charNames[(char)0x0D8A] = "sinhala letter iiyanna";
			_charNames[(char)0x0D8B] = "sinhala letter uyanna";
			_charNames[(char)0x0D8C] = "sinhala letter uuyanna";
			_charNames[(char)0x0D8D] = "sinhala letter iruyanna";
			_charNames[(char)0x0D8E] = "sinhala letter iruuyanna";
			_charNames[(char)0x0D8F] = "sinhala letter iluyanna";
			_charNames[(char)0x0D90] = "sinhala letter iluuyanna";
			_charNames[(char)0x0D91] = "sinhala letter eyanna";
			_charNames[(char)0x0D92] = "sinhala letter eeyanna";
			_charNames[(char)0x0D93] = "sinhala letter aiyanna";
			_charNames[(char)0x0D94] = "sinhala letter oyanna";
			_charNames[(char)0x0D95] = "sinhala letter ooyanna";
			_charNames[(char)0x0D96] = "sinhala letter auyanna";
			_charNames[(char)0x0D9A] = "sinhala letter alpapraana kayanna";
			_charNames[(char)0x0D9B] = "sinhala letter mahaapraana kayanna";
			_charNames[(char)0x0D9C] = "sinhala letter alpapraana gayanna";
			_charNames[(char)0x0D9D] = "sinhala letter mahaapraana gayanna";
			_charNames[(char)0x0D9E] = "sinhala letter kantaja naasikyaya";
			_charNames[(char)0x0D9F] = "sinhala letter sanyaka gayanna";
			_charNames[(char)0x0DA0] = "sinhala letter alpapraana cayanna";
			_charNames[(char)0x0DA1] = "sinhala letter mahaapraana cayanna";
			_charNames[(char)0x0DA2] = "sinhala letter alpapraana jayanna";
			_charNames[(char)0x0DA3] = "sinhala letter mahaapraana jayanna";
			_charNames[(char)0x0DA4] = "sinhala letter taaluja naasikyaya";
			_charNames[(char)0x0DA5] = "sinhala letter taaluja sanyooga naaksikyaya";
			_charNames[(char)0x0DA6] = "sinhala letter sanyaka jayanna";
			_charNames[(char)0x0DA7] = "sinhala letter alpapraana ttayanna";
			_charNames[(char)0x0DA8] = "sinhala letter mahaapraana ttayanna";
			_charNames[(char)0x0DA9] = "sinhala letter alpapraana ddayanna";
			_charNames[(char)0x0DAA] = "sinhala letter mahaapraana ddayanna";
			_charNames[(char)0x0DAB] = "sinhala letter muurdhaja nayanna";
			_charNames[(char)0x0DAC] = "sinhala letter sanyaka ddayanna";
			_charNames[(char)0x0DAD] = "sinhala letter alpapraana tayanna";
			_charNames[(char)0x0DAE] = "sinhala letter mahaapraana tayanna";
			_charNames[(char)0x0DAF] = "sinhala letter alpapraana dayanna";
			_charNames[(char)0x0DB0] = "sinhala letter mahaapraana dayanna";
			_charNames[(char)0x0DB1] = "sinhala letter dantaja nayanna";
			_charNames[(char)0x0DB3] = "sinhala letter sanyaka dayanna";
			_charNames[(char)0x0DB4] = "sinhala letter alpapraana payanna";
			_charNames[(char)0x0DB5] = "sinhala letter mahaapraana payanna";
			_charNames[(char)0x0DB6] = "sinhala letter alpapraana bayanna";
			_charNames[(char)0x0DB7] = "sinhala letter mahaapraana bayanna";
			_charNames[(char)0x0DB8] = "sinhala letter mayanna";
			_charNames[(char)0x0DB9] = "sinhala letter amba bayanna";
			_charNames[(char)0x0DBA] = "sinhala letter yayanna";
			_charNames[(char)0x0DBB] = "sinhala letter rayanna";
			_charNames[(char)0x0DBD] = "sinhala letter dantaja layanna";
			_charNames[(char)0x0DC0] = "sinhala letter vayanna";
			_charNames[(char)0x0DC1] = "sinhala letter taaluja sayanna";
			_charNames[(char)0x0DC2] = "sinhala letter muurdhaja sayanna";
			_charNames[(char)0x0DC3] = "sinhala letter dantaja sayanna";
			_charNames[(char)0x0DC4] = "sinhala letter hayanna";
			_charNames[(char)0x0DC5] = "sinhala letter muurdhaja layanna";
			_charNames[(char)0x0DC6] = "sinhala letter fayanna";
			_charNames[(char)0x0DCA] = "sinhala sign al-lakuna";
			_charNames[(char)0x0DCF] = "sinhala vowel sign aela-pilla";
			_charNames[(char)0x0DD0] = "sinhala vowel sign ketti aeda-pilla";
			_charNames[(char)0x0DD1] = "sinhala vowel sign diga aeda-pilla";
			_charNames[(char)0x0DD2] = "sinhala vowel sign ketti is-pilla";
			_charNames[(char)0x0DD3] = "sinhala vowel sign diga is-pilla";
			_charNames[(char)0x0DD4] = "sinhala vowel sign ketti paa-pilla";
			_charNames[(char)0x0DD6] = "sinhala vowel sign diga paa-pilla";
			_charNames[(char)0x0DD8] = "sinhala vowel sign gaetta-pilla";
			_charNames[(char)0x0DD9] = "sinhala vowel sign kombuva";
			_charNames[(char)0x0DDA] = "sinhala vowel sign diga kombuva";
			_charNames[(char)0x0DDB] = "sinhala vowel sign kombu deka";
			_charNames[(char)0x0DDC] = "sinhala vowel sign kombuva haa aela-pilla";
			_charNames[(char)0x0DDD] = "sinhala vowel sign kombuva haa diga aela-pilla";
			_charNames[(char)0x0DDE] = "sinhala vowel sign kombuva haa gayanukitta";
			_charNames[(char)0x0DDF] = "sinhala vowel sign gayanukitta";
			_charNames[(char)0x0DF2] = "sinhala vowel sign diga gaetta-pilla";
			_charNames[(char)0x0DF3] = "sinhala vowel sign diga gayanukitta";
			_charNames[(char)0x0DF4] = "sinhala punctuation kunddaliya";
			_charNames[(char)0x0E01] = "thai character ko kai";
			_charNames[(char)0x0E02] = "thai character kho khai";
			_charNames[(char)0x0E03] = "thai character kho khuat";
			_charNames[(char)0x0E04] = "thai character kho khwai";
			_charNames[(char)0x0E05] = "thai character kho khon";
			_charNames[(char)0x0E06] = "thai character kho rakhang";
			_charNames[(char)0x0E07] = "thai character ngo ngu";
			_charNames[(char)0x0E08] = "thai character cho chan";
			_charNames[(char)0x0E09] = "thai character cho ching";
			_charNames[(char)0x0E0A] = "thai character cho chang";
			_charNames[(char)0x0E0B] = "thai character so so";
			_charNames[(char)0x0E0C] = "thai character cho choe";
			_charNames[(char)0x0E0D] = "thai character yo ying";
			_charNames[(char)0x0E0E] = "thai character do chada";
			_charNames[(char)0x0E0F] = "thai character to patak";
			_charNames[(char)0x0E10] = "thai character tho than";
			_charNames[(char)0x0E11] = "thai character tho nangmontho";
			_charNames[(char)0x0E12] = "thai character tho phuthao";
			_charNames[(char)0x0E13] = "thai character no nen";
			_charNames[(char)0x0E14] = "thai character do dek";
			_charNames[(char)0x0E15] = "thai character to tao";
			_charNames[(char)0x0E16] = "thai character tho thung";
			_charNames[(char)0x0E17] = "thai character tho thahan";
			_charNames[(char)0x0E18] = "thai character tho thong";
			_charNames[(char)0x0E19] = "thai character no nu";
			_charNames[(char)0x0E1A] = "thai character bo baimai";
			_charNames[(char)0x0E1B] = "thai character po pla";
			_charNames[(char)0x0E1C] = "thai character pho phung";
			_charNames[(char)0x0E1D] = "thai character fo fa";
			_charNames[(char)0x0E1E] = "thai character pho phan";
			_charNames[(char)0x0E1F] = "thai character fo fan";
			_charNames[(char)0x0E20] = "thai character pho samphao";
			_charNames[(char)0x0E21] = "thai character mo ma";
			_charNames[(char)0x0E22] = "thai character yo yak";
			_charNames[(char)0x0E23] = "thai character ro rua";
			_charNames[(char)0x0E24] = "thai character ru";
			_charNames[(char)0x0E25] = "thai character lo ling";
			_charNames[(char)0x0E26] = "thai character lu";
			_charNames[(char)0x0E27] = "thai character wo waen";
			_charNames[(char)0x0E28] = "thai character so sala";
			_charNames[(char)0x0E29] = "thai character so rusi";
			_charNames[(char)0x0E2A] = "thai character so sua";
			_charNames[(char)0x0E2B] = "thai character ho hip";
			_charNames[(char)0x0E2C] = "thai character lo chula";
			_charNames[(char)0x0E2D] = "thai character o ang";
			_charNames[(char)0x0E2E] = "thai character ho nokhuk";
			_charNames[(char)0x0E2F] = "thai character paiyannoi";
			_charNames[(char)0x0E30] = "thai character sara a";
			_charNames[(char)0x0E31] = "thai character mai han-akat";
			_charNames[(char)0x0E32] = "thai character sara aa";
			_charNames[(char)0x0E33] = "thai character sara am";
			_charNames[(char)0x0E34] = "thai character sara i";
			_charNames[(char)0x0E35] = "thai character sara ii";
			_charNames[(char)0x0E36] = "thai character sara ue";
			_charNames[(char)0x0E37] = "thai character sara uee";
			_charNames[(char)0x0E38] = "thai character sara u";
			_charNames[(char)0x0E39] = "thai character sara uu";
			_charNames[(char)0x0E3A] = "thai character phinthu";
			_charNames[(char)0x0E3F] = "thai currency symbol baht";
			_charNames[(char)0x0E40] = "thai character sara e";
			_charNames[(char)0x0E41] = "thai character sara ae";
			_charNames[(char)0x0E42] = "thai character sara o";
			_charNames[(char)0x0E43] = "thai character sara ai maimuan";
			_charNames[(char)0x0E44] = "thai character sara ai maimalai";
			_charNames[(char)0x0E45] = "thai character lakkhangyao";
			_charNames[(char)0x0E46] = "thai character maiyamok";
			_charNames[(char)0x0E47] = "thai character maitaikhu";
			_charNames[(char)0x0E48] = "thai character mai ek";
			_charNames[(char)0x0E49] = "thai character mai tho";
			_charNames[(char)0x0E4A] = "thai character mai tri";
			_charNames[(char)0x0E4B] = "thai character mai chattawa";
			_charNames[(char)0x0E4C] = "thai character thanthakhat";
			_charNames[(char)0x0E4D] = "thai character nikhahit";
			_charNames[(char)0x0E4E] = "thai character yamakkan";
			_charNames[(char)0x0E4F] = "thai character fongman";
			_charNames[(char)0x0E50] = "thai digit zero";
			_charNames[(char)0x0E51] = "thai digit one";
			_charNames[(char)0x0E52] = "thai digit two";
			_charNames[(char)0x0E53] = "thai digit three";
			_charNames[(char)0x0E54] = "thai digit four";
			_charNames[(char)0x0E55] = "thai digit five";
			_charNames[(char)0x0E56] = "thai digit six";
			_charNames[(char)0x0E57] = "thai digit seven";
			_charNames[(char)0x0E58] = "thai digit eight";
			_charNames[(char)0x0E59] = "thai digit nine";
			_charNames[(char)0x0E5A] = "thai character angkhankhu";
			_charNames[(char)0x0E5B] = "thai character khomut";
			_charNames[(char)0x0E81] = "lao letter ko";
			_charNames[(char)0x0E82] = "lao letter kho sung";
			_charNames[(char)0x0E84] = "lao letter kho tam";
			_charNames[(char)0x0E87] = "lao letter ngo";
			_charNames[(char)0x0E88] = "lao letter co";
			_charNames[(char)0x0E8A] = "lao letter so tam";
			_charNames[(char)0x0E8D] = "lao letter nyo";
			_charNames[(char)0x0E94] = "lao letter do";
			_charNames[(char)0x0E95] = "lao letter to";
			_charNames[(char)0x0E96] = "lao letter tho sung";
			_charNames[(char)0x0E97] = "lao letter tho tam";
			_charNames[(char)0x0E99] = "lao letter no";
			_charNames[(char)0x0E9A] = "lao letter bo";
			_charNames[(char)0x0E9B] = "lao letter po";
			_charNames[(char)0x0E9C] = "lao letter pho sung";
			_charNames[(char)0x0E9D] = "lao letter fo tam";
			_charNames[(char)0x0E9E] = "lao letter pho tam";
			_charNames[(char)0x0E9F] = "lao letter fo sung";
			_charNames[(char)0x0EA1] = "lao letter mo";
			_charNames[(char)0x0EA2] = "lao letter yo";
			_charNames[(char)0x0EA3] = "lao letter lo ling";
			_charNames[(char)0x0EA5] = "lao letter lo loot";
			_charNames[(char)0x0EA7] = "lao letter wo";
			_charNames[(char)0x0EAA] = "lao letter so sung";
			_charNames[(char)0x0EAB] = "lao letter ho sung";
			_charNames[(char)0x0EAD] = "lao letter o";
			_charNames[(char)0x0EAE] = "lao letter ho tam";
			_charNames[(char)0x0EAF] = "lao ellipsis";
			_charNames[(char)0x0EB0] = "lao vowel sign a";
			_charNames[(char)0x0EB1] = "lao vowel sign mai kan";
			_charNames[(char)0x0EB2] = "lao vowel sign aa";
			_charNames[(char)0x0EB3] = "lao vowel sign am";
			_charNames[(char)0x0EB4] = "lao vowel sign i";
			_charNames[(char)0x0EB5] = "lao vowel sign ii";
			_charNames[(char)0x0EB6] = "lao vowel sign y";
			_charNames[(char)0x0EB7] = "lao vowel sign yy";
			_charNames[(char)0x0EB8] = "lao vowel sign u";
			_charNames[(char)0x0EB9] = "lao vowel sign uu";
			_charNames[(char)0x0EBB] = "lao vowel sign mai kon";
			_charNames[(char)0x0EBC] = "lao semivowel sign lo";
			_charNames[(char)0x0EBD] = "lao semivowel sign nyo";
			_charNames[(char)0x0EC0] = "lao vowel sign e";
			_charNames[(char)0x0EC1] = "lao vowel sign ei";
			_charNames[(char)0x0EC2] = "lao vowel sign o";
			_charNames[(char)0x0EC3] = "lao vowel sign ay";
			_charNames[(char)0x0EC4] = "lao vowel sign ai";
			_charNames[(char)0x0EC6] = "lao ko la";
			_charNames[(char)0x0EC8] = "lao tone mai ek";
			_charNames[(char)0x0EC9] = "lao tone mai tho";
			_charNames[(char)0x0ECA] = "lao tone mai ti";
			_charNames[(char)0x0ECB] = "lao tone mai catawa";
			_charNames[(char)0x0ECC] = "lao cancellation mark";
			_charNames[(char)0x0ECD] = "lao niggahita";
			_charNames[(char)0x0ED0] = "lao digit zero";
			_charNames[(char)0x0ED1] = "lao digit one";
			_charNames[(char)0x0ED2] = "lao digit two";
			_charNames[(char)0x0ED3] = "lao digit three";
			_charNames[(char)0x0ED4] = "lao digit four";
			_charNames[(char)0x0ED5] = "lao digit five";
			_charNames[(char)0x0ED6] = "lao digit six";
			_charNames[(char)0x0ED7] = "lao digit seven";
			_charNames[(char)0x0ED8] = "lao digit eight";
			_charNames[(char)0x0ED9] = "lao digit nine";
			_charNames[(char)0x0EDC] = "lao ho no";
			_charNames[(char)0x0EDD] = "lao ho mo";
			_charNames[(char)0x0F00] = "tibetan syllable om";
			_charNames[(char)0x0F01] = "tibetan mark gter yig mgo truncated a";
			_charNames[(char)0x0F02] = "tibetan mark gter yig mgo -um rnam bcad ma";
			_charNames[(char)0x0F03] = "tibetan mark gter yig mgo -um gter tsheg ma";
			_charNames[(char)0x0F04] = "tibetan mark initial yig mgo mdun ma";
			_charNames[(char)0x0F05] = "tibetan mark closing yig mgo sgab ma";
			_charNames[(char)0x0F06] = "tibetan mark caret yig mgo phur shad ma";
			_charNames[(char)0x0F07] = "tibetan mark yig mgo tsheg shad ma";
			_charNames[(char)0x0F08] = "tibetan mark sbrul shad";
			_charNames[(char)0x0F09] = "tibetan mark bskur yig mgo";
			_charNames[(char)0x0F0A] = "tibetan mark bka- shog yig mgo";
			_charNames[(char)0x0F0B] = "tibetan mark intersyllabic tsheg";
			_charNames[(char)0x0F0C] = "tibetan mark delimiter tsheg bstar";
			_charNames[(char)0x0F0D] = "tibetan mark shad";
			_charNames[(char)0x0F0E] = "tibetan mark nyis shad";
			_charNames[(char)0x0F0F] = "tibetan mark tsheg shad";
			_charNames[(char)0x0F10] = "tibetan mark nyis tsheg shad";
			_charNames[(char)0x0F11] = "tibetan mark rin chen spungs shad";
			_charNames[(char)0x0F12] = "tibetan mark rgya gram shad";
			_charNames[(char)0x0F13] = "tibetan mark caret -dzud rtags me long can";
			_charNames[(char)0x0F14] = "tibetan mark gter tsheg";
			_charNames[(char)0x0F15] = "tibetan logotype sign chad rtags";
			_charNames[(char)0x0F16] = "tibetan logotype sign lhag rtags";
			_charNames[(char)0x0F17] = "tibetan astrological sign sgra gcan -char rtags";
			_charNames[(char)0x0F18] = "tibetan astrological sign -khyud pa";
			_charNames[(char)0x0F19] = "tibetan astrological sign sdong tshugs";
			_charNames[(char)0x0F1A] = "tibetan sign rdel dkar gcig";
			_charNames[(char)0x0F1B] = "tibetan sign rdel dkar gnyis";
			_charNames[(char)0x0F1C] = "tibetan sign rdel dkar gsum";
			_charNames[(char)0x0F1D] = "tibetan sign rdel nag gcig";
			_charNames[(char)0x0F1E] = "tibetan sign rdel nag gnyis";
			_charNames[(char)0x0F1F] = "tibetan sign rdel dkar rdel nag";
			_charNames[(char)0x0F20] = "tibetan digit zero";
			_charNames[(char)0x0F21] = "tibetan digit one";
			_charNames[(char)0x0F22] = "tibetan digit two";
			_charNames[(char)0x0F23] = "tibetan digit three";
			_charNames[(char)0x0F24] = "tibetan digit four";
			_charNames[(char)0x0F25] = "tibetan digit five";
			_charNames[(char)0x0F26] = "tibetan digit six";
			_charNames[(char)0x0F27] = "tibetan digit seven";
			_charNames[(char)0x0F28] = "tibetan digit eight";
			_charNames[(char)0x0F29] = "tibetan digit nine";
			_charNames[(char)0x0F2A] = "tibetan digit half one";
			_charNames[(char)0x0F2B] = "tibetan digit half two";
			_charNames[(char)0x0F2C] = "tibetan digit half three";
			_charNames[(char)0x0F2D] = "tibetan digit half four";
			_charNames[(char)0x0F2E] = "tibetan digit half five";
			_charNames[(char)0x0F2F] = "tibetan digit half six";
			_charNames[(char)0x0F30] = "tibetan digit half seven";
			_charNames[(char)0x0F31] = "tibetan digit half eight";
			_charNames[(char)0x0F32] = "tibetan digit half nine";
			_charNames[(char)0x0F33] = "tibetan digit half zero";
			_charNames[(char)0x0F34] = "tibetan mark bsdus rtags";
			_charNames[(char)0x0F35] = "tibetan mark ngas bzung nyi zla";
			_charNames[(char)0x0F36] = "tibetan mark caret -dzud rtags bzhi mig can";
			_charNames[(char)0x0F37] = "tibetan mark ngas bzung sgor rtags";
			_charNames[(char)0x0F38] = "tibetan mark che mgo";
			_charNames[(char)0x0F39] = "tibetan mark tsa -phru";
			_charNames[(char)0x0F3A] = "tibetan mark gug rtags gyon";
			_charNames[(char)0x0F3B] = "tibetan mark gug rtags gyas";
			_charNames[(char)0x0F3C] = "tibetan mark ang khang gyon";
			_charNames[(char)0x0F3D] = "tibetan mark ang khang gyas";
			_charNames[(char)0x0F3E] = "tibetan sign yar tshes";
			_charNames[(char)0x0F3F] = "tibetan sign mar tshes";
			_charNames[(char)0x0F40] = "tibetan letter ka";
			_charNames[(char)0x0F41] = "tibetan letter kha";
			_charNames[(char)0x0F42] = "tibetan letter ga";
			_charNames[(char)0x0F43] = "tibetan letter gha";
			_charNames[(char)0x0F44] = "tibetan letter nga";
			_charNames[(char)0x0F45] = "tibetan letter ca";
			_charNames[(char)0x0F46] = "tibetan letter cha";
			_charNames[(char)0x0F47] = "tibetan letter ja";
			_charNames[(char)0x0F49] = "tibetan letter nya";
			_charNames[(char)0x0F4A] = "tibetan letter tta";
			_charNames[(char)0x0F4B] = "tibetan letter ttha";
			_charNames[(char)0x0F4C] = "tibetan letter dda";
			_charNames[(char)0x0F4D] = "tibetan letter ddha";
			_charNames[(char)0x0F4E] = "tibetan letter nna";
			_charNames[(char)0x0F4F] = "tibetan letter ta";
			_charNames[(char)0x0F50] = "tibetan letter tha";
			_charNames[(char)0x0F51] = "tibetan letter da";
			_charNames[(char)0x0F52] = "tibetan letter dha";
			_charNames[(char)0x0F53] = "tibetan letter na";
			_charNames[(char)0x0F54] = "tibetan letter pa";
			_charNames[(char)0x0F55] = "tibetan letter pha";
			_charNames[(char)0x0F56] = "tibetan letter ba";
			_charNames[(char)0x0F57] = "tibetan letter bha";
			_charNames[(char)0x0F58] = "tibetan letter ma";
			_charNames[(char)0x0F59] = "tibetan letter tsa";
			_charNames[(char)0x0F5A] = "tibetan letter tsha";
			_charNames[(char)0x0F5B] = "tibetan letter dza";
			_charNames[(char)0x0F5C] = "tibetan letter dzha";
			_charNames[(char)0x0F5D] = "tibetan letter wa";
			_charNames[(char)0x0F5E] = "tibetan letter zha";
			_charNames[(char)0x0F5F] = "tibetan letter za";
			_charNames[(char)0x0F60] = "tibetan letter -a";
			_charNames[(char)0x0F61] = "tibetan letter ya";
			_charNames[(char)0x0F62] = "tibetan letter ra";
			_charNames[(char)0x0F63] = "tibetan letter la";
			_charNames[(char)0x0F64] = "tibetan letter sha";
			_charNames[(char)0x0F65] = "tibetan letter ssa";
			_charNames[(char)0x0F66] = "tibetan letter sa";
			_charNames[(char)0x0F67] = "tibetan letter ha";
			_charNames[(char)0x0F68] = "tibetan letter a";
			_charNames[(char)0x0F69] = "tibetan letter kssa";
			_charNames[(char)0x0F6A] = "tibetan letter fixed-form ra";
			_charNames[(char)0x0F71] = "tibetan vowel sign aa";
			_charNames[(char)0x0F72] = "tibetan vowel sign i";
			_charNames[(char)0x0F73] = "tibetan vowel sign ii";
			_charNames[(char)0x0F74] = "tibetan vowel sign u";
			_charNames[(char)0x0F75] = "tibetan vowel sign uu";
			_charNames[(char)0x0F76] = "tibetan vowel sign vocalic r";
			_charNames[(char)0x0F77] = "tibetan vowel sign vocalic rr";
			_charNames[(char)0x0F78] = "tibetan vowel sign vocalic l";
			_charNames[(char)0x0F79] = "tibetan vowel sign vocalic ll";
			_charNames[(char)0x0F7A] = "tibetan vowel sign e";
			_charNames[(char)0x0F7B] = "tibetan vowel sign ee";
			_charNames[(char)0x0F7C] = "tibetan vowel sign o";
			_charNames[(char)0x0F7D] = "tibetan vowel sign oo";
			_charNames[(char)0x0F7E] = "tibetan sign rjes su nga ro";
			_charNames[(char)0x0F7F] = "tibetan sign rnam bcad";
			_charNames[(char)0x0F80] = "tibetan vowel sign reversed i";
			_charNames[(char)0x0F81] = "tibetan vowel sign reversed ii";
			_charNames[(char)0x0F82] = "tibetan sign nyi zla naa da";
			_charNames[(char)0x0F83] = "tibetan sign sna ldan";
			_charNames[(char)0x0F84] = "tibetan mark halanta";
			_charNames[(char)0x0F85] = "tibetan mark paluta";
			_charNames[(char)0x0F86] = "tibetan sign lci rtags";
			_charNames[(char)0x0F87] = "tibetan sign yang rtags";
			_charNames[(char)0x0F88] = "tibetan sign lce tsa can";
			_charNames[(char)0x0F89] = "tibetan sign mchu can";
			_charNames[(char)0x0F8A] = "tibetan sign gru can rgyings";
			_charNames[(char)0x0F8B] = "tibetan sign gru med rgyings";
			_charNames[(char)0x0F90] = "tibetan subjoined letter ka";
			_charNames[(char)0x0F91] = "tibetan subjoined letter kha";
			_charNames[(char)0x0F92] = "tibetan subjoined letter ga";
			_charNames[(char)0x0F93] = "tibetan subjoined letter gha";
			_charNames[(char)0x0F94] = "tibetan subjoined letter nga";
			_charNames[(char)0x0F95] = "tibetan subjoined letter ca";
			_charNames[(char)0x0F96] = "tibetan subjoined letter cha";
			_charNames[(char)0x0F97] = "tibetan subjoined letter ja";
			_charNames[(char)0x0F99] = "tibetan subjoined letter nya";
			_charNames[(char)0x0F9A] = "tibetan subjoined letter tta";
			_charNames[(char)0x0F9B] = "tibetan subjoined letter ttha";
			_charNames[(char)0x0F9C] = "tibetan subjoined letter dda";
			_charNames[(char)0x0F9D] = "tibetan subjoined letter ddha";
			_charNames[(char)0x0F9E] = "tibetan subjoined letter nna";
			_charNames[(char)0x0F9F] = "tibetan subjoined letter ta";
			_charNames[(char)0x0FA0] = "tibetan subjoined letter tha";
			_charNames[(char)0x0FA1] = "tibetan subjoined letter da";
			_charNames[(char)0x0FA2] = "tibetan subjoined letter dha";
			_charNames[(char)0x0FA3] = "tibetan subjoined letter na";
			_charNames[(char)0x0FA4] = "tibetan subjoined letter pa";
			_charNames[(char)0x0FA5] = "tibetan subjoined letter pha";
			_charNames[(char)0x0FA6] = "tibetan subjoined letter ba";
			_charNames[(char)0x0FA7] = "tibetan subjoined letter bha";
			_charNames[(char)0x0FA8] = "tibetan subjoined letter ma";
			_charNames[(char)0x0FA9] = "tibetan subjoined letter tsa";
			_charNames[(char)0x0FAA] = "tibetan subjoined letter tsha";
			_charNames[(char)0x0FAB] = "tibetan subjoined letter dza";
			_charNames[(char)0x0FAC] = "tibetan subjoined letter dzha";
			_charNames[(char)0x0FAD] = "tibetan subjoined letter wa";
			_charNames[(char)0x0FAE] = "tibetan subjoined letter zha";
			_charNames[(char)0x0FAF] = "tibetan subjoined letter za";
			_charNames[(char)0x0FB0] = "tibetan subjoined letter -a";
			_charNames[(char)0x0FB1] = "tibetan subjoined letter ya";
			_charNames[(char)0x0FB2] = "tibetan subjoined letter ra";
			_charNames[(char)0x0FB3] = "tibetan subjoined letter la";
			_charNames[(char)0x0FB4] = "tibetan subjoined letter sha";
			_charNames[(char)0x0FB5] = "tibetan subjoined letter ssa";
			_charNames[(char)0x0FB6] = "tibetan subjoined letter sa";
			_charNames[(char)0x0FB7] = "tibetan subjoined letter ha";
			_charNames[(char)0x0FB8] = "tibetan subjoined letter a";
			_charNames[(char)0x0FB9] = "tibetan subjoined letter kssa";
			_charNames[(char)0x0FBA] = "tibetan subjoined letter fixed-form wa";
			_charNames[(char)0x0FBB] = "tibetan subjoined letter fixed-form ya";
			_charNames[(char)0x0FBC] = "tibetan subjoined letter fixed-form ra";
			_charNames[(char)0x0FBE] = "tibetan ku ru kha";
			_charNames[(char)0x0FBF] = "tibetan ku ru kha bzhi mig can";
			_charNames[(char)0x0FC0] = "tibetan cantillation sign heavy beat";
			_charNames[(char)0x0FC1] = "tibetan cantillation sign light beat";
			_charNames[(char)0x0FC2] = "tibetan cantillation sign cang te-u";
			_charNames[(char)0x0FC3] = "tibetan cantillation sign sbub -chal";
			_charNames[(char)0x0FC4] = "tibetan symbol dril bu";
			_charNames[(char)0x0FC5] = "tibetan symbol rdo rje";
			_charNames[(char)0x0FC6] = "tibetan symbol padma gdan";
			_charNames[(char)0x0FC7] = "tibetan symbol rdo rje rgya gram";
			_charNames[(char)0x0FC8] = "tibetan symbol phur pa";
			_charNames[(char)0x0FC9] = "tibetan symbol nor bu";
			_charNames[(char)0x0FCA] = "tibetan symbol nor bu nyis -khyil";
			_charNames[(char)0x0FCB] = "tibetan symbol nor bu gsum -khyil";
			_charNames[(char)0x0FCC] = "tibetan symbol nor bu bzhi -khyil";
			_charNames[(char)0x0FCF] = "tibetan sign rdel nag gsum";
			_charNames[(char)0x0FD0] = "tibetan mark bska- shog gi mgo rgyan";
			_charNames[(char)0x0FD1] = "tibetan mark mnyam yig gi mgo rgyan";
			_charNames[(char)0x1000] = "myanmar letter ka";
			_charNames[(char)0x1001] = "myanmar letter kha";
			_charNames[(char)0x1002] = "myanmar letter ga";
			_charNames[(char)0x1003] = "myanmar letter gha";
			_charNames[(char)0x1004] = "myanmar letter nga";
			_charNames[(char)0x1005] = "myanmar letter ca";
			_charNames[(char)0x1006] = "myanmar letter cha";
			_charNames[(char)0x1007] = "myanmar letter ja";
			_charNames[(char)0x1008] = "myanmar letter jha";
			_charNames[(char)0x1009] = "myanmar letter nya";
			_charNames[(char)0x100A] = "myanmar letter nnya";
			_charNames[(char)0x100B] = "myanmar letter tta";
			_charNames[(char)0x100C] = "myanmar letter ttha";
			_charNames[(char)0x100D] = "myanmar letter dda";
			_charNames[(char)0x100E] = "myanmar letter ddha";
			_charNames[(char)0x100F] = "myanmar letter nna";
			_charNames[(char)0x1010] = "myanmar letter ta";
			_charNames[(char)0x1011] = "myanmar letter tha";
			_charNames[(char)0x1012] = "myanmar letter da";
			_charNames[(char)0x1013] = "myanmar letter dha";
			_charNames[(char)0x1014] = "myanmar letter na";
			_charNames[(char)0x1015] = "myanmar letter pa";
			_charNames[(char)0x1016] = "myanmar letter pha";
			_charNames[(char)0x1017] = "myanmar letter ba";
			_charNames[(char)0x1018] = "myanmar letter bha";
			_charNames[(char)0x1019] = "myanmar letter ma";
			_charNames[(char)0x101A] = "myanmar letter ya";
			_charNames[(char)0x101B] = "myanmar letter ra";
			_charNames[(char)0x101C] = "myanmar letter la";
			_charNames[(char)0x101D] = "myanmar letter wa";
			_charNames[(char)0x101E] = "myanmar letter sa";
			_charNames[(char)0x101F] = "myanmar letter ha";
			_charNames[(char)0x1020] = "myanmar letter lla";
			_charNames[(char)0x1021] = "myanmar letter a";
			_charNames[(char)0x1023] = "myanmar letter i";
			_charNames[(char)0x1024] = "myanmar letter ii";
			_charNames[(char)0x1025] = "myanmar letter u";
			_charNames[(char)0x1026] = "myanmar letter uu";
			_charNames[(char)0x1027] = "myanmar letter e";
			_charNames[(char)0x1029] = "myanmar letter o";
			_charNames[(char)0x102A] = "myanmar letter au";
			_charNames[(char)0x102C] = "myanmar vowel sign aa";
			_charNames[(char)0x102D] = "myanmar vowel sign i";
			_charNames[(char)0x102E] = "myanmar vowel sign ii";
			_charNames[(char)0x102F] = "myanmar vowel sign u";
			_charNames[(char)0x1030] = "myanmar vowel sign uu";
			_charNames[(char)0x1031] = "myanmar vowel sign e";
			_charNames[(char)0x1032] = "myanmar vowel sign ai";
			_charNames[(char)0x1036] = "myanmar sign anusvara";
			_charNames[(char)0x1037] = "myanmar sign dot below";
			_charNames[(char)0x1038] = "myanmar sign visarga";
			_charNames[(char)0x1039] = "myanmar sign virama";
			_charNames[(char)0x1040] = "myanmar digit zero";
			_charNames[(char)0x1041] = "myanmar digit one";
			_charNames[(char)0x1042] = "myanmar digit two";
			_charNames[(char)0x1043] = "myanmar digit three";
			_charNames[(char)0x1044] = "myanmar digit four";
			_charNames[(char)0x1045] = "myanmar digit five";
			_charNames[(char)0x1046] = "myanmar digit six";
			_charNames[(char)0x1047] = "myanmar digit seven";
			_charNames[(char)0x1048] = "myanmar digit eight";
			_charNames[(char)0x1049] = "myanmar digit nine";
			_charNames[(char)0x104A] = "myanmar sign little section";
			_charNames[(char)0x104B] = "myanmar sign section";
			_charNames[(char)0x104C] = "myanmar symbol locative";
			_charNames[(char)0x104D] = "myanmar symbol completed";
			_charNames[(char)0x104E] = "myanmar symbol aforementioned";
			_charNames[(char)0x104F] = "myanmar symbol genitive";
			_charNames[(char)0x1050] = "myanmar letter sha";
			_charNames[(char)0x1051] = "myanmar letter ssa";
			_charNames[(char)0x1052] = "myanmar letter vocalic r";
			_charNames[(char)0x1053] = "myanmar letter vocalic rr";
			_charNames[(char)0x1054] = "myanmar letter vocalic l";
			_charNames[(char)0x1055] = "myanmar letter vocalic ll";
			_charNames[(char)0x1056] = "myanmar vowel sign vocalic r";
			_charNames[(char)0x1057] = "myanmar vowel sign vocalic rr";
			_charNames[(char)0x1058] = "myanmar vowel sign vocalic l";
			_charNames[(char)0x1059] = "myanmar vowel sign vocalic ll";
			_charNames[(char)0x10A0] = "georgian capital letter an";
			_charNames[(char)0x10A1] = "georgian capital letter ban";
			_charNames[(char)0x10A2] = "georgian capital letter gan";
			_charNames[(char)0x10A3] = "georgian capital letter don";
			_charNames[(char)0x10A4] = "georgian capital letter en";
			_charNames[(char)0x10A5] = "georgian capital letter vin";
			_charNames[(char)0x10A6] = "georgian capital letter zen";
			_charNames[(char)0x10A7] = "georgian capital letter tan";
			_charNames[(char)0x10A8] = "georgian capital letter in";
			_charNames[(char)0x10A9] = "georgian capital letter kan";
			_charNames[(char)0x10AA] = "georgian capital letter las";
			_charNames[(char)0x10AB] = "georgian capital letter man";
			_charNames[(char)0x10AC] = "georgian capital letter nar";
			_charNames[(char)0x10AD] = "georgian capital letter on";
			_charNames[(char)0x10AE] = "georgian capital letter par";
			_charNames[(char)0x10AF] = "georgian capital letter zhar";
			_charNames[(char)0x10B0] = "georgian capital letter rae";
			_charNames[(char)0x10B1] = "georgian capital letter san";
			_charNames[(char)0x10B2] = "georgian capital letter tar";
			_charNames[(char)0x10B3] = "georgian capital letter un";
			_charNames[(char)0x10B4] = "georgian capital letter phar";
			_charNames[(char)0x10B5] = "georgian capital letter khar";
			_charNames[(char)0x10B6] = "georgian capital letter ghan";
			_charNames[(char)0x10B7] = "georgian capital letter qar";
			_charNames[(char)0x10B8] = "georgian capital letter shin";
			_charNames[(char)0x10B9] = "georgian capital letter chin";
			_charNames[(char)0x10BA] = "georgian capital letter can";
			_charNames[(char)0x10BB] = "georgian capital letter jil";
			_charNames[(char)0x10BC] = "georgian capital letter cil";
			_charNames[(char)0x10BD] = "georgian capital letter char";
			_charNames[(char)0x10BE] = "georgian capital letter xan";
			_charNames[(char)0x10BF] = "georgian capital letter jhan";
			_charNames[(char)0x10C0] = "georgian capital letter hae";
			_charNames[(char)0x10C1] = "georgian capital letter he";
			_charNames[(char)0x10C2] = "georgian capital letter hie";
			_charNames[(char)0x10C3] = "georgian capital letter we";
			_charNames[(char)0x10C4] = "georgian capital letter har";
			_charNames[(char)0x10C5] = "georgian capital letter hoe";
			_charNames[(char)0x10D0] = "georgian letter an";
			_charNames[(char)0x10D1] = "georgian letter ban";
			_charNames[(char)0x10D2] = "georgian letter gan";
			_charNames[(char)0x10D3] = "georgian letter don";
			_charNames[(char)0x10D4] = "georgian letter en";
			_charNames[(char)0x10D5] = "georgian letter vin";
			_charNames[(char)0x10D6] = "georgian letter zen";
			_charNames[(char)0x10D7] = "georgian letter tan";
			_charNames[(char)0x10D8] = "georgian letter in";
			_charNames[(char)0x10D9] = "georgian letter kan";
			_charNames[(char)0x10DA] = "georgian letter las";
			_charNames[(char)0x10DB] = "georgian letter man";
			_charNames[(char)0x10DC] = "georgian letter nar";
			_charNames[(char)0x10DD] = "georgian letter on";
			_charNames[(char)0x10DE] = "georgian letter par";
			_charNames[(char)0x10DF] = "georgian letter zhar";
			_charNames[(char)0x10E0] = "georgian letter rae";
			_charNames[(char)0x10E1] = "georgian letter san";
			_charNames[(char)0x10E2] = "georgian letter tar";
			_charNames[(char)0x10E3] = "georgian letter un";
			_charNames[(char)0x10E4] = "georgian letter phar";
			_charNames[(char)0x10E5] = "georgian letter khar";
			_charNames[(char)0x10E6] = "georgian letter ghan";
			_charNames[(char)0x10E7] = "georgian letter qar";
			_charNames[(char)0x10E8] = "georgian letter shin";
			_charNames[(char)0x10E9] = "georgian letter chin";
			_charNames[(char)0x10EA] = "georgian letter can";
			_charNames[(char)0x10EB] = "georgian letter jil";
			_charNames[(char)0x10EC] = "georgian letter cil";
			_charNames[(char)0x10ED] = "georgian letter char";
			_charNames[(char)0x10EE] = "georgian letter xan";
			_charNames[(char)0x10EF] = "georgian letter jhan";
			_charNames[(char)0x10F0] = "georgian letter hae";
			_charNames[(char)0x10F1] = "georgian letter he";
			_charNames[(char)0x10F2] = "georgian letter hie";
			_charNames[(char)0x10F3] = "georgian letter we";
			_charNames[(char)0x10F4] = "georgian letter har";
			_charNames[(char)0x10F5] = "georgian letter hoe";
			_charNames[(char)0x10F6] = "georgian letter fi";
			_charNames[(char)0x10F7] = "georgian letter yn";
			_charNames[(char)0x10F8] = "georgian letter elifi";
			_charNames[(char)0x10F9] = "georgian letter turned gan";
			_charNames[(char)0x10FA] = "georgian letter ain";
			_charNames[(char)0x10FB] = "georgian paragraph separator";
			_charNames[(char)0x10FC] = "modifier letter georgian nar";
			_charNames[(char)0x1100] = "hangul choseong kiyeok";
			_charNames[(char)0x1101] = "hangul choseong ssangkiyeok";
			_charNames[(char)0x1102] = "hangul choseong nieun";
			_charNames[(char)0x1103] = "hangul choseong tikeut";
			_charNames[(char)0x1104] = "hangul choseong ssangtikeut";
			_charNames[(char)0x1105] = "hangul choseong rieul";
			_charNames[(char)0x1106] = "hangul choseong mieum";
			_charNames[(char)0x1107] = "hangul choseong pieup";
			_charNames[(char)0x1108] = "hangul choseong ssangpieup";
			_charNames[(char)0x1109] = "hangul choseong sios";
			_charNames[(char)0x110A] = "hangul choseong ssangsios";
			_charNames[(char)0x110B] = "hangul choseong ieung";
			_charNames[(char)0x110C] = "hangul choseong cieuc";
			_charNames[(char)0x110D] = "hangul choseong ssangcieuc";
			_charNames[(char)0x110E] = "hangul choseong chieuch";
			_charNames[(char)0x110F] = "hangul choseong khieukh";
			_charNames[(char)0x1110] = "hangul choseong thieuth";
			_charNames[(char)0x1111] = "hangul choseong phieuph";
			_charNames[(char)0x1112] = "hangul choseong hieuh";
			_charNames[(char)0x1113] = "hangul choseong nieun-kiyeok";
			_charNames[(char)0x1114] = "hangul choseong ssangnieun";
			_charNames[(char)0x1115] = "hangul choseong nieun-tikeut";
			_charNames[(char)0x1116] = "hangul choseong nieun-pieup";
			_charNames[(char)0x1117] = "hangul choseong tikeut-kiyeok";
			_charNames[(char)0x1118] = "hangul choseong rieul-nieun";
			_charNames[(char)0x1119] = "hangul choseong ssangrieul";
			_charNames[(char)0x111A] = "hangul choseong rieul-hieuh";
			_charNames[(char)0x111B] = "hangul choseong kapyeounrieul";
			_charNames[(char)0x111C] = "hangul choseong mieum-pieup";
			_charNames[(char)0x111D] = "hangul choseong kapyeounmieum";
			_charNames[(char)0x111E] = "hangul choseong pieup-kiyeok";
			_charNames[(char)0x111F] = "hangul choseong pieup-nieun";
			_charNames[(char)0x1120] = "hangul choseong pieup-tikeut";
			_charNames[(char)0x1121] = "hangul choseong pieup-sios";
			_charNames[(char)0x1122] = "hangul choseong pieup-sios-kiyeok";
			_charNames[(char)0x1123] = "hangul choseong pieup-sios-tikeut";
			_charNames[(char)0x1124] = "hangul choseong pieup-sios-pieup";
			_charNames[(char)0x1125] = "hangul choseong pieup-ssangsios";
			_charNames[(char)0x1126] = "hangul choseong pieup-sios-cieuc";
			_charNames[(char)0x1127] = "hangul choseong pieup-cieuc";
			_charNames[(char)0x1128] = "hangul choseong pieup-chieuch";
			_charNames[(char)0x1129] = "hangul choseong pieup-thieuth";
			_charNames[(char)0x112A] = "hangul choseong pieup-phieuph";
			_charNames[(char)0x112B] = "hangul choseong kapyeounpieup";
			_charNames[(char)0x112C] = "hangul choseong kapyeounssangpieup";
			_charNames[(char)0x112D] = "hangul choseong sios-kiyeok";
			_charNames[(char)0x112E] = "hangul choseong sios-nieun";
			_charNames[(char)0x112F] = "hangul choseong sios-tikeut";
			_charNames[(char)0x1130] = "hangul choseong sios-rieul";
			_charNames[(char)0x1131] = "hangul choseong sios-mieum";
			_charNames[(char)0x1132] = "hangul choseong sios-pieup";
			_charNames[(char)0x1133] = "hangul choseong sios-pieup-kiyeok";
			_charNames[(char)0x1134] = "hangul choseong sios-ssangsios";
			_charNames[(char)0x1135] = "hangul choseong sios-ieung";
			_charNames[(char)0x1136] = "hangul choseong sios-cieuc";
			_charNames[(char)0x1137] = "hangul choseong sios-chieuch";
			_charNames[(char)0x1138] = "hangul choseong sios-khieukh";
			_charNames[(char)0x1139] = "hangul choseong sios-thieuth";
			_charNames[(char)0x113A] = "hangul choseong sios-phieuph";
			_charNames[(char)0x113B] = "hangul choseong sios-hieuh";
			_charNames[(char)0x113C] = "hangul choseong chitueumsios";
			_charNames[(char)0x113D] = "hangul choseong chitueumssangsios";
			_charNames[(char)0x113E] = "hangul choseong ceongchieumsios";
			_charNames[(char)0x113F] = "hangul choseong ceongchieumssangsios";
			_charNames[(char)0x1140] = "hangul choseong pansios";
			_charNames[(char)0x1141] = "hangul choseong ieung-kiyeok";
			_charNames[(char)0x1142] = "hangul choseong ieung-tikeut";
			_charNames[(char)0x1143] = "hangul choseong ieung-mieum";
			_charNames[(char)0x1144] = "hangul choseong ieung-pieup";
			_charNames[(char)0x1145] = "hangul choseong ieung-sios";
			_charNames[(char)0x1146] = "hangul choseong ieung-pansios";
			_charNames[(char)0x1147] = "hangul choseong ssangieung";
			_charNames[(char)0x1148] = "hangul choseong ieung-cieuc";
			_charNames[(char)0x1149] = "hangul choseong ieung-chieuch";
			_charNames[(char)0x114A] = "hangul choseong ieung-thieuth";
			_charNames[(char)0x114B] = "hangul choseong ieung-phieuph";
			_charNames[(char)0x114C] = "hangul choseong yesieung";
			_charNames[(char)0x114D] = "hangul choseong cieuc-ieung";
			_charNames[(char)0x114E] = "hangul choseong chitueumcieuc";
			_charNames[(char)0x114F] = "hangul choseong chitueumssangcieuc";
			_charNames[(char)0x1150] = "hangul choseong ceongchieumcieuc";
			_charNames[(char)0x1151] = "hangul choseong ceongchieumssangcieuc";
			_charNames[(char)0x1152] = "hangul choseong chieuch-khieukh";
			_charNames[(char)0x1153] = "hangul choseong chieuch-hieuh";
			_charNames[(char)0x1154] = "hangul choseong chitueumchieuch";
			_charNames[(char)0x1155] = "hangul choseong ceongchieumchieuch";
			_charNames[(char)0x1156] = "hangul choseong phieuph-pieup";
			_charNames[(char)0x1157] = "hangul choseong kapyeounphieuph";
			_charNames[(char)0x1158] = "hangul choseong ssanghieuh";
			_charNames[(char)0x1159] = "hangul choseong yeorinhieuh";
			_charNames[(char)0x115F] = "hangul choseong filler";
			_charNames[(char)0x1160] = "hangul jungseong filler";
			_charNames[(char)0x1161] = "hangul jungseong a";
			_charNames[(char)0x1162] = "hangul jungseong ae";
			_charNames[(char)0x1163] = "hangul jungseong ya";
			_charNames[(char)0x1164] = "hangul jungseong yae";
			_charNames[(char)0x1165] = "hangul jungseong eo";
			_charNames[(char)0x1166] = "hangul jungseong e";
			_charNames[(char)0x1167] = "hangul jungseong yeo";
			_charNames[(char)0x1168] = "hangul jungseong ye";
			_charNames[(char)0x1169] = "hangul jungseong o";
			_charNames[(char)0x116A] = "hangul jungseong wa";
			_charNames[(char)0x116B] = "hangul jungseong wae";
			_charNames[(char)0x116C] = "hangul jungseong oe";
			_charNames[(char)0x116D] = "hangul jungseong yo";
			_charNames[(char)0x116E] = "hangul jungseong u";
			_charNames[(char)0x116F] = "hangul jungseong weo";
			_charNames[(char)0x1170] = "hangul jungseong we";
			_charNames[(char)0x1171] = "hangul jungseong wi";
			_charNames[(char)0x1172] = "hangul jungseong yu";
			_charNames[(char)0x1173] = "hangul jungseong eu";
			_charNames[(char)0x1174] = "hangul jungseong yi";
			_charNames[(char)0x1175] = "hangul jungseong i";
			_charNames[(char)0x1176] = "hangul jungseong a-o";
			_charNames[(char)0x1177] = "hangul jungseong a-u";
			_charNames[(char)0x1178] = "hangul jungseong ya-o";
			_charNames[(char)0x1179] = "hangul jungseong ya-yo";
			_charNames[(char)0x117A] = "hangul jungseong eo-o";
			_charNames[(char)0x117B] = "hangul jungseong eo-u";
			_charNames[(char)0x117C] = "hangul jungseong eo-eu";
			_charNames[(char)0x117D] = "hangul jungseong yeo-o";
			_charNames[(char)0x117E] = "hangul jungseong yeo-u";
			_charNames[(char)0x117F] = "hangul jungseong o-eo";
			_charNames[(char)0x1180] = "hangul jungseong o-e";
			_charNames[(char)0x1181] = "hangul jungseong o-ye";
			_charNames[(char)0x1182] = "hangul jungseong o-o";
			_charNames[(char)0x1183] = "hangul jungseong o-u";
			_charNames[(char)0x1184] = "hangul jungseong yo-ya";
			_charNames[(char)0x1185] = "hangul jungseong yo-yae";
			_charNames[(char)0x1186] = "hangul jungseong yo-yeo";
			_charNames[(char)0x1187] = "hangul jungseong yo-o";
			_charNames[(char)0x1188] = "hangul jungseong yo-i";
			_charNames[(char)0x1189] = "hangul jungseong u-a";
			_charNames[(char)0x118A] = "hangul jungseong u-ae";
			_charNames[(char)0x118B] = "hangul jungseong u-eo-eu";
			_charNames[(char)0x118C] = "hangul jungseong u-ye";
			_charNames[(char)0x118D] = "hangul jungseong u-u";
			_charNames[(char)0x118E] = "hangul jungseong yu-a";
			_charNames[(char)0x118F] = "hangul jungseong yu-eo";
			_charNames[(char)0x1190] = "hangul jungseong yu-e";
			_charNames[(char)0x1191] = "hangul jungseong yu-yeo";
			_charNames[(char)0x1192] = "hangul jungseong yu-ye";
			_charNames[(char)0x1193] = "hangul jungseong yu-u";
			_charNames[(char)0x1194] = "hangul jungseong yu-i";
			_charNames[(char)0x1195] = "hangul jungseong eu-u";
			_charNames[(char)0x1196] = "hangul jungseong eu-eu";
			_charNames[(char)0x1197] = "hangul jungseong yi-u";
			_charNames[(char)0x1198] = "hangul jungseong i-a";
			_charNames[(char)0x1199] = "hangul jungseong i-ya";
			_charNames[(char)0x119A] = "hangul jungseong i-o";
			_charNames[(char)0x119B] = "hangul jungseong i-u";
			_charNames[(char)0x119C] = "hangul jungseong i-eu";
			_charNames[(char)0x119D] = "hangul jungseong i-araea";
			_charNames[(char)0x119E] = "hangul jungseong araea";
			_charNames[(char)0x119F] = "hangul jungseong araea-eo";
			_charNames[(char)0x11A0] = "hangul jungseong araea-u";
			_charNames[(char)0x11A1] = "hangul jungseong araea-i";
			_charNames[(char)0x11A2] = "hangul jungseong ssangaraea";
			_charNames[(char)0x11A8] = "hangul jongseong kiyeok";
			_charNames[(char)0x11A9] = "hangul jongseong ssangkiyeok";
			_charNames[(char)0x11AA] = "hangul jongseong kiyeok-sios";
			_charNames[(char)0x11AB] = "hangul jongseong nieun";
			_charNames[(char)0x11AC] = "hangul jongseong nieun-cieuc";
			_charNames[(char)0x11AD] = "hangul jongseong nieun-hieuh";
			_charNames[(char)0x11AE] = "hangul jongseong tikeut";
			_charNames[(char)0x11AF] = "hangul jongseong rieul";
			_charNames[(char)0x11B0] = "hangul jongseong rieul-kiyeok";
			_charNames[(char)0x11B1] = "hangul jongseong rieul-mieum";
			_charNames[(char)0x11B2] = "hangul jongseong rieul-pieup";
			_charNames[(char)0x11B3] = "hangul jongseong rieul-sios";
			_charNames[(char)0x11B4] = "hangul jongseong rieul-thieuth";
			_charNames[(char)0x11B5] = "hangul jongseong rieul-phieuph";
			_charNames[(char)0x11B6] = "hangul jongseong rieul-hieuh";
			_charNames[(char)0x11B7] = "hangul jongseong mieum";
			_charNames[(char)0x11B8] = "hangul jongseong pieup";
			_charNames[(char)0x11B9] = "hangul jongseong pieup-sios";
			_charNames[(char)0x11BA] = "hangul jongseong sios";
			_charNames[(char)0x11BB] = "hangul jongseong ssangsios";
			_charNames[(char)0x11BC] = "hangul jongseong ieung";
			_charNames[(char)0x11BD] = "hangul jongseong cieuc";
			_charNames[(char)0x11BE] = "hangul jongseong chieuch";
			_charNames[(char)0x11BF] = "hangul jongseong khieukh";
			_charNames[(char)0x11C0] = "hangul jongseong thieuth";
			_charNames[(char)0x11C1] = "hangul jongseong phieuph";
			_charNames[(char)0x11C2] = "hangul jongseong hieuh";
			_charNames[(char)0x11C3] = "hangul jongseong kiyeok-rieul";
			_charNames[(char)0x11C4] = "hangul jongseong kiyeok-sios-kiyeok";
			_charNames[(char)0x11C5] = "hangul jongseong nieun-kiyeok";
			_charNames[(char)0x11C6] = "hangul jongseong nieun-tikeut";
			_charNames[(char)0x11C7] = "hangul jongseong nieun-sios";
			_charNames[(char)0x11C8] = "hangul jongseong nieun-pansios";
			_charNames[(char)0x11C9] = "hangul jongseong nieun-thieuth";
			_charNames[(char)0x11CA] = "hangul jongseong tikeut-kiyeok";
			_charNames[(char)0x11CB] = "hangul jongseong tikeut-rieul";
			_charNames[(char)0x11CC] = "hangul jongseong rieul-kiyeok-sios";
			_charNames[(char)0x11CD] = "hangul jongseong rieul-nieun";
			_charNames[(char)0x11CE] = "hangul jongseong rieul-tikeut";
			_charNames[(char)0x11CF] = "hangul jongseong rieul-tikeut-hieuh";
			_charNames[(char)0x11D0] = "hangul jongseong ssangrieul";
			_charNames[(char)0x11D1] = "hangul jongseong rieul-mieum-kiyeok";
			_charNames[(char)0x11D2] = "hangul jongseong rieul-mieum-sios";
			_charNames[(char)0x11D3] = "hangul jongseong rieul-pieup-sios";
			_charNames[(char)0x11D4] = "hangul jongseong rieul-pieup-hieuh";
			_charNames[(char)0x11D5] = "hangul jongseong rieul-kapyeounpieup";
			_charNames[(char)0x11D6] = "hangul jongseong rieul-ssangsios";
			_charNames[(char)0x11D7] = "hangul jongseong rieul-pansios";
			_charNames[(char)0x11D8] = "hangul jongseong rieul-khieukh";
			_charNames[(char)0x11D9] = "hangul jongseong rieul-yeorinhieuh";
			_charNames[(char)0x11DA] = "hangul jongseong mieum-kiyeok";
			_charNames[(char)0x11DB] = "hangul jongseong mieum-rieul";
			_charNames[(char)0x11DC] = "hangul jongseong mieum-pieup";
			_charNames[(char)0x11DD] = "hangul jongseong mieum-sios";
			_charNames[(char)0x11DE] = "hangul jongseong mieum-ssangsios";
			_charNames[(char)0x11DF] = "hangul jongseong mieum-pansios";
			_charNames[(char)0x11E0] = "hangul jongseong mieum-chieuch";
			_charNames[(char)0x11E1] = "hangul jongseong mieum-hieuh";
			_charNames[(char)0x11E2] = "hangul jongseong kapyeounmieum";
			_charNames[(char)0x11E3] = "hangul jongseong pieup-rieul";
			_charNames[(char)0x11E4] = "hangul jongseong pieup-phieuph";
			_charNames[(char)0x11E5] = "hangul jongseong pieup-hieuh";
			_charNames[(char)0x11E6] = "hangul jongseong kapyeounpieup";
			_charNames[(char)0x11E7] = "hangul jongseong sios-kiyeok";
			_charNames[(char)0x11E8] = "hangul jongseong sios-tikeut";
			_charNames[(char)0x11E9] = "hangul jongseong sios-rieul";
			_charNames[(char)0x11EA] = "hangul jongseong sios-pieup";
			_charNames[(char)0x11EB] = "hangul jongseong pansios";
			_charNames[(char)0x11EC] = "hangul jongseong ieung-kiyeok";
			_charNames[(char)0x11ED] = "hangul jongseong ieung-ssangkiyeok";
			_charNames[(char)0x11EE] = "hangul jongseong ssangieung";
			_charNames[(char)0x11EF] = "hangul jongseong ieung-khieukh";
			_charNames[(char)0x11F0] = "hangul jongseong yesieung";
			_charNames[(char)0x11F1] = "hangul jongseong yesieung-sios";
			_charNames[(char)0x11F2] = "hangul jongseong yesieung-pansios";
			_charNames[(char)0x11F3] = "hangul jongseong phieuph-pieup";
			_charNames[(char)0x11F4] = "hangul jongseong kapyeounphieuph";
			_charNames[(char)0x11F5] = "hangul jongseong hieuh-nieun";
			_charNames[(char)0x11F6] = "hangul jongseong hieuh-rieul";
			_charNames[(char)0x11F7] = "hangul jongseong hieuh-mieum";
			_charNames[(char)0x11F8] = "hangul jongseong hieuh-pieup";
			_charNames[(char)0x11F9] = "hangul jongseong yeorinhieuh";
			_charNames[(char)0x1200] = "ethiopic syllable ha";
			_charNames[(char)0x1201] = "ethiopic syllable hu";
			_charNames[(char)0x1202] = "ethiopic syllable hi";
			_charNames[(char)0x1203] = "ethiopic syllable haa";
			_charNames[(char)0x1204] = "ethiopic syllable hee";
			_charNames[(char)0x1205] = "ethiopic syllable he";
			_charNames[(char)0x1206] = "ethiopic syllable ho";
			_charNames[(char)0x1207] = "ethiopic syllable hoa";
			_charNames[(char)0x1208] = "ethiopic syllable la";
			_charNames[(char)0x1209] = "ethiopic syllable lu";
			_charNames[(char)0x120A] = "ethiopic syllable li";
			_charNames[(char)0x120B] = "ethiopic syllable laa";
			_charNames[(char)0x120C] = "ethiopic syllable lee";
			_charNames[(char)0x120D] = "ethiopic syllable le";
			_charNames[(char)0x120E] = "ethiopic syllable lo";
			_charNames[(char)0x120F] = "ethiopic syllable lwa";
			_charNames[(char)0x1210] = "ethiopic syllable hha";
			_charNames[(char)0x1211] = "ethiopic syllable hhu";
			_charNames[(char)0x1212] = "ethiopic syllable hhi";
			_charNames[(char)0x1213] = "ethiopic syllable hhaa";
			_charNames[(char)0x1214] = "ethiopic syllable hhee";
			_charNames[(char)0x1215] = "ethiopic syllable hhe";
			_charNames[(char)0x1216] = "ethiopic syllable hho";
			_charNames[(char)0x1217] = "ethiopic syllable hhwa";
			_charNames[(char)0x1218] = "ethiopic syllable ma";
			_charNames[(char)0x1219] = "ethiopic syllable mu";
			_charNames[(char)0x121A] = "ethiopic syllable mi";
			_charNames[(char)0x121B] = "ethiopic syllable maa";
			_charNames[(char)0x121C] = "ethiopic syllable mee";
			_charNames[(char)0x121D] = "ethiopic syllable me";
			_charNames[(char)0x121E] = "ethiopic syllable mo";
			_charNames[(char)0x121F] = "ethiopic syllable mwa";
			_charNames[(char)0x1220] = "ethiopic syllable sza";
			_charNames[(char)0x1221] = "ethiopic syllable szu";
			_charNames[(char)0x1222] = "ethiopic syllable szi";
			_charNames[(char)0x1223] = "ethiopic syllable szaa";
			_charNames[(char)0x1224] = "ethiopic syllable szee";
			_charNames[(char)0x1225] = "ethiopic syllable sze";
			_charNames[(char)0x1226] = "ethiopic syllable szo";
			_charNames[(char)0x1227] = "ethiopic syllable szwa";
			_charNames[(char)0x1228] = "ethiopic syllable ra";
			_charNames[(char)0x1229] = "ethiopic syllable ru";
			_charNames[(char)0x122A] = "ethiopic syllable ri";
			_charNames[(char)0x122B] = "ethiopic syllable raa";
			_charNames[(char)0x122C] = "ethiopic syllable ree";
			_charNames[(char)0x122D] = "ethiopic syllable re";
			_charNames[(char)0x122E] = "ethiopic syllable ro";
			_charNames[(char)0x122F] = "ethiopic syllable rwa";
			_charNames[(char)0x1230] = "ethiopic syllable sa";
			_charNames[(char)0x1231] = "ethiopic syllable su";
			_charNames[(char)0x1232] = "ethiopic syllable si";
			_charNames[(char)0x1233] = "ethiopic syllable saa";
			_charNames[(char)0x1234] = "ethiopic syllable see";
			_charNames[(char)0x1235] = "ethiopic syllable se";
			_charNames[(char)0x1236] = "ethiopic syllable so";
			_charNames[(char)0x1237] = "ethiopic syllable swa";
			_charNames[(char)0x1238] = "ethiopic syllable sha";
			_charNames[(char)0x1239] = "ethiopic syllable shu";
			_charNames[(char)0x123A] = "ethiopic syllable shi";
			_charNames[(char)0x123B] = "ethiopic syllable shaa";
			_charNames[(char)0x123C] = "ethiopic syllable shee";
			_charNames[(char)0x123D] = "ethiopic syllable she";
			_charNames[(char)0x123E] = "ethiopic syllable sho";
			_charNames[(char)0x123F] = "ethiopic syllable shwa";
			_charNames[(char)0x1240] = "ethiopic syllable qa";
			_charNames[(char)0x1241] = "ethiopic syllable qu";
			_charNames[(char)0x1242] = "ethiopic syllable qi";
			_charNames[(char)0x1243] = "ethiopic syllable qaa";
			_charNames[(char)0x1244] = "ethiopic syllable qee";
			_charNames[(char)0x1245] = "ethiopic syllable qe";
			_charNames[(char)0x1246] = "ethiopic syllable qo";
			_charNames[(char)0x1247] = "ethiopic syllable qoa";
			_charNames[(char)0x1248] = "ethiopic syllable qwa";
			_charNames[(char)0x124A] = "ethiopic syllable qwi";
			_charNames[(char)0x124B] = "ethiopic syllable qwaa";
			_charNames[(char)0x124C] = "ethiopic syllable qwee";
			_charNames[(char)0x124D] = "ethiopic syllable qwe";
			_charNames[(char)0x1250] = "ethiopic syllable qha";
			_charNames[(char)0x1251] = "ethiopic syllable qhu";
			_charNames[(char)0x1252] = "ethiopic syllable qhi";
			_charNames[(char)0x1253] = "ethiopic syllable qhaa";
			_charNames[(char)0x1254] = "ethiopic syllable qhee";
			_charNames[(char)0x1255] = "ethiopic syllable qhe";
			_charNames[(char)0x1256] = "ethiopic syllable qho";
			_charNames[(char)0x1258] = "ethiopic syllable qhwa";
			_charNames[(char)0x125A] = "ethiopic syllable qhwi";
			_charNames[(char)0x125B] = "ethiopic syllable qhwaa";
			_charNames[(char)0x125C] = "ethiopic syllable qhwee";
			_charNames[(char)0x125D] = "ethiopic syllable qhwe";
			_charNames[(char)0x1260] = "ethiopic syllable ba";
			_charNames[(char)0x1261] = "ethiopic syllable bu";
			_charNames[(char)0x1262] = "ethiopic syllable bi";
			_charNames[(char)0x1263] = "ethiopic syllable baa";
			_charNames[(char)0x1264] = "ethiopic syllable bee";
			_charNames[(char)0x1265] = "ethiopic syllable be";
			_charNames[(char)0x1266] = "ethiopic syllable bo";
			_charNames[(char)0x1267] = "ethiopic syllable bwa";
			_charNames[(char)0x1268] = "ethiopic syllable va";
			_charNames[(char)0x1269] = "ethiopic syllable vu";
			_charNames[(char)0x126A] = "ethiopic syllable vi";
			_charNames[(char)0x126B] = "ethiopic syllable vaa";
			_charNames[(char)0x126C] = "ethiopic syllable vee";
			_charNames[(char)0x126D] = "ethiopic syllable ve";
			_charNames[(char)0x126E] = "ethiopic syllable vo";
			_charNames[(char)0x126F] = "ethiopic syllable vwa";
			_charNames[(char)0x1270] = "ethiopic syllable ta";
			_charNames[(char)0x1271] = "ethiopic syllable tu";
			_charNames[(char)0x1272] = "ethiopic syllable ti";
			_charNames[(char)0x1273] = "ethiopic syllable taa";
			_charNames[(char)0x1274] = "ethiopic syllable tee";
			_charNames[(char)0x1275] = "ethiopic syllable te";
			_charNames[(char)0x1276] = "ethiopic syllable to";
			_charNames[(char)0x1277] = "ethiopic syllable twa";
			_charNames[(char)0x1278] = "ethiopic syllable ca";
			_charNames[(char)0x1279] = "ethiopic syllable cu";
			_charNames[(char)0x127A] = "ethiopic syllable ci";
			_charNames[(char)0x127B] = "ethiopic syllable caa";
			_charNames[(char)0x127C] = "ethiopic syllable cee";
			_charNames[(char)0x127D] = "ethiopic syllable ce";
			_charNames[(char)0x127E] = "ethiopic syllable co";
			_charNames[(char)0x127F] = "ethiopic syllable cwa";
			_charNames[(char)0x1280] = "ethiopic syllable xa";
			_charNames[(char)0x1281] = "ethiopic syllable xu";
			_charNames[(char)0x1282] = "ethiopic syllable xi";
			_charNames[(char)0x1283] = "ethiopic syllable xaa";
			_charNames[(char)0x1284] = "ethiopic syllable xee";
			_charNames[(char)0x1285] = "ethiopic syllable xe";
			_charNames[(char)0x1286] = "ethiopic syllable xo";
			_charNames[(char)0x1287] = "ethiopic syllable xoa";
			_charNames[(char)0x1288] = "ethiopic syllable xwa";
			_charNames[(char)0x128A] = "ethiopic syllable xwi";
			_charNames[(char)0x128B] = "ethiopic syllable xwaa";
			_charNames[(char)0x128C] = "ethiopic syllable xwee";
			_charNames[(char)0x128D] = "ethiopic syllable xwe";
			_charNames[(char)0x1290] = "ethiopic syllable na";
			_charNames[(char)0x1291] = "ethiopic syllable nu";
			_charNames[(char)0x1292] = "ethiopic syllable ni";
			_charNames[(char)0x1293] = "ethiopic syllable naa";
			_charNames[(char)0x1294] = "ethiopic syllable nee";
			_charNames[(char)0x1295] = "ethiopic syllable ne";
			_charNames[(char)0x1296] = "ethiopic syllable no";
			_charNames[(char)0x1297] = "ethiopic syllable nwa";
			_charNames[(char)0x1298] = "ethiopic syllable nya";
			_charNames[(char)0x1299] = "ethiopic syllable nyu";
			_charNames[(char)0x129A] = "ethiopic syllable nyi";
			_charNames[(char)0x129B] = "ethiopic syllable nyaa";
			_charNames[(char)0x129C] = "ethiopic syllable nyee";
			_charNames[(char)0x129D] = "ethiopic syllable nye";
			_charNames[(char)0x129E] = "ethiopic syllable nyo";
			_charNames[(char)0x129F] = "ethiopic syllable nywa";
			_charNames[(char)0x12A0] = "ethiopic syllable glottal a";
			_charNames[(char)0x12A1] = "ethiopic syllable glottal u";
			_charNames[(char)0x12A2] = "ethiopic syllable glottal i";
			_charNames[(char)0x12A3] = "ethiopic syllable glottal aa";
			_charNames[(char)0x12A4] = "ethiopic syllable glottal ee";
			_charNames[(char)0x12A5] = "ethiopic syllable glottal e";
			_charNames[(char)0x12A6] = "ethiopic syllable glottal o";
			_charNames[(char)0x12A7] = "ethiopic syllable glottal wa";
			_charNames[(char)0x12A8] = "ethiopic syllable ka";
			_charNames[(char)0x12A9] = "ethiopic syllable ku";
			_charNames[(char)0x12AA] = "ethiopic syllable ki";
			_charNames[(char)0x12AB] = "ethiopic syllable kaa";
			_charNames[(char)0x12AC] = "ethiopic syllable kee";
			_charNames[(char)0x12AD] = "ethiopic syllable ke";
			_charNames[(char)0x12AE] = "ethiopic syllable ko";
			_charNames[(char)0x12AF] = "ethiopic syllable koa";
			_charNames[(char)0x12B0] = "ethiopic syllable kwa";
			_charNames[(char)0x12B2] = "ethiopic syllable kwi";
			_charNames[(char)0x12B3] = "ethiopic syllable kwaa";
			_charNames[(char)0x12B4] = "ethiopic syllable kwee";
			_charNames[(char)0x12B5] = "ethiopic syllable kwe";
			_charNames[(char)0x12B8] = "ethiopic syllable kxa";
			_charNames[(char)0x12B9] = "ethiopic syllable kxu";
			_charNames[(char)0x12BA] = "ethiopic syllable kxi";
			_charNames[(char)0x12BB] = "ethiopic syllable kxaa";
			_charNames[(char)0x12BC] = "ethiopic syllable kxee";
			_charNames[(char)0x12BD] = "ethiopic syllable kxe";
			_charNames[(char)0x12BE] = "ethiopic syllable kxo";
			_charNames[(char)0x12C0] = "ethiopic syllable kxwa";
			_charNames[(char)0x12C2] = "ethiopic syllable kxwi";
			_charNames[(char)0x12C3] = "ethiopic syllable kxwaa";
			_charNames[(char)0x12C4] = "ethiopic syllable kxwee";
			_charNames[(char)0x12C5] = "ethiopic syllable kxwe";
			_charNames[(char)0x12C8] = "ethiopic syllable wa";
			_charNames[(char)0x12C9] = "ethiopic syllable wu";
			_charNames[(char)0x12CA] = "ethiopic syllable wi";
			_charNames[(char)0x12CB] = "ethiopic syllable waa";
			_charNames[(char)0x12CC] = "ethiopic syllable wee";
			_charNames[(char)0x12CD] = "ethiopic syllable we";
			_charNames[(char)0x12CE] = "ethiopic syllable wo";
			_charNames[(char)0x12CF] = "ethiopic syllable woa";
			_charNames[(char)0x12D0] = "ethiopic syllable pharyngeal a";
			_charNames[(char)0x12D1] = "ethiopic syllable pharyngeal u";
			_charNames[(char)0x12D2] = "ethiopic syllable pharyngeal i";
			_charNames[(char)0x12D3] = "ethiopic syllable pharyngeal aa";
			_charNames[(char)0x12D4] = "ethiopic syllable pharyngeal ee";
			_charNames[(char)0x12D5] = "ethiopic syllable pharyngeal e";
			_charNames[(char)0x12D6] = "ethiopic syllable pharyngeal o";
			_charNames[(char)0x12D8] = "ethiopic syllable za";
			_charNames[(char)0x12D9] = "ethiopic syllable zu";
			_charNames[(char)0x12DA] = "ethiopic syllable zi";
			_charNames[(char)0x12DB] = "ethiopic syllable zaa";
			_charNames[(char)0x12DC] = "ethiopic syllable zee";
			_charNames[(char)0x12DD] = "ethiopic syllable ze";
			_charNames[(char)0x12DE] = "ethiopic syllable zo";
			_charNames[(char)0x12DF] = "ethiopic syllable zwa";
			_charNames[(char)0x12E0] = "ethiopic syllable zha";
			_charNames[(char)0x12E1] = "ethiopic syllable zhu";
			_charNames[(char)0x12E2] = "ethiopic syllable zhi";
			_charNames[(char)0x12E3] = "ethiopic syllable zhaa";
			_charNames[(char)0x12E4] = "ethiopic syllable zhee";
			_charNames[(char)0x12E5] = "ethiopic syllable zhe";
			_charNames[(char)0x12E6] = "ethiopic syllable zho";
			_charNames[(char)0x12E7] = "ethiopic syllable zhwa";
			_charNames[(char)0x12E8] = "ethiopic syllable ya";
			_charNames[(char)0x12E9] = "ethiopic syllable yu";
			_charNames[(char)0x12EA] = "ethiopic syllable yi";
			_charNames[(char)0x12EB] = "ethiopic syllable yaa";
			_charNames[(char)0x12EC] = "ethiopic syllable yee";
			_charNames[(char)0x12ED] = "ethiopic syllable ye";
			_charNames[(char)0x12EE] = "ethiopic syllable yo";
			_charNames[(char)0x12EF] = "ethiopic syllable yoa";
			_charNames[(char)0x12F0] = "ethiopic syllable da";
			_charNames[(char)0x12F1] = "ethiopic syllable du";
			_charNames[(char)0x12F2] = "ethiopic syllable di";
			_charNames[(char)0x12F3] = "ethiopic syllable daa";
			_charNames[(char)0x12F4] = "ethiopic syllable dee";
			_charNames[(char)0x12F5] = "ethiopic syllable de";
			_charNames[(char)0x12F6] = "ethiopic syllable do";
			_charNames[(char)0x12F7] = "ethiopic syllable dwa";
			_charNames[(char)0x12F8] = "ethiopic syllable dda";
			_charNames[(char)0x12F9] = "ethiopic syllable ddu";
			_charNames[(char)0x12FA] = "ethiopic syllable ddi";
			_charNames[(char)0x12FB] = "ethiopic syllable ddaa";
			_charNames[(char)0x12FC] = "ethiopic syllable ddee";
			_charNames[(char)0x12FD] = "ethiopic syllable dde";
			_charNames[(char)0x12FE] = "ethiopic syllable ddo";
			_charNames[(char)0x12FF] = "ethiopic syllable ddwa";
			_charNames[(char)0x1300] = "ethiopic syllable ja";
			_charNames[(char)0x1301] = "ethiopic syllable ju";
			_charNames[(char)0x1302] = "ethiopic syllable ji";
			_charNames[(char)0x1303] = "ethiopic syllable jaa";
			_charNames[(char)0x1304] = "ethiopic syllable jee";
			_charNames[(char)0x1305] = "ethiopic syllable je";
			_charNames[(char)0x1306] = "ethiopic syllable jo";
			_charNames[(char)0x1307] = "ethiopic syllable jwa";
			_charNames[(char)0x1308] = "ethiopic syllable ga";
			_charNames[(char)0x1309] = "ethiopic syllable gu";
			_charNames[(char)0x130A] = "ethiopic syllable gi";
			_charNames[(char)0x130B] = "ethiopic syllable gaa";
			_charNames[(char)0x130C] = "ethiopic syllable gee";
			_charNames[(char)0x130D] = "ethiopic syllable ge";
			_charNames[(char)0x130E] = "ethiopic syllable go";
			_charNames[(char)0x130F] = "ethiopic syllable goa";
			_charNames[(char)0x1310] = "ethiopic syllable gwa";
			_charNames[(char)0x1312] = "ethiopic syllable gwi";
			_charNames[(char)0x1313] = "ethiopic syllable gwaa";
			_charNames[(char)0x1314] = "ethiopic syllable gwee";
			_charNames[(char)0x1315] = "ethiopic syllable gwe";
			_charNames[(char)0x1318] = "ethiopic syllable gga";
			_charNames[(char)0x1319] = "ethiopic syllable ggu";
			_charNames[(char)0x131A] = "ethiopic syllable ggi";
			_charNames[(char)0x131B] = "ethiopic syllable ggaa";
			_charNames[(char)0x131C] = "ethiopic syllable ggee";
			_charNames[(char)0x131D] = "ethiopic syllable gge";
			_charNames[(char)0x131E] = "ethiopic syllable ggo";
			_charNames[(char)0x131F] = "ethiopic syllable ggwaa";
			_charNames[(char)0x1320] = "ethiopic syllable tha";
			_charNames[(char)0x1321] = "ethiopic syllable thu";
			_charNames[(char)0x1322] = "ethiopic syllable thi";
			_charNames[(char)0x1323] = "ethiopic syllable thaa";
			_charNames[(char)0x1324] = "ethiopic syllable thee";
			_charNames[(char)0x1325] = "ethiopic syllable the";
			_charNames[(char)0x1326] = "ethiopic syllable tho";
			_charNames[(char)0x1327] = "ethiopic syllable thwa";
			_charNames[(char)0x1328] = "ethiopic syllable cha";
			_charNames[(char)0x1329] = "ethiopic syllable chu";
			_charNames[(char)0x132A] = "ethiopic syllable chi";
			_charNames[(char)0x132B] = "ethiopic syllable chaa";
			_charNames[(char)0x132C] = "ethiopic syllable chee";
			_charNames[(char)0x132D] = "ethiopic syllable che";
			_charNames[(char)0x132E] = "ethiopic syllable cho";
			_charNames[(char)0x132F] = "ethiopic syllable chwa";
			_charNames[(char)0x1330] = "ethiopic syllable pha";
			_charNames[(char)0x1331] = "ethiopic syllable phu";
			_charNames[(char)0x1332] = "ethiopic syllable phi";
			_charNames[(char)0x1333] = "ethiopic syllable phaa";
			_charNames[(char)0x1334] = "ethiopic syllable phee";
			_charNames[(char)0x1335] = "ethiopic syllable phe";
			_charNames[(char)0x1336] = "ethiopic syllable pho";
			_charNames[(char)0x1337] = "ethiopic syllable phwa";
			_charNames[(char)0x1338] = "ethiopic syllable tsa";
			_charNames[(char)0x1339] = "ethiopic syllable tsu";
			_charNames[(char)0x133A] = "ethiopic syllable tsi";
			_charNames[(char)0x133B] = "ethiopic syllable tsaa";
			_charNames[(char)0x133C] = "ethiopic syllable tsee";
			_charNames[(char)0x133D] = "ethiopic syllable tse";
			_charNames[(char)0x133E] = "ethiopic syllable tso";
			_charNames[(char)0x133F] = "ethiopic syllable tswa";
			_charNames[(char)0x1340] = "ethiopic syllable tza";
			_charNames[(char)0x1341] = "ethiopic syllable tzu";
			_charNames[(char)0x1342] = "ethiopic syllable tzi";
			_charNames[(char)0x1343] = "ethiopic syllable tzaa";
			_charNames[(char)0x1344] = "ethiopic syllable tzee";
			_charNames[(char)0x1345] = "ethiopic syllable tze";
			_charNames[(char)0x1346] = "ethiopic syllable tzo";
			_charNames[(char)0x1347] = "ethiopic syllable tzoa";
			_charNames[(char)0x1348] = "ethiopic syllable fa";
			_charNames[(char)0x1349] = "ethiopic syllable fu";
			_charNames[(char)0x134A] = "ethiopic syllable fi";
			_charNames[(char)0x134B] = "ethiopic syllable faa";
			_charNames[(char)0x134C] = "ethiopic syllable fee";
			_charNames[(char)0x134D] = "ethiopic syllable fe";
			_charNames[(char)0x134E] = "ethiopic syllable fo";
			_charNames[(char)0x134F] = "ethiopic syllable fwa";
			_charNames[(char)0x1350] = "ethiopic syllable pa";
			_charNames[(char)0x1351] = "ethiopic syllable pu";
			_charNames[(char)0x1352] = "ethiopic syllable pi";
			_charNames[(char)0x1353] = "ethiopic syllable paa";
			_charNames[(char)0x1354] = "ethiopic syllable pee";
			_charNames[(char)0x1355] = "ethiopic syllable pe";
			_charNames[(char)0x1356] = "ethiopic syllable po";
			_charNames[(char)0x1357] = "ethiopic syllable pwa";
			_charNames[(char)0x1358] = "ethiopic syllable rya";
			_charNames[(char)0x1359] = "ethiopic syllable mya";
			_charNames[(char)0x135A] = "ethiopic syllable fya";
			_charNames[(char)0x135F] = "ethiopic combining gemination mark";
			_charNames[(char)0x1360] = "ethiopic section mark";
			_charNames[(char)0x1361] = "ethiopic wordspace";
			_charNames[(char)0x1362] = "ethiopic full stop";
			_charNames[(char)0x1363] = "ethiopic comma";
			_charNames[(char)0x1364] = "ethiopic semicolon";
			_charNames[(char)0x1365] = "ethiopic colon";
			_charNames[(char)0x1366] = "ethiopic preface colon";
			_charNames[(char)0x1367] = "ethiopic question mark";
			_charNames[(char)0x1368] = "ethiopic paragraph separator";
			_charNames[(char)0x1369] = "ethiopic digit one";
			_charNames[(char)0x136A] = "ethiopic digit two";
			_charNames[(char)0x136B] = "ethiopic digit three";
			_charNames[(char)0x136C] = "ethiopic digit four";
			_charNames[(char)0x136D] = "ethiopic digit five";
			_charNames[(char)0x136E] = "ethiopic digit six";
			_charNames[(char)0x136F] = "ethiopic digit seven";
			_charNames[(char)0x1370] = "ethiopic digit eight";
			_charNames[(char)0x1371] = "ethiopic digit nine";
			_charNames[(char)0x1372] = "ethiopic number ten";
			_charNames[(char)0x1373] = "ethiopic number twenty";
			_charNames[(char)0x1374] = "ethiopic number thirty";
			_charNames[(char)0x1375] = "ethiopic number forty";
			_charNames[(char)0x1376] = "ethiopic number fifty";
			_charNames[(char)0x1377] = "ethiopic number sixty";
			_charNames[(char)0x1378] = "ethiopic number seventy";
			_charNames[(char)0x1379] = "ethiopic number eighty";
			_charNames[(char)0x137A] = "ethiopic number ninety";
			_charNames[(char)0x137B] = "ethiopic number hundred";
			_charNames[(char)0x137C] = "ethiopic number ten thousand";
			_charNames[(char)0x1380] = "ethiopic syllable sebatbeit mwa";
			_charNames[(char)0x1381] = "ethiopic syllable mwi";
			_charNames[(char)0x1382] = "ethiopic syllable mwee";
			_charNames[(char)0x1383] = "ethiopic syllable mwe";
			_charNames[(char)0x1384] = "ethiopic syllable sebatbeit bwa";
			_charNames[(char)0x1385] = "ethiopic syllable bwi";
			_charNames[(char)0x1386] = "ethiopic syllable bwee";
			_charNames[(char)0x1387] = "ethiopic syllable bwe";
			_charNames[(char)0x1388] = "ethiopic syllable sebatbeit fwa";
			_charNames[(char)0x1389] = "ethiopic syllable fwi";
			_charNames[(char)0x138A] = "ethiopic syllable fwee";
			_charNames[(char)0x138B] = "ethiopic syllable fwe";
			_charNames[(char)0x138C] = "ethiopic syllable sebatbeit pwa";
			_charNames[(char)0x138D] = "ethiopic syllable pwi";
			_charNames[(char)0x138E] = "ethiopic syllable pwee";
			_charNames[(char)0x138F] = "ethiopic syllable pwe";
			_charNames[(char)0x1390] = "ethiopic tonal mark yizet";
			_charNames[(char)0x1391] = "ethiopic tonal mark deret";
			_charNames[(char)0x1392] = "ethiopic tonal mark rikrik";
			_charNames[(char)0x1393] = "ethiopic tonal mark short rikrik";
			_charNames[(char)0x1394] = "ethiopic tonal mark difat";
			_charNames[(char)0x1395] = "ethiopic tonal mark kenat";
			_charNames[(char)0x1396] = "ethiopic tonal mark chiret";
			_charNames[(char)0x1397] = "ethiopic tonal mark hidet";
			_charNames[(char)0x1398] = "ethiopic tonal mark deret-hidet";
			_charNames[(char)0x1399] = "ethiopic tonal mark kurt";
			_charNames[(char)0x13A0] = "cherokee letter a";
			_charNames[(char)0x13A1] = "cherokee letter e";
			_charNames[(char)0x13A2] = "cherokee letter i";
			_charNames[(char)0x13A3] = "cherokee letter o";
			_charNames[(char)0x13A4] = "cherokee letter u";
			_charNames[(char)0x13A5] = "cherokee letter v";
			_charNames[(char)0x13A6] = "cherokee letter ga";
			_charNames[(char)0x13A7] = "cherokee letter ka";
			_charNames[(char)0x13A8] = "cherokee letter ge";
			_charNames[(char)0x13A9] = "cherokee letter gi";
			_charNames[(char)0x13AA] = "cherokee letter go";
			_charNames[(char)0x13AB] = "cherokee letter gu";
			_charNames[(char)0x13AC] = "cherokee letter gv";
			_charNames[(char)0x13AD] = "cherokee letter ha";
			_charNames[(char)0x13AE] = "cherokee letter he";
			_charNames[(char)0x13AF] = "cherokee letter hi";
			_charNames[(char)0x13B0] = "cherokee letter ho";
			_charNames[(char)0x13B1] = "cherokee letter hu";
			_charNames[(char)0x13B2] = "cherokee letter hv";
			_charNames[(char)0x13B3] = "cherokee letter la";
			_charNames[(char)0x13B4] = "cherokee letter le";
			_charNames[(char)0x13B5] = "cherokee letter li";
			_charNames[(char)0x13B6] = "cherokee letter lo";
			_charNames[(char)0x13B7] = "cherokee letter lu";
			_charNames[(char)0x13B8] = "cherokee letter lv";
			_charNames[(char)0x13B9] = "cherokee letter ma";
			_charNames[(char)0x13BA] = "cherokee letter me";
			_charNames[(char)0x13BB] = "cherokee letter mi";
			_charNames[(char)0x13BC] = "cherokee letter mo";
			_charNames[(char)0x13BD] = "cherokee letter mu";
			_charNames[(char)0x13BE] = "cherokee letter na";
			_charNames[(char)0x13BF] = "cherokee letter hna";
			_charNames[(char)0x13C0] = "cherokee letter nah";
			_charNames[(char)0x13C1] = "cherokee letter ne";
			_charNames[(char)0x13C2] = "cherokee letter ni";
			_charNames[(char)0x13C3] = "cherokee letter no";
			_charNames[(char)0x13C4] = "cherokee letter nu";
			_charNames[(char)0x13C5] = "cherokee letter nv";
			_charNames[(char)0x13C6] = "cherokee letter qua";
			_charNames[(char)0x13C7] = "cherokee letter que";
			_charNames[(char)0x13C8] = "cherokee letter qui";
			_charNames[(char)0x13C9] = "cherokee letter quo";
			_charNames[(char)0x13CA] = "cherokee letter quu";
			_charNames[(char)0x13CB] = "cherokee letter quv";
			_charNames[(char)0x13CC] = "cherokee letter sa";
			_charNames[(char)0x13CD] = "cherokee letter s";
			_charNames[(char)0x13CE] = "cherokee letter se";
			_charNames[(char)0x13CF] = "cherokee letter si";
			_charNames[(char)0x13D0] = "cherokee letter so";
			_charNames[(char)0x13D1] = "cherokee letter su";
			_charNames[(char)0x13D2] = "cherokee letter sv";
			_charNames[(char)0x13D3] = "cherokee letter da";
			_charNames[(char)0x13D4] = "cherokee letter ta";
			_charNames[(char)0x13D5] = "cherokee letter de";
			_charNames[(char)0x13D6] = "cherokee letter te";
			_charNames[(char)0x13D7] = "cherokee letter di";
			_charNames[(char)0x13D8] = "cherokee letter ti";
			_charNames[(char)0x13D9] = "cherokee letter do";
			_charNames[(char)0x13DA] = "cherokee letter du";
			_charNames[(char)0x13DB] = "cherokee letter dv";
			_charNames[(char)0x13DC] = "cherokee letter dla";
			_charNames[(char)0x13DD] = "cherokee letter tla";
			_charNames[(char)0x13DE] = "cherokee letter tle";
			_charNames[(char)0x13DF] = "cherokee letter tli";
			_charNames[(char)0x13E0] = "cherokee letter tlo";
			_charNames[(char)0x13E1] = "cherokee letter tlu";
			_charNames[(char)0x13E2] = "cherokee letter tlv";
			_charNames[(char)0x13E3] = "cherokee letter tsa";
			_charNames[(char)0x13E4] = "cherokee letter tse";
			_charNames[(char)0x13E5] = "cherokee letter tsi";
			_charNames[(char)0x13E6] = "cherokee letter tso";
			_charNames[(char)0x13E7] = "cherokee letter tsu";
			_charNames[(char)0x13E8] = "cherokee letter tsv";
			_charNames[(char)0x13E9] = "cherokee letter wa";
			_charNames[(char)0x13EA] = "cherokee letter we";
			_charNames[(char)0x13EB] = "cherokee letter wi";
			_charNames[(char)0x13EC] = "cherokee letter wo";
			_charNames[(char)0x13ED] = "cherokee letter wu";
			_charNames[(char)0x13EE] = "cherokee letter wv";
			_charNames[(char)0x13EF] = "cherokee letter ya";
			_charNames[(char)0x13F0] = "cherokee letter ye";
			_charNames[(char)0x13F1] = "cherokee letter yi";
			_charNames[(char)0x13F2] = "cherokee letter yo";
			_charNames[(char)0x13F3] = "cherokee letter yu";
			_charNames[(char)0x13F4] = "cherokee letter yv";
			_charNames[(char)0x1401] = "canadian syllabics e";
			_charNames[(char)0x1402] = "canadian syllabics aai";
			_charNames[(char)0x1403] = "canadian syllabics i";
			_charNames[(char)0x1404] = "canadian syllabics ii";
			_charNames[(char)0x1405] = "canadian syllabics o";
			_charNames[(char)0x1406] = "canadian syllabics oo";
			_charNames[(char)0x1407] = "canadian syllabics y-cree oo";
			_charNames[(char)0x1408] = "canadian syllabics carrier ee";
			_charNames[(char)0x1409] = "canadian syllabics carrier i";
			_charNames[(char)0x140A] = "canadian syllabics a";
			_charNames[(char)0x140B] = "canadian syllabics aa";
			_charNames[(char)0x140C] = "canadian syllabics we";
			_charNames[(char)0x140D] = "canadian syllabics west-cree we";
			_charNames[(char)0x140E] = "canadian syllabics wi";
			_charNames[(char)0x140F] = "canadian syllabics west-cree wi";
			_charNames[(char)0x1410] = "canadian syllabics wii";
			_charNames[(char)0x1411] = "canadian syllabics west-cree wii";
			_charNames[(char)0x1412] = "canadian syllabics wo";
			_charNames[(char)0x1413] = "canadian syllabics west-cree wo";
			_charNames[(char)0x1414] = "canadian syllabics woo";
			_charNames[(char)0x1415] = "canadian syllabics west-cree woo";
			_charNames[(char)0x1416] = "canadian syllabics naskapi woo";
			_charNames[(char)0x1417] = "canadian syllabics wa";
			_charNames[(char)0x1418] = "canadian syllabics west-cree wa";
			_charNames[(char)0x1419] = "canadian syllabics waa";
			_charNames[(char)0x141A] = "canadian syllabics west-cree waa";
			_charNames[(char)0x141B] = "canadian syllabics naskapi waa";
			_charNames[(char)0x141C] = "canadian syllabics ai";
			_charNames[(char)0x141D] = "canadian syllabics y-cree w";
			_charNames[(char)0x141E] = "canadian syllabics glottal stop";
			_charNames[(char)0x141F] = "canadian syllabics final acute";
			_charNames[(char)0x1420] = "canadian syllabics final grave";
			_charNames[(char)0x1421] = "canadian syllabics final bottom half ring";
			_charNames[(char)0x1422] = "canadian syllabics final top half ring";
			_charNames[(char)0x1423] = "canadian syllabics final right half ring";
			_charNames[(char)0x1424] = "canadian syllabics final ring";
			_charNames[(char)0x1425] = "canadian syllabics final double acute";
			_charNames[(char)0x1426] = "canadian syllabics final double short vertical strokes";
			_charNames[(char)0x1427] = "canadian syllabics final middle dot";
			_charNames[(char)0x1428] = "canadian syllabics final short horizontal stroke";
			_charNames[(char)0x1429] = "canadian syllabics final plus";
			_charNames[(char)0x142A] = "canadian syllabics final down tack";
			_charNames[(char)0x142B] = "canadian syllabics en";
			_charNames[(char)0x142C] = "canadian syllabics in";
			_charNames[(char)0x142D] = "canadian syllabics on";
			_charNames[(char)0x142E] = "canadian syllabics an";
			_charNames[(char)0x142F] = "canadian syllabics pe";
			_charNames[(char)0x1430] = "canadian syllabics paai";
			_charNames[(char)0x1431] = "canadian syllabics pi";
			_charNames[(char)0x1432] = "canadian syllabics pii";
			_charNames[(char)0x1433] = "canadian syllabics po";
			_charNames[(char)0x1434] = "canadian syllabics poo";
			_charNames[(char)0x1435] = "canadian syllabics y-cree poo";
			_charNames[(char)0x1436] = "canadian syllabics carrier hee";
			_charNames[(char)0x1437] = "canadian syllabics carrier hi";
			_charNames[(char)0x1438] = "canadian syllabics pa";
			_charNames[(char)0x1439] = "canadian syllabics paa";
			_charNames[(char)0x143A] = "canadian syllabics pwe";
			_charNames[(char)0x143B] = "canadian syllabics west-cree pwe";
			_charNames[(char)0x143C] = "canadian syllabics pwi";
			_charNames[(char)0x143D] = "canadian syllabics west-cree pwi";
			_charNames[(char)0x143E] = "canadian syllabics pwii";
			_charNames[(char)0x143F] = "canadian syllabics west-cree pwii";
			_charNames[(char)0x1440] = "canadian syllabics pwo";
			_charNames[(char)0x1441] = "canadian syllabics west-cree pwo";
			_charNames[(char)0x1442] = "canadian syllabics pwoo";
			_charNames[(char)0x1443] = "canadian syllabics west-cree pwoo";
			_charNames[(char)0x1444] = "canadian syllabics pwa";
			_charNames[(char)0x1445] = "canadian syllabics west-cree pwa";
			_charNames[(char)0x1446] = "canadian syllabics pwaa";
			_charNames[(char)0x1447] = "canadian syllabics west-cree pwaa";
			_charNames[(char)0x1448] = "canadian syllabics y-cree pwaa";
			_charNames[(char)0x1449] = "canadian syllabics p";
			_charNames[(char)0x144A] = "canadian syllabics west-cree p";
			_charNames[(char)0x144B] = "canadian syllabics carrier h";
			_charNames[(char)0x144C] = "canadian syllabics te";
			_charNames[(char)0x144D] = "canadian syllabics taai";
			_charNames[(char)0x144E] = "canadian syllabics ti";
			_charNames[(char)0x144F] = "canadian syllabics tii";
			_charNames[(char)0x1450] = "canadian syllabics to";
			_charNames[(char)0x1451] = "canadian syllabics too";
			_charNames[(char)0x1452] = "canadian syllabics y-cree too";
			_charNames[(char)0x1453] = "canadian syllabics carrier dee";
			_charNames[(char)0x1454] = "canadian syllabics carrier di";
			_charNames[(char)0x1455] = "canadian syllabics ta";
			_charNames[(char)0x1456] = "canadian syllabics taa";
			_charNames[(char)0x1457] = "canadian syllabics twe";
			_charNames[(char)0x1458] = "canadian syllabics west-cree twe";
			_charNames[(char)0x1459] = "canadian syllabics twi";
			_charNames[(char)0x145A] = "canadian syllabics west-cree twi";
			_charNames[(char)0x145B] = "canadian syllabics twii";
			_charNames[(char)0x145C] = "canadian syllabics west-cree twii";
			_charNames[(char)0x145D] = "canadian syllabics two";
			_charNames[(char)0x145E] = "canadian syllabics west-cree two";
			_charNames[(char)0x145F] = "canadian syllabics twoo";
			_charNames[(char)0x1460] = "canadian syllabics west-cree twoo";
			_charNames[(char)0x1461] = "canadian syllabics twa";
			_charNames[(char)0x1462] = "canadian syllabics west-cree twa";
			_charNames[(char)0x1463] = "canadian syllabics twaa";
			_charNames[(char)0x1464] = "canadian syllabics west-cree twaa";
			_charNames[(char)0x1465] = "canadian syllabics naskapi twaa";
			_charNames[(char)0x1466] = "canadian syllabics t";
			_charNames[(char)0x1467] = "canadian syllabics tte";
			_charNames[(char)0x1468] = "canadian syllabics tti";
			_charNames[(char)0x1469] = "canadian syllabics tto";
			_charNames[(char)0x146A] = "canadian syllabics tta";
			_charNames[(char)0x146B] = "canadian syllabics ke";
			_charNames[(char)0x146C] = "canadian syllabics kaai";
			_charNames[(char)0x146D] = "canadian syllabics ki";
			_charNames[(char)0x146E] = "canadian syllabics kii";
			_charNames[(char)0x146F] = "canadian syllabics ko";
			_charNames[(char)0x1470] = "canadian syllabics koo";
			_charNames[(char)0x1471] = "canadian syllabics y-cree koo";
			_charNames[(char)0x1472] = "canadian syllabics ka";
			_charNames[(char)0x1473] = "canadian syllabics kaa";
			_charNames[(char)0x1474] = "canadian syllabics kwe";
			_charNames[(char)0x1475] = "canadian syllabics west-cree kwe";
			_charNames[(char)0x1476] = "canadian syllabics kwi";
			_charNames[(char)0x1477] = "canadian syllabics west-cree kwi";
			_charNames[(char)0x1478] = "canadian syllabics kwii";
			_charNames[(char)0x1479] = "canadian syllabics west-cree kwii";
			_charNames[(char)0x147A] = "canadian syllabics kwo";
			_charNames[(char)0x147B] = "canadian syllabics west-cree kwo";
			_charNames[(char)0x147C] = "canadian syllabics kwoo";
			_charNames[(char)0x147D] = "canadian syllabics west-cree kwoo";
			_charNames[(char)0x147E] = "canadian syllabics kwa";
			_charNames[(char)0x147F] = "canadian syllabics west-cree kwa";
			_charNames[(char)0x1480] = "canadian syllabics kwaa";
			_charNames[(char)0x1481] = "canadian syllabics west-cree kwaa";
			_charNames[(char)0x1482] = "canadian syllabics naskapi kwaa";
			_charNames[(char)0x1483] = "canadian syllabics k";
			_charNames[(char)0x1484] = "canadian syllabics kw";
			_charNames[(char)0x1485] = "canadian syllabics south-slavey keh";
			_charNames[(char)0x1486] = "canadian syllabics south-slavey kih";
			_charNames[(char)0x1487] = "canadian syllabics south-slavey koh";
			_charNames[(char)0x1488] = "canadian syllabics south-slavey kah";
			_charNames[(char)0x1489] = "canadian syllabics ce";
			_charNames[(char)0x148A] = "canadian syllabics caai";
			_charNames[(char)0x148B] = "canadian syllabics ci";
			_charNames[(char)0x148C] = "canadian syllabics cii";
			_charNames[(char)0x148D] = "canadian syllabics co";
			_charNames[(char)0x148E] = "canadian syllabics coo";
			_charNames[(char)0x148F] = "canadian syllabics y-cree coo";
			_charNames[(char)0x1490] = "canadian syllabics ca";
			_charNames[(char)0x1491] = "canadian syllabics caa";
			_charNames[(char)0x1492] = "canadian syllabics cwe";
			_charNames[(char)0x1493] = "canadian syllabics west-cree cwe";
			_charNames[(char)0x1494] = "canadian syllabics cwi";
			_charNames[(char)0x1495] = "canadian syllabics west-cree cwi";
			_charNames[(char)0x1496] = "canadian syllabics cwii";
			_charNames[(char)0x1497] = "canadian syllabics west-cree cwii";
			_charNames[(char)0x1498] = "canadian syllabics cwo";
			_charNames[(char)0x1499] = "canadian syllabics west-cree cwo";
			_charNames[(char)0x149A] = "canadian syllabics cwoo";
			_charNames[(char)0x149B] = "canadian syllabics west-cree cwoo";
			_charNames[(char)0x149C] = "canadian syllabics cwa";
			_charNames[(char)0x149D] = "canadian syllabics west-cree cwa";
			_charNames[(char)0x149E] = "canadian syllabics cwaa";
			_charNames[(char)0x149F] = "canadian syllabics west-cree cwaa";
			_charNames[(char)0x14A0] = "canadian syllabics naskapi cwaa";
			_charNames[(char)0x14A1] = "canadian syllabics c";
			_charNames[(char)0x14A2] = "canadian syllabics sayisi th";
			_charNames[(char)0x14A3] = "canadian syllabics me";
			_charNames[(char)0x14A4] = "canadian syllabics maai";
			_charNames[(char)0x14A5] = "canadian syllabics mi";
			_charNames[(char)0x14A6] = "canadian syllabics mii";
			_charNames[(char)0x14A7] = "canadian syllabics mo";
			_charNames[(char)0x14A8] = "canadian syllabics moo";
			_charNames[(char)0x14A9] = "canadian syllabics y-cree moo";
			_charNames[(char)0x14AA] = "canadian syllabics ma";
			_charNames[(char)0x14AB] = "canadian syllabics maa";
			_charNames[(char)0x14AC] = "canadian syllabics mwe";
			_charNames[(char)0x14AD] = "canadian syllabics west-cree mwe";
			_charNames[(char)0x14AE] = "canadian syllabics mwi";
			_charNames[(char)0x14AF] = "canadian syllabics west-cree mwi";
			_charNames[(char)0x14B0] = "canadian syllabics mwii";
			_charNames[(char)0x14B1] = "canadian syllabics west-cree mwii";
			_charNames[(char)0x14B2] = "canadian syllabics mwo";
			_charNames[(char)0x14B3] = "canadian syllabics west-cree mwo";
			_charNames[(char)0x14B4] = "canadian syllabics mwoo";
			_charNames[(char)0x14B5] = "canadian syllabics west-cree mwoo";
			_charNames[(char)0x14B6] = "canadian syllabics mwa";
			_charNames[(char)0x14B7] = "canadian syllabics west-cree mwa";
			_charNames[(char)0x14B8] = "canadian syllabics mwaa";
			_charNames[(char)0x14B9] = "canadian syllabics west-cree mwaa";
			_charNames[(char)0x14BA] = "canadian syllabics naskapi mwaa";
			_charNames[(char)0x14BB] = "canadian syllabics m";
			_charNames[(char)0x14BC] = "canadian syllabics west-cree m";
			_charNames[(char)0x14BD] = "canadian syllabics mh";
			_charNames[(char)0x14BE] = "canadian syllabics athapascan m";
			_charNames[(char)0x14BF] = "canadian syllabics sayisi m";
			_charNames[(char)0x14C0] = "canadian syllabics ne";
			_charNames[(char)0x14C1] = "canadian syllabics naai";
			_charNames[(char)0x14C2] = "canadian syllabics ni";
			_charNames[(char)0x14C3] = "canadian syllabics nii";
			_charNames[(char)0x14C4] = "canadian syllabics no";
			_charNames[(char)0x14C5] = "canadian syllabics noo";
			_charNames[(char)0x14C6] = "canadian syllabics y-cree noo";
			_charNames[(char)0x14C7] = "canadian syllabics na";
			_charNames[(char)0x14C8] = "canadian syllabics naa";
			_charNames[(char)0x14C9] = "canadian syllabics nwe";
			_charNames[(char)0x14CA] = "canadian syllabics west-cree nwe";
			_charNames[(char)0x14CB] = "canadian syllabics nwa";
			_charNames[(char)0x14CC] = "canadian syllabics west-cree nwa";
			_charNames[(char)0x14CD] = "canadian syllabics nwaa";
			_charNames[(char)0x14CE] = "canadian syllabics west-cree nwaa";
			_charNames[(char)0x14CF] = "canadian syllabics naskapi nwaa";
			_charNames[(char)0x14D0] = "canadian syllabics n";
			_charNames[(char)0x14D1] = "canadian syllabics carrier ng";
			_charNames[(char)0x14D2] = "canadian syllabics nh";
			_charNames[(char)0x14D3] = "canadian syllabics le";
			_charNames[(char)0x14D4] = "canadian syllabics laai";
			_charNames[(char)0x14D5] = "canadian syllabics li";
			_charNames[(char)0x14D6] = "canadian syllabics lii";
			_charNames[(char)0x14D7] = "canadian syllabics lo";
			_charNames[(char)0x14D8] = "canadian syllabics loo";
			_charNames[(char)0x14D9] = "canadian syllabics y-cree loo";
			_charNames[(char)0x14DA] = "canadian syllabics la";
			_charNames[(char)0x14DB] = "canadian syllabics laa";
			_charNames[(char)0x14DC] = "canadian syllabics lwe";
			_charNames[(char)0x14DD] = "canadian syllabics west-cree lwe";
			_charNames[(char)0x14DE] = "canadian syllabics lwi";
			_charNames[(char)0x14DF] = "canadian syllabics west-cree lwi";
			_charNames[(char)0x14E0] = "canadian syllabics lwii";
			_charNames[(char)0x14E1] = "canadian syllabics west-cree lwii";
			_charNames[(char)0x14E2] = "canadian syllabics lwo";
			_charNames[(char)0x14E3] = "canadian syllabics west-cree lwo";
			_charNames[(char)0x14E4] = "canadian syllabics lwoo";
			_charNames[(char)0x14E5] = "canadian syllabics west-cree lwoo";
			_charNames[(char)0x14E6] = "canadian syllabics lwa";
			_charNames[(char)0x14E7] = "canadian syllabics west-cree lwa";
			_charNames[(char)0x14E8] = "canadian syllabics lwaa";
			_charNames[(char)0x14E9] = "canadian syllabics west-cree lwaa";
			_charNames[(char)0x14EA] = "canadian syllabics l";
			_charNames[(char)0x14EB] = "canadian syllabics west-cree l";
			_charNames[(char)0x14EC] = "canadian syllabics medial l";
			_charNames[(char)0x14ED] = "canadian syllabics se";
			_charNames[(char)0x14EE] = "canadian syllabics saai";
			_charNames[(char)0x14EF] = "canadian syllabics si";
			_charNames[(char)0x14F0] = "canadian syllabics sii";
			_charNames[(char)0x14F1] = "canadian syllabics so";
			_charNames[(char)0x14F2] = "canadian syllabics soo";
			_charNames[(char)0x14F3] = "canadian syllabics y-cree soo";
			_charNames[(char)0x14F4] = "canadian syllabics sa";
			_charNames[(char)0x14F5] = "canadian syllabics saa";
			_charNames[(char)0x14F6] = "canadian syllabics swe";
			_charNames[(char)0x14F7] = "canadian syllabics west-cree swe";
			_charNames[(char)0x14F8] = "canadian syllabics swi";
			_charNames[(char)0x14F9] = "canadian syllabics west-cree swi";
			_charNames[(char)0x14FA] = "canadian syllabics swii";
			_charNames[(char)0x14FB] = "canadian syllabics west-cree swii";
			_charNames[(char)0x14FC] = "canadian syllabics swo";
			_charNames[(char)0x14FD] = "canadian syllabics west-cree swo";
			_charNames[(char)0x14FE] = "canadian syllabics swoo";
			_charNames[(char)0x14FF] = "canadian syllabics west-cree swoo";
			_charNames[(char)0x1500] = "canadian syllabics swa";
			_charNames[(char)0x1501] = "canadian syllabics west-cree swa";
			_charNames[(char)0x1502] = "canadian syllabics swaa";
			_charNames[(char)0x1503] = "canadian syllabics west-cree swaa";
			_charNames[(char)0x1504] = "canadian syllabics naskapi swaa";
			_charNames[(char)0x1505] = "canadian syllabics s";
			_charNames[(char)0x1506] = "canadian syllabics athapascan s";
			_charNames[(char)0x1507] = "canadian syllabics sw";
			_charNames[(char)0x1508] = "canadian syllabics blackfoot s";
			_charNames[(char)0x1509] = "canadian syllabics moose-cree sk";
			_charNames[(char)0x150A] = "canadian syllabics naskapi skw";
			_charNames[(char)0x150B] = "canadian syllabics naskapi s-w";
			_charNames[(char)0x150C] = "canadian syllabics naskapi spwa";
			_charNames[(char)0x150D] = "canadian syllabics naskapi stwa";
			_charNames[(char)0x150E] = "canadian syllabics naskapi skwa";
			_charNames[(char)0x150F] = "canadian syllabics naskapi scwa";
			_charNames[(char)0x1510] = "canadian syllabics she";
			_charNames[(char)0x1511] = "canadian syllabics shi";
			_charNames[(char)0x1512] = "canadian syllabics shii";
			_charNames[(char)0x1513] = "canadian syllabics sho";
			_charNames[(char)0x1514] = "canadian syllabics shoo";
			_charNames[(char)0x1515] = "canadian syllabics sha";
			_charNames[(char)0x1516] = "canadian syllabics shaa";
			_charNames[(char)0x1517] = "canadian syllabics shwe";
			_charNames[(char)0x1518] = "canadian syllabics west-cree shwe";
			_charNames[(char)0x1519] = "canadian syllabics shwi";
			_charNames[(char)0x151A] = "canadian syllabics west-cree shwi";
			_charNames[(char)0x151B] = "canadian syllabics shwii";
			_charNames[(char)0x151C] = "canadian syllabics west-cree shwii";
			_charNames[(char)0x151D] = "canadian syllabics shwo";
			_charNames[(char)0x151E] = "canadian syllabics west-cree shwo";
			_charNames[(char)0x151F] = "canadian syllabics shwoo";
			_charNames[(char)0x1520] = "canadian syllabics west-cree shwoo";
			_charNames[(char)0x1521] = "canadian syllabics shwa";
			_charNames[(char)0x1522] = "canadian syllabics west-cree shwa";
			_charNames[(char)0x1523] = "canadian syllabics shwaa";
			_charNames[(char)0x1524] = "canadian syllabics west-cree shwaa";
			_charNames[(char)0x1525] = "canadian syllabics sh";
			_charNames[(char)0x1526] = "canadian syllabics ye";
			_charNames[(char)0x1527] = "canadian syllabics yaai";
			_charNames[(char)0x1528] = "canadian syllabics yi";
			_charNames[(char)0x1529] = "canadian syllabics yii";
			_charNames[(char)0x152A] = "canadian syllabics yo";
			_charNames[(char)0x152B] = "canadian syllabics yoo";
			_charNames[(char)0x152C] = "canadian syllabics y-cree yoo";
			_charNames[(char)0x152D] = "canadian syllabics ya";
			_charNames[(char)0x152E] = "canadian syllabics yaa";
			_charNames[(char)0x152F] = "canadian syllabics ywe";
			_charNames[(char)0x1530] = "canadian syllabics west-cree ywe";
			_charNames[(char)0x1531] = "canadian syllabics ywi";
			_charNames[(char)0x1532] = "canadian syllabics west-cree ywi";
			_charNames[(char)0x1533] = "canadian syllabics ywii";
			_charNames[(char)0x1534] = "canadian syllabics west-cree ywii";
			_charNames[(char)0x1535] = "canadian syllabics ywo";
			_charNames[(char)0x1536] = "canadian syllabics west-cree ywo";
			_charNames[(char)0x1537] = "canadian syllabics ywoo";
			_charNames[(char)0x1538] = "canadian syllabics west-cree ywoo";
			_charNames[(char)0x1539] = "canadian syllabics ywa";
			_charNames[(char)0x153A] = "canadian syllabics west-cree ywa";
			_charNames[(char)0x153B] = "canadian syllabics ywaa";
			_charNames[(char)0x153C] = "canadian syllabics west-cree ywaa";
			_charNames[(char)0x153D] = "canadian syllabics naskapi ywaa";
			_charNames[(char)0x153E] = "canadian syllabics y";
			_charNames[(char)0x153F] = "canadian syllabics bible-cree y";
			_charNames[(char)0x1540] = "canadian syllabics west-cree y";
			_charNames[(char)0x1541] = "canadian syllabics sayisi yi";
			_charNames[(char)0x1542] = "canadian syllabics re";
			_charNames[(char)0x1543] = "canadian syllabics r-cree re";
			_charNames[(char)0x1544] = "canadian syllabics west-cree le";
			_charNames[(char)0x1545] = "canadian syllabics raai";
			_charNames[(char)0x1546] = "canadian syllabics ri";
			_charNames[(char)0x1547] = "canadian syllabics rii";
			_charNames[(char)0x1548] = "canadian syllabics ro";
			_charNames[(char)0x1549] = "canadian syllabics roo";
			_charNames[(char)0x154A] = "canadian syllabics west-cree lo";
			_charNames[(char)0x154B] = "canadian syllabics ra";
			_charNames[(char)0x154C] = "canadian syllabics raa";
			_charNames[(char)0x154D] = "canadian syllabics west-cree la";
			_charNames[(char)0x154E] = "canadian syllabics rwaa";
			_charNames[(char)0x154F] = "canadian syllabics west-cree rwaa";
			_charNames[(char)0x1550] = "canadian syllabics r";
			_charNames[(char)0x1551] = "canadian syllabics west-cree r";
			_charNames[(char)0x1552] = "canadian syllabics medial r";
			_charNames[(char)0x1553] = "canadian syllabics fe";
			_charNames[(char)0x1554] = "canadian syllabics faai";
			_charNames[(char)0x1555] = "canadian syllabics fi";
			_charNames[(char)0x1556] = "canadian syllabics fii";
			_charNames[(char)0x1557] = "canadian syllabics fo";
			_charNames[(char)0x1558] = "canadian syllabics foo";
			_charNames[(char)0x1559] = "canadian syllabics fa";
			_charNames[(char)0x155A] = "canadian syllabics faa";
			_charNames[(char)0x155B] = "canadian syllabics fwaa";
			_charNames[(char)0x155C] = "canadian syllabics west-cree fwaa";
			_charNames[(char)0x155D] = "canadian syllabics f";
			_charNames[(char)0x155E] = "canadian syllabics the";
			_charNames[(char)0x155F] = "canadian syllabics n-cree the";
			_charNames[(char)0x1560] = "canadian syllabics thi";
			_charNames[(char)0x1561] = "canadian syllabics n-cree thi";
			_charNames[(char)0x1562] = "canadian syllabics thii";
			_charNames[(char)0x1563] = "canadian syllabics n-cree thii";
			_charNames[(char)0x1564] = "canadian syllabics tho";
			_charNames[(char)0x1565] = "canadian syllabics thoo";
			_charNames[(char)0x1566] = "canadian syllabics tha";
			_charNames[(char)0x1567] = "canadian syllabics thaa";
			_charNames[(char)0x1568] = "canadian syllabics thwaa";
			_charNames[(char)0x1569] = "canadian syllabics west-cree thwaa";
			_charNames[(char)0x156A] = "canadian syllabics th";
			_charNames[(char)0x156B] = "canadian syllabics tthe";
			_charNames[(char)0x156C] = "canadian syllabics tthi";
			_charNames[(char)0x156D] = "canadian syllabics ttho";
			_charNames[(char)0x156E] = "canadian syllabics ttha";
			_charNames[(char)0x156F] = "canadian syllabics tth";
			_charNames[(char)0x1570] = "canadian syllabics tye";
			_charNames[(char)0x1571] = "canadian syllabics tyi";
			_charNames[(char)0x1572] = "canadian syllabics tyo";
			_charNames[(char)0x1573] = "canadian syllabics tya";
			_charNames[(char)0x1574] = "canadian syllabics nunavik he";
			_charNames[(char)0x1575] = "canadian syllabics nunavik hi";
			_charNames[(char)0x1576] = "canadian syllabics nunavik hii";
			_charNames[(char)0x1577] = "canadian syllabics nunavik ho";
			_charNames[(char)0x1578] = "canadian syllabics nunavik hoo";
			_charNames[(char)0x1579] = "canadian syllabics nunavik ha";
			_charNames[(char)0x157A] = "canadian syllabics nunavik haa";
			_charNames[(char)0x157B] = "canadian syllabics nunavik h";
			_charNames[(char)0x157C] = "canadian syllabics nunavut h";
			_charNames[(char)0x157D] = "canadian syllabics hk";
			_charNames[(char)0x157E] = "canadian syllabics qaai";
			_charNames[(char)0x157F] = "canadian syllabics qi";
			_charNames[(char)0x1580] = "canadian syllabics qii";
			_charNames[(char)0x1581] = "canadian syllabics qo";
			_charNames[(char)0x1582] = "canadian syllabics qoo";
			_charNames[(char)0x1583] = "canadian syllabics qa";
			_charNames[(char)0x1584] = "canadian syllabics qaa";
			_charNames[(char)0x1585] = "canadian syllabics q";
			_charNames[(char)0x1586] = "canadian syllabics tlhe";
			_charNames[(char)0x1587] = "canadian syllabics tlhi";
			_charNames[(char)0x1588] = "canadian syllabics tlho";
			_charNames[(char)0x1589] = "canadian syllabics tlha";
			_charNames[(char)0x158A] = "canadian syllabics west-cree re";
			_charNames[(char)0x158B] = "canadian syllabics west-cree ri";
			_charNames[(char)0x158C] = "canadian syllabics west-cree ro";
			_charNames[(char)0x158D] = "canadian syllabics west-cree ra";
			_charNames[(char)0x158E] = "canadian syllabics ngaai";
			_charNames[(char)0x158F] = "canadian syllabics ngi";
			_charNames[(char)0x1590] = "canadian syllabics ngii";
			_charNames[(char)0x1591] = "canadian syllabics ngo";
			_charNames[(char)0x1592] = "canadian syllabics ngoo";
			_charNames[(char)0x1593] = "canadian syllabics nga";
			_charNames[(char)0x1594] = "canadian syllabics ngaa";
			_charNames[(char)0x1595] = "canadian syllabics ng";
			_charNames[(char)0x1596] = "canadian syllabics nng";
			_charNames[(char)0x1597] = "canadian syllabics sayisi she";
			_charNames[(char)0x1598] = "canadian syllabics sayisi shi";
			_charNames[(char)0x1599] = "canadian syllabics sayisi sho";
			_charNames[(char)0x159A] = "canadian syllabics sayisi sha";
			_charNames[(char)0x159B] = "canadian syllabics woods-cree the";
			_charNames[(char)0x159C] = "canadian syllabics woods-cree thi";
			_charNames[(char)0x159D] = "canadian syllabics woods-cree tho";
			_charNames[(char)0x159E] = "canadian syllabics woods-cree tha";
			_charNames[(char)0x159F] = "canadian syllabics woods-cree th";
			_charNames[(char)0x15A0] = "canadian syllabics lhi";
			_charNames[(char)0x15A1] = "canadian syllabics lhii";
			_charNames[(char)0x15A2] = "canadian syllabics lho";
			_charNames[(char)0x15A3] = "canadian syllabics lhoo";
			_charNames[(char)0x15A4] = "canadian syllabics lha";
			_charNames[(char)0x15A5] = "canadian syllabics lhaa";
			_charNames[(char)0x15A6] = "canadian syllabics lh";
			_charNames[(char)0x15A7] = "canadian syllabics th-cree the";
			_charNames[(char)0x15A8] = "canadian syllabics th-cree thi";
			_charNames[(char)0x15A9] = "canadian syllabics th-cree thii";
			_charNames[(char)0x15AA] = "canadian syllabics th-cree tho";
			_charNames[(char)0x15AB] = "canadian syllabics th-cree thoo";
			_charNames[(char)0x15AC] = "canadian syllabics th-cree tha";
			_charNames[(char)0x15AD] = "canadian syllabics th-cree thaa";
			_charNames[(char)0x15AE] = "canadian syllabics th-cree th";
			_charNames[(char)0x15AF] = "canadian syllabics aivilik b";
			_charNames[(char)0x15B0] = "canadian syllabics blackfoot e";
			_charNames[(char)0x15B1] = "canadian syllabics blackfoot i";
			_charNames[(char)0x15B2] = "canadian syllabics blackfoot o";
			_charNames[(char)0x15B3] = "canadian syllabics blackfoot a";
			_charNames[(char)0x15B4] = "canadian syllabics blackfoot we";
			_charNames[(char)0x15B5] = "canadian syllabics blackfoot wi";
			_charNames[(char)0x15B6] = "canadian syllabics blackfoot wo";
			_charNames[(char)0x15B7] = "canadian syllabics blackfoot wa";
			_charNames[(char)0x15B8] = "canadian syllabics blackfoot ne";
			_charNames[(char)0x15B9] = "canadian syllabics blackfoot ni";
			_charNames[(char)0x15BA] = "canadian syllabics blackfoot no";
			_charNames[(char)0x15BB] = "canadian syllabics blackfoot na";
			_charNames[(char)0x15BC] = "canadian syllabics blackfoot ke";
			_charNames[(char)0x15BD] = "canadian syllabics blackfoot ki";
			_charNames[(char)0x15BE] = "canadian syllabics blackfoot ko";
			_charNames[(char)0x15BF] = "canadian syllabics blackfoot ka";
			_charNames[(char)0x15C0] = "canadian syllabics sayisi he";
			_charNames[(char)0x15C1] = "canadian syllabics sayisi hi";
			_charNames[(char)0x15C2] = "canadian syllabics sayisi ho";
			_charNames[(char)0x15C3] = "canadian syllabics sayisi ha";
			_charNames[(char)0x15C4] = "canadian syllabics carrier ghu";
			_charNames[(char)0x15C5] = "canadian syllabics carrier gho";
			_charNames[(char)0x15C6] = "canadian syllabics carrier ghe";
			_charNames[(char)0x15C7] = "canadian syllabics carrier ghee";
			_charNames[(char)0x15C8] = "canadian syllabics carrier ghi";
			_charNames[(char)0x15C9] = "canadian syllabics carrier gha";
			_charNames[(char)0x15CA] = "canadian syllabics carrier ru";
			_charNames[(char)0x15CB] = "canadian syllabics carrier ro";
			_charNames[(char)0x15CC] = "canadian syllabics carrier re";
			_charNames[(char)0x15CD] = "canadian syllabics carrier ree";
			_charNames[(char)0x15CE] = "canadian syllabics carrier ri";
			_charNames[(char)0x15CF] = "canadian syllabics carrier ra";
			_charNames[(char)0x15D0] = "canadian syllabics carrier wu";
			_charNames[(char)0x15D1] = "canadian syllabics carrier wo";
			_charNames[(char)0x15D2] = "canadian syllabics carrier we";
			_charNames[(char)0x15D3] = "canadian syllabics carrier wee";
			_charNames[(char)0x15D4] = "canadian syllabics carrier wi";
			_charNames[(char)0x15D5] = "canadian syllabics carrier wa";
			_charNames[(char)0x15D6] = "canadian syllabics carrier hwu";
			_charNames[(char)0x15D7] = "canadian syllabics carrier hwo";
			_charNames[(char)0x15D8] = "canadian syllabics carrier hwe";
			_charNames[(char)0x15D9] = "canadian syllabics carrier hwee";
			_charNames[(char)0x15DA] = "canadian syllabics carrier hwi";
			_charNames[(char)0x15DB] = "canadian syllabics carrier hwa";
			_charNames[(char)0x15DC] = "canadian syllabics carrier thu";
			_charNames[(char)0x15DD] = "canadian syllabics carrier tho";
			_charNames[(char)0x15DE] = "canadian syllabics carrier the";
			_charNames[(char)0x15DF] = "canadian syllabics carrier thee";
			_charNames[(char)0x15E0] = "canadian syllabics carrier thi";
			_charNames[(char)0x15E1] = "canadian syllabics carrier tha";
			_charNames[(char)0x15E2] = "canadian syllabics carrier ttu";
			_charNames[(char)0x15E3] = "canadian syllabics carrier tto";
			_charNames[(char)0x15E4] = "canadian syllabics carrier tte";
			_charNames[(char)0x15E5] = "canadian syllabics carrier ttee";
			_charNames[(char)0x15E6] = "canadian syllabics carrier tti";
			_charNames[(char)0x15E7] = "canadian syllabics carrier tta";
			_charNames[(char)0x15E8] = "canadian syllabics carrier pu";
			_charNames[(char)0x15E9] = "canadian syllabics carrier po";
			_charNames[(char)0x15EA] = "canadian syllabics carrier pe";
			_charNames[(char)0x15EB] = "canadian syllabics carrier pee";
			_charNames[(char)0x15EC] = "canadian syllabics carrier pi";
			_charNames[(char)0x15ED] = "canadian syllabics carrier pa";
			_charNames[(char)0x15EE] = "canadian syllabics carrier p";
			_charNames[(char)0x15EF] = "canadian syllabics carrier gu";
			_charNames[(char)0x15F0] = "canadian syllabics carrier go";
			_charNames[(char)0x15F1] = "canadian syllabics carrier ge";
			_charNames[(char)0x15F2] = "canadian syllabics carrier gee";
			_charNames[(char)0x15F3] = "canadian syllabics carrier gi";
			_charNames[(char)0x15F4] = "canadian syllabics carrier ga";
			_charNames[(char)0x15F5] = "canadian syllabics carrier khu";
			_charNames[(char)0x15F6] = "canadian syllabics carrier kho";
			_charNames[(char)0x15F7] = "canadian syllabics carrier khe";
			_charNames[(char)0x15F8] = "canadian syllabics carrier khee";
			_charNames[(char)0x15F9] = "canadian syllabics carrier khi";
			_charNames[(char)0x15FA] = "canadian syllabics carrier kha";
			_charNames[(char)0x15FB] = "canadian syllabics carrier kku";
			_charNames[(char)0x15FC] = "canadian syllabics carrier kko";
			_charNames[(char)0x15FD] = "canadian syllabics carrier kke";
			_charNames[(char)0x15FE] = "canadian syllabics carrier kkee";
			_charNames[(char)0x15FF] = "canadian syllabics carrier kki";
			_charNames[(char)0x1600] = "canadian syllabics carrier kka";
			_charNames[(char)0x1601] = "canadian syllabics carrier kk";
			_charNames[(char)0x1602] = "canadian syllabics carrier nu";
			_charNames[(char)0x1603] = "canadian syllabics carrier no";
			_charNames[(char)0x1604] = "canadian syllabics carrier ne";
			_charNames[(char)0x1605] = "canadian syllabics carrier nee";
			_charNames[(char)0x1606] = "canadian syllabics carrier ni";
			_charNames[(char)0x1607] = "canadian syllabics carrier na";
			_charNames[(char)0x1608] = "canadian syllabics carrier mu";
			_charNames[(char)0x1609] = "canadian syllabics carrier mo";
			_charNames[(char)0x160A] = "canadian syllabics carrier me";
			_charNames[(char)0x160B] = "canadian syllabics carrier mee";
			_charNames[(char)0x160C] = "canadian syllabics carrier mi";
			_charNames[(char)0x160D] = "canadian syllabics carrier ma";
			_charNames[(char)0x160E] = "canadian syllabics carrier yu";
			_charNames[(char)0x160F] = "canadian syllabics carrier yo";
			_charNames[(char)0x1610] = "canadian syllabics carrier ye";
			_charNames[(char)0x1611] = "canadian syllabics carrier yee";
			_charNames[(char)0x1612] = "canadian syllabics carrier yi";
			_charNames[(char)0x1613] = "canadian syllabics carrier ya";
			_charNames[(char)0x1614] = "canadian syllabics carrier ju";
			_charNames[(char)0x1615] = "canadian syllabics sayisi ju";
			_charNames[(char)0x1616] = "canadian syllabics carrier jo";
			_charNames[(char)0x1617] = "canadian syllabics carrier je";
			_charNames[(char)0x1618] = "canadian syllabics carrier jee";
			_charNames[(char)0x1619] = "canadian syllabics carrier ji";
			_charNames[(char)0x161A] = "canadian syllabics sayisi ji";
			_charNames[(char)0x161B] = "canadian syllabics carrier ja";
			_charNames[(char)0x161C] = "canadian syllabics carrier jju";
			_charNames[(char)0x161D] = "canadian syllabics carrier jjo";
			_charNames[(char)0x161E] = "canadian syllabics carrier jje";
			_charNames[(char)0x161F] = "canadian syllabics carrier jjee";
			_charNames[(char)0x1620] = "canadian syllabics carrier jji";
			_charNames[(char)0x1621] = "canadian syllabics carrier jja";
			_charNames[(char)0x1622] = "canadian syllabics carrier lu";
			_charNames[(char)0x1623] = "canadian syllabics carrier lo";
			_charNames[(char)0x1624] = "canadian syllabics carrier le";
			_charNames[(char)0x1625] = "canadian syllabics carrier lee";
			_charNames[(char)0x1626] = "canadian syllabics carrier li";
			_charNames[(char)0x1627] = "canadian syllabics carrier la";
			_charNames[(char)0x1628] = "canadian syllabics carrier dlu";
			_charNames[(char)0x1629] = "canadian syllabics carrier dlo";
			_charNames[(char)0x162A] = "canadian syllabics carrier dle";
			_charNames[(char)0x162B] = "canadian syllabics carrier dlee";
			_charNames[(char)0x162C] = "canadian syllabics carrier dli";
			_charNames[(char)0x162D] = "canadian syllabics carrier dla";
			_charNames[(char)0x162E] = "canadian syllabics carrier lhu";
			_charNames[(char)0x162F] = "canadian syllabics carrier lho";
			_charNames[(char)0x1630] = "canadian syllabics carrier lhe";
			_charNames[(char)0x1631] = "canadian syllabics carrier lhee";
			_charNames[(char)0x1632] = "canadian syllabics carrier lhi";
			_charNames[(char)0x1633] = "canadian syllabics carrier lha";
			_charNames[(char)0x1634] = "canadian syllabics carrier tlhu";
			_charNames[(char)0x1635] = "canadian syllabics carrier tlho";
			_charNames[(char)0x1636] = "canadian syllabics carrier tlhe";
			_charNames[(char)0x1637] = "canadian syllabics carrier tlhee";
			_charNames[(char)0x1638] = "canadian syllabics carrier tlhi";
			_charNames[(char)0x1639] = "canadian syllabics carrier tlha";
			_charNames[(char)0x163A] = "canadian syllabics carrier tlu";
			_charNames[(char)0x163B] = "canadian syllabics carrier tlo";
			_charNames[(char)0x163C] = "canadian syllabics carrier tle";
			_charNames[(char)0x163D] = "canadian syllabics carrier tlee";
			_charNames[(char)0x163E] = "canadian syllabics carrier tli";
			_charNames[(char)0x163F] = "canadian syllabics carrier tla";
			_charNames[(char)0x1640] = "canadian syllabics carrier zu";
			_charNames[(char)0x1641] = "canadian syllabics carrier zo";
			_charNames[(char)0x1642] = "canadian syllabics carrier ze";
			_charNames[(char)0x1643] = "canadian syllabics carrier zee";
			_charNames[(char)0x1644] = "canadian syllabics carrier zi";
			_charNames[(char)0x1645] = "canadian syllabics carrier za";
			_charNames[(char)0x1646] = "canadian syllabics carrier z";
			_charNames[(char)0x1647] = "canadian syllabics carrier initial z";
			_charNames[(char)0x1648] = "canadian syllabics carrier dzu";
			_charNames[(char)0x1649] = "canadian syllabics carrier dzo";
			_charNames[(char)0x164A] = "canadian syllabics carrier dze";
			_charNames[(char)0x164B] = "canadian syllabics carrier dzee";
			_charNames[(char)0x164C] = "canadian syllabics carrier dzi";
			_charNames[(char)0x164D] = "canadian syllabics carrier dza";
			_charNames[(char)0x164E] = "canadian syllabics carrier su";
			_charNames[(char)0x164F] = "canadian syllabics carrier so";
			_charNames[(char)0x1650] = "canadian syllabics carrier se";
			_charNames[(char)0x1651] = "canadian syllabics carrier see";
			_charNames[(char)0x1652] = "canadian syllabics carrier si";
			_charNames[(char)0x1653] = "canadian syllabics carrier sa";
			_charNames[(char)0x1654] = "canadian syllabics carrier shu";
			_charNames[(char)0x1655] = "canadian syllabics carrier sho";
			_charNames[(char)0x1656] = "canadian syllabics carrier she";
			_charNames[(char)0x1657] = "canadian syllabics carrier shee";
			_charNames[(char)0x1658] = "canadian syllabics carrier shi";
			_charNames[(char)0x1659] = "canadian syllabics carrier sha";
			_charNames[(char)0x165A] = "canadian syllabics carrier sh";
			_charNames[(char)0x165B] = "canadian syllabics carrier tsu";
			_charNames[(char)0x165C] = "canadian syllabics carrier tso";
			_charNames[(char)0x165D] = "canadian syllabics carrier tse";
			_charNames[(char)0x165E] = "canadian syllabics carrier tsee";
			_charNames[(char)0x165F] = "canadian syllabics carrier tsi";
			_charNames[(char)0x1660] = "canadian syllabics carrier tsa";
			_charNames[(char)0x1661] = "canadian syllabics carrier chu";
			_charNames[(char)0x1662] = "canadian syllabics carrier cho";
			_charNames[(char)0x1663] = "canadian syllabics carrier che";
			_charNames[(char)0x1664] = "canadian syllabics carrier chee";
			_charNames[(char)0x1665] = "canadian syllabics carrier chi";
			_charNames[(char)0x1666] = "canadian syllabics carrier cha";
			_charNames[(char)0x1667] = "canadian syllabics carrier ttsu";
			_charNames[(char)0x1668] = "canadian syllabics carrier ttso";
			_charNames[(char)0x1669] = "canadian syllabics carrier ttse";
			_charNames[(char)0x166A] = "canadian syllabics carrier ttsee";
			_charNames[(char)0x166B] = "canadian syllabics carrier ttsi";
			_charNames[(char)0x166C] = "canadian syllabics carrier ttsa";
			_charNames[(char)0x166D] = "canadian syllabics chi sign";
			_charNames[(char)0x166E] = "canadian syllabics full stop";
			_charNames[(char)0x166F] = "canadian syllabics qai";
			_charNames[(char)0x1670] = "canadian syllabics ngai";
			_charNames[(char)0x1671] = "canadian syllabics nngi";
			_charNames[(char)0x1672] = "canadian syllabics nngii";
			_charNames[(char)0x1673] = "canadian syllabics nngo";
			_charNames[(char)0x1674] = "canadian syllabics nngoo";
			_charNames[(char)0x1675] = "canadian syllabics nnga";
			_charNames[(char)0x1676] = "canadian syllabics nngaa";
			_charNames[(char)0x1680] = "ogham space mark";
			_charNames[(char)0x1681] = "ogham letter beith";
			_charNames[(char)0x1682] = "ogham letter luis";
			_charNames[(char)0x1683] = "ogham letter fearn";
			_charNames[(char)0x1684] = "ogham letter sail";
			_charNames[(char)0x1685] = "ogham letter nion";
			_charNames[(char)0x1686] = "ogham letter uath";
			_charNames[(char)0x1687] = "ogham letter dair";
			_charNames[(char)0x1688] = "ogham letter tinne";
			_charNames[(char)0x1689] = "ogham letter coll";
			_charNames[(char)0x168A] = "ogham letter ceirt";
			_charNames[(char)0x168B] = "ogham letter muin";
			_charNames[(char)0x168C] = "ogham letter gort";
			_charNames[(char)0x168D] = "ogham letter ngeadal";
			_charNames[(char)0x168E] = "ogham letter straif";
			_charNames[(char)0x168F] = "ogham letter ruis";
			_charNames[(char)0x1690] = "ogham letter ailm";
			_charNames[(char)0x1691] = "ogham letter onn";
			_charNames[(char)0x1692] = "ogham letter ur";
			_charNames[(char)0x1693] = "ogham letter eadhadh";
			_charNames[(char)0x1694] = "ogham letter iodhadh";
			_charNames[(char)0x1695] = "ogham letter eabhadh";
			_charNames[(char)0x1696] = "ogham letter or";
			_charNames[(char)0x1697] = "ogham letter uilleann";
			_charNames[(char)0x1698] = "ogham letter ifin";
			_charNames[(char)0x1699] = "ogham letter eamhancholl";
			_charNames[(char)0x169A] = "ogham letter peith";
			_charNames[(char)0x169B] = "ogham feather mark";
			_charNames[(char)0x169C] = "ogham reversed feather mark";
			_charNames[(char)0x16A0] = "runic letter fehu feoh fe f";
			_charNames[(char)0x16A1] = "runic letter v";
			_charNames[(char)0x16A2] = "runic letter uruz ur u";
			_charNames[(char)0x16A3] = "runic letter yr";
			_charNames[(char)0x16A4] = "runic letter y";
			_charNames[(char)0x16A5] = "runic letter w";
			_charNames[(char)0x16A6] = "runic letter thurisaz thurs thorn";
			_charNames[(char)0x16A7] = "runic letter eth";
			_charNames[(char)0x16A8] = "runic letter ansuz a";
			_charNames[(char)0x16A9] = "runic letter os o";
			_charNames[(char)0x16AA] = "runic letter ac a";
			_charNames[(char)0x16AB] = "runic letter aesc";
			_charNames[(char)0x16AC] = "runic letter long-branch-oss o";
			_charNames[(char)0x16AD] = "runic letter short-twig-oss o";
			_charNames[(char)0x16AE] = "runic letter o";
			_charNames[(char)0x16AF] = "runic letter oe";
			_charNames[(char)0x16B0] = "runic letter on";
			_charNames[(char)0x16B1] = "runic letter raido rad reid r";
			_charNames[(char)0x16B2] = "runic letter kauna";
			_charNames[(char)0x16B3] = "runic letter cen";
			_charNames[(char)0x16B4] = "runic letter kaun k";
			_charNames[(char)0x16B5] = "runic letter g";
			_charNames[(char)0x16B6] = "runic letter eng";
			_charNames[(char)0x16B7] = "runic letter gebo gyfu g";
			_charNames[(char)0x16B8] = "runic letter gar";
			_charNames[(char)0x16B9] = "runic letter wunjo wynn w";
			_charNames[(char)0x16BA] = "runic letter haglaz h";
			_charNames[(char)0x16BB] = "runic letter haegl h";
			_charNames[(char)0x16BC] = "runic letter long-branch-hagall h";
			_charNames[(char)0x16BD] = "runic letter short-twig-hagall h";
			_charNames[(char)0x16BE] = "runic letter naudiz nyd naud n";
			_charNames[(char)0x16BF] = "runic letter short-twig-naud n";
			_charNames[(char)0x16C0] = "runic letter dotted-n";
			_charNames[(char)0x16C1] = "runic letter isaz is iss i";
			_charNames[(char)0x16C2] = "runic letter e";
			_charNames[(char)0x16C3] = "runic letter jeran j";
			_charNames[(char)0x16C4] = "runic letter ger";
			_charNames[(char)0x16C5] = "runic letter long-branch-ar ae";
			_charNames[(char)0x16C6] = "runic letter short-twig-ar a";
			_charNames[(char)0x16C7] = "runic letter iwaz eoh";
			_charNames[(char)0x16C8] = "runic letter pertho peorth p";
			_charNames[(char)0x16C9] = "runic letter algiz eolhx";
			_charNames[(char)0x16CA] = "runic letter sowilo s";
			_charNames[(char)0x16CB] = "runic letter sigel long-branch-sol s";
			_charNames[(char)0x16CC] = "runic letter short-twig-sol s";
			_charNames[(char)0x16CD] = "runic letter c";
			_charNames[(char)0x16CE] = "runic letter z";
			_charNames[(char)0x16CF] = "runic letter tiwaz tir tyr t";
			_charNames[(char)0x16D0] = "runic letter short-twig-tyr t";
			_charNames[(char)0x16D1] = "runic letter d";
			_charNames[(char)0x16D2] = "runic letter berkanan beorc bjarkan b";
			_charNames[(char)0x16D3] = "runic letter short-twig-bjarkan b";
			_charNames[(char)0x16D4] = "runic letter dotted-p";
			_charNames[(char)0x16D5] = "runic letter open-p";
			_charNames[(char)0x16D6] = "runic letter ehwaz eh e";
			_charNames[(char)0x16D7] = "runic letter mannaz man m";
			_charNames[(char)0x16D8] = "runic letter long-branch-madr m";
			_charNames[(char)0x16D9] = "runic letter short-twig-madr m";
			_charNames[(char)0x16DA] = "runic letter laukaz lagu logr l";
			_charNames[(char)0x16DB] = "runic letter dotted-l";
			_charNames[(char)0x16DC] = "runic letter ingwaz";
			_charNames[(char)0x16DD] = "runic letter ing";
			_charNames[(char)0x16DE] = "runic letter dagaz daeg d";
			_charNames[(char)0x16DF] = "runic letter othalan ethel o";
			_charNames[(char)0x16E0] = "runic letter ear";
			_charNames[(char)0x16E1] = "runic letter ior";
			_charNames[(char)0x16E2] = "runic letter cweorth";
			_charNames[(char)0x16E3] = "runic letter calc";
			_charNames[(char)0x16E4] = "runic letter cealc";
			_charNames[(char)0x16E5] = "runic letter stan";
			_charNames[(char)0x16E6] = "runic letter long-branch-yr";
			_charNames[(char)0x16E7] = "runic letter short-twig-yr";
			_charNames[(char)0x16E8] = "runic letter icelandic-yr";
			_charNames[(char)0x16E9] = "runic letter q";
			_charNames[(char)0x16EA] = "runic letter x";
			_charNames[(char)0x16EB] = "runic single punctuation";
			_charNames[(char)0x16EC] = "runic multiple punctuation";
			_charNames[(char)0x16ED] = "runic cross punctuation";
			_charNames[(char)0x16EE] = "runic arlaug symbol";
			_charNames[(char)0x16EF] = "runic tvimadur symbol";
			_charNames[(char)0x16F0] = "runic belgthor symbol";
			_charNames[(char)0x1700] = "tagalog letter a";
			_charNames[(char)0x1701] = "tagalog letter i";
			_charNames[(char)0x1702] = "tagalog letter u";
			_charNames[(char)0x1703] = "tagalog letter ka";
			_charNames[(char)0x1704] = "tagalog letter ga";
			_charNames[(char)0x1705] = "tagalog letter nga";
			_charNames[(char)0x1706] = "tagalog letter ta";
			_charNames[(char)0x1707] = "tagalog letter da";
			_charNames[(char)0x1708] = "tagalog letter na";
			_charNames[(char)0x1709] = "tagalog letter pa";
			_charNames[(char)0x170A] = "tagalog letter ba";
			_charNames[(char)0x170B] = "tagalog letter ma";
			_charNames[(char)0x170C] = "tagalog letter ya";
			_charNames[(char)0x170E] = "tagalog letter la";
			_charNames[(char)0x170F] = "tagalog letter wa";
			_charNames[(char)0x1710] = "tagalog letter sa";
			_charNames[(char)0x1711] = "tagalog letter ha";
			_charNames[(char)0x1712] = "tagalog vowel sign i";
			_charNames[(char)0x1713] = "tagalog vowel sign u";
			_charNames[(char)0x1714] = "tagalog sign virama";
			_charNames[(char)0x1720] = "hanunoo letter a";
			_charNames[(char)0x1721] = "hanunoo letter i";
			_charNames[(char)0x1722] = "hanunoo letter u";
			_charNames[(char)0x1723] = "hanunoo letter ka";
			_charNames[(char)0x1724] = "hanunoo letter ga";
			_charNames[(char)0x1725] = "hanunoo letter nga";
			_charNames[(char)0x1726] = "hanunoo letter ta";
			_charNames[(char)0x1727] = "hanunoo letter da";
			_charNames[(char)0x1728] = "hanunoo letter na";
			_charNames[(char)0x1729] = "hanunoo letter pa";
			_charNames[(char)0x172A] = "hanunoo letter ba";
			_charNames[(char)0x172B] = "hanunoo letter ma";
			_charNames[(char)0x172C] = "hanunoo letter ya";
			_charNames[(char)0x172D] = "hanunoo letter ra";
			_charNames[(char)0x172E] = "hanunoo letter la";
			_charNames[(char)0x172F] = "hanunoo letter wa";
			_charNames[(char)0x1730] = "hanunoo letter sa";
			_charNames[(char)0x1731] = "hanunoo letter ha";
			_charNames[(char)0x1732] = "hanunoo vowel sign i";
			_charNames[(char)0x1733] = "hanunoo vowel sign u";
			_charNames[(char)0x1734] = "hanunoo sign pamudpod";
			_charNames[(char)0x1735] = "philippine single punctuation";
			_charNames[(char)0x1736] = "philippine double punctuation";
			_charNames[(char)0x1740] = "buhid letter a";
			_charNames[(char)0x1741] = "buhid letter i";
			_charNames[(char)0x1742] = "buhid letter u";
			_charNames[(char)0x1743] = "buhid letter ka";
			_charNames[(char)0x1744] = "buhid letter ga";
			_charNames[(char)0x1745] = "buhid letter nga";
			_charNames[(char)0x1746] = "buhid letter ta";
			_charNames[(char)0x1747] = "buhid letter da";
			_charNames[(char)0x1748] = "buhid letter na";
			_charNames[(char)0x1749] = "buhid letter pa";
			_charNames[(char)0x174A] = "buhid letter ba";
			_charNames[(char)0x174B] = "buhid letter ma";
			_charNames[(char)0x174C] = "buhid letter ya";
			_charNames[(char)0x174D] = "buhid letter ra";
			_charNames[(char)0x174E] = "buhid letter la";
			_charNames[(char)0x174F] = "buhid letter wa";
			_charNames[(char)0x1750] = "buhid letter sa";
			_charNames[(char)0x1751] = "buhid letter ha";
			_charNames[(char)0x1752] = "buhid vowel sign i";
			_charNames[(char)0x1753] = "buhid vowel sign u";
			_charNames[(char)0x1760] = "tagbanwa letter a";
			_charNames[(char)0x1761] = "tagbanwa letter i";
			_charNames[(char)0x1762] = "tagbanwa letter u";
			_charNames[(char)0x1763] = "tagbanwa letter ka";
			_charNames[(char)0x1764] = "tagbanwa letter ga";
			_charNames[(char)0x1765] = "tagbanwa letter nga";
			_charNames[(char)0x1766] = "tagbanwa letter ta";
			_charNames[(char)0x1767] = "tagbanwa letter da";
			_charNames[(char)0x1768] = "tagbanwa letter na";
			_charNames[(char)0x1769] = "tagbanwa letter pa";
			_charNames[(char)0x176A] = "tagbanwa letter ba";
			_charNames[(char)0x176B] = "tagbanwa letter ma";
			_charNames[(char)0x176C] = "tagbanwa letter ya";
			_charNames[(char)0x176E] = "tagbanwa letter la";
			_charNames[(char)0x176F] = "tagbanwa letter wa";
			_charNames[(char)0x1770] = "tagbanwa letter sa";
			_charNames[(char)0x1772] = "tagbanwa vowel sign i";
			_charNames[(char)0x1773] = "tagbanwa vowel sign u";
			_charNames[(char)0x1780] = "khmer letter ka";
			_charNames[(char)0x1781] = "khmer letter kha";
			_charNames[(char)0x1782] = "khmer letter ko";
			_charNames[(char)0x1783] = "khmer letter kho";
			_charNames[(char)0x1784] = "khmer letter ngo";
			_charNames[(char)0x1785] = "khmer letter ca";
			_charNames[(char)0x1786] = "khmer letter cha";
			_charNames[(char)0x1787] = "khmer letter co";
			_charNames[(char)0x1788] = "khmer letter cho";
			_charNames[(char)0x1789] = "khmer letter nyo";
			_charNames[(char)0x178A] = "khmer letter da";
			_charNames[(char)0x178B] = "khmer letter ttha";
			_charNames[(char)0x178C] = "khmer letter do";
			_charNames[(char)0x178D] = "khmer letter ttho";
			_charNames[(char)0x178E] = "khmer letter nno";
			_charNames[(char)0x178F] = "khmer letter ta";
			_charNames[(char)0x1790] = "khmer letter tha";
			_charNames[(char)0x1791] = "khmer letter to";
			_charNames[(char)0x1792] = "khmer letter tho";
			_charNames[(char)0x1793] = "khmer letter no";
			_charNames[(char)0x1794] = "khmer letter ba";
			_charNames[(char)0x1795] = "khmer letter pha";
			_charNames[(char)0x1796] = "khmer letter po";
			_charNames[(char)0x1797] = "khmer letter pho";
			_charNames[(char)0x1798] = "khmer letter mo";
			_charNames[(char)0x1799] = "khmer letter yo";
			_charNames[(char)0x179A] = "khmer letter ro";
			_charNames[(char)0x179B] = "khmer letter lo";
			_charNames[(char)0x179C] = "khmer letter vo";
			_charNames[(char)0x179D] = "khmer letter sha";
			_charNames[(char)0x179E] = "khmer letter sso";
			_charNames[(char)0x179F] = "khmer letter sa";
			_charNames[(char)0x17A0] = "khmer letter ha";
			_charNames[(char)0x17A1] = "khmer letter la";
			_charNames[(char)0x17A2] = "khmer letter qa";
			_charNames[(char)0x17A3] = "khmer independent vowel qaq";
			_charNames[(char)0x17A4] = "khmer independent vowel qaa";
			_charNames[(char)0x17A5] = "khmer independent vowel qi";
			_charNames[(char)0x17A6] = "khmer independent vowel qii";
			_charNames[(char)0x17A7] = "khmer independent vowel qu";
			_charNames[(char)0x17A8] = "khmer independent vowel quk";
			_charNames[(char)0x17A9] = "khmer independent vowel quu";
			_charNames[(char)0x17AA] = "khmer independent vowel quuv";
			_charNames[(char)0x17AB] = "khmer independent vowel ry";
			_charNames[(char)0x17AC] = "khmer independent vowel ryy";
			_charNames[(char)0x17AD] = "khmer independent vowel ly";
			_charNames[(char)0x17AE] = "khmer independent vowel lyy";
			_charNames[(char)0x17AF] = "khmer independent vowel qe";
			_charNames[(char)0x17B0] = "khmer independent vowel qai";
			_charNames[(char)0x17B1] = "khmer independent vowel qoo type one";
			_charNames[(char)0x17B2] = "khmer independent vowel qoo type two";
			_charNames[(char)0x17B3] = "khmer independent vowel qau";
			_charNames[(char)0x17B4] = "khmer vowel inherent aq";
			_charNames[(char)0x17B5] = "khmer vowel inherent aa";
			_charNames[(char)0x17B6] = "khmer vowel sign aa";
			_charNames[(char)0x17B7] = "khmer vowel sign i";
			_charNames[(char)0x17B8] = "khmer vowel sign ii";
			_charNames[(char)0x17B9] = "khmer vowel sign y";
			_charNames[(char)0x17BA] = "khmer vowel sign yy";
			_charNames[(char)0x17BB] = "khmer vowel sign u";
			_charNames[(char)0x17BC] = "khmer vowel sign uu";
			_charNames[(char)0x17BD] = "khmer vowel sign ua";
			_charNames[(char)0x17BE] = "khmer vowel sign oe";
			_charNames[(char)0x17BF] = "khmer vowel sign ya";
			_charNames[(char)0x17C0] = "khmer vowel sign ie";
			_charNames[(char)0x17C1] = "khmer vowel sign e";
			_charNames[(char)0x17C2] = "khmer vowel sign ae";
			_charNames[(char)0x17C3] = "khmer vowel sign ai";
			_charNames[(char)0x17C4] = "khmer vowel sign oo";
			_charNames[(char)0x17C5] = "khmer vowel sign au";
			_charNames[(char)0x17C6] = "khmer sign nikahit";
			_charNames[(char)0x17C7] = "khmer sign reahmuk";
			_charNames[(char)0x17C8] = "khmer sign yuukaleapintu";
			_charNames[(char)0x17C9] = "khmer sign muusikatoan";
			_charNames[(char)0x17CA] = "khmer sign triisap";
			_charNames[(char)0x17CB] = "khmer sign bantoc";
			_charNames[(char)0x17CC] = "khmer sign robat";
			_charNames[(char)0x17CD] = "khmer sign toandakhiat";
			_charNames[(char)0x17CE] = "khmer sign kakabat";
			_charNames[(char)0x17CF] = "khmer sign ahsda";
			_charNames[(char)0x17D0] = "khmer sign samyok sannya";
			_charNames[(char)0x17D1] = "khmer sign viriam";
			_charNames[(char)0x17D2] = "khmer sign coeng";
			_charNames[(char)0x17D3] = "khmer sign bathamasat";
			_charNames[(char)0x17D4] = "khmer sign khan";
			_charNames[(char)0x17D5] = "khmer sign bariyoosan";
			_charNames[(char)0x17D6] = "khmer sign camnuc pii kuuh";
			_charNames[(char)0x17D7] = "khmer sign lek too";
			_charNames[(char)0x17D8] = "khmer sign beyyal";
			_charNames[(char)0x17D9] = "khmer sign phnaek muan";
			_charNames[(char)0x17DA] = "khmer sign koomuut";
			_charNames[(char)0x17DB] = "khmer currency symbol riel";
			_charNames[(char)0x17DC] = "khmer sign avakrahasanya";
			_charNames[(char)0x17DD] = "khmer sign atthacan";
			_charNames[(char)0x17E0] = "khmer digit zero";
			_charNames[(char)0x17E1] = "khmer digit one";
			_charNames[(char)0x17E2] = "khmer digit two";
			_charNames[(char)0x17E3] = "khmer digit three";
			_charNames[(char)0x17E4] = "khmer digit four";
			_charNames[(char)0x17E5] = "khmer digit five";
			_charNames[(char)0x17E6] = "khmer digit six";
			_charNames[(char)0x17E7] = "khmer digit seven";
			_charNames[(char)0x17E8] = "khmer digit eight";
			_charNames[(char)0x17E9] = "khmer digit nine";
			_charNames[(char)0x17F0] = "khmer symbol lek attak son";
			_charNames[(char)0x17F1] = "khmer symbol lek attak muoy";
			_charNames[(char)0x17F2] = "khmer symbol lek attak pii";
			_charNames[(char)0x17F3] = "khmer symbol lek attak bei";
			_charNames[(char)0x17F4] = "khmer symbol lek attak buon";
			_charNames[(char)0x17F5] = "khmer symbol lek attak pram";
			_charNames[(char)0x17F6] = "khmer symbol lek attak pram-muoy";
			_charNames[(char)0x17F7] = "khmer symbol lek attak pram-pii";
			_charNames[(char)0x17F8] = "khmer symbol lek attak pram-bei";
			_charNames[(char)0x17F9] = "khmer symbol lek attak pram-buon";
			_charNames[(char)0x1800] = "mongolian birga";
			_charNames[(char)0x1801] = "mongolian ellipsis";
			_charNames[(char)0x1802] = "mongolian comma";
			_charNames[(char)0x1803] = "mongolian full stop";
			_charNames[(char)0x1804] = "mongolian colon";
			_charNames[(char)0x1805] = "mongolian four dots";
			_charNames[(char)0x1806] = "mongolian todo soft hyphen";
			_charNames[(char)0x1807] = "mongolian sibe syllable boundary marker";
			_charNames[(char)0x1808] = "mongolian manchu comma";
			_charNames[(char)0x1809] = "mongolian manchu full stop";
			_charNames[(char)0x180A] = "mongolian nirugu";
			_charNames[(char)0x180B] = "mongolian free variation selector one";
			_charNames[(char)0x180C] = "mongolian free variation selector two";
			_charNames[(char)0x180D] = "mongolian free variation selector three";
			_charNames[(char)0x180E] = "mongolian vowel separator";
			_charNames[(char)0x1810] = "mongolian digit zero";
			_charNames[(char)0x1811] = "mongolian digit one";
			_charNames[(char)0x1812] = "mongolian digit two";
			_charNames[(char)0x1813] = "mongolian digit three";
			_charNames[(char)0x1814] = "mongolian digit four";
			_charNames[(char)0x1815] = "mongolian digit five";
			_charNames[(char)0x1816] = "mongolian digit six";
			_charNames[(char)0x1817] = "mongolian digit seven";
			_charNames[(char)0x1818] = "mongolian digit eight";
			_charNames[(char)0x1819] = "mongolian digit nine";
			_charNames[(char)0x1820] = "mongolian letter a";
			_charNames[(char)0x1821] = "mongolian letter e";
			_charNames[(char)0x1822] = "mongolian letter i";
			_charNames[(char)0x1823] = "mongolian letter o";
			_charNames[(char)0x1824] = "mongolian letter u";
			_charNames[(char)0x1825] = "mongolian letter oe";
			_charNames[(char)0x1826] = "mongolian letter ue";
			_charNames[(char)0x1827] = "mongolian letter ee";
			_charNames[(char)0x1828] = "mongolian letter na";
			_charNames[(char)0x1829] = "mongolian letter ang";
			_charNames[(char)0x182A] = "mongolian letter ba";
			_charNames[(char)0x182B] = "mongolian letter pa";
			_charNames[(char)0x182C] = "mongolian letter qa";
			_charNames[(char)0x182D] = "mongolian letter ga";
			_charNames[(char)0x182E] = "mongolian letter ma";
			_charNames[(char)0x182F] = "mongolian letter la";
			_charNames[(char)0x1830] = "mongolian letter sa";
			_charNames[(char)0x1831] = "mongolian letter sha";
			_charNames[(char)0x1832] = "mongolian letter ta";
			_charNames[(char)0x1833] = "mongolian letter da";
			_charNames[(char)0x1834] = "mongolian letter cha";
			_charNames[(char)0x1835] = "mongolian letter ja";
			_charNames[(char)0x1836] = "mongolian letter ya";
			_charNames[(char)0x1837] = "mongolian letter ra";
			_charNames[(char)0x1838] = "mongolian letter wa";
			_charNames[(char)0x1839] = "mongolian letter fa";
			_charNames[(char)0x183A] = "mongolian letter ka";
			_charNames[(char)0x183B] = "mongolian letter kha";
			_charNames[(char)0x183C] = "mongolian letter tsa";
			_charNames[(char)0x183D] = "mongolian letter za";
			_charNames[(char)0x183E] = "mongolian letter haa";
			_charNames[(char)0x183F] = "mongolian letter zra";
			_charNames[(char)0x1840] = "mongolian letter lha";
			_charNames[(char)0x1841] = "mongolian letter zhi";
			_charNames[(char)0x1842] = "mongolian letter chi";
			_charNames[(char)0x1843] = "mongolian letter todo long vowel sign";
			_charNames[(char)0x1844] = "mongolian letter todo e";
			_charNames[(char)0x1845] = "mongolian letter todo i";
			_charNames[(char)0x1846] = "mongolian letter todo o";
			_charNames[(char)0x1847] = "mongolian letter todo u";
			_charNames[(char)0x1848] = "mongolian letter todo oe";
			_charNames[(char)0x1849] = "mongolian letter todo ue";
			_charNames[(char)0x184A] = "mongolian letter todo ang";
			_charNames[(char)0x184B] = "mongolian letter todo ba";
			_charNames[(char)0x184C] = "mongolian letter todo pa";
			_charNames[(char)0x184D] = "mongolian letter todo qa";
			_charNames[(char)0x184E] = "mongolian letter todo ga";
			_charNames[(char)0x184F] = "mongolian letter todo ma";
			_charNames[(char)0x1850] = "mongolian letter todo ta";
			_charNames[(char)0x1851] = "mongolian letter todo da";
			_charNames[(char)0x1852] = "mongolian letter todo cha";
			_charNames[(char)0x1853] = "mongolian letter todo ja";
			_charNames[(char)0x1854] = "mongolian letter todo tsa";
			_charNames[(char)0x1855] = "mongolian letter todo ya";
			_charNames[(char)0x1856] = "mongolian letter todo wa";
			_charNames[(char)0x1857] = "mongolian letter todo ka";
			_charNames[(char)0x1858] = "mongolian letter todo gaa";
			_charNames[(char)0x1859] = "mongolian letter todo haa";
			_charNames[(char)0x185A] = "mongolian letter todo jia";
			_charNames[(char)0x185B] = "mongolian letter todo nia";
			_charNames[(char)0x185C] = "mongolian letter todo dza";
			_charNames[(char)0x185D] = "mongolian letter sibe e";
			_charNames[(char)0x185E] = "mongolian letter sibe i";
			_charNames[(char)0x185F] = "mongolian letter sibe iy";
			_charNames[(char)0x1860] = "mongolian letter sibe ue";
			_charNames[(char)0x1861] = "mongolian letter sibe u";
			_charNames[(char)0x1862] = "mongolian letter sibe ang";
			_charNames[(char)0x1863] = "mongolian letter sibe ka";
			_charNames[(char)0x1864] = "mongolian letter sibe ga";
			_charNames[(char)0x1865] = "mongolian letter sibe ha";
			_charNames[(char)0x1866] = "mongolian letter sibe pa";
			_charNames[(char)0x1867] = "mongolian letter sibe sha";
			_charNames[(char)0x1868] = "mongolian letter sibe ta";
			_charNames[(char)0x1869] = "mongolian letter sibe da";
			_charNames[(char)0x186A] = "mongolian letter sibe ja";
			_charNames[(char)0x186B] = "mongolian letter sibe fa";
			_charNames[(char)0x186C] = "mongolian letter sibe gaa";
			_charNames[(char)0x186D] = "mongolian letter sibe haa";
			_charNames[(char)0x186E] = "mongolian letter sibe tsa";
			_charNames[(char)0x186F] = "mongolian letter sibe za";
			_charNames[(char)0x1870] = "mongolian letter sibe raa";
			_charNames[(char)0x1871] = "mongolian letter sibe cha";
			_charNames[(char)0x1872] = "mongolian letter sibe zha";
			_charNames[(char)0x1873] = "mongolian letter manchu i";
			_charNames[(char)0x1874] = "mongolian letter manchu ka";
			_charNames[(char)0x1875] = "mongolian letter manchu ra";
			_charNames[(char)0x1876] = "mongolian letter manchu fa";
			_charNames[(char)0x1877] = "mongolian letter manchu zha";
			_charNames[(char)0x1880] = "mongolian letter ali gali anusvara one";
			_charNames[(char)0x1881] = "mongolian letter ali gali visarga one";
			_charNames[(char)0x1882] = "mongolian letter ali gali damaru";
			_charNames[(char)0x1883] = "mongolian letter ali gali ubadama";
			_charNames[(char)0x1884] = "mongolian letter ali gali inverted ubadama";
			_charNames[(char)0x1885] = "mongolian letter ali gali baluda";
			_charNames[(char)0x1886] = "mongolian letter ali gali three baluda";
			_charNames[(char)0x1887] = "mongolian letter ali gali a";
			_charNames[(char)0x1888] = "mongolian letter ali gali i";
			_charNames[(char)0x1889] = "mongolian letter ali gali ka";
			_charNames[(char)0x188A] = "mongolian letter ali gali nga";
			_charNames[(char)0x188B] = "mongolian letter ali gali ca";
			_charNames[(char)0x188C] = "mongolian letter ali gali tta";
			_charNames[(char)0x188D] = "mongolian letter ali gali ttha";
			_charNames[(char)0x188E] = "mongolian letter ali gali dda";
			_charNames[(char)0x188F] = "mongolian letter ali gali nna";
			_charNames[(char)0x1890] = "mongolian letter ali gali ta";
			_charNames[(char)0x1891] = "mongolian letter ali gali da";
			_charNames[(char)0x1892] = "mongolian letter ali gali pa";
			_charNames[(char)0x1893] = "mongolian letter ali gali pha";
			_charNames[(char)0x1894] = "mongolian letter ali gali ssa";
			_charNames[(char)0x1895] = "mongolian letter ali gali zha";
			_charNames[(char)0x1896] = "mongolian letter ali gali za";
			_charNames[(char)0x1897] = "mongolian letter ali gali ah";
			_charNames[(char)0x1898] = "mongolian letter todo ali gali ta";
			_charNames[(char)0x1899] = "mongolian letter todo ali gali zha";
			_charNames[(char)0x189A] = "mongolian letter manchu ali gali gha";
			_charNames[(char)0x189B] = "mongolian letter manchu ali gali nga";
			_charNames[(char)0x189C] = "mongolian letter manchu ali gali ca";
			_charNames[(char)0x189D] = "mongolian letter manchu ali gali jha";
			_charNames[(char)0x189E] = "mongolian letter manchu ali gali tta";
			_charNames[(char)0x189F] = "mongolian letter manchu ali gali ddha";
			_charNames[(char)0x18A0] = "mongolian letter manchu ali gali ta";
			_charNames[(char)0x18A1] = "mongolian letter manchu ali gali dha";
			_charNames[(char)0x18A2] = "mongolian letter manchu ali gali ssa";
			_charNames[(char)0x18A3] = "mongolian letter manchu ali gali cya";
			_charNames[(char)0x18A4] = "mongolian letter manchu ali gali zha";
			_charNames[(char)0x18A5] = "mongolian letter manchu ali gali za";
			_charNames[(char)0x18A6] = "mongolian letter ali gali half u";
			_charNames[(char)0x18A7] = "mongolian letter ali gali half ya";
			_charNames[(char)0x18A8] = "mongolian letter manchu ali gali bha";
			_charNames[(char)0x18A9] = "mongolian letter ali gali dagalga";
			_charNames[(char)0x1900] = "limbu vowel-carrier letter";
			_charNames[(char)0x1901] = "limbu letter ka";
			_charNames[(char)0x1902] = "limbu letter kha";
			_charNames[(char)0x1903] = "limbu letter ga";
			_charNames[(char)0x1904] = "limbu letter gha";
			_charNames[(char)0x1905] = "limbu letter nga";
			_charNames[(char)0x1906] = "limbu letter ca";
			_charNames[(char)0x1907] = "limbu letter cha";
			_charNames[(char)0x1908] = "limbu letter ja";
			_charNames[(char)0x1909] = "limbu letter jha";
			_charNames[(char)0x190A] = "limbu letter yan";
			_charNames[(char)0x190B] = "limbu letter ta";
			_charNames[(char)0x190C] = "limbu letter tha";
			_charNames[(char)0x190D] = "limbu letter da";
			_charNames[(char)0x190E] = "limbu letter dha";
			_charNames[(char)0x190F] = "limbu letter na";
			_charNames[(char)0x1910] = "limbu letter pa";
			_charNames[(char)0x1911] = "limbu letter pha";
			_charNames[(char)0x1912] = "limbu letter ba";
			_charNames[(char)0x1913] = "limbu letter bha";
			_charNames[(char)0x1914] = "limbu letter ma";
			_charNames[(char)0x1915] = "limbu letter ya";
			_charNames[(char)0x1916] = "limbu letter ra";
			_charNames[(char)0x1917] = "limbu letter la";
			_charNames[(char)0x1918] = "limbu letter wa";
			_charNames[(char)0x1919] = "limbu letter sha";
			_charNames[(char)0x191A] = "limbu letter ssa";
			_charNames[(char)0x191B] = "limbu letter sa";
			_charNames[(char)0x191C] = "limbu letter ha";
			_charNames[(char)0x1920] = "limbu vowel sign a";
			_charNames[(char)0x1921] = "limbu vowel sign i";
			_charNames[(char)0x1922] = "limbu vowel sign u";
			_charNames[(char)0x1923] = "limbu vowel sign ee";
			_charNames[(char)0x1924] = "limbu vowel sign ai";
			_charNames[(char)0x1925] = "limbu vowel sign oo";
			_charNames[(char)0x1926] = "limbu vowel sign au";
			_charNames[(char)0x1927] = "limbu vowel sign e";
			_charNames[(char)0x1928] = "limbu vowel sign o";
			_charNames[(char)0x1929] = "limbu subjoined letter ya";
			_charNames[(char)0x192A] = "limbu subjoined letter ra";
			_charNames[(char)0x192B] = "limbu subjoined letter wa";
			_charNames[(char)0x1930] = "limbu small letter ka";
			_charNames[(char)0x1931] = "limbu small letter nga";
			_charNames[(char)0x1932] = "limbu small letter anusvara";
			_charNames[(char)0x1933] = "limbu small letter ta";
			_charNames[(char)0x1934] = "limbu small letter na";
			_charNames[(char)0x1935] = "limbu small letter pa";
			_charNames[(char)0x1936] = "limbu small letter ma";
			_charNames[(char)0x1937] = "limbu small letter ra";
			_charNames[(char)0x1938] = "limbu small letter la";
			_charNames[(char)0x1939] = "limbu sign mukphreng";
			_charNames[(char)0x193A] = "limbu sign kemphreng";
			_charNames[(char)0x193B] = "limbu sign sa-i";
			_charNames[(char)0x1940] = "limbu sign loo";
			_charNames[(char)0x1944] = "limbu exclamation mark";
			_charNames[(char)0x1945] = "limbu question mark";
			_charNames[(char)0x1946] = "limbu digit zero";
			_charNames[(char)0x1947] = "limbu digit one";
			_charNames[(char)0x1948] = "limbu digit two";
			_charNames[(char)0x1949] = "limbu digit three";
			_charNames[(char)0x194A] = "limbu digit four";
			_charNames[(char)0x194B] = "limbu digit five";
			_charNames[(char)0x194C] = "limbu digit six";
			_charNames[(char)0x194D] = "limbu digit seven";
			_charNames[(char)0x194E] = "limbu digit eight";
			_charNames[(char)0x194F] = "limbu digit nine";
			_charNames[(char)0x1950] = "tai le letter ka";
			_charNames[(char)0x1951] = "tai le letter xa";
			_charNames[(char)0x1952] = "tai le letter nga";
			_charNames[(char)0x1953] = "tai le letter tsa";
			_charNames[(char)0x1954] = "tai le letter sa";
			_charNames[(char)0x1955] = "tai le letter ya";
			_charNames[(char)0x1956] = "tai le letter ta";
			_charNames[(char)0x1957] = "tai le letter tha";
			_charNames[(char)0x1958] = "tai le letter la";
			_charNames[(char)0x1959] = "tai le letter pa";
			_charNames[(char)0x195A] = "tai le letter pha";
			_charNames[(char)0x195B] = "tai le letter ma";
			_charNames[(char)0x195C] = "tai le letter fa";
			_charNames[(char)0x195D] = "tai le letter va";
			_charNames[(char)0x195E] = "tai le letter ha";
			_charNames[(char)0x195F] = "tai le letter qa";
			_charNames[(char)0x1960] = "tai le letter kha";
			_charNames[(char)0x1961] = "tai le letter tsha";
			_charNames[(char)0x1962] = "tai le letter na";
			_charNames[(char)0x1963] = "tai le letter a";
			_charNames[(char)0x1964] = "tai le letter i";
			_charNames[(char)0x1965] = "tai le letter ee";
			_charNames[(char)0x1966] = "tai le letter eh";
			_charNames[(char)0x1967] = "tai le letter u";
			_charNames[(char)0x1968] = "tai le letter oo";
			_charNames[(char)0x1969] = "tai le letter o";
			_charNames[(char)0x196A] = "tai le letter ue";
			_charNames[(char)0x196B] = "tai le letter e";
			_charNames[(char)0x196C] = "tai le letter aue";
			_charNames[(char)0x196D] = "tai le letter ai";
			_charNames[(char)0x1970] = "tai le letter tone-2";
			_charNames[(char)0x1971] = "tai le letter tone-3";
			_charNames[(char)0x1972] = "tai le letter tone-4";
			_charNames[(char)0x1973] = "tai le letter tone-5";
			_charNames[(char)0x1974] = "tai le letter tone-6";
			_charNames[(char)0x1980] = "new tai lue letter high qa";
			_charNames[(char)0x1981] = "new tai lue letter low qa";
			_charNames[(char)0x1982] = "new tai lue letter high ka";
			_charNames[(char)0x1983] = "new tai lue letter high xa";
			_charNames[(char)0x1984] = "new tai lue letter high nga";
			_charNames[(char)0x1985] = "new tai lue letter low ka";
			_charNames[(char)0x1986] = "new tai lue letter low xa";
			_charNames[(char)0x1987] = "new tai lue letter low nga";
			_charNames[(char)0x1988] = "new tai lue letter high tsa";
			_charNames[(char)0x1989] = "new tai lue letter high sa";
			_charNames[(char)0x198A] = "new tai lue letter high ya";
			_charNames[(char)0x198B] = "new tai lue letter low tsa";
			_charNames[(char)0x198C] = "new tai lue letter low sa";
			_charNames[(char)0x198D] = "new tai lue letter low ya";
			_charNames[(char)0x198E] = "new tai lue letter high ta";
			_charNames[(char)0x198F] = "new tai lue letter high tha";
			_charNames[(char)0x1990] = "new tai lue letter high na";
			_charNames[(char)0x1991] = "new tai lue letter low ta";
			_charNames[(char)0x1992] = "new tai lue letter low tha";
			_charNames[(char)0x1993] = "new tai lue letter low na";
			_charNames[(char)0x1994] = "new tai lue letter high pa";
			_charNames[(char)0x1995] = "new tai lue letter high pha";
			_charNames[(char)0x1996] = "new tai lue letter high ma";
			_charNames[(char)0x1997] = "new tai lue letter low pa";
			_charNames[(char)0x1998] = "new tai lue letter low pha";
			_charNames[(char)0x1999] = "new tai lue letter low ma";
			_charNames[(char)0x199A] = "new tai lue letter high fa";
			_charNames[(char)0x199B] = "new tai lue letter high va";
			_charNames[(char)0x199C] = "new tai lue letter high la";
			_charNames[(char)0x199D] = "new tai lue letter low fa";
			_charNames[(char)0x199E] = "new tai lue letter low va";
			_charNames[(char)0x199F] = "new tai lue letter low la";
			_charNames[(char)0x19A0] = "new tai lue letter high ha";
			_charNames[(char)0x19A1] = "new tai lue letter high da";
			_charNames[(char)0x19A2] = "new tai lue letter high ba";
			_charNames[(char)0x19A3] = "new tai lue letter low ha";
			_charNames[(char)0x19A4] = "new tai lue letter low da";
			_charNames[(char)0x19A5] = "new tai lue letter low ba";
			_charNames[(char)0x19A6] = "new tai lue letter high kva";
			_charNames[(char)0x19A7] = "new tai lue letter high xva";
			_charNames[(char)0x19A8] = "new tai lue letter low kva";
			_charNames[(char)0x19A9] = "new tai lue letter low xva";
			_charNames[(char)0x19B0] = "new tai lue vowel sign vowel shortener";
			_charNames[(char)0x19B1] = "new tai lue vowel sign aa";
			_charNames[(char)0x19B2] = "new tai lue vowel sign ii";
			_charNames[(char)0x19B3] = "new tai lue vowel sign u";
			_charNames[(char)0x19B4] = "new tai lue vowel sign uu";
			_charNames[(char)0x19B5] = "new tai lue vowel sign e";
			_charNames[(char)0x19B6] = "new tai lue vowel sign ae";
			_charNames[(char)0x19B7] = "new tai lue vowel sign o";
			_charNames[(char)0x19B8] = "new tai lue vowel sign oa";
			_charNames[(char)0x19B9] = "new tai lue vowel sign ue";
			_charNames[(char)0x19BA] = "new tai lue vowel sign ay";
			_charNames[(char)0x19BB] = "new tai lue vowel sign aay";
			_charNames[(char)0x19BC] = "new tai lue vowel sign uy";
			_charNames[(char)0x19BD] = "new tai lue vowel sign oy";
			_charNames[(char)0x19BE] = "new tai lue vowel sign oay";
			_charNames[(char)0x19BF] = "new tai lue vowel sign uey";
			_charNames[(char)0x19C0] = "new tai lue vowel sign iy";
			_charNames[(char)0x19C1] = "new tai lue letter final v";
			_charNames[(char)0x19C2] = "new tai lue letter final ng";
			_charNames[(char)0x19C3] = "new tai lue letter final n";
			_charNames[(char)0x19C4] = "new tai lue letter final m";
			_charNames[(char)0x19C5] = "new tai lue letter final k";
			_charNames[(char)0x19C6] = "new tai lue letter final d";
			_charNames[(char)0x19C7] = "new tai lue letter final b";
			_charNames[(char)0x19C8] = "new tai lue tone mark-1";
			_charNames[(char)0x19C9] = "new tai lue tone mark-2";
			_charNames[(char)0x19D0] = "new tai lue digit zero";
			_charNames[(char)0x19D1] = "new tai lue digit one";
			_charNames[(char)0x19D2] = "new tai lue digit two";
			_charNames[(char)0x19D3] = "new tai lue digit three";
			_charNames[(char)0x19D4] = "new tai lue digit four";
			_charNames[(char)0x19D5] = "new tai lue digit five";
			_charNames[(char)0x19D6] = "new tai lue digit six";
			_charNames[(char)0x19D7] = "new tai lue digit seven";
			_charNames[(char)0x19D8] = "new tai lue digit eight";
			_charNames[(char)0x19D9] = "new tai lue digit nine";
			_charNames[(char)0x19DE] = "new tai lue sign lae";
			_charNames[(char)0x19DF] = "new tai lue sign laev";
			_charNames[(char)0x19E0] = "khmer symbol pathamasat";
			_charNames[(char)0x19E1] = "khmer symbol muoy koet";
			_charNames[(char)0x19E2] = "khmer symbol pii koet";
			_charNames[(char)0x19E3] = "khmer symbol bei koet";
			_charNames[(char)0x19E4] = "khmer symbol buon koet";
			_charNames[(char)0x19E5] = "khmer symbol pram koet";
			_charNames[(char)0x19E6] = "khmer symbol pram-muoy koet";
			_charNames[(char)0x19E7] = "khmer symbol pram-pii koet";
			_charNames[(char)0x19E8] = "khmer symbol pram-bei koet";
			_charNames[(char)0x19E9] = "khmer symbol pram-buon koet";
			_charNames[(char)0x19EA] = "khmer symbol dap koet";
			_charNames[(char)0x19EB] = "khmer symbol dap-muoy koet";
			_charNames[(char)0x19EC] = "khmer symbol dap-pii koet";
			_charNames[(char)0x19ED] = "khmer symbol dap-bei koet";
			_charNames[(char)0x19EE] = "khmer symbol dap-buon koet";
			_charNames[(char)0x19EF] = "khmer symbol dap-pram koet";
			_charNames[(char)0x19F0] = "khmer symbol tuteyasat";
			_charNames[(char)0x19F1] = "khmer symbol muoy roc";
			_charNames[(char)0x19F2] = "khmer symbol pii roc";
			_charNames[(char)0x19F3] = "khmer symbol bei roc";
			_charNames[(char)0x19F4] = "khmer symbol buon roc";
			_charNames[(char)0x19F5] = "khmer symbol pram roc";
			_charNames[(char)0x19F6] = "khmer symbol pram-muoy roc";
			_charNames[(char)0x19F7] = "khmer symbol pram-pii roc";
			_charNames[(char)0x19F8] = "khmer symbol pram-bei roc";
			_charNames[(char)0x19F9] = "khmer symbol pram-buon roc";
			_charNames[(char)0x19FA] = "khmer symbol dap roc";
			_charNames[(char)0x19FB] = "khmer symbol dap-muoy roc";
			_charNames[(char)0x19FC] = "khmer symbol dap-pii roc";
			_charNames[(char)0x19FD] = "khmer symbol dap-bei roc";
			_charNames[(char)0x19FE] = "khmer symbol dap-buon roc";
			_charNames[(char)0x19FF] = "khmer symbol dap-pram roc";
			_charNames[(char)0x1A00] = "buginese letter ka";
			_charNames[(char)0x1A01] = "buginese letter ga";
			_charNames[(char)0x1A02] = "buginese letter nga";
			_charNames[(char)0x1A03] = "buginese letter ngka";
			_charNames[(char)0x1A04] = "buginese letter pa";
			_charNames[(char)0x1A05] = "buginese letter ba";
			_charNames[(char)0x1A06] = "buginese letter ma";
			_charNames[(char)0x1A07] = "buginese letter mpa";
			_charNames[(char)0x1A08] = "buginese letter ta";
			_charNames[(char)0x1A09] = "buginese letter da";
			_charNames[(char)0x1A0A] = "buginese letter na";
			_charNames[(char)0x1A0B] = "buginese letter nra";
			_charNames[(char)0x1A0C] = "buginese letter ca";
			_charNames[(char)0x1A0D] = "buginese letter ja";
			_charNames[(char)0x1A0E] = "buginese letter nya";
			_charNames[(char)0x1A0F] = "buginese letter nyca";
			_charNames[(char)0x1A10] = "buginese letter ya";
			_charNames[(char)0x1A11] = "buginese letter ra";
			_charNames[(char)0x1A12] = "buginese letter la";
			_charNames[(char)0x1A13] = "buginese letter va";
			_charNames[(char)0x1A14] = "buginese letter sa";
			_charNames[(char)0x1A15] = "buginese letter a";
			_charNames[(char)0x1A16] = "buginese letter ha";
			_charNames[(char)0x1A17] = "buginese vowel sign i";
			_charNames[(char)0x1A18] = "buginese vowel sign u";
			_charNames[(char)0x1A19] = "buginese vowel sign e";
			_charNames[(char)0x1A1A] = "buginese vowel sign o";
			_charNames[(char)0x1A1B] = "buginese vowel sign ae";
			_charNames[(char)0x1A1E] = "buginese pallawa";
			_charNames[(char)0x1A1F] = "buginese end of section";
			_charNames[(char)0x1D00] = "latin letter small capital a";
			_charNames[(char)0x1D01] = "latin letter small capital ae";
			_charNames[(char)0x1D02] = "latin small letter turned ae";
			_charNames[(char)0x1D03] = "latin letter small capital barred b";
			_charNames[(char)0x1D04] = "latin letter small capital c";
			_charNames[(char)0x1D05] = "latin letter small capital d";
			_charNames[(char)0x1D06] = "latin letter small capital eth";
			_charNames[(char)0x1D07] = "latin letter small capital e";
			_charNames[(char)0x1D08] = "latin small letter turned open e";
			_charNames[(char)0x1D09] = "latin small letter turned i";
			_charNames[(char)0x1D0A] = "latin letter small capital j";
			_charNames[(char)0x1D0B] = "latin letter small capital k";
			_charNames[(char)0x1D0C] = "latin letter small capital l with stroke";
			_charNames[(char)0x1D0D] = "latin letter small capital m";
			_charNames[(char)0x1D0E] = "latin letter small capital reversed n";
			_charNames[(char)0x1D0F] = "latin letter small capital o";
			_charNames[(char)0x1D10] = "latin letter small capital open o";
			_charNames[(char)0x1D11] = "latin small letter sideways o";
			_charNames[(char)0x1D12] = "latin small letter sideways open o";
			_charNames[(char)0x1D13] = "latin small letter sideways o with stroke";
			_charNames[(char)0x1D14] = "latin small letter turned oe";
			_charNames[(char)0x1D15] = "latin letter small capital ou";
			_charNames[(char)0x1D16] = "latin small letter top half o";
			_charNames[(char)0x1D17] = "latin small letter bottom half o";
			_charNames[(char)0x1D18] = "latin letter small capital p";
			_charNames[(char)0x1D19] = "latin letter small capital reversed r";
			_charNames[(char)0x1D1A] = "latin letter small capital turned r";
			_charNames[(char)0x1D1B] = "latin letter small capital t";
			_charNames[(char)0x1D1C] = "latin letter small capital u";
			_charNames[(char)0x1D1D] = "latin small letter sideways u";
			_charNames[(char)0x1D1E] = "latin small letter sideways diaeresized u";
			_charNames[(char)0x1D1F] = "latin small letter sideways turned m";
			_charNames[(char)0x1D20] = "latin letter small capital v";
			_charNames[(char)0x1D21] = "latin letter small capital w";
			_charNames[(char)0x1D22] = "latin letter small capital z";
			_charNames[(char)0x1D23] = "latin letter small capital ezh";
			_charNames[(char)0x1D24] = "latin letter voiced laryngeal spirant";
			_charNames[(char)0x1D25] = "latin letter ain";
			_charNames[(char)0x1D26] = "greek letter small capital gamma";
			_charNames[(char)0x1D27] = "greek letter small capital lamda";
			_charNames[(char)0x1D28] = "greek letter small capital pi";
			_charNames[(char)0x1D29] = "greek letter small capital rho";
			_charNames[(char)0x1D2A] = "greek letter small capital psi";
			_charNames[(char)0x1D2B] = "cyrillic letter small capital el";
			_charNames[(char)0x1D2C] = "modifier letter capital a";
			_charNames[(char)0x1D2D] = "modifier letter capital ae";
			_charNames[(char)0x1D2E] = "modifier letter capital b";
			_charNames[(char)0x1D2F] = "modifier letter capital barred b";
			_charNames[(char)0x1D30] = "modifier letter capital d";
			_charNames[(char)0x1D31] = "modifier letter capital e";
			_charNames[(char)0x1D32] = "modifier letter capital reversed e";
			_charNames[(char)0x1D33] = "modifier letter capital g";
			_charNames[(char)0x1D34] = "modifier letter capital h";
			_charNames[(char)0x1D35] = "modifier letter capital i";
			_charNames[(char)0x1D36] = "modifier letter capital j";
			_charNames[(char)0x1D37] = "modifier letter capital k";
			_charNames[(char)0x1D38] = "modifier letter capital l";
			_charNames[(char)0x1D39] = "modifier letter capital m";
			_charNames[(char)0x1D3A] = "modifier letter capital n";
			_charNames[(char)0x1D3B] = "modifier letter capital reversed n";
			_charNames[(char)0x1D3C] = "modifier letter capital o";
			_charNames[(char)0x1D3D] = "modifier letter capital ou";
			_charNames[(char)0x1D3E] = "modifier letter capital p";
			_charNames[(char)0x1D3F] = "modifier letter capital r";
			_charNames[(char)0x1D40] = "modifier letter capital t";
			_charNames[(char)0x1D41] = "modifier letter capital u";
			_charNames[(char)0x1D42] = "modifier letter capital w";
			_charNames[(char)0x1D43] = "modifier letter small a";
			_charNames[(char)0x1D44] = "modifier letter small turned a";
			_charNames[(char)0x1D45] = "modifier letter small alpha";
			_charNames[(char)0x1D46] = "modifier letter small turned ae";
			_charNames[(char)0x1D47] = "modifier letter small b";
			_charNames[(char)0x1D48] = "modifier letter small d";
			_charNames[(char)0x1D49] = "modifier letter small e";
			_charNames[(char)0x1D4A] = "modifier letter small schwa";
			_charNames[(char)0x1D4B] = "modifier letter small open e";
			_charNames[(char)0x1D4C] = "modifier letter small turned open e";
			_charNames[(char)0x1D4D] = "modifier letter small g";
			_charNames[(char)0x1D4E] = "modifier letter small turned i";
			_charNames[(char)0x1D4F] = "modifier letter small k";
			_charNames[(char)0x1D50] = "modifier letter small m";
			_charNames[(char)0x1D51] = "modifier letter small eng";
			_charNames[(char)0x1D52] = "modifier letter small o";
			_charNames[(char)0x1D53] = "modifier letter small open o";
			_charNames[(char)0x1D54] = "modifier letter small top half o";
			_charNames[(char)0x1D55] = "modifier letter small bottom half o";
			_charNames[(char)0x1D56] = "modifier letter small p";
			_charNames[(char)0x1D57] = "modifier letter small t";
			_charNames[(char)0x1D58] = "modifier letter small u";
			_charNames[(char)0x1D59] = "modifier letter small sideways u";
			_charNames[(char)0x1D5A] = "modifier letter small turned m";
			_charNames[(char)0x1D5B] = "modifier letter small v";
			_charNames[(char)0x1D5C] = "modifier letter small ain";
			_charNames[(char)0x1D5D] = "modifier letter small beta";
			_charNames[(char)0x1D5E] = "modifier letter small greek gamma";
			_charNames[(char)0x1D5F] = "modifier letter small delta";
			_charNames[(char)0x1D60] = "modifier letter small greek phi";
			_charNames[(char)0x1D61] = "modifier letter small chi";
			_charNames[(char)0x1D62] = "latin subscript small letter i";
			_charNames[(char)0x1D63] = "latin subscript small letter r";
			_charNames[(char)0x1D64] = "latin subscript small letter u";
			_charNames[(char)0x1D65] = "latin subscript small letter v";
			_charNames[(char)0x1D66] = "greek subscript small letter beta";
			_charNames[(char)0x1D67] = "greek subscript small letter gamma";
			_charNames[(char)0x1D68] = "greek subscript small letter rho";
			_charNames[(char)0x1D69] = "greek subscript small letter phi";
			_charNames[(char)0x1D6A] = "greek subscript small letter chi";
			_charNames[(char)0x1D6B] = "latin small letter ue";
			_charNames[(char)0x1D6C] = "latin small letter b with middle tilde";
			_charNames[(char)0x1D6D] = "latin small letter d with middle tilde";
			_charNames[(char)0x1D6E] = "latin small letter f with middle tilde";
			_charNames[(char)0x1D6F] = "latin small letter m with middle tilde";
			_charNames[(char)0x1D70] = "latin small letter n with middle tilde";
			_charNames[(char)0x1D71] = "latin small letter p with middle tilde";
			_charNames[(char)0x1D72] = "latin small letter r with middle tilde";
			_charNames[(char)0x1D73] = "latin small letter r with fishhook and middle tilde";
			_charNames[(char)0x1D74] = "latin small letter s with middle tilde";
			_charNames[(char)0x1D75] = "latin small letter t with middle tilde";
			_charNames[(char)0x1D76] = "latin small letter z with middle tilde";
			_charNames[(char)0x1D77] = "latin small letter turned g";
			_charNames[(char)0x1D78] = "modifier letter cyrillic en";
			_charNames[(char)0x1D79] = "latin small letter insular g";
			_charNames[(char)0x1D7A] = "latin small letter th with strikethrough";
			_charNames[(char)0x1D7B] = "latin small capital letter i with stroke";
			_charNames[(char)0x1D7C] = "latin small letter iota with stroke";
			_charNames[(char)0x1D7D] = "latin small letter p with stroke";
			_charNames[(char)0x1D7E] = "latin small capital letter u with stroke";
			_charNames[(char)0x1D7F] = "latin small letter upsilon with stroke";
			_charNames[(char)0x1D80] = "latin small letter b with palatal hook";
			_charNames[(char)0x1D81] = "latin small letter d with palatal hook";
			_charNames[(char)0x1D82] = "latin small letter f with palatal hook";
			_charNames[(char)0x1D83] = "latin small letter g with palatal hook";
			_charNames[(char)0x1D84] = "latin small letter k with palatal hook";
			_charNames[(char)0x1D85] = "latin small letter l with palatal hook";
			_charNames[(char)0x1D86] = "latin small letter m with palatal hook";
			_charNames[(char)0x1D87] = "latin small letter n with palatal hook";
			_charNames[(char)0x1D88] = "latin small letter p with palatal hook";
			_charNames[(char)0x1D89] = "latin small letter r with palatal hook";
			_charNames[(char)0x1D8A] = "latin small letter s with palatal hook";
			_charNames[(char)0x1D8B] = "latin small letter esh with palatal hook";
			_charNames[(char)0x1D8C] = "latin small letter v with palatal hook";
			_charNames[(char)0x1D8D] = "latin small letter x with palatal hook";
			_charNames[(char)0x1D8E] = "latin small letter z with palatal hook";
			_charNames[(char)0x1D8F] = "latin small letter a with retroflex hook";
			_charNames[(char)0x1D90] = "latin small letter alpha with retroflex hook";
			_charNames[(char)0x1D91] = "latin small letter d with hook and tail";
			_charNames[(char)0x1D92] = "latin small letter e with retroflex hook";
			_charNames[(char)0x1D93] = "latin small letter open e with retroflex hook";
			_charNames[(char)0x1D94] = "latin small letter reversed open e with retroflex hook";
			_charNames[(char)0x1D95] = "latin small letter schwa with retroflex hook";
			_charNames[(char)0x1D96] = "latin small letter i with retroflex hook";
			_charNames[(char)0x1D97] = "latin small letter open o with retroflex hook";
			_charNames[(char)0x1D98] = "latin small letter esh with retroflex hook";
			_charNames[(char)0x1D99] = "latin small letter u with retroflex hook";
			_charNames[(char)0x1D9A] = "latin small letter ezh with retroflex hook";
			_charNames[(char)0x1D9B] = "modifier letter small turned alpha";
			_charNames[(char)0x1D9C] = "modifier letter small c";
			_charNames[(char)0x1D9D] = "modifier letter small c with curl";
			_charNames[(char)0x1D9E] = "modifier letter small eth";
			_charNames[(char)0x1D9F] = "modifier letter small reversed open e";
			_charNames[(char)0x1DA0] = "modifier letter small f";
			_charNames[(char)0x1DA1] = "modifier letter small dotless j with stroke";
			_charNames[(char)0x1DA2] = "modifier letter small script g";
			_charNames[(char)0x1DA3] = "modifier letter small turned h";
			_charNames[(char)0x1DA4] = "modifier letter small i with stroke";
			_charNames[(char)0x1DA5] = "modifier letter small iota";
			_charNames[(char)0x1DA6] = "modifier letter small capital i";
			_charNames[(char)0x1DA7] = "modifier letter small capital i with stroke";
			_charNames[(char)0x1DA8] = "modifier letter small j with crossed-tail";
			_charNames[(char)0x1DA9] = "modifier letter small l with retroflex hook";
			_charNames[(char)0x1DAA] = "modifier letter small l with palatal hook";
			_charNames[(char)0x1DAB] = "modifier letter small capital l";
			_charNames[(char)0x1DAC] = "modifier letter small m with hook";
			_charNames[(char)0x1DAD] = "modifier letter small turned m with long leg";
			_charNames[(char)0x1DAE] = "modifier letter small n with left hook";
			_charNames[(char)0x1DAF] = "modifier letter small n with retroflex hook";
			_charNames[(char)0x1DB0] = "modifier letter small capital n";
			_charNames[(char)0x1DB1] = "modifier letter small barred o";
			_charNames[(char)0x1DB2] = "modifier letter small phi";
			_charNames[(char)0x1DB3] = "modifier letter small s with hook";
			_charNames[(char)0x1DB4] = "modifier letter small esh";
			_charNames[(char)0x1DB5] = "modifier letter small t with palatal hook";
			_charNames[(char)0x1DB6] = "modifier letter small u bar";
			_charNames[(char)0x1DB7] = "modifier letter small upsilon";
			_charNames[(char)0x1DB8] = "modifier letter small capital u";
			_charNames[(char)0x1DB9] = "modifier letter small v with hook";
			_charNames[(char)0x1DBA] = "modifier letter small turned v";
			_charNames[(char)0x1DBB] = "modifier letter small z";
			_charNames[(char)0x1DBC] = "modifier letter small z with retroflex hook";
			_charNames[(char)0x1DBD] = "modifier letter small z with curl";
			_charNames[(char)0x1DBE] = "modifier letter small ezh";
			_charNames[(char)0x1DBF] = "modifier letter small theta";
			_charNames[(char)0x1DC0] = "combining dotted grave accent";
			_charNames[(char)0x1DC1] = "combining dotted acute accent";
			_charNames[(char)0x1DC2] = "combining snake below";
			_charNames[(char)0x1DC3] = "combining suspension mark";
			_charNames[(char)0x1E00] = "latin capital letter a with ring below";
			_charNames[(char)0x1E01] = "latin small letter a with ring below";
			_charNames[(char)0x1E02] = "latin capital letter b with dot above";
			_charNames[(char)0x1E03] = "latin small letter b with dot above";
			_charNames[(char)0x1E04] = "latin capital letter b with dot below";
			_charNames[(char)0x1E05] = "latin small letter b with dot below";
			_charNames[(char)0x1E06] = "latin capital letter b with line below";
			_charNames[(char)0x1E07] = "latin small letter b with line below";
			_charNames[(char)0x1E08] = "latin capital letter c with cedilla and acute";
			_charNames[(char)0x1E09] = "latin small letter c with cedilla and acute";
			_charNames[(char)0x1E0A] = "latin capital letter d with dot above";
			_charNames[(char)0x1E0B] = "latin small letter d with dot above";
			_charNames[(char)0x1E0C] = "latin capital letter d with dot below";
			_charNames[(char)0x1E0D] = "latin small letter d with dot below";
			_charNames[(char)0x1E0E] = "latin capital letter d with line below";
			_charNames[(char)0x1E0F] = "latin small letter d with line below";
			_charNames[(char)0x1E10] = "latin capital letter d with cedilla";
			_charNames[(char)0x1E11] = "latin small letter d with cedilla";
			_charNames[(char)0x1E12] = "latin capital letter d with circumflex below";
			_charNames[(char)0x1E13] = "latin small letter d with circumflex below";
			_charNames[(char)0x1E14] = "latin capital letter e with macron and grave";
			_charNames[(char)0x1E15] = "latin small letter e with macron and grave";
			_charNames[(char)0x1E16] = "latin capital letter e with macron and acute";
			_charNames[(char)0x1E17] = "latin small letter e with macron and acute";
			_charNames[(char)0x1E18] = "latin capital letter e with circumflex below";
			_charNames[(char)0x1E19] = "latin small letter e with circumflex below";
			_charNames[(char)0x1E1A] = "latin capital letter e with tilde below";
			_charNames[(char)0x1E1B] = "latin small letter e with tilde below";
			_charNames[(char)0x1E1C] = "latin capital letter e with cedilla and breve";
			_charNames[(char)0x1E1D] = "latin small letter e with cedilla and breve";
			_charNames[(char)0x1E1E] = "latin capital letter f with dot above";
			_charNames[(char)0x1E1F] = "latin small letter f with dot above";
			_charNames[(char)0x1E20] = "latin capital letter g with macron";
			_charNames[(char)0x1E21] = "latin small letter g with macron";
			_charNames[(char)0x1E22] = "latin capital letter h with dot above";
			_charNames[(char)0x1E23] = "latin small letter h with dot above";
			_charNames[(char)0x1E24] = "latin capital letter h with dot below";
			_charNames[(char)0x1E25] = "latin small letter h with dot below";
			_charNames[(char)0x1E26] = "latin capital letter h with diaeresis";
			_charNames[(char)0x1E27] = "latin small letter h with diaeresis";
			_charNames[(char)0x1E28] = "latin capital letter h with cedilla";
			_charNames[(char)0x1E29] = "latin small letter h with cedilla";
			_charNames[(char)0x1E2A] = "latin capital letter h with breve below";
			_charNames[(char)0x1E2B] = "latin small letter h with breve below";
			_charNames[(char)0x1E2C] = "latin capital letter i with tilde below";
			_charNames[(char)0x1E2D] = "latin small letter i with tilde below";
			_charNames[(char)0x1E2E] = "latin capital letter i with diaeresis and acute";
			_charNames[(char)0x1E2F] = "latin small letter i with diaeresis and acute";
			_charNames[(char)0x1E30] = "latin capital letter k with acute";
			_charNames[(char)0x1E31] = "latin small letter k with acute";
			_charNames[(char)0x1E32] = "latin capital letter k with dot below";
			_charNames[(char)0x1E33] = "latin small letter k with dot below";
			_charNames[(char)0x1E34] = "latin capital letter k with line below";
			_charNames[(char)0x1E35] = "latin small letter k with line below";
			_charNames[(char)0x1E36] = "latin capital letter l with dot below";
			_charNames[(char)0x1E37] = "latin small letter l with dot below";
			_charNames[(char)0x1E38] = "latin capital letter l with dot below and macron";
			_charNames[(char)0x1E39] = "latin small letter l with dot below and macron";
			_charNames[(char)0x1E3A] = "latin capital letter l with line below";
			_charNames[(char)0x1E3B] = "latin small letter l with line below";
			_charNames[(char)0x1E3C] = "latin capital letter l with circumflex below";
			_charNames[(char)0x1E3D] = "latin small letter l with circumflex below";
			_charNames[(char)0x1E3E] = "latin capital letter m with acute";
			_charNames[(char)0x1E3F] = "latin small letter m with acute";
			_charNames[(char)0x1E40] = "latin capital letter m with dot above";
			_charNames[(char)0x1E41] = "latin small letter m with dot above";
			_charNames[(char)0x1E42] = "latin capital letter m with dot below";
			_charNames[(char)0x1E43] = "latin small letter m with dot below";
			_charNames[(char)0x1E44] = "latin capital letter n with dot above";
			_charNames[(char)0x1E45] = "latin small letter n with dot above";
			_charNames[(char)0x1E46] = "latin capital letter n with dot below";
			_charNames[(char)0x1E47] = "latin small letter n with dot below";
			_charNames[(char)0x1E48] = "latin capital letter n with line below";
			_charNames[(char)0x1E49] = "latin small letter n with line below";
			_charNames[(char)0x1E4A] = "latin capital letter n with circumflex below";
			_charNames[(char)0x1E4B] = "latin small letter n with circumflex below";
			_charNames[(char)0x1E4C] = "latin capital letter o with tilde and acute";
			_charNames[(char)0x1E4D] = "latin small letter o with tilde and acute";
			_charNames[(char)0x1E4E] = "latin capital letter o with tilde and diaeresis";
			_charNames[(char)0x1E4F] = "latin small letter o with tilde and diaeresis";
			_charNames[(char)0x1E50] = "latin capital letter o with macron and grave";
			_charNames[(char)0x1E51] = "latin small letter o with macron and grave";
			_charNames[(char)0x1E52] = "latin capital letter o with macron and acute";
			_charNames[(char)0x1E53] = "latin small letter o with macron and acute";
			_charNames[(char)0x1E54] = "latin capital letter p with acute";
			_charNames[(char)0x1E55] = "latin small letter p with acute";
			_charNames[(char)0x1E56] = "latin capital letter p with dot above";
			_charNames[(char)0x1E57] = "latin small letter p with dot above";
			_charNames[(char)0x1E58] = "latin capital letter r with dot above";
			_charNames[(char)0x1E59] = "latin small letter r with dot above";
			_charNames[(char)0x1E5A] = "latin capital letter r with dot below";
			_charNames[(char)0x1E5B] = "latin small letter r with dot below";
			_charNames[(char)0x1E5C] = "latin capital letter r with dot below and macron";
			_charNames[(char)0x1E5D] = "latin small letter r with dot below and macron";
			_charNames[(char)0x1E5E] = "latin capital letter r with line below";
			_charNames[(char)0x1E5F] = "latin small letter r with line below";
			_charNames[(char)0x1E60] = "latin capital letter s with dot above";
			_charNames[(char)0x1E61] = "latin small letter s with dot above";
			_charNames[(char)0x1E62] = "latin capital letter s with dot below";
			_charNames[(char)0x1E63] = "latin small letter s with dot below";
			_charNames[(char)0x1E64] = "latin capital letter s with acute and dot above";
			_charNames[(char)0x1E65] = "latin small letter s with acute and dot above";
			_charNames[(char)0x1E66] = "latin capital letter s with caron and dot above";
			_charNames[(char)0x1E67] = "latin small letter s with caron and dot above";
			_charNames[(char)0x1E68] = "latin capital letter s with dot below and dot above";
			_charNames[(char)0x1E69] = "latin small letter s with dot below and dot above";
			_charNames[(char)0x1E6A] = "latin capital letter t with dot above";
			_charNames[(char)0x1E6B] = "latin small letter t with dot above";
			_charNames[(char)0x1E6C] = "latin capital letter t with dot below";
			_charNames[(char)0x1E6D] = "latin small letter t with dot below";
			_charNames[(char)0x1E6E] = "latin capital letter t with line below";
			_charNames[(char)0x1E6F] = "latin small letter t with line below";
			_charNames[(char)0x1E70] = "latin capital letter t with circumflex below";
			_charNames[(char)0x1E71] = "latin small letter t with circumflex below";
			_charNames[(char)0x1E72] = "latin capital letter u with diaeresis below";
			_charNames[(char)0x1E73] = "latin small letter u with diaeresis below";
			_charNames[(char)0x1E74] = "latin capital letter u with tilde below";
			_charNames[(char)0x1E75] = "latin small letter u with tilde below";
			_charNames[(char)0x1E76] = "latin capital letter u with circumflex below";
			_charNames[(char)0x1E77] = "latin small letter u with circumflex below";
			_charNames[(char)0x1E78] = "latin capital letter u with tilde and acute";
			_charNames[(char)0x1E79] = "latin small letter u with tilde and acute";
			_charNames[(char)0x1E7A] = "latin capital letter u with macron and diaeresis";
			_charNames[(char)0x1E7B] = "latin small letter u with macron and diaeresis";
			_charNames[(char)0x1E7C] = "latin capital letter v with tilde";
			_charNames[(char)0x1E7D] = "latin small letter v with tilde";
			_charNames[(char)0x1E7E] = "latin capital letter v with dot below";
			_charNames[(char)0x1E7F] = "latin small letter v with dot below";
			_charNames[(char)0x1E80] = "latin capital letter w with grave";
			_charNames[(char)0x1E81] = "latin small letter w with grave";
			_charNames[(char)0x1E82] = "latin capital letter w with acute";
			_charNames[(char)0x1E83] = "latin small letter w with acute";
			_charNames[(char)0x1E84] = "latin capital letter w with diaeresis";
			_charNames[(char)0x1E85] = "latin small letter w with diaeresis";
			_charNames[(char)0x1E86] = "latin capital letter w with dot above";
			_charNames[(char)0x1E87] = "latin small letter w with dot above";
			_charNames[(char)0x1E88] = "latin capital letter w with dot below";
			_charNames[(char)0x1E89] = "latin small letter w with dot below";
			_charNames[(char)0x1E8A] = "latin capital letter x with dot above";
			_charNames[(char)0x1E8B] = "latin small letter x with dot above";
			_charNames[(char)0x1E8C] = "latin capital letter x with diaeresis";
			_charNames[(char)0x1E8D] = "latin small letter x with diaeresis";
			_charNames[(char)0x1E8E] = "latin capital letter y with dot above";
			_charNames[(char)0x1E8F] = "latin small letter y with dot above";
			_charNames[(char)0x1E90] = "latin capital letter z with circumflex";
			_charNames[(char)0x1E91] = "latin small letter z with circumflex";
			_charNames[(char)0x1E92] = "latin capital letter z with dot below";
			_charNames[(char)0x1E93] = "latin small letter z with dot below";
			_charNames[(char)0x1E94] = "latin capital letter z with line below";
			_charNames[(char)0x1E95] = "latin small letter z with line below";
			_charNames[(char)0x1E96] = "latin small letter h with line below";
			_charNames[(char)0x1E97] = "latin small letter t with diaeresis";
			_charNames[(char)0x1E98] = "latin small letter w with ring above";
			_charNames[(char)0x1E99] = "latin small letter y with ring above";
			_charNames[(char)0x1E9A] = "latin small letter a with right half ring";
			_charNames[(char)0x1E9B] = "latin small letter long s with dot above";
			_charNames[(char)0x1EA0] = "latin capital letter a with dot below";
			_charNames[(char)0x1EA1] = "latin small letter a with dot below";
			_charNames[(char)0x1EA2] = "latin capital letter a with hook above";
			_charNames[(char)0x1EA3] = "latin small letter a with hook above";
			_charNames[(char)0x1EA4] = "latin capital letter a with circumflex and acute";
			_charNames[(char)0x1EA5] = "latin small letter a with circumflex and acute";
			_charNames[(char)0x1EA6] = "latin capital letter a with circumflex and grave";
			_charNames[(char)0x1EA7] = "latin small letter a with circumflex and grave";
			_charNames[(char)0x1EA8] = "latin capital letter a with circumflex and hook above";
			_charNames[(char)0x1EA9] = "latin small letter a with circumflex and hook above";
			_charNames[(char)0x1EAA] = "latin capital letter a with circumflex and tilde";
			_charNames[(char)0x1EAB] = "latin small letter a with circumflex and tilde";
			_charNames[(char)0x1EAC] = "latin capital letter a with circumflex and dot below";
			_charNames[(char)0x1EAD] = "latin small letter a with circumflex and dot below";
			_charNames[(char)0x1EAE] = "latin capital letter a with breve and acute";
			_charNames[(char)0x1EAF] = "latin small letter a with breve and acute";
			_charNames[(char)0x1EB0] = "latin capital letter a with breve and grave";
			_charNames[(char)0x1EB1] = "latin small letter a with breve and grave";
			_charNames[(char)0x1EB2] = "latin capital letter a with breve and hook above";
			_charNames[(char)0x1EB3] = "latin small letter a with breve and hook above";
			_charNames[(char)0x1EB4] = "latin capital letter a with breve and tilde";
			_charNames[(char)0x1EB5] = "latin small letter a with breve and tilde";
			_charNames[(char)0x1EB6] = "latin capital letter a with breve and dot below";
			_charNames[(char)0x1EB7] = "latin small letter a with breve and dot below";
			_charNames[(char)0x1EB8] = "latin capital letter e with dot below";
			_charNames[(char)0x1EB9] = "latin small letter e with dot below";
			_charNames[(char)0x1EBA] = "latin capital letter e with hook above";
			_charNames[(char)0x1EBB] = "latin small letter e with hook above";
			_charNames[(char)0x1EBC] = "latin capital letter e with tilde";
			_charNames[(char)0x1EBD] = "latin small letter e with tilde";
			_charNames[(char)0x1EBE] = "latin capital letter e with circumflex and acute";
			_charNames[(char)0x1EBF] = "latin small letter e with circumflex and acute";
			_charNames[(char)0x1EC0] = "latin capital letter e with circumflex and grave";
			_charNames[(char)0x1EC1] = "latin small letter e with circumflex and grave";
			_charNames[(char)0x1EC2] = "latin capital letter e with circumflex and hook above";
			_charNames[(char)0x1EC3] = "latin small letter e with circumflex and hook above";
			_charNames[(char)0x1EC4] = "latin capital letter e with circumflex and tilde";
			_charNames[(char)0x1EC5] = "latin small letter e with circumflex and tilde";
			_charNames[(char)0x1EC6] = "latin capital letter e with circumflex and dot below";
			_charNames[(char)0x1EC7] = "latin small letter e with circumflex and dot below";
			_charNames[(char)0x1EC8] = "latin capital letter i with hook above";
			_charNames[(char)0x1EC9] = "latin small letter i with hook above";
			_charNames[(char)0x1ECA] = "latin capital letter i with dot below";
			_charNames[(char)0x1ECB] = "latin small letter i with dot below";
			_charNames[(char)0x1ECC] = "latin capital letter o with dot below";
			_charNames[(char)0x1ECD] = "latin small letter o with dot below";
			_charNames[(char)0x1ECE] = "latin capital letter o with hook above";
			_charNames[(char)0x1ECF] = "latin small letter o with hook above";
			_charNames[(char)0x1ED0] = "latin capital letter o with circumflex and acute";
			_charNames[(char)0x1ED1] = "latin small letter o with circumflex and acute";
			_charNames[(char)0x1ED2] = "latin capital letter o with circumflex and grave";
			_charNames[(char)0x1ED3] = "latin small letter o with circumflex and grave";
			_charNames[(char)0x1ED4] = "latin capital letter o with circumflex and hook above";
			_charNames[(char)0x1ED5] = "latin small letter o with circumflex and hook above";
			_charNames[(char)0x1ED6] = "latin capital letter o with circumflex and tilde";
			_charNames[(char)0x1ED7] = "latin small letter o with circumflex and tilde";
			_charNames[(char)0x1ED8] = "latin capital letter o with circumflex and dot below";
			_charNames[(char)0x1ED9] = "latin small letter o with circumflex and dot below";
			_charNames[(char)0x1EDA] = "latin capital letter o with horn and acute";
			_charNames[(char)0x1EDB] = "latin small letter o with horn and acute";
			_charNames[(char)0x1EDC] = "latin capital letter o with horn and grave";
			_charNames[(char)0x1EDD] = "latin small letter o with horn and grave";
			_charNames[(char)0x1EDE] = "latin capital letter o with horn and hook above";
			_charNames[(char)0x1EDF] = "latin small letter o with horn and hook above";
			_charNames[(char)0x1EE0] = "latin capital letter o with horn and tilde";
			_charNames[(char)0x1EE1] = "latin small letter o with horn and tilde";
			_charNames[(char)0x1EE2] = "latin capital letter o with horn and dot below";
			_charNames[(char)0x1EE3] = "latin small letter o with horn and dot below";
			_charNames[(char)0x1EE4] = "latin capital letter u with dot below";
			_charNames[(char)0x1EE5] = "latin small letter u with dot below";
			_charNames[(char)0x1EE6] = "latin capital letter u with hook above";
			_charNames[(char)0x1EE7] = "latin small letter u with hook above";
			_charNames[(char)0x1EE8] = "latin capital letter u with horn and acute";
			_charNames[(char)0x1EE9] = "latin small letter u with horn and acute";
			_charNames[(char)0x1EEA] = "latin capital letter u with horn and grave";
			_charNames[(char)0x1EEB] = "latin small letter u with horn and grave";
			_charNames[(char)0x1EEC] = "latin capital letter u with horn and hook above";
			_charNames[(char)0x1EED] = "latin small letter u with horn and hook above";
			_charNames[(char)0x1EEE] = "latin capital letter u with horn and tilde";
			_charNames[(char)0x1EEF] = "latin small letter u with horn and tilde";
			_charNames[(char)0x1EF0] = "latin capital letter u with horn and dot below";
			_charNames[(char)0x1EF1] = "latin small letter u with horn and dot below";
			_charNames[(char)0x1EF2] = "latin capital letter y with grave";
			_charNames[(char)0x1EF3] = "latin small letter y with grave";
			_charNames[(char)0x1EF4] = "latin capital letter y with dot below";
			_charNames[(char)0x1EF5] = "latin small letter y with dot below";
			_charNames[(char)0x1EF6] = "latin capital letter y with hook above";
			_charNames[(char)0x1EF7] = "latin small letter y with hook above";
			_charNames[(char)0x1EF8] = "latin capital letter y with tilde";
			_charNames[(char)0x1EF9] = "latin small letter y with tilde";
			_charNames[(char)0x1F00] = "greek small letter alpha with psili";
			_charNames[(char)0x1F01] = "greek small letter alpha with dasia";
			_charNames[(char)0x1F02] = "greek small letter alpha with psili and varia";
			_charNames[(char)0x1F03] = "greek small letter alpha with dasia and varia";
			_charNames[(char)0x1F04] = "greek small letter alpha with psili and oxia";
			_charNames[(char)0x1F05] = "greek small letter alpha with dasia and oxia";
			_charNames[(char)0x1F06] = "greek small letter alpha with psili and perispomeni";
			_charNames[(char)0x1F07] = "greek small letter alpha with dasia and perispomeni";
			_charNames[(char)0x1F08] = "greek capital letter alpha with psili";
			_charNames[(char)0x1F09] = "greek capital letter alpha with dasia";
			_charNames[(char)0x1F0A] = "greek capital letter alpha with psili and varia";
			_charNames[(char)0x1F0B] = "greek capital letter alpha with dasia and varia";
			_charNames[(char)0x1F0C] = "greek capital letter alpha with psili and oxia";
			_charNames[(char)0x1F0D] = "greek capital letter alpha with dasia and oxia";
			_charNames[(char)0x1F0E] = "greek capital letter alpha with psili and perispomeni";
			_charNames[(char)0x1F0F] = "greek capital letter alpha with dasia and perispomeni";
			_charNames[(char)0x1F10] = "greek small letter epsilon with psili";
			_charNames[(char)0x1F11] = "greek small letter epsilon with dasia";
			_charNames[(char)0x1F12] = "greek small letter epsilon with psili and varia";
			_charNames[(char)0x1F13] = "greek small letter epsilon with dasia and varia";
			_charNames[(char)0x1F14] = "greek small letter epsilon with psili and oxia";
			_charNames[(char)0x1F15] = "greek small letter epsilon with dasia and oxia";
			_charNames[(char)0x1F18] = "greek capital letter epsilon with psili";
			_charNames[(char)0x1F19] = "greek capital letter epsilon with dasia";
			_charNames[(char)0x1F1A] = "greek capital letter epsilon with psili and varia";
			_charNames[(char)0x1F1B] = "greek capital letter epsilon with dasia and varia";
			_charNames[(char)0x1F1C] = "greek capital letter epsilon with psili and oxia";
			_charNames[(char)0x1F1D] = "greek capital letter epsilon with dasia and oxia";
			_charNames[(char)0x1F20] = "greek small letter eta with psili";
			_charNames[(char)0x1F21] = "greek small letter eta with dasia";
			_charNames[(char)0x1F22] = "greek small letter eta with psili and varia";
			_charNames[(char)0x1F23] = "greek small letter eta with dasia and varia";
			_charNames[(char)0x1F24] = "greek small letter eta with psili and oxia";
			_charNames[(char)0x1F25] = "greek small letter eta with dasia and oxia";
			_charNames[(char)0x1F26] = "greek small letter eta with psili and perispomeni";
			_charNames[(char)0x1F27] = "greek small letter eta with dasia and perispomeni";
			_charNames[(char)0x1F28] = "greek capital letter eta with psili";
			_charNames[(char)0x1F29] = "greek capital letter eta with dasia";
			_charNames[(char)0x1F2A] = "greek capital letter eta with psili and varia";
			_charNames[(char)0x1F2B] = "greek capital letter eta with dasia and varia";
			_charNames[(char)0x1F2C] = "greek capital letter eta with psili and oxia";
			_charNames[(char)0x1F2D] = "greek capital letter eta with dasia and oxia";
			_charNames[(char)0x1F2E] = "greek capital letter eta with psili and perispomeni";
			_charNames[(char)0x1F2F] = "greek capital letter eta with dasia and perispomeni";
			_charNames[(char)0x1F30] = "greek small letter iota with psili";
			_charNames[(char)0x1F31] = "greek small letter iota with dasia";
			_charNames[(char)0x1F32] = "greek small letter iota with psili and varia";
			_charNames[(char)0x1F33] = "greek small letter iota with dasia and varia";
			_charNames[(char)0x1F34] = "greek small letter iota with psili and oxia";
			_charNames[(char)0x1F35] = "greek small letter iota with dasia and oxia";
			_charNames[(char)0x1F36] = "greek small letter iota with psili and perispomeni";
			_charNames[(char)0x1F37] = "greek small letter iota with dasia and perispomeni";
			_charNames[(char)0x1F38] = "greek capital letter iota with psili";
			_charNames[(char)0x1F39] = "greek capital letter iota with dasia";
			_charNames[(char)0x1F3A] = "greek capital letter iota with psili and varia";
			_charNames[(char)0x1F3B] = "greek capital letter iota with dasia and varia";
			_charNames[(char)0x1F3C] = "greek capital letter iota with psili and oxia";
			_charNames[(char)0x1F3D] = "greek capital letter iota with dasia and oxia";
			_charNames[(char)0x1F3E] = "greek capital letter iota with psili and perispomeni";
			_charNames[(char)0x1F3F] = "greek capital letter iota with dasia and perispomeni";
			_charNames[(char)0x1F40] = "greek small letter omicron with psili";
			_charNames[(char)0x1F41] = "greek small letter omicron with dasia";
			_charNames[(char)0x1F42] = "greek small letter omicron with psili and varia";
			_charNames[(char)0x1F43] = "greek small letter omicron with dasia and varia";
			_charNames[(char)0x1F44] = "greek small letter omicron with psili and oxia";
			_charNames[(char)0x1F45] = "greek small letter omicron with dasia and oxia";
			_charNames[(char)0x1F48] = "greek capital letter omicron with psili";
			_charNames[(char)0x1F49] = "greek capital letter omicron with dasia";
			_charNames[(char)0x1F4A] = "greek capital letter omicron with psili and varia";
			_charNames[(char)0x1F4B] = "greek capital letter omicron with dasia and varia";
			_charNames[(char)0x1F4C] = "greek capital letter omicron with psili and oxia";
			_charNames[(char)0x1F4D] = "greek capital letter omicron with dasia and oxia";
			_charNames[(char)0x1F50] = "greek small letter upsilon with psili";
			_charNames[(char)0x1F51] = "greek small letter upsilon with dasia";
			_charNames[(char)0x1F52] = "greek small letter upsilon with psili and varia";
			_charNames[(char)0x1F53] = "greek small letter upsilon with dasia and varia";
			_charNames[(char)0x1F54] = "greek small letter upsilon with psili and oxia";
			_charNames[(char)0x1F55] = "greek small letter upsilon with dasia and oxia";
			_charNames[(char)0x1F56] = "greek small letter upsilon with psili and perispomeni";
			_charNames[(char)0x1F57] = "greek small letter upsilon with dasia and perispomeni";
			_charNames[(char)0x1F59] = "greek capital letter upsilon with dasia";
			_charNames[(char)0x1F5B] = "greek capital letter upsilon with dasia and varia";
			_charNames[(char)0x1F5D] = "greek capital letter upsilon with dasia and oxia";
			_charNames[(char)0x1F5F] = "greek capital letter upsilon with dasia and perispomeni";
			_charNames[(char)0x1F60] = "greek small letter omega with psili";
			_charNames[(char)0x1F61] = "greek small letter omega with dasia";
			_charNames[(char)0x1F62] = "greek small letter omega with psili and varia";
			_charNames[(char)0x1F63] = "greek small letter omega with dasia and varia";
			_charNames[(char)0x1F64] = "greek small letter omega with psili and oxia";
			_charNames[(char)0x1F65] = "greek small letter omega with dasia and oxia";
			_charNames[(char)0x1F66] = "greek small letter omega with psili and perispomeni";
			_charNames[(char)0x1F67] = "greek small letter omega with dasia and perispomeni";
			_charNames[(char)0x1F68] = "greek capital letter omega with psili";
			_charNames[(char)0x1F69] = "greek capital letter omega with dasia";
			_charNames[(char)0x1F6A] = "greek capital letter omega with psili and varia";
			_charNames[(char)0x1F6B] = "greek capital letter omega with dasia and varia";
			_charNames[(char)0x1F6C] = "greek capital letter omega with psili and oxia";
			_charNames[(char)0x1F6D] = "greek capital letter omega with dasia and oxia";
			_charNames[(char)0x1F6E] = "greek capital letter omega with psili and perispomeni";
			_charNames[(char)0x1F6F] = "greek capital letter omega with dasia and perispomeni";
			_charNames[(char)0x1F70] = "greek small letter alpha with varia";
			_charNames[(char)0x1F71] = "greek small letter alpha with oxia";
			_charNames[(char)0x1F72] = "greek small letter epsilon with varia";
			_charNames[(char)0x1F73] = "greek small letter epsilon with oxia";
			_charNames[(char)0x1F74] = "greek small letter eta with varia";
			_charNames[(char)0x1F75] = "greek small letter eta with oxia";
			_charNames[(char)0x1F76] = "greek small letter iota with varia";
			_charNames[(char)0x1F77] = "greek small letter iota with oxia";
			_charNames[(char)0x1F78] = "greek small letter omicron with varia";
			_charNames[(char)0x1F79] = "greek small letter omicron with oxia";
			_charNames[(char)0x1F7A] = "greek small letter upsilon with varia";
			_charNames[(char)0x1F7B] = "greek small letter upsilon with oxia";
			_charNames[(char)0x1F7C] = "greek small letter omega with varia";
			_charNames[(char)0x1F7D] = "greek small letter omega with oxia";
			_charNames[(char)0x1F80] = "greek small letter alpha with psili and ypogegrammeni";
			_charNames[(char)0x1F81] = "greek small letter alpha with dasia and ypogegrammeni";
			_charNames[(char)0x1F82] = "greek small letter alpha with psili and varia and ypogegrammeni";
			_charNames[(char)0x1F83] = "greek small letter alpha with dasia and varia and ypogegrammeni";
			_charNames[(char)0x1F84] = "greek small letter alpha with psili and oxia and ypogegrammeni";
			_charNames[(char)0x1F85] = "greek small letter alpha with dasia and oxia and ypogegrammeni";
			_charNames[(char)0x1F86] = "greek small letter alpha with psili and perispomeni and ypogegrammeni";
			_charNames[(char)0x1F87] = "greek small letter alpha with dasia and perispomeni and ypogegrammeni";
			_charNames[(char)0x1F88] = "greek capital letter alpha with psili and prosgegrammeni";
			_charNames[(char)0x1F89] = "greek capital letter alpha with dasia and prosgegrammeni";
			_charNames[(char)0x1F8A] = "greek capital letter alpha with psili and varia and prosgegrammeni";
			_charNames[(char)0x1F8B] = "greek capital letter alpha with dasia and varia and prosgegrammeni";
			_charNames[(char)0x1F8C] = "greek capital letter alpha with psili and oxia and prosgegrammeni";
			_charNames[(char)0x1F8D] = "greek capital letter alpha with dasia and oxia and prosgegrammeni";
			_charNames[(char)0x1F8E] = "greek capital letter alpha with psili and perispomeni and prosgegrammeni";
			_charNames[(char)0x1F8F] = "greek capital letter alpha with dasia and perispomeni and prosgegrammeni";
			_charNames[(char)0x1F90] = "greek small letter eta with psili and ypogegrammeni";
			_charNames[(char)0x1F91] = "greek small letter eta with dasia and ypogegrammeni";
			_charNames[(char)0x1F92] = "greek small letter eta with psili and varia and ypogegrammeni";
			_charNames[(char)0x1F93] = "greek small letter eta with dasia and varia and ypogegrammeni";
			_charNames[(char)0x1F94] = "greek small letter eta with psili and oxia and ypogegrammeni";
			_charNames[(char)0x1F95] = "greek small letter eta with dasia and oxia and ypogegrammeni";
			_charNames[(char)0x1F96] = "greek small letter eta with psili and perispomeni and ypogegrammeni";
			_charNames[(char)0x1F97] = "greek small letter eta with dasia and perispomeni and ypogegrammeni";
			_charNames[(char)0x1F98] = "greek capital letter eta with psili and prosgegrammeni";
			_charNames[(char)0x1F99] = "greek capital letter eta with dasia and prosgegrammeni";
			_charNames[(char)0x1F9A] = "greek capital letter eta with psili and varia and prosgegrammeni";
			_charNames[(char)0x1F9B] = "greek capital letter eta with dasia and varia and prosgegrammeni";
			_charNames[(char)0x1F9C] = "greek capital letter eta with psili and oxia and prosgegrammeni";
			_charNames[(char)0x1F9D] = "greek capital letter eta with dasia and oxia and prosgegrammeni";
			_charNames[(char)0x1F9E] = "greek capital letter eta with psili and perispomeni and prosgegrammeni";
			_charNames[(char)0x1F9F] = "greek capital letter eta with dasia and perispomeni and prosgegrammeni";
			_charNames[(char)0x1FA0] = "greek small letter omega with psili and ypogegrammeni";
			_charNames[(char)0x1FA1] = "greek small letter omega with dasia and ypogegrammeni";
			_charNames[(char)0x1FA2] = "greek small letter omega with psili and varia and ypogegrammeni";
			_charNames[(char)0x1FA3] = "greek small letter omega with dasia and varia and ypogegrammeni";
			_charNames[(char)0x1FA4] = "greek small letter omega with psili and oxia and ypogegrammeni";
			_charNames[(char)0x1FA5] = "greek small letter omega with dasia and oxia and ypogegrammeni";
			_charNames[(char)0x1FA6] = "greek small letter omega with psili and perispomeni and ypogegrammeni";
			_charNames[(char)0x1FA7] = "greek small letter omega with dasia and perispomeni and ypogegrammeni";
			_charNames[(char)0x1FA8] = "greek capital letter omega with psili and prosgegrammeni";
			_charNames[(char)0x1FA9] = "greek capital letter omega with dasia and prosgegrammeni";
			_charNames[(char)0x1FAA] = "greek capital letter omega with psili and varia and prosgegrammeni";
			_charNames[(char)0x1FAB] = "greek capital letter omega with dasia and varia and prosgegrammeni";
			_charNames[(char)0x1FAC] = "greek capital letter omega with psili and oxia and prosgegrammeni";
			_charNames[(char)0x1FAD] = "greek capital letter omega with dasia and oxia and prosgegrammeni";
			_charNames[(char)0x1FAE] = "greek capital letter omega with psili and perispomeni and prosgegrammeni";
			_charNames[(char)0x1FAF] = "greek capital letter omega with dasia and perispomeni and prosgegrammeni";
			_charNames[(char)0x1FB0] = "greek small letter alpha with vrachy";
			_charNames[(char)0x1FB1] = "greek small letter alpha with macron";
			_charNames[(char)0x1FB2] = "greek small letter alpha with varia and ypogegrammeni";
			_charNames[(char)0x1FB3] = "greek small letter alpha with ypogegrammeni";
			_charNames[(char)0x1FB4] = "greek small letter alpha with oxia and ypogegrammeni";
			_charNames[(char)0x1FB6] = "greek small letter alpha with perispomeni";
			_charNames[(char)0x1FB7] = "greek small letter alpha with perispomeni and ypogegrammeni";
			_charNames[(char)0x1FB8] = "greek capital letter alpha with vrachy";
			_charNames[(char)0x1FB9] = "greek capital letter alpha with macron";
			_charNames[(char)0x1FBA] = "greek capital letter alpha with varia";
			_charNames[(char)0x1FBB] = "greek capital letter alpha with oxia";
			_charNames[(char)0x1FBC] = "greek capital letter alpha with prosgegrammeni";
			_charNames[(char)0x1FBD] = "greek koronis";
			_charNames[(char)0x1FBE] = "greek prosgegrammeni";
			_charNames[(char)0x1FBF] = "greek psili";
			_charNames[(char)0x1FC0] = "greek perispomeni";
			_charNames[(char)0x1FC1] = "greek dialytika and perispomeni";
			_charNames[(char)0x1FC2] = "greek small letter eta with varia and ypogegrammeni";
			_charNames[(char)0x1FC3] = "greek small letter eta with ypogegrammeni";
			_charNames[(char)0x1FC4] = "greek small letter eta with oxia and ypogegrammeni";
			_charNames[(char)0x1FC6] = "greek small letter eta with perispomeni";
			_charNames[(char)0x1FC7] = "greek small letter eta with perispomeni and ypogegrammeni";
			_charNames[(char)0x1FC8] = "greek capital letter epsilon with varia";
			_charNames[(char)0x1FC9] = "greek capital letter epsilon with oxia";
			_charNames[(char)0x1FCA] = "greek capital letter eta with varia";
			_charNames[(char)0x1FCB] = "greek capital letter eta with oxia";
			_charNames[(char)0x1FCC] = "greek capital letter eta with prosgegrammeni";
			_charNames[(char)0x1FCD] = "greek psili and varia";
			_charNames[(char)0x1FCE] = "greek psili and oxia";
			_charNames[(char)0x1FCF] = "greek psili and perispomeni";
			_charNames[(char)0x1FD0] = "greek small letter iota with vrachy";
			_charNames[(char)0x1FD1] = "greek small letter iota with macron";
			_charNames[(char)0x1FD2] = "greek small letter iota with dialytika and varia";
			_charNames[(char)0x1FD3] = "greek small letter iota with dialytika and oxia";
			_charNames[(char)0x1FD6] = "greek small letter iota with perispomeni";
			_charNames[(char)0x1FD7] = "greek small letter iota with dialytika and perispomeni";
			_charNames[(char)0x1FD8] = "greek capital letter iota with vrachy";
			_charNames[(char)0x1FD9] = "greek capital letter iota with macron";
			_charNames[(char)0x1FDA] = "greek capital letter iota with varia";
			_charNames[(char)0x1FDB] = "greek capital letter iota with oxia";
			_charNames[(char)0x1FDD] = "greek dasia and varia";
			_charNames[(char)0x1FDE] = "greek dasia and oxia";
			_charNames[(char)0x1FDF] = "greek dasia and perispomeni";
			_charNames[(char)0x1FE0] = "greek small letter upsilon with vrachy";
			_charNames[(char)0x1FE1] = "greek small letter upsilon with macron";
			_charNames[(char)0x1FE2] = "greek small letter upsilon with dialytika and varia";
			_charNames[(char)0x1FE3] = "greek small letter upsilon with dialytika and oxia";
			_charNames[(char)0x1FE4] = "greek small letter rho with psili";
			_charNames[(char)0x1FE5] = "greek small letter rho with dasia";
			_charNames[(char)0x1FE6] = "greek small letter upsilon with perispomeni";
			_charNames[(char)0x1FE7] = "greek small letter upsilon with dialytika and perispomeni";
			_charNames[(char)0x1FE8] = "greek capital letter upsilon with vrachy";
			_charNames[(char)0x1FE9] = "greek capital letter upsilon with macron";
			_charNames[(char)0x1FEA] = "greek capital letter upsilon with varia";
			_charNames[(char)0x1FEB] = "greek capital letter upsilon with oxia";
			_charNames[(char)0x1FEC] = "greek capital letter rho with dasia";
			_charNames[(char)0x1FED] = "greek dialytika and varia";
			_charNames[(char)0x1FEE] = "greek dialytika and oxia";
			_charNames[(char)0x1FEF] = "greek varia";
			_charNames[(char)0x1FF2] = "greek small letter omega with varia and ypogegrammeni";
			_charNames[(char)0x1FF3] = "greek small letter omega with ypogegrammeni";
			_charNames[(char)0x1FF4] = "greek small letter omega with oxia and ypogegrammeni";
			_charNames[(char)0x1FF6] = "greek small letter omega with perispomeni";
			_charNames[(char)0x1FF7] = "greek small letter omega with perispomeni and ypogegrammeni";
			_charNames[(char)0x1FF8] = "greek capital letter omicron with varia";
			_charNames[(char)0x1FF9] = "greek capital letter omicron with oxia";
			_charNames[(char)0x1FFA] = "greek capital letter omega with varia";
			_charNames[(char)0x1FFB] = "greek capital letter omega with oxia";
			_charNames[(char)0x1FFC] = "greek capital letter omega with prosgegrammeni";
			_charNames[(char)0x1FFD] = "greek oxia";
			_charNames[(char)0x1FFE] = "greek dasia";
			_charNames[(char)0x2000] = "en quad";
			_charNames[(char)0x2001] = "em quad";
			_charNames[(char)0x2002] = "en space";
			_charNames[(char)0x2003] = "em space";
			_charNames[(char)0x2004] = "three-per-em space";
			_charNames[(char)0x2005] = "four-per-em space";
			_charNames[(char)0x2006] = "six-per-em space";
			_charNames[(char)0x2007] = "figure space";
			_charNames[(char)0x2008] = "punctuation space";
			_charNames[(char)0x2009] = "thin space";
			_charNames[(char)0x200A] = "hair space";
			_charNames[(char)0x200B] = "zero width space";
			_charNames[(char)0x200C] = "zero width non-joiner";
			_charNames[(char)0x200D] = "zero width joiner";
			_charNames[(char)0x200E] = "left-to-right mark";
			_charNames[(char)0x200F] = "right-to-left mark";
			_charNames[(char)0x2010] = "hyphen";
			_charNames[(char)0x2011] = "non-breaking hyphen";
			_charNames[(char)0x2012] = "figure dash";
			_charNames[(char)0x2013] = "en dash";
			_charNames[(char)0x2014] = "em dash";
			_charNames[(char)0x2015] = "horizontal bar";
			_charNames[(char)0x2016] = "double vertical line";
			_charNames[(char)0x2017] = "double low line";
			_charNames[(char)0x2018] = "left single quotation mark";
			_charNames[(char)0x2019] = "right single quotation mark";
			_charNames[(char)0x201A] = "single low-9 quotation mark";
			_charNames[(char)0x201B] = "single high-reversed-9 quotation mark";
			_charNames[(char)0x201C] = "left double quotation mark";
			_charNames[(char)0x201D] = "right double quotation mark";
			_charNames[(char)0x201E] = "double low-9 quotation mark";
			_charNames[(char)0x201F] = "double high-reversed-9 quotation mark";
			_charNames[(char)0x2020] = "dagger";
			_charNames[(char)0x2021] = "double dagger";
			_charNames[(char)0x2022] = "bullet";
			_charNames[(char)0x2023] = "triangular bullet";
			_charNames[(char)0x2024] = "one dot leader";
			_charNames[(char)0x2025] = "two dot leader";
			_charNames[(char)0x2026] = "horizontal ellipsis";
			_charNames[(char)0x2027] = "hyphenation point";
			_charNames[(char)0x2028] = "line separator";
			_charNames[(char)0x2029] = "paragraph separator";
			_charNames[(char)0x202A] = "left-to-right embedding";
			_charNames[(char)0x202B] = "right-to-left embedding";
			_charNames[(char)0x202C] = "pop directional formatting";
			_charNames[(char)0x202D] = "left-to-right override";
			_charNames[(char)0x202E] = "right-to-left override";
			_charNames[(char)0x202F] = "narrow no-break space";
			_charNames[(char)0x2030] = "per mille sign";
			_charNames[(char)0x2031] = "per ten thousand sign";
			_charNames[(char)0x2032] = "prime";
			_charNames[(char)0x2033] = "double prime";
			_charNames[(char)0x2034] = "triple prime";
			_charNames[(char)0x2035] = "reversed prime";
			_charNames[(char)0x2036] = "reversed double prime";
			_charNames[(char)0x2037] = "reversed triple prime";
			_charNames[(char)0x2038] = "caret";
			_charNames[(char)0x2039] = "single left-pointing angle quotation mark";
			_charNames[(char)0x203A] = "single right-pointing angle quotation mark";
			_charNames[(char)0x203B] = "reference mark";
			_charNames[(char)0x203C] = "double exclamation mark";
			_charNames[(char)0x203D] = "interrobang";
			_charNames[(char)0x203E] = "overline";
			_charNames[(char)0x203F] = "undertie";
			_charNames[(char)0x2040] = "character tie";
			_charNames[(char)0x2041] = "caret insertion point";
			_charNames[(char)0x2042] = "asterism";
			_charNames[(char)0x2043] = "hyphen bullet";
			_charNames[(char)0x2044] = "fraction slash";
			_charNames[(char)0x2045] = "left square bracket with quill";
			_charNames[(char)0x2046] = "right square bracket with quill";
			_charNames[(char)0x2047] = "double question mark";
			_charNames[(char)0x2048] = "question exclamation mark";
			_charNames[(char)0x2049] = "exclamation question mark";
			_charNames[(char)0x204A] = "tironian sign et";
			_charNames[(char)0x204B] = "reversed pilcrow sign";
			_charNames[(char)0x204C] = "black leftwards bullet";
			_charNames[(char)0x204D] = "black rightwards bullet";
			_charNames[(char)0x204E] = "low asterisk";
			_charNames[(char)0x204F] = "reversed semicolon";
			_charNames[(char)0x2050] = "close up";
			_charNames[(char)0x2051] = "two asterisks aligned vertically";
			_charNames[(char)0x2052] = "commercial minus sign";
			_charNames[(char)0x2053] = "swung dash";
			_charNames[(char)0x2054] = "inverted undertie";
			_charNames[(char)0x2055] = "flower punctuation mark";
			_charNames[(char)0x2056] = "three dot punctuation";
			_charNames[(char)0x2057] = "quadruple prime";
			_charNames[(char)0x2058] = "four dot punctuation";
			_charNames[(char)0x2059] = "five dot punctuation";
			_charNames[(char)0x205A] = "two dot punctuation";
			_charNames[(char)0x205B] = "four dot mark";
			_charNames[(char)0x205C] = "dotted cross";
			_charNames[(char)0x205D] = "tricolon";
			_charNames[(char)0x205E] = "vertical four dots";
			_charNames[(char)0x205F] = "medium mathematical space";
			_charNames[(char)0x2060] = "word joiner";
			_charNames[(char)0x2061] = "function application";
			_charNames[(char)0x2062] = "invisible times";
			_charNames[(char)0x2063] = "invisible separator";
			_charNames[(char)0x206A] = "inhibit symmetric swapping";
			_charNames[(char)0x206B] = "activate symmetric swapping";
			_charNames[(char)0x206C] = "inhibit arabic form shaping";
			_charNames[(char)0x206D] = "activate arabic form shaping";
			_charNames[(char)0x206E] = "national digit shapes";
			_charNames[(char)0x206F] = "nominal digit shapes";
			_charNames[(char)0x2070] = "superscript zero";
			_charNames[(char)0x2071] = "superscript latin small letter i";
			_charNames[(char)0x2074] = "superscript four";
			_charNames[(char)0x2075] = "superscript five";
			_charNames[(char)0x2076] = "superscript six";
			_charNames[(char)0x2077] = "superscript seven";
			_charNames[(char)0x2078] = "superscript eight";
			_charNames[(char)0x2079] = "superscript nine";
			_charNames[(char)0x207A] = "superscript plus sign";
			_charNames[(char)0x207B] = "superscript minus";
			_charNames[(char)0x207C] = "superscript equals sign";
			_charNames[(char)0x207D] = "superscript left parenthesis";
			_charNames[(char)0x207E] = "superscript right parenthesis";
			_charNames[(char)0x207F] = "superscript latin small letter n";
			_charNames[(char)0x2080] = "subscript zero";
			_charNames[(char)0x2081] = "subscript one";
			_charNames[(char)0x2082] = "subscript two";
			_charNames[(char)0x2083] = "subscript three";
			_charNames[(char)0x2084] = "subscript four";
			_charNames[(char)0x2085] = "subscript five";
			_charNames[(char)0x2086] = "subscript six";
			_charNames[(char)0x2087] = "subscript seven";
			_charNames[(char)0x2088] = "subscript eight";
			_charNames[(char)0x2089] = "subscript nine";
			_charNames[(char)0x208A] = "subscript plus sign";
			_charNames[(char)0x208B] = "subscript minus";
			_charNames[(char)0x208C] = "subscript equals sign";
			_charNames[(char)0x208D] = "subscript left parenthesis";
			_charNames[(char)0x208E] = "subscript right parenthesis";
			_charNames[(char)0x2090] = "latin subscript small letter a";
			_charNames[(char)0x2091] = "latin subscript small letter e";
			_charNames[(char)0x2092] = "latin subscript small letter o";
			_charNames[(char)0x2093] = "latin subscript small letter x";
			_charNames[(char)0x2094] = "latin subscript small letter schwa";
			_charNames[(char)0x20A0] = "euro-currency sign";
			_charNames[(char)0x20A1] = "colon sign";
			_charNames[(char)0x20A2] = "cruzeiro sign";
			_charNames[(char)0x20A3] = "french franc sign";
			_charNames[(char)0x20A4] = "lira sign";
			_charNames[(char)0x20A5] = "mill sign";
			_charNames[(char)0x20A6] = "naira sign";
			_charNames[(char)0x20A7] = "peseta sign";
			_charNames[(char)0x20A8] = "rupee sign";
			_charNames[(char)0x20A9] = "won sign";
			_charNames[(char)0x20AA] = "new sheqel sign";
			_charNames[(char)0x20AB] = "dong sign";
			_charNames[(char)0x20AC] = "euro sign";
			_charNames[(char)0x20AD] = "kip sign";
			_charNames[(char)0x20AE] = "tugrik sign";
			_charNames[(char)0x20AF] = "drachma sign";
			_charNames[(char)0x20B0] = "german penny sign";
			_charNames[(char)0x20B1] = "peso sign";
			_charNames[(char)0x20B2] = "guarani sign";
			_charNames[(char)0x20B3] = "austral sign";
			_charNames[(char)0x20B4] = "hryvnia sign";
			_charNames[(char)0x20B5] = "cedi sign";
			_charNames[(char)0x20D0] = "combining left harpoon above";
			_charNames[(char)0x20D1] = "combining right harpoon above";
			_charNames[(char)0x20D2] = "combining long vertical line overlay";
			_charNames[(char)0x20D3] = "combining short vertical line overlay";
			_charNames[(char)0x20D4] = "combining anticlockwise arrow above";
			_charNames[(char)0x20D5] = "combining clockwise arrow above";
			_charNames[(char)0x20D6] = "combining left arrow above";
			_charNames[(char)0x20D7] = "combining right arrow above";
			_charNames[(char)0x20D8] = "combining ring overlay";
			_charNames[(char)0x20D9] = "combining clockwise ring overlay";
			_charNames[(char)0x20DA] = "combining anticlockwise ring overlay";
			_charNames[(char)0x20DB] = "combining three dots above";
			_charNames[(char)0x20DC] = "combining four dots above";
			_charNames[(char)0x20DD] = "combining enclosing circle";
			_charNames[(char)0x20DE] = "combining enclosing square";
			_charNames[(char)0x20DF] = "combining enclosing diamond";
			_charNames[(char)0x20E0] = "combining enclosing circle backslash";
			_charNames[(char)0x20E1] = "combining left right arrow above";
			_charNames[(char)0x20E2] = "combining enclosing screen";
			_charNames[(char)0x20E3] = "combining enclosing keycap";
			_charNames[(char)0x20E4] = "combining enclosing upward pointing triangle";
			_charNames[(char)0x20E5] = "combining reverse solidus overlay";
			_charNames[(char)0x20E6] = "combining double vertical stroke overlay";
			_charNames[(char)0x20E7] = "combining annuity symbol";
			_charNames[(char)0x20E8] = "combining triple underdot";
			_charNames[(char)0x20E9] = "combining wide bridge above";
			_charNames[(char)0x20EA] = "combining leftwards arrow overlay";
			_charNames[(char)0x20EB] = "combining long double solidus overlay";
			_charNames[(char)0x2100] = "account of";
			_charNames[(char)0x2101] = "addressed to the subject";
			_charNames[(char)0x2102] = "double-struck capital c";
			_charNames[(char)0x2103] = "degree celsius";
			_charNames[(char)0x2104] = "centre line symbol";
			_charNames[(char)0x2105] = "care of";
			_charNames[(char)0x2106] = "cada una";
			_charNames[(char)0x2107] = "euler constant";
			_charNames[(char)0x2108] = "scruple";
			_charNames[(char)0x2109] = "degree fahrenheit";
			_charNames[(char)0x210A] = "script small g";
			_charNames[(char)0x210B] = "script capital h";
			_charNames[(char)0x210C] = "black-letter capital h";
			_charNames[(char)0x210D] = "double-struck capital h";
			_charNames[(char)0x210E] = "planck constant";
			_charNames[(char)0x210F] = "planck constant over two pi";
			_charNames[(char)0x2110] = "script capital i";
			_charNames[(char)0x2111] = "black-letter capital i";
			_charNames[(char)0x2112] = "script capital l";
			_charNames[(char)0x2113] = "script small l";
			_charNames[(char)0x2114] = "l b bar symbol";
			_charNames[(char)0x2115] = "double-struck capital n";
			_charNames[(char)0x2116] = "numero sign";
			_charNames[(char)0x2117] = "sound recording copyright";
			_charNames[(char)0x2118] = "script capital p";
			_charNames[(char)0x2119] = "double-struck capital p";
			_charNames[(char)0x211A] = "double-struck capital q";
			_charNames[(char)0x211B] = "script capital r";
			_charNames[(char)0x211C] = "black-letter capital r";
			_charNames[(char)0x211D] = "double-struck capital r";
			_charNames[(char)0x211E] = "prescription take";
			_charNames[(char)0x211F] = "response";
			_charNames[(char)0x2120] = "service mark";
			_charNames[(char)0x2121] = "telephone sign";
			_charNames[(char)0x2122] = "trade mark sign";
			_charNames[(char)0x2123] = "versicle";
			_charNames[(char)0x2124] = "double-struck capital z";
			_charNames[(char)0x2125] = "ounce sign";
			_charNames[(char)0x2126] = "ohm sign";
			_charNames[(char)0x2127] = "inverted ohm sign";
			_charNames[(char)0x2128] = "black-letter capital z";
			_charNames[(char)0x2129] = "turned greek small letter iota";
			_charNames[(char)0x212A] = "kelvin sign";
			_charNames[(char)0x212B] = "angstrom sign";
			_charNames[(char)0x212C] = "script capital b";
			_charNames[(char)0x212D] = "black-letter capital c";
			_charNames[(char)0x212E] = "estimated symbol";
			_charNames[(char)0x212F] = "script small e";
			_charNames[(char)0x2130] = "script capital e";
			_charNames[(char)0x2131] = "script capital f";
			_charNames[(char)0x2132] = "turned capital f";
			_charNames[(char)0x2133] = "script capital m";
			_charNames[(char)0x2134] = "script small o";
			_charNames[(char)0x2135] = "alef symbol";
			_charNames[(char)0x2136] = "bet symbol";
			_charNames[(char)0x2137] = "gimel symbol";
			_charNames[(char)0x2138] = "dalet symbol";
			_charNames[(char)0x2139] = "information source";
			_charNames[(char)0x213A] = "rotated capital q";
			_charNames[(char)0x213B] = "facsimile sign";
			_charNames[(char)0x213C] = "double-struck small pi";
			_charNames[(char)0x213D] = "double-struck small gamma";
			_charNames[(char)0x213E] = "double-struck capital gamma";
			_charNames[(char)0x213F] = "double-struck capital pi";
			_charNames[(char)0x2140] = "double-struck n-ary summation";
			_charNames[(char)0x2141] = "turned sans-serif capital g";
			_charNames[(char)0x2142] = "turned sans-serif capital l";
			_charNames[(char)0x2143] = "reversed sans-serif capital l";
			_charNames[(char)0x2144] = "turned sans-serif capital y";
			_charNames[(char)0x2145] = "double-struck italic capital d";
			_charNames[(char)0x2146] = "double-struck italic small d";
			_charNames[(char)0x2147] = "double-struck italic small e";
			_charNames[(char)0x2148] = "double-struck italic small i";
			_charNames[(char)0x2149] = "double-struck italic small j";
			_charNames[(char)0x214A] = "property line";
			_charNames[(char)0x214B] = "turned ampersand";
			_charNames[(char)0x214C] = "per sign";
			_charNames[(char)0x2153] = "vulgar fraction one third";
			_charNames[(char)0x2154] = "vulgar fraction two thirds";
			_charNames[(char)0x2155] = "vulgar fraction one fifth";
			_charNames[(char)0x2156] = "vulgar fraction two fifths";
			_charNames[(char)0x2157] = "vulgar fraction three fifths";
			_charNames[(char)0x2158] = "vulgar fraction four fifths";
			_charNames[(char)0x2159] = "vulgar fraction one sixth";
			_charNames[(char)0x215A] = "vulgar fraction five sixths";
			_charNames[(char)0x215B] = "vulgar fraction one eighth";
			_charNames[(char)0x215C] = "vulgar fraction three eighths";
			_charNames[(char)0x215D] = "vulgar fraction five eighths";
			_charNames[(char)0x215E] = "vulgar fraction seven eighths";
			_charNames[(char)0x215F] = "fraction numerator one";
			_charNames[(char)0x2160] = "roman numeral one";
			_charNames[(char)0x2161] = "roman numeral two";
			_charNames[(char)0x2162] = "roman numeral three";
			_charNames[(char)0x2163] = "roman numeral four";
			_charNames[(char)0x2164] = "roman numeral five";
			_charNames[(char)0x2165] = "roman numeral six";
			_charNames[(char)0x2166] = "roman numeral seven";
			_charNames[(char)0x2167] = "roman numeral eight";
			_charNames[(char)0x2168] = "roman numeral nine";
			_charNames[(char)0x2169] = "roman numeral ten";
			_charNames[(char)0x216A] = "roman numeral eleven";
			_charNames[(char)0x216B] = "roman numeral twelve";
			_charNames[(char)0x216C] = "roman numeral fifty";
			_charNames[(char)0x216D] = "roman numeral one hundred";
			_charNames[(char)0x216E] = "roman numeral five hundred";
			_charNames[(char)0x216F] = "roman numeral one thousand";
			_charNames[(char)0x2170] = "small roman numeral one";
			_charNames[(char)0x2171] = "small roman numeral two";
			_charNames[(char)0x2172] = "small roman numeral three";
			_charNames[(char)0x2173] = "small roman numeral four";
			_charNames[(char)0x2174] = "small roman numeral five";
			_charNames[(char)0x2175] = "small roman numeral six";
			_charNames[(char)0x2176] = "small roman numeral seven";
			_charNames[(char)0x2177] = "small roman numeral eight";
			_charNames[(char)0x2178] = "small roman numeral nine";
			_charNames[(char)0x2179] = "small roman numeral ten";
			_charNames[(char)0x217A] = "small roman numeral eleven";
			_charNames[(char)0x217B] = "small roman numeral twelve";
			_charNames[(char)0x217C] = "small roman numeral fifty";
			_charNames[(char)0x217D] = "small roman numeral one hundred";
			_charNames[(char)0x217E] = "small roman numeral five hundred";
			_charNames[(char)0x217F] = "small roman numeral one thousand";
			_charNames[(char)0x2180] = "roman numeral one thousand c d";
			_charNames[(char)0x2181] = "roman numeral five thousand";
			_charNames[(char)0x2182] = "roman numeral ten thousand";
			_charNames[(char)0x2183] = "roman numeral reversed one hundred";
			_charNames[(char)0x2190] = "leftwards arrow";
			_charNames[(char)0x2191] = "upwards arrow";
			_charNames[(char)0x2192] = "rightwards arrow";
			_charNames[(char)0x2193] = "downwards arrow";
			_charNames[(char)0x2194] = "left right arrow";
			_charNames[(char)0x2195] = "up down arrow";
			_charNames[(char)0x2196] = "north west arrow";
			_charNames[(char)0x2197] = "north east arrow";
			_charNames[(char)0x2198] = "south east arrow";
			_charNames[(char)0x2199] = "south west arrow";
			_charNames[(char)0x219A] = "leftwards arrow with stroke";
			_charNames[(char)0x219B] = "rightwards arrow with stroke";
			_charNames[(char)0x219C] = "leftwards wave arrow";
			_charNames[(char)0x219D] = "rightwards wave arrow";
			_charNames[(char)0x219E] = "leftwards two headed arrow";
			_charNames[(char)0x219F] = "upwards two headed arrow";
			_charNames[(char)0x21A0] = "rightwards two headed arrow";
			_charNames[(char)0x21A1] = "downwards two headed arrow";
			_charNames[(char)0x21A2] = "leftwards arrow with tail";
			_charNames[(char)0x21A3] = "rightwards arrow with tail";
			_charNames[(char)0x21A4] = "leftwards arrow from bar";
			_charNames[(char)0x21A5] = "upwards arrow from bar";
			_charNames[(char)0x21A6] = "rightwards arrow from bar";
			_charNames[(char)0x21A7] = "downwards arrow from bar";
			_charNames[(char)0x21A8] = "up down arrow with base";
			_charNames[(char)0x21A9] = "leftwards arrow with hook";
			_charNames[(char)0x21AA] = "rightwards arrow with hook";
			_charNames[(char)0x21AB] = "leftwards arrow with loop";
			_charNames[(char)0x21AC] = "rightwards arrow with loop";
			_charNames[(char)0x21AD] = "left right wave arrow";
			_charNames[(char)0x21AE] = "left right arrow with stroke";
			_charNames[(char)0x21AF] = "downwards zigzag arrow";
			_charNames[(char)0x21B0] = "upwards arrow with tip leftwards";
			_charNames[(char)0x21B1] = "upwards arrow with tip rightwards";
			_charNames[(char)0x21B2] = "downwards arrow with tip leftwards";
			_charNames[(char)0x21B3] = "downwards arrow with tip rightwards";
			_charNames[(char)0x21B4] = "rightwards arrow with corner downwards";
			_charNames[(char)0x21B5] = "downwards arrow with corner leftwards";
			_charNames[(char)0x21B6] = "anticlockwise top semicircle arrow";
			_charNames[(char)0x21B7] = "clockwise top semicircle arrow";
			_charNames[(char)0x21B8] = "north west arrow to long bar";
			_charNames[(char)0x21B9] = "leftwards arrow to bar over rightwards arrow to bar";
			_charNames[(char)0x21BA] = "anticlockwise open circle arrow";
			_charNames[(char)0x21BB] = "clockwise open circle arrow";
			_charNames[(char)0x21BC] = "leftwards harpoon with barb upwards";
			_charNames[(char)0x21BD] = "leftwards harpoon with barb downwards";
			_charNames[(char)0x21BE] = "upwards harpoon with barb rightwards";
			_charNames[(char)0x21BF] = "upwards harpoon with barb leftwards";
			_charNames[(char)0x21C0] = "rightwards harpoon with barb upwards";
			_charNames[(char)0x21C1] = "rightwards harpoon with barb downwards";
			_charNames[(char)0x21C2] = "downwards harpoon with barb rightwards";
			_charNames[(char)0x21C3] = "downwards harpoon with barb leftwards";
			_charNames[(char)0x21C4] = "rightwards arrow over leftwards arrow";
			_charNames[(char)0x21C5] = "upwards arrow leftwards of downwards arrow";
			_charNames[(char)0x21C6] = "leftwards arrow over rightwards arrow";
			_charNames[(char)0x21C7] = "leftwards paired arrows";
			_charNames[(char)0x21C8] = "upwards paired arrows";
			_charNames[(char)0x21C9] = "rightwards paired arrows";
			_charNames[(char)0x21CA] = "downwards paired arrows";
			_charNames[(char)0x21CB] = "leftwards harpoon over rightwards harpoon";
			_charNames[(char)0x21CC] = "rightwards harpoon over leftwards harpoon";
			_charNames[(char)0x21CD] = "leftwards double arrow with stroke";
			_charNames[(char)0x21CE] = "left right double arrow with stroke";
			_charNames[(char)0x21CF] = "rightwards double arrow with stroke";
			_charNames[(char)0x21D0] = "leftwards double arrow";
			_charNames[(char)0x21D1] = "upwards double arrow";
			_charNames[(char)0x21D2] = "rightwards double arrow";
			_charNames[(char)0x21D3] = "downwards double arrow";
			_charNames[(char)0x21D4] = "left right double arrow";
			_charNames[(char)0x21D5] = "up down double arrow";
			_charNames[(char)0x21D6] = "north west double arrow";
			_charNames[(char)0x21D7] = "north east double arrow";
			_charNames[(char)0x21D8] = "south east double arrow";
			_charNames[(char)0x21D9] = "south west double arrow";
			_charNames[(char)0x21DA] = "leftwards triple arrow";
			_charNames[(char)0x21DB] = "rightwards triple arrow";
			_charNames[(char)0x21DC] = "leftwards squiggle arrow";
			_charNames[(char)0x21DD] = "rightwards squiggle arrow";
			_charNames[(char)0x21DE] = "upwards arrow with double stroke";
			_charNames[(char)0x21DF] = "downwards arrow with double stroke";
			_charNames[(char)0x21E0] = "leftwards dashed arrow";
			_charNames[(char)0x21E1] = "upwards dashed arrow";
			_charNames[(char)0x21E2] = "rightwards dashed arrow";
			_charNames[(char)0x21E3] = "downwards dashed arrow";
			_charNames[(char)0x21E4] = "leftwards arrow to bar";
			_charNames[(char)0x21E5] = "rightwards arrow to bar";
			_charNames[(char)0x21E6] = "leftwards white arrow";
			_charNames[(char)0x21E7] = "upwards white arrow";
			_charNames[(char)0x21E8] = "rightwards white arrow";
			_charNames[(char)0x21E9] = "downwards white arrow";
			_charNames[(char)0x21EA] = "upwards white arrow from bar";
			_charNames[(char)0x21EB] = "upwards white arrow on pedestal";
			_charNames[(char)0x21EC] = "upwards white arrow on pedestal with horizontal bar";
			_charNames[(char)0x21ED] = "upwards white arrow on pedestal with vertical bar";
			_charNames[(char)0x21EE] = "upwards white double arrow";
			_charNames[(char)0x21EF] = "upwards white double arrow on pedestal";
			_charNames[(char)0x21F0] = "rightwards white arrow from wall";
			_charNames[(char)0x21F1] = "north west arrow to corner";
			_charNames[(char)0x21F2] = "south east arrow to corner";
			_charNames[(char)0x21F3] = "up down white arrow";
			_charNames[(char)0x21F4] = "right arrow with small circle";
			_charNames[(char)0x21F5] = "downwards arrow leftwards of upwards arrow";
			_charNames[(char)0x21F6] = "three rightwards arrows";
			_charNames[(char)0x21F7] = "leftwards arrow with vertical stroke";
			_charNames[(char)0x21F8] = "rightwards arrow with vertical stroke";
			_charNames[(char)0x21F9] = "left right arrow with vertical stroke";
			_charNames[(char)0x21FA] = "leftwards arrow with double vertical stroke";
			_charNames[(char)0x21FB] = "rightwards arrow with double vertical stroke";
			_charNames[(char)0x21FC] = "left right arrow with double vertical stroke";
			_charNames[(char)0x21FD] = "leftwards open-headed arrow";
			_charNames[(char)0x21FE] = "rightwards open-headed arrow";
			_charNames[(char)0x21FF] = "left right open-headed arrow";
			_charNames[(char)0x2200] = "for all";
			_charNames[(char)0x2201] = "complement";
			_charNames[(char)0x2202] = "partial differential";
			_charNames[(char)0x2203] = "there exists";
			_charNames[(char)0x2204] = "there does not exist";
			_charNames[(char)0x2205] = "empty set";
			_charNames[(char)0x2206] = "increment";
			_charNames[(char)0x2207] = "nabla";
			_charNames[(char)0x2208] = "element of";
			_charNames[(char)0x2209] = "not an element of";
			_charNames[(char)0x220A] = "small element of";
			_charNames[(char)0x220B] = "contains as member";
			_charNames[(char)0x220C] = "does not contain as member";
			_charNames[(char)0x220D] = "small contains as member";
			_charNames[(char)0x220E] = "end of proof";
			_charNames[(char)0x220F] = "n-ary product";
			_charNames[(char)0x2210] = "n-ary coproduct";
			_charNames[(char)0x2211] = "n-ary summation";
			_charNames[(char)0x2212] = "minus sign";
			_charNames[(char)0x2213] = "minus-or-plus sign";
			_charNames[(char)0x2214] = "dot plus";
			_charNames[(char)0x2215] = "division slash";
			_charNames[(char)0x2216] = "set minus";
			_charNames[(char)0x2217] = "asterisk operator";
			_charNames[(char)0x2218] = "ring operator";
			_charNames[(char)0x2219] = "bullet operator";
			_charNames[(char)0x221A] = "square root";
			_charNames[(char)0x221B] = "cube root";
			_charNames[(char)0x221C] = "fourth root";
			_charNames[(char)0x221D] = "proportional to";
			_charNames[(char)0x221E] = "infinity";
			_charNames[(char)0x221F] = "right angle";
			_charNames[(char)0x2220] = "angle";
			_charNames[(char)0x2221] = "measured angle";
			_charNames[(char)0x2222] = "spherical angle";
			_charNames[(char)0x2223] = "divides";
			_charNames[(char)0x2224] = "does not divide";
			_charNames[(char)0x2225] = "parallel to";
			_charNames[(char)0x2226] = "not parallel to";
			_charNames[(char)0x2227] = "logical and";
			_charNames[(char)0x2228] = "logical or";
			_charNames[(char)0x2229] = "intersection";
			_charNames[(char)0x222A] = "union";
			_charNames[(char)0x222B] = "integral";
			_charNames[(char)0x222C] = "double integral";
			_charNames[(char)0x222D] = "triple integral";
			_charNames[(char)0x222E] = "contour integral";
			_charNames[(char)0x222F] = "surface integral";
			_charNames[(char)0x2230] = "volume integral";
			_charNames[(char)0x2231] = "clockwise integral";
			_charNames[(char)0x2232] = "clockwise contour integral";
			_charNames[(char)0x2233] = "anticlockwise contour integral";
			_charNames[(char)0x2234] = "therefore";
			_charNames[(char)0x2235] = "because";
			_charNames[(char)0x2236] = "ratio";
			_charNames[(char)0x2237] = "proportion";
			_charNames[(char)0x2238] = "dot minus";
			_charNames[(char)0x2239] = "excess";
			_charNames[(char)0x223A] = "geometric proportion";
			_charNames[(char)0x223B] = "homothetic";
			_charNames[(char)0x223C] = "tilde operator";
			_charNames[(char)0x223D] = "reversed tilde";
			_charNames[(char)0x223E] = "inverted lazy s";
			_charNames[(char)0x223F] = "sine wave";
			_charNames[(char)0x2240] = "wreath product";
			_charNames[(char)0x2241] = "not tilde";
			_charNames[(char)0x2242] = "minus tilde";
			_charNames[(char)0x2243] = "asymptotically equal to";
			_charNames[(char)0x2244] = "not asymptotically equal to";
			_charNames[(char)0x2245] = "approximately equal to";
			_charNames[(char)0x2246] = "approximately but not actually equal to";
			_charNames[(char)0x2247] = "neither approximately nor actually equal to";
			_charNames[(char)0x2248] = "almost equal to";
			_charNames[(char)0x2249] = "not almost equal to";
			_charNames[(char)0x224A] = "almost equal or equal to";
			_charNames[(char)0x224B] = "triple tilde";
			_charNames[(char)0x224C] = "all equal to";
			_charNames[(char)0x224D] = "equivalent to";
			_charNames[(char)0x224E] = "geometrically equivalent to";
			_charNames[(char)0x224F] = "difference between";
			_charNames[(char)0x2250] = "approaches the limit";
			_charNames[(char)0x2251] = "geometrically equal to";
			_charNames[(char)0x2252] = "approximately equal to or the image of";
			_charNames[(char)0x2253] = "image of or approximately equal to";
			_charNames[(char)0x2254] = "colon equals";
			_charNames[(char)0x2255] = "equals colon";
			_charNames[(char)0x2256] = "ring in equal to";
			_charNames[(char)0x2257] = "ring equal to";
			_charNames[(char)0x2258] = "corresponds to";
			_charNames[(char)0x2259] = "estimates";
			_charNames[(char)0x225A] = "equiangular to";
			_charNames[(char)0x225B] = "star equals";
			_charNames[(char)0x225C] = "delta equal to";
			_charNames[(char)0x225D] = "equal to by definition";
			_charNames[(char)0x225E] = "measured by";
			_charNames[(char)0x225F] = "questioned equal to";
			_charNames[(char)0x2260] = "not equal to";
			_charNames[(char)0x2261] = "identical to";
			_charNames[(char)0x2262] = "not identical to";
			_charNames[(char)0x2263] = "strictly equivalent to";
			_charNames[(char)0x2264] = "less-than or equal to";
			_charNames[(char)0x2265] = "greater-than or equal to";
			_charNames[(char)0x2266] = "less-than over equal to";
			_charNames[(char)0x2267] = "greater-than over equal to";
			_charNames[(char)0x2268] = "less-than but not equal to";
			_charNames[(char)0x2269] = "greater-than but not equal to";
			_charNames[(char)0x226A] = "much less-than";
			_charNames[(char)0x226B] = "much greater-than";
			_charNames[(char)0x226C] = "between";
			_charNames[(char)0x226D] = "not equivalent to";
			_charNames[(char)0x226E] = "not less-than";
			_charNames[(char)0x226F] = "not greater-than";
			_charNames[(char)0x2270] = "neither less-than nor equal to";
			_charNames[(char)0x2271] = "neither greater-than nor equal to";
			_charNames[(char)0x2272] = "less-than or equivalent to";
			_charNames[(char)0x2273] = "greater-than or equivalent to";
			_charNames[(char)0x2274] = "neither less-than nor equivalent to";
			_charNames[(char)0x2275] = "neither greater-than nor equivalent to";
			_charNames[(char)0x2276] = "less-than or greater-than";
			_charNames[(char)0x2277] = "greater-than or less-than";
			_charNames[(char)0x2278] = "neither less-than nor greater-than";
			_charNames[(char)0x2279] = "neither greater-than nor less-than";
			_charNames[(char)0x227A] = "precedes";
			_charNames[(char)0x227B] = "succeeds";
			_charNames[(char)0x227C] = "precedes or equal to";
			_charNames[(char)0x227D] = "succeeds or equal to";
			_charNames[(char)0x227E] = "precedes or equivalent to";
			_charNames[(char)0x227F] = "succeeds or equivalent to";
			_charNames[(char)0x2280] = "does not precede";
			_charNames[(char)0x2281] = "does not succeed";
			_charNames[(char)0x2282] = "subset of";
			_charNames[(char)0x2283] = "superset of";
			_charNames[(char)0x2284] = "not a subset of";
			_charNames[(char)0x2285] = "not a superset of";
			_charNames[(char)0x2286] = "subset of or equal to";
			_charNames[(char)0x2287] = "superset of or equal to";
			_charNames[(char)0x2288] = "neither a subset of nor equal to";
			_charNames[(char)0x2289] = "neither a superset of nor equal to";
			_charNames[(char)0x228A] = "subset of with not equal to";
			_charNames[(char)0x228B] = "superset of with not equal to";
			_charNames[(char)0x228C] = "multiset";
			_charNames[(char)0x228D] = "multiset multiplication";
			_charNames[(char)0x228E] = "multiset union";
			_charNames[(char)0x228F] = "square image of";
			_charNames[(char)0x2290] = "square original of";
			_charNames[(char)0x2291] = "square image of or equal to";
			_charNames[(char)0x2292] = "square original of or equal to";
			_charNames[(char)0x2293] = "square cap";
			_charNames[(char)0x2294] = "square cup";
			_charNames[(char)0x2295] = "circled plus";
			_charNames[(char)0x2296] = "circled minus";
			_charNames[(char)0x2297] = "circled times";
			_charNames[(char)0x2298] = "circled division slash";
			_charNames[(char)0x2299] = "circled dot operator";
			_charNames[(char)0x229A] = "circled ring operator";
			_charNames[(char)0x229B] = "circled asterisk operator";
			_charNames[(char)0x229C] = "circled equals";
			_charNames[(char)0x229D] = "circled dash";
			_charNames[(char)0x229E] = "squared plus";
			_charNames[(char)0x229F] = "squared minus";
			_charNames[(char)0x22A0] = "squared times";
			_charNames[(char)0x22A1] = "squared dot operator";
			_charNames[(char)0x22A2] = "right tack";
			_charNames[(char)0x22A3] = "left tack";
			_charNames[(char)0x22A4] = "down tack";
			_charNames[(char)0x22A5] = "up tack";
			_charNames[(char)0x22A6] = "assertion";
			_charNames[(char)0x22A7] = "models";
			_charNames[(char)0x22A8] = "true";
			_charNames[(char)0x22A9] = "forces";
			_charNames[(char)0x22AA] = "triple vertical bar right turnstile";
			_charNames[(char)0x22AB] = "double vertical bar double right turnstile";
			_charNames[(char)0x22AC] = "does not prove";
			_charNames[(char)0x22AD] = "not true";
			_charNames[(char)0x22AE] = "does not force";
			_charNames[(char)0x22AF] = "negated double vertical bar double right turnstile";
			_charNames[(char)0x22B0] = "precedes under relation";
			_charNames[(char)0x22B1] = "succeeds under relation";
			_charNames[(char)0x22B2] = "normal subgroup of";
			_charNames[(char)0x22B3] = "contains as normal subgroup";
			_charNames[(char)0x22B4] = "normal subgroup of or equal to";
			_charNames[(char)0x22B5] = "contains as normal subgroup or equal to";
			_charNames[(char)0x22B6] = "original of";
			_charNames[(char)0x22B7] = "image of";
			_charNames[(char)0x22B8] = "multimap";
			_charNames[(char)0x22B9] = "hermitian conjugate matrix";
			_charNames[(char)0x22BA] = "intercalate";
			_charNames[(char)0x22BB] = "xor";
			_charNames[(char)0x22BC] = "nand";
			_charNames[(char)0x22BD] = "nor";
			_charNames[(char)0x22BE] = "right angle with arc";
			_charNames[(char)0x22BF] = "right triangle";
			_charNames[(char)0x22C0] = "n-ary logical and";
			_charNames[(char)0x22C1] = "n-ary logical or";
			_charNames[(char)0x22C2] = "n-ary intersection";
			_charNames[(char)0x22C3] = "n-ary union";
			_charNames[(char)0x22C4] = "diamond operator";
			_charNames[(char)0x22C5] = "dot operator";
			_charNames[(char)0x22C6] = "star operator";
			_charNames[(char)0x22C7] = "division times";
			_charNames[(char)0x22C8] = "bowtie";
			_charNames[(char)0x22C9] = "left normal factor semidirect product";
			_charNames[(char)0x22CA] = "right normal factor semidirect product";
			_charNames[(char)0x22CB] = "left semidirect product";
			_charNames[(char)0x22CC] = "right semidirect product";
			_charNames[(char)0x22CD] = "reversed tilde equals";
			_charNames[(char)0x22CE] = "curly logical or";
			_charNames[(char)0x22CF] = "curly logical and";
			_charNames[(char)0x22D0] = "double subset";
			_charNames[(char)0x22D1] = "double superset";
			_charNames[(char)0x22D2] = "double intersection";
			_charNames[(char)0x22D3] = "double union";
			_charNames[(char)0x22D4] = "pitchfork";
			_charNames[(char)0x22D5] = "equal and parallel to";
			_charNames[(char)0x22D6] = "less-than with dot";
			_charNames[(char)0x22D7] = "greater-than with dot";
			_charNames[(char)0x22D8] = "very much less-than";
			_charNames[(char)0x22D9] = "very much greater-than";
			_charNames[(char)0x22DA] = "less-than equal to or greater-than";
			_charNames[(char)0x22DB] = "greater-than equal to or less-than";
			_charNames[(char)0x22DC] = "equal to or less-than";
			_charNames[(char)0x22DD] = "equal to or greater-than";
			_charNames[(char)0x22DE] = "equal to or precedes";
			_charNames[(char)0x22DF] = "equal to or succeeds";
			_charNames[(char)0x22E0] = "does not precede or equal";
			_charNames[(char)0x22E1] = "does not succeed or equal";
			_charNames[(char)0x22E2] = "not square image of or equal to";
			_charNames[(char)0x22E3] = "not square original of or equal to";
			_charNames[(char)0x22E4] = "square image of or not equal to";
			_charNames[(char)0x22E5] = "square original of or not equal to";
			_charNames[(char)0x22E6] = "less-than but not equivalent to";
			_charNames[(char)0x22E7] = "greater-than but not equivalent to";
			_charNames[(char)0x22E8] = "precedes but not equivalent to";
			_charNames[(char)0x22E9] = "succeeds but not equivalent to";
			_charNames[(char)0x22EA] = "not normal subgroup of";
			_charNames[(char)0x22EB] = "does not contain as normal subgroup";
			_charNames[(char)0x22EC] = "not normal subgroup of or equal to";
			_charNames[(char)0x22ED] = "does not contain as normal subgroup or equal";
			_charNames[(char)0x22EE] = "vertical ellipsis";
			_charNames[(char)0x22EF] = "midline horizontal ellipsis";
			_charNames[(char)0x22F0] = "up right diagonal ellipsis";
			_charNames[(char)0x22F1] = "down right diagonal ellipsis";
			_charNames[(char)0x22F2] = "element of with long horizontal stroke";
			_charNames[(char)0x22F3] = "element of with vertical bar at end of horizontal stroke";
			_charNames[(char)0x22F4] = "small element of with vertical bar at end of horizontal stroke";
			_charNames[(char)0x22F5] = "element of with dot above";
			_charNames[(char)0x22F6] = "element of with overbar";
			_charNames[(char)0x22F7] = "small element of with overbar";
			_charNames[(char)0x22F8] = "element of with underbar";
			_charNames[(char)0x22F9] = "element of with two horizontal strokes";
			_charNames[(char)0x22FA] = "contains with long horizontal stroke";
			_charNames[(char)0x22FB] = "contains with vertical bar at end of horizontal stroke";
			_charNames[(char)0x22FC] = "small contains with vertical bar at end of horizontal stroke";
			_charNames[(char)0x22FD] = "contains with overbar";
			_charNames[(char)0x22FE] = "small contains with overbar";
			_charNames[(char)0x22FF] = "z notation bag membership";
			_charNames[(char)0x2300] = "diameter sign";
			_charNames[(char)0x2301] = "electric arrow";
			_charNames[(char)0x2302] = "house";
			_charNames[(char)0x2303] = "up arrowhead";
			_charNames[(char)0x2304] = "down arrowhead";
			_charNames[(char)0x2305] = "projective";
			_charNames[(char)0x2306] = "perspective";
			_charNames[(char)0x2307] = "wavy line";
			_charNames[(char)0x2308] = "left ceiling";
			_charNames[(char)0x2309] = "right ceiling";
			_charNames[(char)0x230A] = "left floor";
			_charNames[(char)0x230B] = "right floor";
			_charNames[(char)0x230C] = "bottom right crop";
			_charNames[(char)0x230D] = "bottom left crop";
			_charNames[(char)0x230E] = "top right crop";
			_charNames[(char)0x230F] = "top left crop";
			_charNames[(char)0x2310] = "reversed not sign";
			_charNames[(char)0x2311] = "square lozenge";
			_charNames[(char)0x2312] = "arc";
			_charNames[(char)0x2313] = "segment";
			_charNames[(char)0x2314] = "sector";
			_charNames[(char)0x2315] = "telephone recorder";
			_charNames[(char)0x2316] = "position indicator";
			_charNames[(char)0x2317] = "viewdata square";
			_charNames[(char)0x2318] = "place of interest sign";
			_charNames[(char)0x2319] = "turned not sign";
			_charNames[(char)0x231A] = "watch";
			_charNames[(char)0x231B] = "hourglass";
			_charNames[(char)0x231C] = "top left corner";
			_charNames[(char)0x231D] = "top right corner";
			_charNames[(char)0x231E] = "bottom left corner";
			_charNames[(char)0x231F] = "bottom right corner";
			_charNames[(char)0x2320] = "top half integral";
			_charNames[(char)0x2321] = "bottom half integral";
			_charNames[(char)0x2322] = "frown";
			_charNames[(char)0x2323] = "smile";
			_charNames[(char)0x2324] = "up arrowhead between two horizontal bars";
			_charNames[(char)0x2325] = "option key";
			_charNames[(char)0x2326] = "erase to the right";
			_charNames[(char)0x2327] = "x in a rectangle box";
			_charNames[(char)0x2328] = "keyboard";
			_charNames[(char)0x2329] = "left-pointing angle bracket";
			_charNames[(char)0x232A] = "right-pointing angle bracket";
			_charNames[(char)0x232B] = "erase to the left";
			_charNames[(char)0x232C] = "benzene ring";
			_charNames[(char)0x232D] = "cylindricity";
			_charNames[(char)0x232E] = "all around-profile";
			_charNames[(char)0x232F] = "symmetry";
			_charNames[(char)0x2330] = "total runout";
			_charNames[(char)0x2331] = "dimension origin";
			_charNames[(char)0x2332] = "conical taper";
			_charNames[(char)0x2333] = "slope";
			_charNames[(char)0x2334] = "counterbore";
			_charNames[(char)0x2335] = "countersink";
			_charNames[(char)0x2336] = "apl functional symbol i-beam";
			_charNames[(char)0x2337] = "apl functional symbol squish quad";
			_charNames[(char)0x2338] = "apl functional symbol quad equal";
			_charNames[(char)0x2339] = "apl functional symbol quad divide";
			_charNames[(char)0x233A] = "apl functional symbol quad diamond";
			_charNames[(char)0x233B] = "apl functional symbol quad jot";
			_charNames[(char)0x233C] = "apl functional symbol quad circle";
			_charNames[(char)0x233D] = "apl functional symbol circle stile";
			_charNames[(char)0x233E] = "apl functional symbol circle jot";
			_charNames[(char)0x233F] = "apl functional symbol slash bar";
			_charNames[(char)0x2340] = "apl functional symbol backslash bar";
			_charNames[(char)0x2341] = "apl functional symbol quad slash";
			_charNames[(char)0x2342] = "apl functional symbol quad backslash";
			_charNames[(char)0x2343] = "apl functional symbol quad less-than";
			_charNames[(char)0x2344] = "apl functional symbol quad greater-than";
			_charNames[(char)0x2345] = "apl functional symbol leftwards vane";
			_charNames[(char)0x2346] = "apl functional symbol rightwards vane";
			_charNames[(char)0x2347] = "apl functional symbol quad leftwards arrow";
			_charNames[(char)0x2348] = "apl functional symbol quad rightwards arrow";
			_charNames[(char)0x2349] = "apl functional symbol circle backslash";
			_charNames[(char)0x234A] = "apl functional symbol down tack underbar";
			_charNames[(char)0x234B] = "apl functional symbol delta stile";
			_charNames[(char)0x234C] = "apl functional symbol quad down caret";
			_charNames[(char)0x234D] = "apl functional symbol quad delta";
			_charNames[(char)0x234E] = "apl functional symbol down tack jot";
			_charNames[(char)0x234F] = "apl functional symbol upwards vane";
			_charNames[(char)0x2350] = "apl functional symbol quad upwards arrow";
			_charNames[(char)0x2351] = "apl functional symbol up tack overbar";
			_charNames[(char)0x2352] = "apl functional symbol del stile";
			_charNames[(char)0x2353] = "apl functional symbol quad up caret";
			_charNames[(char)0x2354] = "apl functional symbol quad del";
			_charNames[(char)0x2355] = "apl functional symbol up tack jot";
			_charNames[(char)0x2356] = "apl functional symbol downwards vane";
			_charNames[(char)0x2357] = "apl functional symbol quad downwards arrow";
			_charNames[(char)0x2358] = "apl functional symbol quote underbar";
			_charNames[(char)0x2359] = "apl functional symbol delta underbar";
			_charNames[(char)0x235A] = "apl functional symbol diamond underbar";
			_charNames[(char)0x235B] = "apl functional symbol jot underbar";
			_charNames[(char)0x235C] = "apl functional symbol circle underbar";
			_charNames[(char)0x235D] = "apl functional symbol up shoe jot";
			_charNames[(char)0x235E] = "apl functional symbol quote quad";
			_charNames[(char)0x235F] = "apl functional symbol circle star";
			_charNames[(char)0x2360] = "apl functional symbol quad colon";
			_charNames[(char)0x2361] = "apl functional symbol up tack diaeresis";
			_charNames[(char)0x2362] = "apl functional symbol del diaeresis";
			_charNames[(char)0x2363] = "apl functional symbol star diaeresis";
			_charNames[(char)0x2364] = "apl functional symbol jot diaeresis";
			_charNames[(char)0x2365] = "apl functional symbol circle diaeresis";
			_charNames[(char)0x2366] = "apl functional symbol down shoe stile";
			_charNames[(char)0x2367] = "apl functional symbol left shoe stile";
			_charNames[(char)0x2368] = "apl functional symbol tilde diaeresis";
			_charNames[(char)0x2369] = "apl functional symbol greater-than diaeresis";
			_charNames[(char)0x236A] = "apl functional symbol comma bar";
			_charNames[(char)0x236B] = "apl functional symbol del tilde";
			_charNames[(char)0x236C] = "apl functional symbol zilde";
			_charNames[(char)0x236D] = "apl functional symbol stile tilde";
			_charNames[(char)0x236E] = "apl functional symbol semicolon underbar";
			_charNames[(char)0x236F] = "apl functional symbol quad not equal";
			_charNames[(char)0x2370] = "apl functional symbol quad question";
			_charNames[(char)0x2371] = "apl functional symbol down caret tilde";
			_charNames[(char)0x2372] = "apl functional symbol up caret tilde";
			_charNames[(char)0x2373] = "apl functional symbol iota";
			_charNames[(char)0x2374] = "apl functional symbol rho";
			_charNames[(char)0x2375] = "apl functional symbol omega";
			_charNames[(char)0x2376] = "apl functional symbol alpha underbar";
			_charNames[(char)0x2377] = "apl functional symbol epsilon underbar";
			_charNames[(char)0x2378] = "apl functional symbol iota underbar";
			_charNames[(char)0x2379] = "apl functional symbol omega underbar";
			_charNames[(char)0x237A] = "apl functional symbol alpha";
			_charNames[(char)0x237B] = "not check mark";
			_charNames[(char)0x237C] = "right angle with downwards zigzag arrow";
			_charNames[(char)0x237D] = "shouldered open box";
			_charNames[(char)0x237E] = "bell symbol";
			_charNames[(char)0x237F] = "vertical line with middle dot";
			_charNames[(char)0x2380] = "insertion symbol";
			_charNames[(char)0x2381] = "continuous underline symbol";
			_charNames[(char)0x2382] = "discontinuous underline symbol";
			_charNames[(char)0x2383] = "emphasis symbol";
			_charNames[(char)0x2384] = "composition symbol";
			_charNames[(char)0x2385] = "white square with centre vertical line";
			_charNames[(char)0x2386] = "enter symbol";
			_charNames[(char)0x2387] = "alternative key symbol";
			_charNames[(char)0x2388] = "helm symbol";
			_charNames[(char)0x2389] = "circled horizontal bar with notch";
			_charNames[(char)0x238A] = "circled triangle down";
			_charNames[(char)0x238B] = "broken circle with northwest arrow";
			_charNames[(char)0x238C] = "undo symbol";
			_charNames[(char)0x238D] = "monostable symbol";
			_charNames[(char)0x238E] = "hysteresis symbol";
			_charNames[(char)0x238F] = "open-circuit-output h-type symbol";
			_charNames[(char)0x2390] = "open-circuit-output l-type symbol";
			_charNames[(char)0x2391] = "passive-pull-down-output symbol";
			_charNames[(char)0x2392] = "passive-pull-up-output symbol";
			_charNames[(char)0x2393] = "direct current symbol form two";
			_charNames[(char)0x2394] = "software-function symbol";
			_charNames[(char)0x2395] = "apl functional symbol quad";
			_charNames[(char)0x2396] = "decimal separator key symbol";
			_charNames[(char)0x2397] = "previous page";
			_charNames[(char)0x2398] = "next page";
			_charNames[(char)0x2399] = "print screen symbol";
			_charNames[(char)0x239A] = "clear screen symbol";
			_charNames[(char)0x239B] = "left parenthesis upper hook";
			_charNames[(char)0x239C] = "left parenthesis extension";
			_charNames[(char)0x239D] = "left parenthesis lower hook";
			_charNames[(char)0x239E] = "right parenthesis upper hook";
			_charNames[(char)0x239F] = "right parenthesis extension";
			_charNames[(char)0x23A0] = "right parenthesis lower hook";
			_charNames[(char)0x23A1] = "left square bracket upper corner";
			_charNames[(char)0x23A2] = "left square bracket extension";
			_charNames[(char)0x23A3] = "left square bracket lower corner";
			_charNames[(char)0x23A4] = "right square bracket upper corner";
			_charNames[(char)0x23A5] = "right square bracket extension";
			_charNames[(char)0x23A6] = "right square bracket lower corner";
			_charNames[(char)0x23A7] = "left curly bracket upper hook";
			_charNames[(char)0x23A8] = "left curly bracket middle piece";
			_charNames[(char)0x23A9] = "left curly bracket lower hook";
			_charNames[(char)0x23AA] = "curly bracket extension";
			_charNames[(char)0x23AB] = "right curly bracket upper hook";
			_charNames[(char)0x23AC] = "right curly bracket middle piece";
			_charNames[(char)0x23AD] = "right curly bracket lower hook";
			_charNames[(char)0x23AE] = "integral extension";
			_charNames[(char)0x23AF] = "horizontal line extension";
			_charNames[(char)0x23B0] = "upper left or lower right curly bracket section";
			_charNames[(char)0x23B1] = "upper right or lower left curly bracket section";
			_charNames[(char)0x23B2] = "summation top";
			_charNames[(char)0x23B3] = "summation bottom";
			_charNames[(char)0x23B4] = "top square bracket";
			_charNames[(char)0x23B5] = "bottom square bracket";
			_charNames[(char)0x23B6] = "bottom square bracket over top square bracket";
			_charNames[(char)0x23B7] = "radical symbol bottom";
			_charNames[(char)0x23B8] = "left vertical box line";
			_charNames[(char)0x23B9] = "right vertical box line";
			_charNames[(char)0x23BA] = "horizontal scan line-1";
			_charNames[(char)0x23BB] = "horizontal scan line-3";
			_charNames[(char)0x23BC] = "horizontal scan line-7";
			_charNames[(char)0x23BD] = "horizontal scan line-9";
			_charNames[(char)0x23BE] = "dentistry symbol light vertical and top right";
			_charNames[(char)0x23BF] = "dentistry symbol light vertical and bottom right";
			_charNames[(char)0x23C0] = "dentistry symbol light vertical with circle";
			_charNames[(char)0x23C1] = "dentistry symbol light down and horizontal with circle";
			_charNames[(char)0x23C2] = "dentistry symbol light up and horizontal with circle";
			_charNames[(char)0x23C3] = "dentistry symbol light vertical with triangle";
			_charNames[(char)0x23C4] = "dentistry symbol light down and horizontal with triangle";
			_charNames[(char)0x23C5] = "dentistry symbol light up and horizontal with triangle";
			_charNames[(char)0x23C6] = "dentistry symbol light vertical and wave";
			_charNames[(char)0x23C7] = "dentistry symbol light down and horizontal with wave";
			_charNames[(char)0x23C8] = "dentistry symbol light up and horizontal with wave";
			_charNames[(char)0x23C9] = "dentistry symbol light down and horizontal";
			_charNames[(char)0x23CA] = "dentistry symbol light up and horizontal";
			_charNames[(char)0x23CB] = "dentistry symbol light vertical and top left";
			_charNames[(char)0x23CC] = "dentistry symbol light vertical and bottom left";
			_charNames[(char)0x23CD] = "square foot";
			_charNames[(char)0x23CE] = "return symbol";
			_charNames[(char)0x23CF] = "eject symbol";
			_charNames[(char)0x23D0] = "vertical line extension";
			_charNames[(char)0x23D1] = "metrical breve";
			_charNames[(char)0x23D2] = "metrical long over short";
			_charNames[(char)0x23D3] = "metrical short over long";
			_charNames[(char)0x23D4] = "metrical long over two shorts";
			_charNames[(char)0x23D5] = "metrical two shorts over long";
			_charNames[(char)0x23D6] = "metrical two shorts joined";
			_charNames[(char)0x23D7] = "metrical triseme";
			_charNames[(char)0x23D8] = "metrical tetraseme";
			_charNames[(char)0x23D9] = "metrical pentaseme";
			_charNames[(char)0x23DA] = "earth ground";
			_charNames[(char)0x23DB] = "fuse";
			_charNames[(char)0x2400] = "symbol for null";
			_charNames[(char)0x2401] = "symbol for start of heading";
			_charNames[(char)0x2402] = "symbol for start of text";
			_charNames[(char)0x2403] = "symbol for end of text";
			_charNames[(char)0x2404] = "symbol for end of transmission";
			_charNames[(char)0x2405] = "symbol for enquiry";
			_charNames[(char)0x2406] = "symbol for acknowledge";
			_charNames[(char)0x2407] = "symbol for bell";
			_charNames[(char)0x2408] = "symbol for backspace";
			_charNames[(char)0x2409] = "symbol for horizontal tabulation";
			_charNames[(char)0x240A] = "symbol for line feed";
			_charNames[(char)0x240B] = "symbol for vertical tabulation";
			_charNames[(char)0x240C] = "symbol for form feed";
			_charNames[(char)0x240D] = "symbol for carriage return";
			_charNames[(char)0x240E] = "symbol for shift out";
			_charNames[(char)0x240F] = "symbol for shift in";
			_charNames[(char)0x2410] = "symbol for data link escape";
			_charNames[(char)0x2411] = "symbol for device control one";
			_charNames[(char)0x2412] = "symbol for device control two";
			_charNames[(char)0x2413] = "symbol for device control three";
			_charNames[(char)0x2414] = "symbol for device control four";
			_charNames[(char)0x2415] = "symbol for negative acknowledge";
			_charNames[(char)0x2416] = "symbol for synchronous idle";
			_charNames[(char)0x2417] = "symbol for end of transmission block";
			_charNames[(char)0x2418] = "symbol for cancel";
			_charNames[(char)0x2419] = "symbol for end of medium";
			_charNames[(char)0x241A] = "symbol for substitute";
			_charNames[(char)0x241B] = "symbol for escape";
			_charNames[(char)0x241C] = "symbol for file separator";
			_charNames[(char)0x241D] = "symbol for group separator";
			_charNames[(char)0x241E] = "symbol for record separator";
			_charNames[(char)0x241F] = "symbol for unit separator";
			_charNames[(char)0x2420] = "symbol for space";
			_charNames[(char)0x2421] = "symbol for delete";
			_charNames[(char)0x2422] = "blank symbol";
			_charNames[(char)0x2423] = "open box";
			_charNames[(char)0x2424] = "symbol for newline";
			_charNames[(char)0x2425] = "symbol for delete form two";
			_charNames[(char)0x2426] = "symbol for substitute form two";
			_charNames[(char)0x2440] = "ocr hook";
			_charNames[(char)0x2441] = "ocr chair";
			_charNames[(char)0x2442] = "ocr fork";
			_charNames[(char)0x2443] = "ocr inverted fork";
			_charNames[(char)0x2444] = "ocr belt buckle";
			_charNames[(char)0x2445] = "ocr bow tie";
			_charNames[(char)0x2446] = "ocr branch bank identification";
			_charNames[(char)0x2447] = "ocr amount of check";
			_charNames[(char)0x2448] = "ocr dash";
			_charNames[(char)0x2449] = "ocr customer account number";
			_charNames[(char)0x244A] = "ocr double backslash";
			_charNames[(char)0x2460] = "circled digit one";
			_charNames[(char)0x2461] = "circled digit two";
			_charNames[(char)0x2462] = "circled digit three";
			_charNames[(char)0x2463] = "circled digit four";
			_charNames[(char)0x2464] = "circled digit five";
			_charNames[(char)0x2465] = "circled digit six";
			_charNames[(char)0x2466] = "circled digit seven";
			_charNames[(char)0x2467] = "circled digit eight";
			_charNames[(char)0x2468] = "circled digit nine";
			_charNames[(char)0x2469] = "circled number ten";
			_charNames[(char)0x246A] = "circled number eleven";
			_charNames[(char)0x246B] = "circled number twelve";
			_charNames[(char)0x246C] = "circled number thirteen";
			_charNames[(char)0x246D] = "circled number fourteen";
			_charNames[(char)0x246E] = "circled number fifteen";
			_charNames[(char)0x246F] = "circled number sixteen";
			_charNames[(char)0x2470] = "circled number seventeen";
			_charNames[(char)0x2471] = "circled number eighteen";
			_charNames[(char)0x2472] = "circled number nineteen";
			_charNames[(char)0x2473] = "circled number twenty";
			_charNames[(char)0x2474] = "parenthesized digit one";
			_charNames[(char)0x2475] = "parenthesized digit two";
			_charNames[(char)0x2476] = "parenthesized digit three";
			_charNames[(char)0x2477] = "parenthesized digit four";
			_charNames[(char)0x2478] = "parenthesized digit five";
			_charNames[(char)0x2479] = "parenthesized digit six";
			_charNames[(char)0x247A] = "parenthesized digit seven";
			_charNames[(char)0x247B] = "parenthesized digit eight";
			_charNames[(char)0x247C] = "parenthesized digit nine";
			_charNames[(char)0x247D] = "parenthesized number ten";
			_charNames[(char)0x247E] = "parenthesized number eleven";
			_charNames[(char)0x247F] = "parenthesized number twelve";
			_charNames[(char)0x2480] = "parenthesized number thirteen";
			_charNames[(char)0x2481] = "parenthesized number fourteen";
			_charNames[(char)0x2482] = "parenthesized number fifteen";
			_charNames[(char)0x2483] = "parenthesized number sixteen";
			_charNames[(char)0x2484] = "parenthesized number seventeen";
			_charNames[(char)0x2485] = "parenthesized number eighteen";
			_charNames[(char)0x2486] = "parenthesized number nineteen";
			_charNames[(char)0x2487] = "parenthesized number twenty";
			_charNames[(char)0x2488] = "digit one full stop";
			_charNames[(char)0x2489] = "digit two full stop";
			_charNames[(char)0x248A] = "digit three full stop";
			_charNames[(char)0x248B] = "digit four full stop";
			_charNames[(char)0x248C] = "digit five full stop";
			_charNames[(char)0x248D] = "digit six full stop";
			_charNames[(char)0x248E] = "digit seven full stop";
			_charNames[(char)0x248F] = "digit eight full stop";
			_charNames[(char)0x2490] = "digit nine full stop";
			_charNames[(char)0x2491] = "number ten full stop";
			_charNames[(char)0x2492] = "number eleven full stop";
			_charNames[(char)0x2493] = "number twelve full stop";
			_charNames[(char)0x2494] = "number thirteen full stop";
			_charNames[(char)0x2495] = "number fourteen full stop";
			_charNames[(char)0x2496] = "number fifteen full stop";
			_charNames[(char)0x2497] = "number sixteen full stop";
			_charNames[(char)0x2498] = "number seventeen full stop";
			_charNames[(char)0x2499] = "number eighteen full stop";
			_charNames[(char)0x249A] = "number nineteen full stop";
			_charNames[(char)0x249B] = "number twenty full stop";
			_charNames[(char)0x249C] = "parenthesized latin small letter a";
			_charNames[(char)0x249D] = "parenthesized latin small letter b";
			_charNames[(char)0x249E] = "parenthesized latin small letter c";
			_charNames[(char)0x249F] = "parenthesized latin small letter d";
			_charNames[(char)0x24A0] = "parenthesized latin small letter e";
			_charNames[(char)0x24A1] = "parenthesized latin small letter f";
			_charNames[(char)0x24A2] = "parenthesized latin small letter g";
			_charNames[(char)0x24A3] = "parenthesized latin small letter h";
			_charNames[(char)0x24A4] = "parenthesized latin small letter i";
			_charNames[(char)0x24A5] = "parenthesized latin small letter j";
			_charNames[(char)0x24A6] = "parenthesized latin small letter k";
			_charNames[(char)0x24A7] = "parenthesized latin small letter l";
			_charNames[(char)0x24A8] = "parenthesized latin small letter m";
			_charNames[(char)0x24A9] = "parenthesized latin small letter n";
			_charNames[(char)0x24AA] = "parenthesized latin small letter o";
			_charNames[(char)0x24AB] = "parenthesized latin small letter p";
			_charNames[(char)0x24AC] = "parenthesized latin small letter q";
			_charNames[(char)0x24AD] = "parenthesized latin small letter r";
			_charNames[(char)0x24AE] = "parenthesized latin small letter s";
			_charNames[(char)0x24AF] = "parenthesized latin small letter t";
			_charNames[(char)0x24B0] = "parenthesized latin small letter u";
			_charNames[(char)0x24B1] = "parenthesized latin small letter v";
			_charNames[(char)0x24B2] = "parenthesized latin small letter w";
			_charNames[(char)0x24B3] = "parenthesized latin small letter x";
			_charNames[(char)0x24B4] = "parenthesized latin small letter y";
			_charNames[(char)0x24B5] = "parenthesized latin small letter z";
			_charNames[(char)0x24B6] = "circled latin capital letter a";
			_charNames[(char)0x24B7] = "circled latin capital letter b";
			_charNames[(char)0x24B8] = "circled latin capital letter c";
			_charNames[(char)0x24B9] = "circled latin capital letter d";
			_charNames[(char)0x24BA] = "circled latin capital letter e";
			_charNames[(char)0x24BB] = "circled latin capital letter f";
			_charNames[(char)0x24BC] = "circled latin capital letter g";
			_charNames[(char)0x24BD] = "circled latin capital letter h";
			_charNames[(char)0x24BE] = "circled latin capital letter i";
			_charNames[(char)0x24BF] = "circled latin capital letter j";
			_charNames[(char)0x24C0] = "circled latin capital letter k";
			_charNames[(char)0x24C1] = "circled latin capital letter l";
			_charNames[(char)0x24C2] = "circled latin capital letter m";
			_charNames[(char)0x24C3] = "circled latin capital letter n";
			_charNames[(char)0x24C4] = "circled latin capital letter o";
			_charNames[(char)0x24C5] = "circled latin capital letter p";
			_charNames[(char)0x24C6] = "circled latin capital letter q";
			_charNames[(char)0x24C7] = "circled latin capital letter r";
			_charNames[(char)0x24C8] = "circled latin capital letter s";
			_charNames[(char)0x24C9] = "circled latin capital letter t";
			_charNames[(char)0x24CA] = "circled latin capital letter u";
			_charNames[(char)0x24CB] = "circled latin capital letter v";
			_charNames[(char)0x24CC] = "circled latin capital letter w";
			_charNames[(char)0x24CD] = "circled latin capital letter x";
			_charNames[(char)0x24CE] = "circled latin capital letter y";
			_charNames[(char)0x24CF] = "circled latin capital letter z";
			_charNames[(char)0x24D0] = "circled latin small letter a";
			_charNames[(char)0x24D1] = "circled latin small letter b";
			_charNames[(char)0x24D2] = "circled latin small letter c";
			_charNames[(char)0x24D3] = "circled latin small letter d";
			_charNames[(char)0x24D4] = "circled latin small letter e";
			_charNames[(char)0x24D5] = "circled latin small letter f";
			_charNames[(char)0x24D6] = "circled latin small letter g";
			_charNames[(char)0x24D7] = "circled latin small letter h";
			_charNames[(char)0x24D8] = "circled latin small letter i";
			_charNames[(char)0x24D9] = "circled latin small letter j";
			_charNames[(char)0x24DA] = "circled latin small letter k";
			_charNames[(char)0x24DB] = "circled latin small letter l";
			_charNames[(char)0x24DC] = "circled latin small letter m";
			_charNames[(char)0x24DD] = "circled latin small letter n";
			_charNames[(char)0x24DE] = "circled latin small letter o";
			_charNames[(char)0x24DF] = "circled latin small letter p";
			_charNames[(char)0x24E0] = "circled latin small letter q";
			_charNames[(char)0x24E1] = "circled latin small letter r";
			_charNames[(char)0x24E2] = "circled latin small letter s";
			_charNames[(char)0x24E3] = "circled latin small letter t";
			_charNames[(char)0x24E4] = "circled latin small letter u";
			_charNames[(char)0x24E5] = "circled latin small letter v";
			_charNames[(char)0x24E6] = "circled latin small letter w";
			_charNames[(char)0x24E7] = "circled latin small letter x";
			_charNames[(char)0x24E8] = "circled latin small letter y";
			_charNames[(char)0x24E9] = "circled latin small letter z";
			_charNames[(char)0x24EA] = "circled digit zero";
			_charNames[(char)0x24EB] = "negative circled number eleven";
			_charNames[(char)0x24EC] = "negative circled number twelve";
			_charNames[(char)0x24ED] = "negative circled number thirteen";
			_charNames[(char)0x24EE] = "negative circled number fourteen";
			_charNames[(char)0x24EF] = "negative circled number fifteen";
			_charNames[(char)0x24F0] = "negative circled number sixteen";
			_charNames[(char)0x24F1] = "negative circled number seventeen";
			_charNames[(char)0x24F2] = "negative circled number eighteen";
			_charNames[(char)0x24F3] = "negative circled number nineteen";
			_charNames[(char)0x24F4] = "negative circled number twenty";
			_charNames[(char)0x24F5] = "double circled digit one";
			_charNames[(char)0x24F6] = "double circled digit two";
			_charNames[(char)0x24F7] = "double circled digit three";
			_charNames[(char)0x24F8] = "double circled digit four";
			_charNames[(char)0x24F9] = "double circled digit five";
			_charNames[(char)0x24FA] = "double circled digit six";
			_charNames[(char)0x24FB] = "double circled digit seven";
			_charNames[(char)0x24FC] = "double circled digit eight";
			_charNames[(char)0x24FD] = "double circled digit nine";
			_charNames[(char)0x24FE] = "double circled number ten";
			_charNames[(char)0x24FF] = "negative circled digit zero";
			_charNames[(char)0x2500] = "box drawings light horizontal";
			_charNames[(char)0x2501] = "box drawings heavy horizontal";
			_charNames[(char)0x2502] = "box drawings light vertical";
			_charNames[(char)0x2503] = "box drawings heavy vertical";
			_charNames[(char)0x2504] = "box drawings light triple dash horizontal";
			_charNames[(char)0x2505] = "box drawings heavy triple dash horizontal";
			_charNames[(char)0x2506] = "box drawings light triple dash vertical";
			_charNames[(char)0x2507] = "box drawings heavy triple dash vertical";
			_charNames[(char)0x2508] = "box drawings light quadruple dash horizontal";
			_charNames[(char)0x2509] = "box drawings heavy quadruple dash horizontal";
			_charNames[(char)0x250A] = "box drawings light quadruple dash vertical";
			_charNames[(char)0x250B] = "box drawings heavy quadruple dash vertical";
			_charNames[(char)0x250C] = "box drawings light down and right";
			_charNames[(char)0x250D] = "box drawings down light and right heavy";
			_charNames[(char)0x250E] = "box drawings down heavy and right light";
			_charNames[(char)0x250F] = "box drawings heavy down and right";
			_charNames[(char)0x2510] = "box drawings light down and left";
			_charNames[(char)0x2511] = "box drawings down light and left heavy";
			_charNames[(char)0x2512] = "box drawings down heavy and left light";
			_charNames[(char)0x2513] = "box drawings heavy down and left";
			_charNames[(char)0x2514] = "box drawings light up and right";
			_charNames[(char)0x2515] = "box drawings up light and right heavy";
			_charNames[(char)0x2516] = "box drawings up heavy and right light";
			_charNames[(char)0x2517] = "box drawings heavy up and right";
			_charNames[(char)0x2518] = "box drawings light up and left";
			_charNames[(char)0x2519] = "box drawings up light and left heavy";
			_charNames[(char)0x251A] = "box drawings up heavy and left light";
			_charNames[(char)0x251B] = "box drawings heavy up and left";
			_charNames[(char)0x251C] = "box drawings light vertical and right";
			_charNames[(char)0x251D] = "box drawings vertical light and right heavy";
			_charNames[(char)0x251E] = "box drawings up heavy and right down light";
			_charNames[(char)0x251F] = "box drawings down heavy and right up light";
			_charNames[(char)0x2520] = "box drawings vertical heavy and right light";
			_charNames[(char)0x2521] = "box drawings down light and right up heavy";
			_charNames[(char)0x2522] = "box drawings up light and right down heavy";
			_charNames[(char)0x2523] = "box drawings heavy vertical and right";
			_charNames[(char)0x2524] = "box drawings light vertical and left";
			_charNames[(char)0x2525] = "box drawings vertical light and left heavy";
			_charNames[(char)0x2526] = "box drawings up heavy and left down light";
			_charNames[(char)0x2527] = "box drawings down heavy and left up light";
			_charNames[(char)0x2528] = "box drawings vertical heavy and left light";
			_charNames[(char)0x2529] = "box drawings down light and left up heavy";
			_charNames[(char)0x252A] = "box drawings up light and left down heavy";
			_charNames[(char)0x252B] = "box drawings heavy vertical and left";
			_charNames[(char)0x252C] = "box drawings light down and horizontal";
			_charNames[(char)0x252D] = "box drawings left heavy and right down light";
			_charNames[(char)0x252E] = "box drawings right heavy and left down light";
			_charNames[(char)0x252F] = "box drawings down light and horizontal heavy";
			_charNames[(char)0x2530] = "box drawings down heavy and horizontal light";
			_charNames[(char)0x2531] = "box drawings right light and left down heavy";
			_charNames[(char)0x2532] = "box drawings left light and right down heavy";
			_charNames[(char)0x2533] = "box drawings heavy down and horizontal";
			_charNames[(char)0x2534] = "box drawings light up and horizontal";
			_charNames[(char)0x2535] = "box drawings left heavy and right up light";
			_charNames[(char)0x2536] = "box drawings right heavy and left up light";
			_charNames[(char)0x2537] = "box drawings up light and horizontal heavy";
			_charNames[(char)0x2538] = "box drawings up heavy and horizontal light";
			_charNames[(char)0x2539] = "box drawings right light and left up heavy";
			_charNames[(char)0x253A] = "box drawings left light and right up heavy";
			_charNames[(char)0x253B] = "box drawings heavy up and horizontal";
			_charNames[(char)0x253C] = "box drawings light vertical and horizontal";
			_charNames[(char)0x253D] = "box drawings left heavy and right vertical light";
			_charNames[(char)0x253E] = "box drawings right heavy and left vertical light";
			_charNames[(char)0x253F] = "box drawings vertical light and horizontal heavy";
			_charNames[(char)0x2540] = "box drawings up heavy and down horizontal light";
			_charNames[(char)0x2541] = "box drawings down heavy and up horizontal light";
			_charNames[(char)0x2542] = "box drawings vertical heavy and horizontal light";
			_charNames[(char)0x2543] = "box drawings left up heavy and right down light";
			_charNames[(char)0x2544] = "box drawings right up heavy and left down light";
			_charNames[(char)0x2545] = "box drawings left down heavy and right up light";
			_charNames[(char)0x2546] = "box drawings right down heavy and left up light";
			_charNames[(char)0x2547] = "box drawings down light and up horizontal heavy";
			_charNames[(char)0x2548] = "box drawings up light and down horizontal heavy";
			_charNames[(char)0x2549] = "box drawings right light and left vertical heavy";
			_charNames[(char)0x254A] = "box drawings left light and right vertical heavy";
			_charNames[(char)0x254B] = "box drawings heavy vertical and horizontal";
			_charNames[(char)0x254C] = "box drawings light double dash horizontal";
			_charNames[(char)0x254D] = "box drawings heavy double dash horizontal";
			_charNames[(char)0x254E] = "box drawings light double dash vertical";
			_charNames[(char)0x254F] = "box drawings heavy double dash vertical";
			_charNames[(char)0x2550] = "box drawings double horizontal";
			_charNames[(char)0x2551] = "box drawings double vertical";
			_charNames[(char)0x2552] = "box drawings down single and right double";
			_charNames[(char)0x2553] = "box drawings down double and right single";
			_charNames[(char)0x2554] = "box drawings double down and right";
			_charNames[(char)0x2555] = "box drawings down single and left double";
			_charNames[(char)0x2556] = "box drawings down double and left single";
			_charNames[(char)0x2557] = "box drawings double down and left";
			_charNames[(char)0x2558] = "box drawings up single and right double";
			_charNames[(char)0x2559] = "box drawings up double and right single";
			_charNames[(char)0x255A] = "box drawings double up and right";
			_charNames[(char)0x255B] = "box drawings up single and left double";
			_charNames[(char)0x255C] = "box drawings up double and left single";
			_charNames[(char)0x255D] = "box drawings double up and left";
			_charNames[(char)0x255E] = "box drawings vertical single and right double";
			_charNames[(char)0x255F] = "box drawings vertical double and right single";
			_charNames[(char)0x2560] = "box drawings double vertical and right";
			_charNames[(char)0x2561] = "box drawings vertical single and left double";
			_charNames[(char)0x2562] = "box drawings vertical double and left single";
			_charNames[(char)0x2563] = "box drawings double vertical and left";
			_charNames[(char)0x2564] = "box drawings down single and horizontal double";
			_charNames[(char)0x2565] = "box drawings down double and horizontal single";
			_charNames[(char)0x2566] = "box drawings double down and horizontal";
			_charNames[(char)0x2567] = "box drawings up single and horizontal double";
			_charNames[(char)0x2568] = "box drawings up double and horizontal single";
			_charNames[(char)0x2569] = "box drawings double up and horizontal";
			_charNames[(char)0x256A] = "box drawings vertical single and horizontal double";
			_charNames[(char)0x256B] = "box drawings vertical double and horizontal single";
			_charNames[(char)0x256C] = "box drawings double vertical and horizontal";
			_charNames[(char)0x256D] = "box drawings light arc down and right";
			_charNames[(char)0x256E] = "box drawings light arc down and left";
			_charNames[(char)0x256F] = "box drawings light arc up and left";
			_charNames[(char)0x2570] = "box drawings light arc up and right";
			_charNames[(char)0x2571] = "box drawings light diagonal upper right to lower left";
			_charNames[(char)0x2572] = "box drawings light diagonal upper left to lower right";
			_charNames[(char)0x2573] = "box drawings light diagonal cross";
			_charNames[(char)0x2574] = "box drawings light left";
			_charNames[(char)0x2575] = "box drawings light up";
			_charNames[(char)0x2576] = "box drawings light right";
			_charNames[(char)0x2577] = "box drawings light down";
			_charNames[(char)0x2578] = "box drawings heavy left";
			_charNames[(char)0x2579] = "box drawings heavy up";
			_charNames[(char)0x257A] = "box drawings heavy right";
			_charNames[(char)0x257B] = "box drawings heavy down";
			_charNames[(char)0x257C] = "box drawings light left and heavy right";
			_charNames[(char)0x257D] = "box drawings light up and heavy down";
			_charNames[(char)0x257E] = "box drawings heavy left and light right";
			_charNames[(char)0x257F] = "box drawings heavy up and light down";
			_charNames[(char)0x2580] = "upper half block";
			_charNames[(char)0x2581] = "lower one eighth block";
			_charNames[(char)0x2582] = "lower one quarter block";
			_charNames[(char)0x2583] = "lower three eighths block";
			_charNames[(char)0x2584] = "lower half block";
			_charNames[(char)0x2585] = "lower five eighths block";
			_charNames[(char)0x2586] = "lower three quarters block";
			_charNames[(char)0x2587] = "lower seven eighths block";
			_charNames[(char)0x2588] = "full block";
			_charNames[(char)0x2589] = "left seven eighths block";
			_charNames[(char)0x258A] = "left three quarters block";
			_charNames[(char)0x258B] = "left five eighths block";
			_charNames[(char)0x258C] = "left half block";
			_charNames[(char)0x258D] = "left three eighths block";
			_charNames[(char)0x258E] = "left one quarter block";
			_charNames[(char)0x258F] = "left one eighth block";
			_charNames[(char)0x2590] = "right half block";
			_charNames[(char)0x2591] = "light shade";
			_charNames[(char)0x2592] = "medium shade";
			_charNames[(char)0x2593] = "dark shade";
			_charNames[(char)0x2594] = "upper one eighth block";
			_charNames[(char)0x2595] = "right one eighth block";
			_charNames[(char)0x2596] = "quadrant lower left";
			_charNames[(char)0x2597] = "quadrant lower right";
			_charNames[(char)0x2598] = "quadrant upper left";
			_charNames[(char)0x2599] = "quadrant upper left and lower left and lower right";
			_charNames[(char)0x259A] = "quadrant upper left and lower right";
			_charNames[(char)0x259B] = "quadrant upper left and upper right and lower left";
			_charNames[(char)0x259C] = "quadrant upper left and upper right and lower right";
			_charNames[(char)0x259D] = "quadrant upper right";
			_charNames[(char)0x259E] = "quadrant upper right and lower left";
			_charNames[(char)0x259F] = "quadrant upper right and lower left and lower right";
			_charNames[(char)0x25A0] = "black square";
			_charNames[(char)0x25A1] = "white square";
			_charNames[(char)0x25A2] = "white square with rounded corners";
			_charNames[(char)0x25A3] = "white square containing black small square";
			_charNames[(char)0x25A4] = "square with horizontal fill";
			_charNames[(char)0x25A5] = "square with vertical fill";
			_charNames[(char)0x25A6] = "square with orthogonal crosshatch fill";
			_charNames[(char)0x25A7] = "square with upper left to lower right fill";
			_charNames[(char)0x25A8] = "square with upper right to lower left fill";
			_charNames[(char)0x25A9] = "square with diagonal crosshatch fill";
			_charNames[(char)0x25AA] = "black small square";
			_charNames[(char)0x25AB] = "white small square";
			_charNames[(char)0x25AC] = "black rectangle";
			_charNames[(char)0x25AD] = "white rectangle";
			_charNames[(char)0x25AE] = "black vertical rectangle";
			_charNames[(char)0x25AF] = "white vertical rectangle";
			_charNames[(char)0x25B0] = "black parallelogram";
			_charNames[(char)0x25B1] = "white parallelogram";
			_charNames[(char)0x25B2] = "black up-pointing triangle";
			_charNames[(char)0x25B3] = "white up-pointing triangle";
			_charNames[(char)0x25B4] = "black up-pointing small triangle";
			_charNames[(char)0x25B5] = "white up-pointing small triangle";
			_charNames[(char)0x25B6] = "black right-pointing triangle";
			_charNames[(char)0x25B7] = "white right-pointing triangle";
			_charNames[(char)0x25B8] = "black right-pointing small triangle";
			_charNames[(char)0x25B9] = "white right-pointing small triangle";
			_charNames[(char)0x25BA] = "black right-pointing pointer";
			_charNames[(char)0x25BB] = "white right-pointing pointer";
			_charNames[(char)0x25BC] = "black down-pointing triangle";
			_charNames[(char)0x25BD] = "white down-pointing triangle";
			_charNames[(char)0x25BE] = "black down-pointing small triangle";
			_charNames[(char)0x25BF] = "white down-pointing small triangle";
			_charNames[(char)0x25C0] = "black left-pointing triangle";
			_charNames[(char)0x25C1] = "white left-pointing triangle";
			_charNames[(char)0x25C2] = "black left-pointing small triangle";
			_charNames[(char)0x25C3] = "white left-pointing small triangle";
			_charNames[(char)0x25C4] = "black left-pointing pointer";
			_charNames[(char)0x25C5] = "white left-pointing pointer";
			_charNames[(char)0x25C6] = "black diamond";
			_charNames[(char)0x25C7] = "white diamond";
			_charNames[(char)0x25C8] = "white diamond containing black small diamond";
			_charNames[(char)0x25C9] = "fisheye";
			_charNames[(char)0x25CA] = "lozenge";
			_charNames[(char)0x25CB] = "white circle";
			_charNames[(char)0x25CC] = "dotted circle";
			_charNames[(char)0x25CD] = "circle with vertical fill";
			_charNames[(char)0x25CE] = "bullseye";
			_charNames[(char)0x25CF] = "black circle";
			_charNames[(char)0x25D0] = "circle with left half black";
			_charNames[(char)0x25D1] = "circle with right half black";
			_charNames[(char)0x25D2] = "circle with lower half black";
			_charNames[(char)0x25D3] = "circle with upper half black";
			_charNames[(char)0x25D4] = "circle with upper right quadrant black";
			_charNames[(char)0x25D5] = "circle with all but upper left quadrant black";
			_charNames[(char)0x25D6] = "left half black circle";
			_charNames[(char)0x25D7] = "right half black circle";
			_charNames[(char)0x25D8] = "inverse bullet";
			_charNames[(char)0x25D9] = "inverse white circle";
			_charNames[(char)0x25DA] = "upper half inverse white circle";
			_charNames[(char)0x25DB] = "lower half inverse white circle";
			_charNames[(char)0x25DC] = "upper left quadrant circular arc";
			_charNames[(char)0x25DD] = "upper right quadrant circular arc";
			_charNames[(char)0x25DE] = "lower right quadrant circular arc";
			_charNames[(char)0x25DF] = "lower left quadrant circular arc";
			_charNames[(char)0x25E0] = "upper half circle";
			_charNames[(char)0x25E1] = "lower half circle";
			_charNames[(char)0x25E2] = "black lower right triangle";
			_charNames[(char)0x25E3] = "black lower left triangle";
			_charNames[(char)0x25E4] = "black upper left triangle";
			_charNames[(char)0x25E5] = "black upper right triangle";
			_charNames[(char)0x25E6] = "white bullet";
			_charNames[(char)0x25E7] = "square with left half black";
			_charNames[(char)0x25E8] = "square with right half black";
			_charNames[(char)0x25E9] = "square with upper left diagonal half black";
			_charNames[(char)0x25EA] = "square with lower right diagonal half black";
			_charNames[(char)0x25EB] = "white square with vertical bisecting line";
			_charNames[(char)0x25EC] = "white up-pointing triangle with dot";
			_charNames[(char)0x25ED] = "up-pointing triangle with left half black";
			_charNames[(char)0x25EE] = "up-pointing triangle with right half black";
			_charNames[(char)0x25EF] = "large circle";
			_charNames[(char)0x25F0] = "white square with upper left quadrant";
			_charNames[(char)0x25F1] = "white square with lower left quadrant";
			_charNames[(char)0x25F2] = "white square with lower right quadrant";
			_charNames[(char)0x25F3] = "white square with upper right quadrant";
			_charNames[(char)0x25F4] = "white circle with upper left quadrant";
			_charNames[(char)0x25F5] = "white circle with lower left quadrant";
			_charNames[(char)0x25F6] = "white circle with lower right quadrant";
			_charNames[(char)0x25F7] = "white circle with upper right quadrant";
			_charNames[(char)0x25F8] = "upper left triangle";
			_charNames[(char)0x25F9] = "upper right triangle";
			_charNames[(char)0x25FA] = "lower left triangle";
			_charNames[(char)0x25FB] = "white medium square";
			_charNames[(char)0x25FC] = "black medium square";
			_charNames[(char)0x25FD] = "white medium small square";
			_charNames[(char)0x25FE] = "black medium small square";
			_charNames[(char)0x25FF] = "lower right triangle";
			_charNames[(char)0x2600] = "black sun with rays";
			_charNames[(char)0x2601] = "cloud";
			_charNames[(char)0x2602] = "umbrella";
			_charNames[(char)0x2603] = "snowman";
			_charNames[(char)0x2604] = "comet";
			_charNames[(char)0x2605] = "black star";
			_charNames[(char)0x2606] = "white star";
			_charNames[(char)0x2607] = "lightning";
			_charNames[(char)0x2608] = "thunderstorm";
			_charNames[(char)0x2609] = "sun";
			_charNames[(char)0x260A] = "ascending node";
			_charNames[(char)0x260B] = "descending node";
			_charNames[(char)0x260C] = "conjunction";
			_charNames[(char)0x260D] = "opposition";
			_charNames[(char)0x260E] = "black telephone";
			_charNames[(char)0x260F] = "white telephone";
			_charNames[(char)0x2610] = "ballot box";
			_charNames[(char)0x2611] = "ballot box with check";
			_charNames[(char)0x2612] = "ballot box with x";
			_charNames[(char)0x2613] = "saltire";
			_charNames[(char)0x2614] = "umbrella with rain drops";
			_charNames[(char)0x2615] = "hot beverage";
			_charNames[(char)0x2616] = "white shogi piece";
			_charNames[(char)0x2617] = "black shogi piece";
			_charNames[(char)0x2618] = "shamrock";
			_charNames[(char)0x2619] = "reversed rotated floral heart bullet";
			_charNames[(char)0x261A] = "black left pointing index";
			_charNames[(char)0x261B] = "black right pointing index";
			_charNames[(char)0x261C] = "white left pointing index";
			_charNames[(char)0x261D] = "white up pointing index";
			_charNames[(char)0x261E] = "white right pointing index";
			_charNames[(char)0x261F] = "white down pointing index";
			_charNames[(char)0x2620] = "skull and crossbones";
			_charNames[(char)0x2621] = "caution sign";
			_charNames[(char)0x2622] = "radioactive sign";
			_charNames[(char)0x2623] = "biohazard sign";
			_charNames[(char)0x2624] = "caduceus";
			_charNames[(char)0x2625] = "ankh";
			_charNames[(char)0x2626] = "orthodox cross";
			_charNames[(char)0x2627] = "chi rho";
			_charNames[(char)0x2628] = "cross of lorraine";
			_charNames[(char)0x2629] = "cross of jerusalem";
			_charNames[(char)0x262A] = "star and crescent";
			_charNames[(char)0x262B] = "farsi symbol";
			_charNames[(char)0x262C] = "adi shakti";
			_charNames[(char)0x262D] = "hammer and sickle";
			_charNames[(char)0x262E] = "peace symbol";
			_charNames[(char)0x262F] = "yin yang";
			_charNames[(char)0x2630] = "trigram for heaven";
			_charNames[(char)0x2631] = "trigram for lake";
			_charNames[(char)0x2632] = "trigram for fire";
			_charNames[(char)0x2633] = "trigram for thunder";
			_charNames[(char)0x2634] = "trigram for wind";
			_charNames[(char)0x2635] = "trigram for water";
			_charNames[(char)0x2636] = "trigram for mountain";
			_charNames[(char)0x2637] = "trigram for earth";
			_charNames[(char)0x2638] = "wheel of dharma";
			_charNames[(char)0x2639] = "white frowning face";
			_charNames[(char)0x263A] = "white smiling face";
			_charNames[(char)0x263B] = "black smiling face";
			_charNames[(char)0x263C] = "white sun with rays";
			_charNames[(char)0x263D] = "first quarter moon";
			_charNames[(char)0x263E] = "last quarter moon";
			_charNames[(char)0x263F] = "mercury";
			_charNames[(char)0x2640] = "female sign";
			_charNames[(char)0x2641] = "earth";
			_charNames[(char)0x2642] = "male sign";
			_charNames[(char)0x2643] = "jupiter";
			_charNames[(char)0x2644] = "saturn";
			_charNames[(char)0x2645] = "uranus";
			_charNames[(char)0x2646] = "neptune";
			_charNames[(char)0x2647] = "pluto";
			_charNames[(char)0x2648] = "aries";
			_charNames[(char)0x2649] = "taurus";
			_charNames[(char)0x264A] = "gemini";
			_charNames[(char)0x264B] = "cancer";
			_charNames[(char)0x264C] = "leo";
			_charNames[(char)0x264D] = "virgo";
			_charNames[(char)0x264E] = "libra";
			_charNames[(char)0x264F] = "scorpius";
			_charNames[(char)0x2650] = "sagittarius";
			_charNames[(char)0x2651] = "capricorn";
			_charNames[(char)0x2652] = "aquarius";
			_charNames[(char)0x2653] = "pisces";
			_charNames[(char)0x2654] = "white chess king";
			_charNames[(char)0x2655] = "white chess queen";
			_charNames[(char)0x2656] = "white chess rook";
			_charNames[(char)0x2657] = "white chess bishop";
			_charNames[(char)0x2658] = "white chess knight";
			_charNames[(char)0x2659] = "white chess pawn";
			_charNames[(char)0x265A] = "black chess king";
			_charNames[(char)0x265B] = "black chess queen";
			_charNames[(char)0x265C] = "black chess rook";
			_charNames[(char)0x265D] = "black chess bishop";
			_charNames[(char)0x265E] = "black chess knight";
			_charNames[(char)0x265F] = "black chess pawn";
			_charNames[(char)0x2660] = "black spade suit";
			_charNames[(char)0x2661] = "white heart suit";
			_charNames[(char)0x2662] = "white diamond suit";
			_charNames[(char)0x2663] = "black club suit";
			_charNames[(char)0x2664] = "white spade suit";
			_charNames[(char)0x2665] = "black heart suit";
			_charNames[(char)0x2666] = "black diamond suit";
			_charNames[(char)0x2667] = "white club suit";
			_charNames[(char)0x2668] = "hot springs";
			_charNames[(char)0x2669] = "quarter note";
			_charNames[(char)0x266A] = "eighth note";
			_charNames[(char)0x266B] = "beamed eighth notes";
			_charNames[(char)0x266C] = "beamed sixteenth notes";
			_charNames[(char)0x266D] = "music flat sign";
			_charNames[(char)0x266E] = "music natural sign";
			_charNames[(char)0x266F] = "music sharp sign";
			_charNames[(char)0x2670] = "west syriac cross";
			_charNames[(char)0x2671] = "east syriac cross";
			_charNames[(char)0x2672] = "universal recycling symbol";
			_charNames[(char)0x2673] = "recycling symbol for type-1 plastics";
			_charNames[(char)0x2674] = "recycling symbol for type-2 plastics";
			_charNames[(char)0x2675] = "recycling symbol for type-3 plastics";
			_charNames[(char)0x2676] = "recycling symbol for type-4 plastics";
			_charNames[(char)0x2677] = "recycling symbol for type-5 plastics";
			_charNames[(char)0x2678] = "recycling symbol for type-6 plastics";
			_charNames[(char)0x2679] = "recycling symbol for type-7 plastics";
			_charNames[(char)0x267A] = "recycling symbol for generic materials";
			_charNames[(char)0x267B] = "black universal recycling symbol";
			_charNames[(char)0x267C] = "recycled paper symbol";
			_charNames[(char)0x267D] = "partially-recycled paper symbol";
			_charNames[(char)0x267E] = "permanent paper sign";
			_charNames[(char)0x267F] = "wheelchair symbol";
			_charNames[(char)0x2680] = "die face-1";
			_charNames[(char)0x2681] = "die face-2";
			_charNames[(char)0x2682] = "die face-3";
			_charNames[(char)0x2683] = "die face-4";
			_charNames[(char)0x2684] = "die face-5";
			_charNames[(char)0x2685] = "die face-6";
			_charNames[(char)0x2686] = "white circle with dot right";
			_charNames[(char)0x2687] = "white circle with two dots";
			_charNames[(char)0x2688] = "black circle with white dot right";
			_charNames[(char)0x2689] = "black circle with two white dots";
			_charNames[(char)0x268A] = "monogram for yang";
			_charNames[(char)0x268B] = "monogram for yin";
			_charNames[(char)0x268C] = "digram for greater yang";
			_charNames[(char)0x268D] = "digram for lesser yin";
			_charNames[(char)0x268E] = "digram for lesser yang";
			_charNames[(char)0x268F] = "digram for greater yin";
			_charNames[(char)0x2690] = "white flag";
			_charNames[(char)0x2691] = "black flag";
			_charNames[(char)0x2692] = "hammer and pick";
			_charNames[(char)0x2693] = "anchor";
			_charNames[(char)0x2694] = "crossed swords";
			_charNames[(char)0x2695] = "staff of aesculapius";
			_charNames[(char)0x2696] = "scales";
			_charNames[(char)0x2697] = "alembic";
			_charNames[(char)0x2698] = "flower";
			_charNames[(char)0x2699] = "gear";
			_charNames[(char)0x269A] = "staff of hermes";
			_charNames[(char)0x269B] = "atom symbol";
			_charNames[(char)0x269C] = "fleur-de-lis";
			_charNames[(char)0x26A0] = "warning sign";
			_charNames[(char)0x26A1] = "high voltage sign";
			_charNames[(char)0x26A2] = "doubled female sign";
			_charNames[(char)0x26A3] = "doubled male sign";
			_charNames[(char)0x26A4] = "interlocked female and male sign";
			_charNames[(char)0x26A5] = "male and female sign";
			_charNames[(char)0x26A6] = "male with stroke sign";
			_charNames[(char)0x26A7] = "male with stroke and male and female sign";
			_charNames[(char)0x26A8] = "vertical male with stroke sign";
			_charNames[(char)0x26A9] = "horizontal male with stroke sign";
			_charNames[(char)0x26AA] = "medium white circle";
			_charNames[(char)0x26AB] = "medium black circle";
			_charNames[(char)0x26AC] = "medium small white circle";
			_charNames[(char)0x26AD] = "marriage symbol";
			_charNames[(char)0x26AE] = "divorce symbol";
			_charNames[(char)0x26AF] = "unmarried partnership symbol";
			_charNames[(char)0x26B0] = "coffin";
			_charNames[(char)0x26B1] = "funeral urn";
			_charNames[(char)0x2701] = "upper blade scissors";
			_charNames[(char)0x2702] = "black scissors";
			_charNames[(char)0x2703] = "lower blade scissors";
			_charNames[(char)0x2704] = "white scissors";
			_charNames[(char)0x2706] = "telephone location sign";
			_charNames[(char)0x2707] = "tape drive";
			_charNames[(char)0x2708] = "airplane";
			_charNames[(char)0x2709] = "envelope";
			_charNames[(char)0x270C] = "victory hand";
			_charNames[(char)0x270D] = "writing hand";
			_charNames[(char)0x270E] = "lower right pencil";
			_charNames[(char)0x270F] = "pencil";
			_charNames[(char)0x2710] = "upper right pencil";
			_charNames[(char)0x2711] = "white nib";
			_charNames[(char)0x2712] = "black nib";
			_charNames[(char)0x2713] = "check mark";
			_charNames[(char)0x2714] = "heavy check mark";
			_charNames[(char)0x2715] = "multiplication x";
			_charNames[(char)0x2716] = "heavy multiplication x";
			_charNames[(char)0x2717] = "ballot x";
			_charNames[(char)0x2718] = "heavy ballot x";
			_charNames[(char)0x2719] = "outlined greek cross";
			_charNames[(char)0x271A] = "heavy greek cross";
			_charNames[(char)0x271B] = "open centre cross";
			_charNames[(char)0x271C] = "heavy open centre cross";
			_charNames[(char)0x271D] = "latin cross";
			_charNames[(char)0x271E] = "shadowed white latin cross";
			_charNames[(char)0x271F] = "outlined latin cross";
			_charNames[(char)0x2720] = "maltese cross";
			_charNames[(char)0x2721] = "star of david";
			_charNames[(char)0x2722] = "four teardrop-spoked asterisk";
			_charNames[(char)0x2723] = "four balloon-spoked asterisk";
			_charNames[(char)0x2724] = "heavy four balloon-spoked asterisk";
			_charNames[(char)0x2725] = "four club-spoked asterisk";
			_charNames[(char)0x2726] = "black four pointed star";
			_charNames[(char)0x2727] = "white four pointed star";
			_charNames[(char)0x2729] = "stress outlined white star";
			_charNames[(char)0x272A] = "circled white star";
			_charNames[(char)0x272B] = "open centre black star";
			_charNames[(char)0x272C] = "black centre white star";
			_charNames[(char)0x272D] = "outlined black star";
			_charNames[(char)0x272E] = "heavy outlined black star";
			_charNames[(char)0x272F] = "pinwheel star";
			_charNames[(char)0x2730] = "shadowed white star";
			_charNames[(char)0x2731] = "heavy asterisk";
			_charNames[(char)0x2732] = "open centre asterisk";
			_charNames[(char)0x2733] = "eight spoked asterisk";
			_charNames[(char)0x2734] = "eight pointed black star";
			_charNames[(char)0x2735] = "eight pointed pinwheel star";
			_charNames[(char)0x2736] = "six pointed black star";
			_charNames[(char)0x2737] = "eight pointed rectilinear black star";
			_charNames[(char)0x2738] = "heavy eight pointed rectilinear black star";
			_charNames[(char)0x2739] = "twelve pointed black star";
			_charNames[(char)0x273A] = "sixteen pointed asterisk";
			_charNames[(char)0x273B] = "teardrop-spoked asterisk";
			_charNames[(char)0x273C] = "open centre teardrop-spoked asterisk";
			_charNames[(char)0x273D] = "heavy teardrop-spoked asterisk";
			_charNames[(char)0x273E] = "six petalled black and white florette";
			_charNames[(char)0x273F] = "black florette";
			_charNames[(char)0x2740] = "white florette";
			_charNames[(char)0x2741] = "eight petalled outlined black florette";
			_charNames[(char)0x2742] = "circled open centre eight pointed star";
			_charNames[(char)0x2743] = "heavy teardrop-spoked pinwheel asterisk";
			_charNames[(char)0x2744] = "snowflake";
			_charNames[(char)0x2745] = "tight trifoliate snowflake";
			_charNames[(char)0x2746] = "heavy chevron snowflake";
			_charNames[(char)0x2747] = "sparkle";
			_charNames[(char)0x2748] = "heavy sparkle";
			_charNames[(char)0x2749] = "balloon-spoked asterisk";
			_charNames[(char)0x274A] = "eight teardrop-spoked propeller asterisk";
			_charNames[(char)0x274B] = "heavy eight teardrop-spoked propeller asterisk";
			_charNames[(char)0x274D] = "shadowed white circle";
			_charNames[(char)0x274F] = "lower right drop-shadowed white square";
			_charNames[(char)0x2750] = "upper right drop-shadowed white square";
			_charNames[(char)0x2751] = "lower right shadowed white square";
			_charNames[(char)0x2752] = "upper right shadowed white square";
			_charNames[(char)0x2756] = "black diamond minus white x";
			_charNames[(char)0x2758] = "light vertical bar";
			_charNames[(char)0x2759] = "medium vertical bar";
			_charNames[(char)0x275A] = "heavy vertical bar";
			_charNames[(char)0x275B] = "heavy single turned comma quotation mark ornament";
			_charNames[(char)0x275C] = "heavy single comma quotation mark ornament";
			_charNames[(char)0x275D] = "heavy double turned comma quotation mark ornament";
			_charNames[(char)0x275E] = "heavy double comma quotation mark ornament";
			_charNames[(char)0x2761] = "curved stem paragraph sign ornament";
			_charNames[(char)0x2762] = "heavy exclamation mark ornament";
			_charNames[(char)0x2763] = "heavy heart exclamation mark ornament";
			_charNames[(char)0x2764] = "heavy black heart";
			_charNames[(char)0x2765] = "rotated heavy black heart bullet";
			_charNames[(char)0x2766] = "floral heart";
			_charNames[(char)0x2767] = "rotated floral heart bullet";
			_charNames[(char)0x2768] = "medium left parenthesis ornament";
			_charNames[(char)0x2769] = "medium right parenthesis ornament";
			_charNames[(char)0x276A] = "medium flattened left parenthesis ornament";
			_charNames[(char)0x276B] = "medium flattened right parenthesis ornament";
			_charNames[(char)0x276C] = "medium left-pointing angle bracket ornament";
			_charNames[(char)0x276D] = "medium right-pointing angle bracket ornament";
			_charNames[(char)0x276E] = "heavy left-pointing angle quotation mark ornament";
			_charNames[(char)0x276F] = "heavy right-pointing angle quotation mark ornament";
			_charNames[(char)0x2770] = "heavy left-pointing angle bracket ornament";
			_charNames[(char)0x2771] = "heavy right-pointing angle bracket ornament";
			_charNames[(char)0x2772] = "light left tortoise shell bracket ornament";
			_charNames[(char)0x2773] = "light right tortoise shell bracket ornament";
			_charNames[(char)0x2774] = "medium left curly bracket ornament";
			_charNames[(char)0x2775] = "medium right curly bracket ornament";
			_charNames[(char)0x2776] = "dingbat negative circled digit one";
			_charNames[(char)0x2777] = "dingbat negative circled digit two";
			_charNames[(char)0x2778] = "dingbat negative circled digit three";
			_charNames[(char)0x2779] = "dingbat negative circled digit four";
			_charNames[(char)0x277A] = "dingbat negative circled digit five";
			_charNames[(char)0x277B] = "dingbat negative circled digit six";
			_charNames[(char)0x277C] = "dingbat negative circled digit seven";
			_charNames[(char)0x277D] = "dingbat negative circled digit eight";
			_charNames[(char)0x277E] = "dingbat negative circled digit nine";
			_charNames[(char)0x277F] = "dingbat negative circled number ten";
			_charNames[(char)0x2780] = "dingbat circled sans-serif digit one";
			_charNames[(char)0x2781] = "dingbat circled sans-serif digit two";
			_charNames[(char)0x2782] = "dingbat circled sans-serif digit three";
			_charNames[(char)0x2783] = "dingbat circled sans-serif digit four";
			_charNames[(char)0x2784] = "dingbat circled sans-serif digit five";
			_charNames[(char)0x2785] = "dingbat circled sans-serif digit six";
			_charNames[(char)0x2786] = "dingbat circled sans-serif digit seven";
			_charNames[(char)0x2787] = "dingbat circled sans-serif digit eight";
			_charNames[(char)0x2788] = "dingbat circled sans-serif digit nine";
			_charNames[(char)0x2789] = "dingbat circled sans-serif number ten";
			_charNames[(char)0x278A] = "dingbat negative circled sans-serif digit one";
			_charNames[(char)0x278B] = "dingbat negative circled sans-serif digit two";
			_charNames[(char)0x278C] = "dingbat negative circled sans-serif digit three";
			_charNames[(char)0x278D] = "dingbat negative circled sans-serif digit four";
			_charNames[(char)0x278E] = "dingbat negative circled sans-serif digit five";
			_charNames[(char)0x278F] = "dingbat negative circled sans-serif digit six";
			_charNames[(char)0x2790] = "dingbat negative circled sans-serif digit seven";
			_charNames[(char)0x2791] = "dingbat negative circled sans-serif digit eight";
			_charNames[(char)0x2792] = "dingbat negative circled sans-serif digit nine";
			_charNames[(char)0x2793] = "dingbat negative circled sans-serif number ten";
			_charNames[(char)0x2794] = "heavy wide-headed rightwards arrow";
			_charNames[(char)0x2798] = "heavy south east arrow";
			_charNames[(char)0x2799] = "heavy rightwards arrow";
			_charNames[(char)0x279A] = "heavy north east arrow";
			_charNames[(char)0x279B] = "drafting point rightwards arrow";
			_charNames[(char)0x279C] = "heavy round-tipped rightwards arrow";
			_charNames[(char)0x279D] = "triangle-headed rightwards arrow";
			_charNames[(char)0x279E] = "heavy triangle-headed rightwards arrow";
			_charNames[(char)0x279F] = "dashed triangle-headed rightwards arrow";
			_charNames[(char)0x27A0] = "heavy dashed triangle-headed rightwards arrow";
			_charNames[(char)0x27A1] = "black rightwards arrow";
			_charNames[(char)0x27A2] = "three-d top-lighted rightwards arrowhead";
			_charNames[(char)0x27A3] = "three-d bottom-lighted rightwards arrowhead";
			_charNames[(char)0x27A4] = "black rightwards arrowhead";
			_charNames[(char)0x27A5] = "heavy black curved downwards and rightwards arrow";
			_charNames[(char)0x27A6] = "heavy black curved upwards and rightwards arrow";
			_charNames[(char)0x27A7] = "squat black rightwards arrow";
			_charNames[(char)0x27A8] = "heavy concave-pointed black rightwards arrow";
			_charNames[(char)0x27A9] = "right-shaded white rightwards arrow";
			_charNames[(char)0x27AA] = "left-shaded white rightwards arrow";
			_charNames[(char)0x27AB] = "back-tilted shadowed white rightwards arrow";
			_charNames[(char)0x27AC] = "front-tilted shadowed white rightwards arrow";
			_charNames[(char)0x27AD] = "heavy lower right-shadowed white rightwards arrow";
			_charNames[(char)0x27AE] = "heavy upper right-shadowed white rightwards arrow";
			_charNames[(char)0x27AF] = "notched lower right-shadowed white rightwards arrow";
			_charNames[(char)0x27B1] = "notched upper right-shadowed white rightwards arrow";
			_charNames[(char)0x27B2] = "circled heavy white rightwards arrow";
			_charNames[(char)0x27B3] = "white-feathered rightwards arrow";
			_charNames[(char)0x27B4] = "black-feathered south east arrow";
			_charNames[(char)0x27B5] = "black-feathered rightwards arrow";
			_charNames[(char)0x27B6] = "black-feathered north east arrow";
			_charNames[(char)0x27B7] = "heavy black-feathered south east arrow";
			_charNames[(char)0x27B8] = "heavy black-feathered rightwards arrow";
			_charNames[(char)0x27B9] = "heavy black-feathered north east arrow";
			_charNames[(char)0x27BA] = "teardrop-barbed rightwards arrow";
			_charNames[(char)0x27BB] = "heavy teardrop-shanked rightwards arrow";
			_charNames[(char)0x27BC] = "wedge-tailed rightwards arrow";
			_charNames[(char)0x27BD] = "heavy wedge-tailed rightwards arrow";
			_charNames[(char)0x27BE] = "open-outlined rightwards arrow";
			_charNames[(char)0x27C0] = "three dimensional angle";
			_charNames[(char)0x27C1] = "white triangle containing small white triangle";
			_charNames[(char)0x27C2] = "perpendicular";
			_charNames[(char)0x27C3] = "open subset";
			_charNames[(char)0x27C4] = "open superset";
			_charNames[(char)0x27C5] = "left s-shaped bag delimiter";
			_charNames[(char)0x27C6] = "right s-shaped bag delimiter";
			_charNames[(char)0x27D0] = "white diamond with centred dot";
			_charNames[(char)0x27D1] = "and with dot";
			_charNames[(char)0x27D2] = "element of opening upwards";
			_charNames[(char)0x27D3] = "lower right corner with dot";
			_charNames[(char)0x27D4] = "upper left corner with dot";
			_charNames[(char)0x27D5] = "left outer join";
			_charNames[(char)0x27D6] = "right outer join";
			_charNames[(char)0x27D7] = "full outer join";
			_charNames[(char)0x27D8] = "large up tack";
			_charNames[(char)0x27D9] = "large down tack";
			_charNames[(char)0x27DA] = "left and right double turnstile";
			_charNames[(char)0x27DB] = "left and right tack";
			_charNames[(char)0x27DC] = "left multimap";
			_charNames[(char)0x27DD] = "long right tack";
			_charNames[(char)0x27DE] = "long left tack";
			_charNames[(char)0x27DF] = "up tack with circle above";
			_charNames[(char)0x27E0] = "lozenge divided by horizontal rule";
			_charNames[(char)0x27E1] = "white concave-sided diamond";
			_charNames[(char)0x27E2] = "white concave-sided diamond with leftwards tick";
			_charNames[(char)0x27E3] = "white concave-sided diamond with rightwards tick";
			_charNames[(char)0x27E4] = "white square with leftwards tick";
			_charNames[(char)0x27E5] = "white square with rightwards tick";
			_charNames[(char)0x27E6] = "mathematical left white square bracket";
			_charNames[(char)0x27E7] = "mathematical right white square bracket";
			_charNames[(char)0x27E8] = "mathematical left angle bracket";
			_charNames[(char)0x27E9] = "mathematical right angle bracket";
			_charNames[(char)0x27EA] = "mathematical left double angle bracket";
			_charNames[(char)0x27EB] = "mathematical right double angle bracket";
			_charNames[(char)0x27F0] = "upwards quadruple arrow";
			_charNames[(char)0x27F1] = "downwards quadruple arrow";
			_charNames[(char)0x27F2] = "anticlockwise gapped circle arrow";
			_charNames[(char)0x27F3] = "clockwise gapped circle arrow";
			_charNames[(char)0x27F4] = "right arrow with circled plus";
			_charNames[(char)0x27F5] = "long leftwards arrow";
			_charNames[(char)0x27F6] = "long rightwards arrow";
			_charNames[(char)0x27F7] = "long left right arrow";
			_charNames[(char)0x27F8] = "long leftwards double arrow";
			_charNames[(char)0x27F9] = "long rightwards double arrow";
			_charNames[(char)0x27FA] = "long left right double arrow";
			_charNames[(char)0x27FB] = "long leftwards arrow from bar";
			_charNames[(char)0x27FC] = "long rightwards arrow from bar";
			_charNames[(char)0x27FD] = "long leftwards double arrow from bar";
			_charNames[(char)0x27FE] = "long rightwards double arrow from bar";
			_charNames[(char)0x27FF] = "long rightwards squiggle arrow";
			_charNames[(char)0x2800] = "braille pattern blank";
			_charNames[(char)0x2801] = "braille pattern dots-1";
			_charNames[(char)0x2802] = "braille pattern dots-2";
			_charNames[(char)0x2803] = "braille pattern dots-12";
			_charNames[(char)0x2804] = "braille pattern dots-3";
			_charNames[(char)0x2805] = "braille pattern dots-13";
			_charNames[(char)0x2806] = "braille pattern dots-23";
			_charNames[(char)0x2807] = "braille pattern dots-123";
			_charNames[(char)0x2808] = "braille pattern dots-4";
			_charNames[(char)0x2809] = "braille pattern dots-14";
			_charNames[(char)0x280A] = "braille pattern dots-24";
			_charNames[(char)0x280B] = "braille pattern dots-124";
			_charNames[(char)0x280C] = "braille pattern dots-34";
			_charNames[(char)0x280D] = "braille pattern dots-134";
			_charNames[(char)0x280E] = "braille pattern dots-234";
			_charNames[(char)0x280F] = "braille pattern dots-1234";
			_charNames[(char)0x2810] = "braille pattern dots-5";
			_charNames[(char)0x2811] = "braille pattern dots-15";
			_charNames[(char)0x2812] = "braille pattern dots-25";
			_charNames[(char)0x2813] = "braille pattern dots-125";
			_charNames[(char)0x2814] = "braille pattern dots-35";
			_charNames[(char)0x2815] = "braille pattern dots-135";
			_charNames[(char)0x2816] = "braille pattern dots-235";
			_charNames[(char)0x2817] = "braille pattern dots-1235";
			_charNames[(char)0x2818] = "braille pattern dots-45";
			_charNames[(char)0x2819] = "braille pattern dots-145";
			_charNames[(char)0x281A] = "braille pattern dots-245";
			_charNames[(char)0x281B] = "braille pattern dots-1245";
			_charNames[(char)0x281C] = "braille pattern dots-345";
			_charNames[(char)0x281D] = "braille pattern dots-1345";
			_charNames[(char)0x281E] = "braille pattern dots-2345";
			_charNames[(char)0x281F] = "braille pattern dots-12345";
			_charNames[(char)0x2820] = "braille pattern dots-6";
			_charNames[(char)0x2821] = "braille pattern dots-16";
			_charNames[(char)0x2822] = "braille pattern dots-26";
			_charNames[(char)0x2823] = "braille pattern dots-126";
			_charNames[(char)0x2824] = "braille pattern dots-36";
			_charNames[(char)0x2825] = "braille pattern dots-136";
			_charNames[(char)0x2826] = "braille pattern dots-236";
			_charNames[(char)0x2827] = "braille pattern dots-1236";
			_charNames[(char)0x2828] = "braille pattern dots-46";
			_charNames[(char)0x2829] = "braille pattern dots-146";
			_charNames[(char)0x282A] = "braille pattern dots-246";
			_charNames[(char)0x282B] = "braille pattern dots-1246";
			_charNames[(char)0x282C] = "braille pattern dots-346";
			_charNames[(char)0x282D] = "braille pattern dots-1346";
			_charNames[(char)0x282E] = "braille pattern dots-2346";
			_charNames[(char)0x282F] = "braille pattern dots-12346";
			_charNames[(char)0x2830] = "braille pattern dots-56";
			_charNames[(char)0x2831] = "braille pattern dots-156";
			_charNames[(char)0x2832] = "braille pattern dots-256";
			_charNames[(char)0x2833] = "braille pattern dots-1256";
			_charNames[(char)0x2834] = "braille pattern dots-356";
			_charNames[(char)0x2835] = "braille pattern dots-1356";
			_charNames[(char)0x2836] = "braille pattern dots-2356";
			_charNames[(char)0x2837] = "braille pattern dots-12356";
			_charNames[(char)0x2838] = "braille pattern dots-456";
			_charNames[(char)0x2839] = "braille pattern dots-1456";
			_charNames[(char)0x283A] = "braille pattern dots-2456";
			_charNames[(char)0x283B] = "braille pattern dots-12456";
			_charNames[(char)0x283C] = "braille pattern dots-3456";
			_charNames[(char)0x283D] = "braille pattern dots-13456";
			_charNames[(char)0x283E] = "braille pattern dots-23456";
			_charNames[(char)0x283F] = "braille pattern dots-123456";
			_charNames[(char)0x2840] = "braille pattern dots-7";
			_charNames[(char)0x2841] = "braille pattern dots-17";
			_charNames[(char)0x2842] = "braille pattern dots-27";
			_charNames[(char)0x2843] = "braille pattern dots-127";
			_charNames[(char)0x2844] = "braille pattern dots-37";
			_charNames[(char)0x2845] = "braille pattern dots-137";
			_charNames[(char)0x2846] = "braille pattern dots-237";
			_charNames[(char)0x2847] = "braille pattern dots-1237";
			_charNames[(char)0x2848] = "braille pattern dots-47";
			_charNames[(char)0x2849] = "braille pattern dots-147";
			_charNames[(char)0x284A] = "braille pattern dots-247";
			_charNames[(char)0x284B] = "braille pattern dots-1247";
			_charNames[(char)0x284C] = "braille pattern dots-347";
			_charNames[(char)0x284D] = "braille pattern dots-1347";
			_charNames[(char)0x284E] = "braille pattern dots-2347";
			_charNames[(char)0x284F] = "braille pattern dots-12347";
			_charNames[(char)0x2850] = "braille pattern dots-57";
			_charNames[(char)0x2851] = "braille pattern dots-157";
			_charNames[(char)0x2852] = "braille pattern dots-257";
			_charNames[(char)0x2853] = "braille pattern dots-1257";
			_charNames[(char)0x2854] = "braille pattern dots-357";
			_charNames[(char)0x2855] = "braille pattern dots-1357";
			_charNames[(char)0x2856] = "braille pattern dots-2357";
			_charNames[(char)0x2857] = "braille pattern dots-12357";
			_charNames[(char)0x2858] = "braille pattern dots-457";
			_charNames[(char)0x2859] = "braille pattern dots-1457";
			_charNames[(char)0x285A] = "braille pattern dots-2457";
			_charNames[(char)0x285B] = "braille pattern dots-12457";
			_charNames[(char)0x285C] = "braille pattern dots-3457";
			_charNames[(char)0x285D] = "braille pattern dots-13457";
			_charNames[(char)0x285E] = "braille pattern dots-23457";
			_charNames[(char)0x285F] = "braille pattern dots-123457";
			_charNames[(char)0x2860] = "braille pattern dots-67";
			_charNames[(char)0x2861] = "braille pattern dots-167";
			_charNames[(char)0x2862] = "braille pattern dots-267";
			_charNames[(char)0x2863] = "braille pattern dots-1267";
			_charNames[(char)0x2864] = "braille pattern dots-367";
			_charNames[(char)0x2865] = "braille pattern dots-1367";
			_charNames[(char)0x2866] = "braille pattern dots-2367";
			_charNames[(char)0x2867] = "braille pattern dots-12367";
			_charNames[(char)0x2868] = "braille pattern dots-467";
			_charNames[(char)0x2869] = "braille pattern dots-1467";
			_charNames[(char)0x286A] = "braille pattern dots-2467";
			_charNames[(char)0x286B] = "braille pattern dots-12467";
			_charNames[(char)0x286C] = "braille pattern dots-3467";
			_charNames[(char)0x286D] = "braille pattern dots-13467";
			_charNames[(char)0x286E] = "braille pattern dots-23467";
			_charNames[(char)0x286F] = "braille pattern dots-123467";
			_charNames[(char)0x2870] = "braille pattern dots-567";
			_charNames[(char)0x2871] = "braille pattern dots-1567";
			_charNames[(char)0x2872] = "braille pattern dots-2567";
			_charNames[(char)0x2873] = "braille pattern dots-12567";
			_charNames[(char)0x2874] = "braille pattern dots-3567";
			_charNames[(char)0x2875] = "braille pattern dots-13567";
			_charNames[(char)0x2876] = "braille pattern dots-23567";
			_charNames[(char)0x2877] = "braille pattern dots-123567";
			_charNames[(char)0x2878] = "braille pattern dots-4567";
			_charNames[(char)0x2879] = "braille pattern dots-14567";
			_charNames[(char)0x287A] = "braille pattern dots-24567";
			_charNames[(char)0x287B] = "braille pattern dots-124567";
			_charNames[(char)0x287C] = "braille pattern dots-34567";
			_charNames[(char)0x287D] = "braille pattern dots-134567";
			_charNames[(char)0x287E] = "braille pattern dots-234567";
			_charNames[(char)0x287F] = "braille pattern dots-1234567";
			_charNames[(char)0x2880] = "braille pattern dots-8";
			_charNames[(char)0x2881] = "braille pattern dots-18";
			_charNames[(char)0x2882] = "braille pattern dots-28";
			_charNames[(char)0x2883] = "braille pattern dots-128";
			_charNames[(char)0x2884] = "braille pattern dots-38";
			_charNames[(char)0x2885] = "braille pattern dots-138";
			_charNames[(char)0x2886] = "braille pattern dots-238";
			_charNames[(char)0x2887] = "braille pattern dots-1238";
			_charNames[(char)0x2888] = "braille pattern dots-48";
			_charNames[(char)0x2889] = "braille pattern dots-148";
			_charNames[(char)0x288A] = "braille pattern dots-248";
			_charNames[(char)0x288B] = "braille pattern dots-1248";
			_charNames[(char)0x288C] = "braille pattern dots-348";
			_charNames[(char)0x288D] = "braille pattern dots-1348";
			_charNames[(char)0x288E] = "braille pattern dots-2348";
			_charNames[(char)0x288F] = "braille pattern dots-12348";
			_charNames[(char)0x2890] = "braille pattern dots-58";
			_charNames[(char)0x2891] = "braille pattern dots-158";
			_charNames[(char)0x2892] = "braille pattern dots-258";
			_charNames[(char)0x2893] = "braille pattern dots-1258";
			_charNames[(char)0x2894] = "braille pattern dots-358";
			_charNames[(char)0x2895] = "braille pattern dots-1358";
			_charNames[(char)0x2896] = "braille pattern dots-2358";
			_charNames[(char)0x2897] = "braille pattern dots-12358";
			_charNames[(char)0x2898] = "braille pattern dots-458";
			_charNames[(char)0x2899] = "braille pattern dots-1458";
			_charNames[(char)0x289A] = "braille pattern dots-2458";
			_charNames[(char)0x289B] = "braille pattern dots-12458";
			_charNames[(char)0x289C] = "braille pattern dots-3458";
			_charNames[(char)0x289D] = "braille pattern dots-13458";
			_charNames[(char)0x289E] = "braille pattern dots-23458";
			_charNames[(char)0x289F] = "braille pattern dots-123458";
			_charNames[(char)0x28A0] = "braille pattern dots-68";
			_charNames[(char)0x28A1] = "braille pattern dots-168";
			_charNames[(char)0x28A2] = "braille pattern dots-268";
			_charNames[(char)0x28A3] = "braille pattern dots-1268";
			_charNames[(char)0x28A4] = "braille pattern dots-368";
			_charNames[(char)0x28A5] = "braille pattern dots-1368";
			_charNames[(char)0x28A6] = "braille pattern dots-2368";
			_charNames[(char)0x28A7] = "braille pattern dots-12368";
			_charNames[(char)0x28A8] = "braille pattern dots-468";
			_charNames[(char)0x28A9] = "braille pattern dots-1468";
			_charNames[(char)0x28AA] = "braille pattern dots-2468";
			_charNames[(char)0x28AB] = "braille pattern dots-12468";
			_charNames[(char)0x28AC] = "braille pattern dots-3468";
			_charNames[(char)0x28AD] = "braille pattern dots-13468";
			_charNames[(char)0x28AE] = "braille pattern dots-23468";
			_charNames[(char)0x28AF] = "braille pattern dots-123468";
			_charNames[(char)0x28B0] = "braille pattern dots-568";
			_charNames[(char)0x28B1] = "braille pattern dots-1568";
			_charNames[(char)0x28B2] = "braille pattern dots-2568";
			_charNames[(char)0x28B3] = "braille pattern dots-12568";
			_charNames[(char)0x28B4] = "braille pattern dots-3568";
			_charNames[(char)0x28B5] = "braille pattern dots-13568";
			_charNames[(char)0x28B6] = "braille pattern dots-23568";
			_charNames[(char)0x28B7] = "braille pattern dots-123568";
			_charNames[(char)0x28B8] = "braille pattern dots-4568";
			_charNames[(char)0x28B9] = "braille pattern dots-14568";
			_charNames[(char)0x28BA] = "braille pattern dots-24568";
			_charNames[(char)0x28BB] = "braille pattern dots-124568";
			_charNames[(char)0x28BC] = "braille pattern dots-34568";
			_charNames[(char)0x28BD] = "braille pattern dots-134568";
			_charNames[(char)0x28BE] = "braille pattern dots-234568";
			_charNames[(char)0x28BF] = "braille pattern dots-1234568";
			_charNames[(char)0x28C0] = "braille pattern dots-78";
			_charNames[(char)0x28C1] = "braille pattern dots-178";
			_charNames[(char)0x28C2] = "braille pattern dots-278";
			_charNames[(char)0x28C3] = "braille pattern dots-1278";
			_charNames[(char)0x28C4] = "braille pattern dots-378";
			_charNames[(char)0x28C5] = "braille pattern dots-1378";
			_charNames[(char)0x28C6] = "braille pattern dots-2378";
			_charNames[(char)0x28C7] = "braille pattern dots-12378";
			_charNames[(char)0x28C8] = "braille pattern dots-478";
			_charNames[(char)0x28C9] = "braille pattern dots-1478";
			_charNames[(char)0x28CA] = "braille pattern dots-2478";
			_charNames[(char)0x28CB] = "braille pattern dots-12478";
			_charNames[(char)0x28CC] = "braille pattern dots-3478";
			_charNames[(char)0x28CD] = "braille pattern dots-13478";
			_charNames[(char)0x28CE] = "braille pattern dots-23478";
			_charNames[(char)0x28CF] = "braille pattern dots-123478";
			_charNames[(char)0x28D0] = "braille pattern dots-578";
			_charNames[(char)0x28D1] = "braille pattern dots-1578";
			_charNames[(char)0x28D2] = "braille pattern dots-2578";
			_charNames[(char)0x28D3] = "braille pattern dots-12578";
			_charNames[(char)0x28D4] = "braille pattern dots-3578";
			_charNames[(char)0x28D5] = "braille pattern dots-13578";
			_charNames[(char)0x28D6] = "braille pattern dots-23578";
			_charNames[(char)0x28D7] = "braille pattern dots-123578";
			_charNames[(char)0x28D8] = "braille pattern dots-4578";
			_charNames[(char)0x28D9] = "braille pattern dots-14578";
			_charNames[(char)0x28DA] = "braille pattern dots-24578";
			_charNames[(char)0x28DB] = "braille pattern dots-124578";
			_charNames[(char)0x28DC] = "braille pattern dots-34578";
			_charNames[(char)0x28DD] = "braille pattern dots-134578";
			_charNames[(char)0x28DE] = "braille pattern dots-234578";
			_charNames[(char)0x28DF] = "braille pattern dots-1234578";
			_charNames[(char)0x28E0] = "braille pattern dots-678";
			_charNames[(char)0x28E1] = "braille pattern dots-1678";
			_charNames[(char)0x28E2] = "braille pattern dots-2678";
			_charNames[(char)0x28E3] = "braille pattern dots-12678";
			_charNames[(char)0x28E4] = "braille pattern dots-3678";
			_charNames[(char)0x28E5] = "braille pattern dots-13678";
			_charNames[(char)0x28E6] = "braille pattern dots-23678";
			_charNames[(char)0x28E7] = "braille pattern dots-123678";
			_charNames[(char)0x28E8] = "braille pattern dots-4678";
			_charNames[(char)0x28E9] = "braille pattern dots-14678";
			_charNames[(char)0x28EA] = "braille pattern dots-24678";
			_charNames[(char)0x28EB] = "braille pattern dots-124678";
			_charNames[(char)0x28EC] = "braille pattern dots-34678";
			_charNames[(char)0x28ED] = "braille pattern dots-134678";
			_charNames[(char)0x28EE] = "braille pattern dots-234678";
			_charNames[(char)0x28EF] = "braille pattern dots-1234678";
			_charNames[(char)0x28F0] = "braille pattern dots-5678";
			_charNames[(char)0x28F1] = "braille pattern dots-15678";
			_charNames[(char)0x28F2] = "braille pattern dots-25678";
			_charNames[(char)0x28F3] = "braille pattern dots-125678";
			_charNames[(char)0x28F4] = "braille pattern dots-35678";
			_charNames[(char)0x28F5] = "braille pattern dots-135678";
			_charNames[(char)0x28F6] = "braille pattern dots-235678";
			_charNames[(char)0x28F7] = "braille pattern dots-1235678";
			_charNames[(char)0x28F8] = "braille pattern dots-45678";
			_charNames[(char)0x28F9] = "braille pattern dots-145678";
			_charNames[(char)0x28FA] = "braille pattern dots-245678";
			_charNames[(char)0x28FB] = "braille pattern dots-1245678";
			_charNames[(char)0x28FC] = "braille pattern dots-345678";
			_charNames[(char)0x28FD] = "braille pattern dots-1345678";
			_charNames[(char)0x28FE] = "braille pattern dots-2345678";
			_charNames[(char)0x28FF] = "braille pattern dots-12345678";
			_charNames[(char)0x2900] = "rightwards two-headed arrow with vertical stroke";
			_charNames[(char)0x2901] = "rightwards two-headed arrow with double vertical stroke";
			_charNames[(char)0x2902] = "leftwards double arrow with vertical stroke";
			_charNames[(char)0x2903] = "rightwards double arrow with vertical stroke";
			_charNames[(char)0x2904] = "left right double arrow with vertical stroke";
			_charNames[(char)0x2905] = "rightwards two-headed arrow from bar";
			_charNames[(char)0x2906] = "leftwards double arrow from bar";
			_charNames[(char)0x2907] = "rightwards double arrow from bar";
			_charNames[(char)0x2908] = "downwards arrow with horizontal stroke";
			_charNames[(char)0x2909] = "upwards arrow with horizontal stroke";
			_charNames[(char)0x290A] = "upwards triple arrow";
			_charNames[(char)0x290B] = "downwards triple arrow";
			_charNames[(char)0x290C] = "leftwards double dash arrow";
			_charNames[(char)0x290D] = "rightwards double dash arrow";
			_charNames[(char)0x290E] = "leftwards triple dash arrow";
			_charNames[(char)0x290F] = "rightwards triple dash arrow";
			_charNames[(char)0x2910] = "rightwards two-headed triple dash arrow";
			_charNames[(char)0x2911] = "rightwards arrow with dotted stem";
			_charNames[(char)0x2912] = "upwards arrow to bar";
			_charNames[(char)0x2913] = "downwards arrow to bar";
			_charNames[(char)0x2914] = "rightwards arrow with tail with vertical stroke";
			_charNames[(char)0x2915] = "rightwards arrow with tail with double vertical stroke";
			_charNames[(char)0x2916] = "rightwards two-headed arrow with tail";
			_charNames[(char)0x2917] = "rightwards two-headed arrow with tail with vertical stroke";
			_charNames[(char)0x2918] = "rightwards two-headed arrow with tail with double vertical stroke";
			_charNames[(char)0x2919] = "leftwards arrow-tail";
			_charNames[(char)0x291A] = "rightwards arrow-tail";
			_charNames[(char)0x291B] = "leftwards double arrow-tail";
			_charNames[(char)0x291C] = "rightwards double arrow-tail";
			_charNames[(char)0x291D] = "leftwards arrow to black diamond";
			_charNames[(char)0x291E] = "rightwards arrow to black diamond";
			_charNames[(char)0x291F] = "leftwards arrow from bar to black diamond";
			_charNames[(char)0x2920] = "rightwards arrow from bar to black diamond";
			_charNames[(char)0x2921] = "north west and south east arrow";
			_charNames[(char)0x2922] = "north east and south west arrow";
			_charNames[(char)0x2923] = "north west arrow with hook";
			_charNames[(char)0x2924] = "north east arrow with hook";
			_charNames[(char)0x2925] = "south east arrow with hook";
			_charNames[(char)0x2926] = "south west arrow with hook";
			_charNames[(char)0x2927] = "north west arrow and north east arrow";
			_charNames[(char)0x2928] = "north east arrow and south east arrow";
			_charNames[(char)0x2929] = "south east arrow and south west arrow";
			_charNames[(char)0x292A] = "south west arrow and north west arrow";
			_charNames[(char)0x292B] = "rising diagonal crossing falling diagonal";
			_charNames[(char)0x292C] = "falling diagonal crossing rising diagonal";
			_charNames[(char)0x292D] = "south east arrow crossing north east arrow";
			_charNames[(char)0x292E] = "north east arrow crossing south east arrow";
			_charNames[(char)0x292F] = "falling diagonal crossing north east arrow";
			_charNames[(char)0x2930] = "rising diagonal crossing south east arrow";
			_charNames[(char)0x2931] = "north east arrow crossing north west arrow";
			_charNames[(char)0x2932] = "north west arrow crossing north east arrow";
			_charNames[(char)0x2933] = "wave arrow pointing directly right";
			_charNames[(char)0x2934] = "arrow pointing rightwards then curving upwards";
			_charNames[(char)0x2935] = "arrow pointing rightwards then curving downwards";
			_charNames[(char)0x2936] = "arrow pointing downwards then curving leftwards";
			_charNames[(char)0x2937] = "arrow pointing downwards then curving rightwards";
			_charNames[(char)0x2938] = "right-side arc clockwise arrow";
			_charNames[(char)0x2939] = "left-side arc anticlockwise arrow";
			_charNames[(char)0x293A] = "top arc anticlockwise arrow";
			_charNames[(char)0x293B] = "bottom arc anticlockwise arrow";
			_charNames[(char)0x293C] = "top arc clockwise arrow with minus";
			_charNames[(char)0x293D] = "top arc anticlockwise arrow with plus";
			_charNames[(char)0x293E] = "lower right semicircular clockwise arrow";
			_charNames[(char)0x293F] = "lower left semicircular anticlockwise arrow";
			_charNames[(char)0x2940] = "anticlockwise closed circle arrow";
			_charNames[(char)0x2941] = "clockwise closed circle arrow";
			_charNames[(char)0x2942] = "rightwards arrow above short leftwards arrow";
			_charNames[(char)0x2943] = "leftwards arrow above short rightwards arrow";
			_charNames[(char)0x2944] = "short rightwards arrow above leftwards arrow";
			_charNames[(char)0x2945] = "rightwards arrow with plus below";
			_charNames[(char)0x2946] = "leftwards arrow with plus below";
			_charNames[(char)0x2947] = "rightwards arrow through x";
			_charNames[(char)0x2948] = "left right arrow through small circle";
			_charNames[(char)0x2949] = "upwards two-headed arrow from small circle";
			_charNames[(char)0x294A] = "left barb up right barb down harpoon";
			_charNames[(char)0x294B] = "left barb down right barb up harpoon";
			_charNames[(char)0x294C] = "up barb right down barb left harpoon";
			_charNames[(char)0x294D] = "up barb left down barb right harpoon";
			_charNames[(char)0x294E] = "left barb up right barb up harpoon";
			_charNames[(char)0x294F] = "up barb right down barb right harpoon";
			_charNames[(char)0x2950] = "left barb down right barb down harpoon";
			_charNames[(char)0x2951] = "up barb left down barb left harpoon";
			_charNames[(char)0x2952] = "leftwards harpoon with barb up to bar";
			_charNames[(char)0x2953] = "rightwards harpoon with barb up to bar";
			_charNames[(char)0x2954] = "upwards harpoon with barb right to bar";
			_charNames[(char)0x2955] = "downwards harpoon with barb right to bar";
			_charNames[(char)0x2956] = "leftwards harpoon with barb down to bar";
			_charNames[(char)0x2957] = "rightwards harpoon with barb down to bar";
			_charNames[(char)0x2958] = "upwards harpoon with barb left to bar";
			_charNames[(char)0x2959] = "downwards harpoon with barb left to bar";
			_charNames[(char)0x295A] = "leftwards harpoon with barb up from bar";
			_charNames[(char)0x295B] = "rightwards harpoon with barb up from bar";
			_charNames[(char)0x295C] = "upwards harpoon with barb right from bar";
			_charNames[(char)0x295D] = "downwards harpoon with barb right from bar";
			_charNames[(char)0x295E] = "leftwards harpoon with barb down from bar";
			_charNames[(char)0x295F] = "rightwards harpoon with barb down from bar";
			_charNames[(char)0x2960] = "upwards harpoon with barb left from bar";
			_charNames[(char)0x2961] = "downwards harpoon with barb left from bar";
			_charNames[(char)0x2962] = "leftwards harpoon with barb up above leftwards harpoon with barb down";
			_charNames[(char)0x2963] = "upwards harpoon with barb left beside upwards harpoon with barb right";
			_charNames[(char)0x2964] = "rightwards harpoon with barb up above rightwards harpoon with barb down";
			_charNames[(char)0x2965] = "downwards harpoon with barb left beside downwards harpoon with barb right";
			_charNames[(char)0x2966] = "leftwards harpoon with barb up above rightwards harpoon with barb up";
			_charNames[(char)0x2967] = "leftwards harpoon with barb down above rightwards harpoon with barb down";
			_charNames[(char)0x2968] = "rightwards harpoon with barb up above leftwards harpoon with barb up";
			_charNames[(char)0x2969] = "rightwards harpoon with barb down above leftwards harpoon with barb down";
			_charNames[(char)0x296A] = "leftwards harpoon with barb up above long dash";
			_charNames[(char)0x296B] = "leftwards harpoon with barb down below long dash";
			_charNames[(char)0x296C] = "rightwards harpoon with barb up above long dash";
			_charNames[(char)0x296D] = "rightwards harpoon with barb down below long dash";
			_charNames[(char)0x296E] = "upwards harpoon with barb left beside downwards harpoon with barb right";
			_charNames[(char)0x296F] = "downwards harpoon with barb left beside upwards harpoon with barb right";
			_charNames[(char)0x2970] = "right double arrow with rounded head";
			_charNames[(char)0x2971] = "equals sign above rightwards arrow";
			_charNames[(char)0x2972] = "tilde operator above rightwards arrow";
			_charNames[(char)0x2973] = "leftwards arrow above tilde operator";
			_charNames[(char)0x2974] = "rightwards arrow above tilde operator";
			_charNames[(char)0x2975] = "rightwards arrow above almost equal to";
			_charNames[(char)0x2976] = "less-than above leftwards arrow";
			_charNames[(char)0x2977] = "leftwards arrow through less-than";
			_charNames[(char)0x2978] = "greater-than above rightwards arrow";
			_charNames[(char)0x2979] = "subset above rightwards arrow";
			_charNames[(char)0x297A] = "leftwards arrow through subset";
			_charNames[(char)0x297B] = "superset above leftwards arrow";
			_charNames[(char)0x297C] = "left fish tail";
			_charNames[(char)0x297D] = "right fish tail";
			_charNames[(char)0x297E] = "up fish tail";
			_charNames[(char)0x297F] = "down fish tail";
			_charNames[(char)0x2980] = "triple vertical bar delimiter";
			_charNames[(char)0x2981] = "z notation spot";
			_charNames[(char)0x2982] = "z notation type colon";
			_charNames[(char)0x2983] = "left white curly bracket";
			_charNames[(char)0x2984] = "right white curly bracket";
			_charNames[(char)0x2985] = "left white parenthesis";
			_charNames[(char)0x2986] = "right white parenthesis";
			_charNames[(char)0x2987] = "z notation left image bracket";
			_charNames[(char)0x2988] = "z notation right image bracket";
			_charNames[(char)0x2989] = "z notation left binding bracket";
			_charNames[(char)0x298A] = "z notation right binding bracket";
			_charNames[(char)0x298B] = "left square bracket with underbar";
			_charNames[(char)0x298C] = "right square bracket with underbar";
			_charNames[(char)0x298D] = "left square bracket with tick in top corner";
			_charNames[(char)0x298E] = "right square bracket with tick in bottom corner";
			_charNames[(char)0x298F] = "left square bracket with tick in bottom corner";
			_charNames[(char)0x2990] = "right square bracket with tick in top corner";
			_charNames[(char)0x2991] = "left angle bracket with dot";
			_charNames[(char)0x2992] = "right angle bracket with dot";
			_charNames[(char)0x2993] = "left arc less-than bracket";
			_charNames[(char)0x2994] = "right arc greater-than bracket";
			_charNames[(char)0x2995] = "double left arc greater-than bracket";
			_charNames[(char)0x2996] = "double right arc less-than bracket";
			_charNames[(char)0x2997] = "left black tortoise shell bracket";
			_charNames[(char)0x2998] = "right black tortoise shell bracket";
			_charNames[(char)0x2999] = "dotted fence";
			_charNames[(char)0x299A] = "vertical zigzag line";
			_charNames[(char)0x299B] = "measured angle opening left";
			_charNames[(char)0x299C] = "right angle variant with square";
			_charNames[(char)0x299D] = "measured right angle with dot";
			_charNames[(char)0x299E] = "angle with s inside";
			_charNames[(char)0x299F] = "acute angle";
			_charNames[(char)0x29A0] = "spherical angle opening left";
			_charNames[(char)0x29A1] = "spherical angle opening up";
			_charNames[(char)0x29A2] = "turned angle";
			_charNames[(char)0x29A3] = "reversed angle";
			_charNames[(char)0x29A4] = "angle with underbar";
			_charNames[(char)0x29A5] = "reversed angle with underbar";
			_charNames[(char)0x29A6] = "oblique angle opening up";
			_charNames[(char)0x29A7] = "oblique angle opening down";
			_charNames[(char)0x29A8] = "measured angle with open arm ending in arrow pointing up and right";
			_charNames[(char)0x29A9] = "measured angle with open arm ending in arrow pointing up and left";
			_charNames[(char)0x29AA] = "measured angle with open arm ending in arrow pointing down and right";
			_charNames[(char)0x29AB] = "measured angle with open arm ending in arrow pointing down and left";
			_charNames[(char)0x29AC] = "measured angle with open arm ending in arrow pointing right and up";
			_charNames[(char)0x29AD] = "measured angle with open arm ending in arrow pointing left and up";
			_charNames[(char)0x29AE] = "measured angle with open arm ending in arrow pointing right and down";
			_charNames[(char)0x29AF] = "measured angle with open arm ending in arrow pointing left and down";
			_charNames[(char)0x29B0] = "reversed empty set";
			_charNames[(char)0x29B1] = "empty set with overbar";
			_charNames[(char)0x29B2] = "empty set with small circle above";
			_charNames[(char)0x29B3] = "empty set with right arrow above";
			_charNames[(char)0x29B4] = "empty set with left arrow above";
			_charNames[(char)0x29B5] = "circle with horizontal bar";
			_charNames[(char)0x29B6] = "circled vertical bar";
			_charNames[(char)0x29B7] = "circled parallel";
			_charNames[(char)0x29B8] = "circled reverse solidus";
			_charNames[(char)0x29B9] = "circled perpendicular";
			_charNames[(char)0x29BA] = "circle divided by horizontal bar and top half divided by vertical bar";
			_charNames[(char)0x29BB] = "circle with superimposed x";
			_charNames[(char)0x29BC] = "circled anticlockwise-rotated division sign";
			_charNames[(char)0x29BD] = "up arrow through circle";
			_charNames[(char)0x29BE] = "circled white bullet";
			_charNames[(char)0x29BF] = "circled bullet";
			_charNames[(char)0x29C0] = "circled less-than";
			_charNames[(char)0x29C1] = "circled greater-than";
			_charNames[(char)0x29C2] = "circle with small circle to the right";
			_charNames[(char)0x29C3] = "circle with two horizontal strokes to the right";
			_charNames[(char)0x29C4] = "squared rising diagonal slash";
			_charNames[(char)0x29C5] = "squared falling diagonal slash";
			_charNames[(char)0x29C6] = "squared asterisk";
			_charNames[(char)0x29C7] = "squared small circle";
			_charNames[(char)0x29C8] = "squared square";
			_charNames[(char)0x29C9] = "two joined squares";
			_charNames[(char)0x29CA] = "triangle with dot above";
			_charNames[(char)0x29CB] = "triangle with underbar";
			_charNames[(char)0x29CC] = "s in triangle";
			_charNames[(char)0x29CD] = "triangle with serifs at bottom";
			_charNames[(char)0x29CE] = "right triangle above left triangle";
			_charNames[(char)0x29CF] = "left triangle beside vertical bar";
			_charNames[(char)0x29D0] = "vertical bar beside right triangle";
			_charNames[(char)0x29D1] = "bowtie with left half black";
			_charNames[(char)0x29D2] = "bowtie with right half black";
			_charNames[(char)0x29D3] = "black bowtie";
			_charNames[(char)0x29D4] = "times with left half black";
			_charNames[(char)0x29D5] = "times with right half black";
			_charNames[(char)0x29D6] = "white hourglass";
			_charNames[(char)0x29D7] = "black hourglass";
			_charNames[(char)0x29D8] = "left wiggly fence";
			_charNames[(char)0x29D9] = "right wiggly fence";
			_charNames[(char)0x29DA] = "left double wiggly fence";
			_charNames[(char)0x29DB] = "right double wiggly fence";
			_charNames[(char)0x29DC] = "incomplete infinity";
			_charNames[(char)0x29DD] = "tie over infinity";
			_charNames[(char)0x29DE] = "infinity negated with vertical bar";
			_charNames[(char)0x29DF] = "double-ended multimap";
			_charNames[(char)0x29E0] = "square with contoured outline";
			_charNames[(char)0x29E1] = "increases as";
			_charNames[(char)0x29E2] = "shuffle product";
			_charNames[(char)0x29E3] = "equals sign and slanted parallel";
			_charNames[(char)0x29E4] = "equals sign and slanted parallel with tilde above";
			_charNames[(char)0x29E5] = "identical to and slanted parallel";
			_charNames[(char)0x29E6] = "gleich stark";
			_charNames[(char)0x29E7] = "thermodynamic";
			_charNames[(char)0x29E8] = "down-pointing triangle with left half black";
			_charNames[(char)0x29E9] = "down-pointing triangle with right half black";
			_charNames[(char)0x29EA] = "black diamond with down arrow";
			_charNames[(char)0x29EB] = "black lozenge";
			_charNames[(char)0x29EC] = "white circle with down arrow";
			_charNames[(char)0x29ED] = "black circle with down arrow";
			_charNames[(char)0x29EE] = "error-barred white square";
			_charNames[(char)0x29EF] = "error-barred black square";
			_charNames[(char)0x29F0] = "error-barred white diamond";
			_charNames[(char)0x29F1] = "error-barred black diamond";
			_charNames[(char)0x29F2] = "error-barred white circle";
			_charNames[(char)0x29F3] = "error-barred black circle";
			_charNames[(char)0x29F4] = "rule-delayed";
			_charNames[(char)0x29F5] = "reverse solidus operator";
			_charNames[(char)0x29F6] = "solidus with overbar";
			_charNames[(char)0x29F7] = "reverse solidus with horizontal stroke";
			_charNames[(char)0x29F8] = "big solidus";
			_charNames[(char)0x29F9] = "big reverse solidus";
			_charNames[(char)0x29FA] = "double plus";
			_charNames[(char)0x29FB] = "triple plus";
			_charNames[(char)0x29FC] = "left-pointing curved angle bracket";
			_charNames[(char)0x29FD] = "right-pointing curved angle bracket";
			_charNames[(char)0x29FE] = "tiny";
			_charNames[(char)0x29FF] = "miny";
			_charNames[(char)0x2A00] = "n-ary circled dot operator";
			_charNames[(char)0x2A01] = "n-ary circled plus operator";
			_charNames[(char)0x2A02] = "n-ary circled times operator";
			_charNames[(char)0x2A03] = "n-ary union operator with dot";
			_charNames[(char)0x2A04] = "n-ary union operator with plus";
			_charNames[(char)0x2A05] = "n-ary square intersection operator";
			_charNames[(char)0x2A06] = "n-ary square union operator";
			_charNames[(char)0x2A07] = "two logical and operator";
			_charNames[(char)0x2A08] = "two logical or operator";
			_charNames[(char)0x2A09] = "n-ary times operator";
			_charNames[(char)0x2A0A] = "modulo two sum";
			_charNames[(char)0x2A0B] = "summation with integral";
			_charNames[(char)0x2A0C] = "quadruple integral operator";
			_charNames[(char)0x2A0D] = "finite part integral";
			_charNames[(char)0x2A0E] = "integral with double stroke";
			_charNames[(char)0x2A0F] = "integral average with slash";
			_charNames[(char)0x2A10] = "circulation function";
			_charNames[(char)0x2A11] = "anticlockwise integration";
			_charNames[(char)0x2A12] = "line integration with rectangular path around pole";
			_charNames[(char)0x2A13] = "line integration with semicircular path around pole";
			_charNames[(char)0x2A14] = "line integration not including the pole";
			_charNames[(char)0x2A15] = "integral around a point operator";
			_charNames[(char)0x2A16] = "quaternion integral operator";
			_charNames[(char)0x2A17] = "integral with leftwards arrow with hook";
			_charNames[(char)0x2A18] = "integral with times sign";
			_charNames[(char)0x2A19] = "integral with intersection";
			_charNames[(char)0x2A1A] = "integral with union";
			_charNames[(char)0x2A1B] = "integral with overbar";
			_charNames[(char)0x2A1C] = "integral with underbar";
			_charNames[(char)0x2A1D] = "join";
			_charNames[(char)0x2A1E] = "large left triangle operator";
			_charNames[(char)0x2A1F] = "z notation schema composition";
			_charNames[(char)0x2A20] = "z notation schema piping";
			_charNames[(char)0x2A21] = "z notation schema projection";
			_charNames[(char)0x2A22] = "plus sign with small circle above";
			_charNames[(char)0x2A23] = "plus sign with circumflex accent above";
			_charNames[(char)0x2A24] = "plus sign with tilde above";
			_charNames[(char)0x2A25] = "plus sign with dot below";
			_charNames[(char)0x2A26] = "plus sign with tilde below";
			_charNames[(char)0x2A27] = "plus sign with subscript two";
			_charNames[(char)0x2A28] = "plus sign with black triangle";
			_charNames[(char)0x2A29] = "minus sign with comma above";
			_charNames[(char)0x2A2A] = "minus sign with dot below";
			_charNames[(char)0x2A2B] = "minus sign with falling dots";
			_charNames[(char)0x2A2C] = "minus sign with rising dots";
			_charNames[(char)0x2A2D] = "plus sign in left half circle";
			_charNames[(char)0x2A2E] = "plus sign in right half circle";
			_charNames[(char)0x2A2F] = "vector or cross product";
			_charNames[(char)0x2A30] = "multiplication sign with dot above";
			_charNames[(char)0x2A31] = "multiplication sign with underbar";
			_charNames[(char)0x2A32] = "semidirect product with bottom closed";
			_charNames[(char)0x2A33] = "smash product";
			_charNames[(char)0x2A34] = "multiplication sign in left half circle";
			_charNames[(char)0x2A35] = "multiplication sign in right half circle";
			_charNames[(char)0x2A36] = "circled multiplication sign with circumflex accent";
			_charNames[(char)0x2A37] = "multiplication sign in double circle";
			_charNames[(char)0x2A38] = "circled division sign";
			_charNames[(char)0x2A39] = "plus sign in triangle";
			_charNames[(char)0x2A3A] = "minus sign in triangle";
			_charNames[(char)0x2A3B] = "multiplication sign in triangle";
			_charNames[(char)0x2A3C] = "interior product";
			_charNames[(char)0x2A3D] = "righthand interior product";
			_charNames[(char)0x2A3E] = "z notation relational composition";
			_charNames[(char)0x2A3F] = "amalgamation or coproduct";
			_charNames[(char)0x2A40] = "intersection with dot";
			_charNames[(char)0x2A41] = "union with minus sign";
			_charNames[(char)0x2A42] = "union with overbar";
			_charNames[(char)0x2A43] = "intersection with overbar";
			_charNames[(char)0x2A44] = "intersection with logical and";
			_charNames[(char)0x2A45] = "union with logical or";
			_charNames[(char)0x2A46] = "union above intersection";
			_charNames[(char)0x2A47] = "intersection above union";
			_charNames[(char)0x2A48] = "union above bar above intersection";
			_charNames[(char)0x2A49] = "intersection above bar above union";
			_charNames[(char)0x2A4A] = "union beside and joined with union";
			_charNames[(char)0x2A4B] = "intersection beside and joined with intersection";
			_charNames[(char)0x2A4C] = "closed union with serifs";
			_charNames[(char)0x2A4D] = "closed intersection with serifs";
			_charNames[(char)0x2A4E] = "double square intersection";
			_charNames[(char)0x2A4F] = "double square union";
			_charNames[(char)0x2A50] = "closed union with serifs and smash product";
			_charNames[(char)0x2A51] = "logical and with dot above";
			_charNames[(char)0x2A52] = "logical or with dot above";
			_charNames[(char)0x2A53] = "double logical and";
			_charNames[(char)0x2A54] = "double logical or";
			_charNames[(char)0x2A55] = "two intersecting logical and";
			_charNames[(char)0x2A56] = "two intersecting logical or";
			_charNames[(char)0x2A57] = "sloping large or";
			_charNames[(char)0x2A58] = "sloping large and";
			_charNames[(char)0x2A59] = "logical or overlapping logical and";
			_charNames[(char)0x2A5A] = "logical and with middle stem";
			_charNames[(char)0x2A5B] = "logical or with middle stem";
			_charNames[(char)0x2A5C] = "logical and with horizontal dash";
			_charNames[(char)0x2A5D] = "logical or with horizontal dash";
			_charNames[(char)0x2A5E] = "logical and with double overbar";
			_charNames[(char)0x2A5F] = "logical and with underbar";
			_charNames[(char)0x2A60] = "logical and with double underbar";
			_charNames[(char)0x2A61] = "small vee with underbar";
			_charNames[(char)0x2A62] = "logical or with double overbar";
			_charNames[(char)0x2A63] = "logical or with double underbar";
			_charNames[(char)0x2A64] = "z notation domain antirestriction";
			_charNames[(char)0x2A65] = "z notation range antirestriction";
			_charNames[(char)0x2A66] = "equals sign with dot below";
			_charNames[(char)0x2A67] = "identical with dot above";
			_charNames[(char)0x2A68] = "triple horizontal bar with double vertical stroke";
			_charNames[(char)0x2A69] = "triple horizontal bar with triple vertical stroke";
			_charNames[(char)0x2A6A] = "tilde operator with dot above";
			_charNames[(char)0x2A6B] = "tilde operator with rising dots";
			_charNames[(char)0x2A6C] = "similar minus similar";
			_charNames[(char)0x2A6D] = "congruent with dot above";
			_charNames[(char)0x2A6E] = "equals with asterisk";
			_charNames[(char)0x2A6F] = "almost equal to with circumflex accent";
			_charNames[(char)0x2A70] = "approximately equal or equal to";
			_charNames[(char)0x2A71] = "equals sign above plus sign";
			_charNames[(char)0x2A72] = "plus sign above equals sign";
			_charNames[(char)0x2A73] = "equals sign above tilde operator";
			_charNames[(char)0x2A74] = "double colon equal";
			_charNames[(char)0x2A75] = "two consecutive equals signs";
			_charNames[(char)0x2A76] = "three consecutive equals signs";
			_charNames[(char)0x2A77] = "equals sign with two dots above and two dots below";
			_charNames[(char)0x2A78] = "equivalent with four dots above";
			_charNames[(char)0x2A79] = "less-than with circle inside";
			_charNames[(char)0x2A7A] = "greater-than with circle inside";
			_charNames[(char)0x2A7B] = "less-than with question mark above";
			_charNames[(char)0x2A7C] = "greater-than with question mark above";
			_charNames[(char)0x2A7D] = "less-than or slanted equal to";
			_charNames[(char)0x2A7E] = "greater-than or slanted equal to";
			_charNames[(char)0x2A7F] = "less-than or slanted equal to with dot inside";
			_charNames[(char)0x2A80] = "greater-than or slanted equal to with dot inside";
			_charNames[(char)0x2A81] = "less-than or slanted equal to with dot above";
			_charNames[(char)0x2A82] = "greater-than or slanted equal to with dot above";
			_charNames[(char)0x2A83] = "less-than or slanted equal to with dot above right";
			_charNames[(char)0x2A84] = "greater-than or slanted equal to with dot above left";
			_charNames[(char)0x2A85] = "less-than or approximate";
			_charNames[(char)0x2A86] = "greater-than or approximate";
			_charNames[(char)0x2A87] = "less-than and single-line not equal to";
			_charNames[(char)0x2A88] = "greater-than and single-line not equal to";
			_charNames[(char)0x2A89] = "less-than and not approximate";
			_charNames[(char)0x2A8A] = "greater-than and not approximate";
			_charNames[(char)0x2A8B] = "less-than above double-line equal above greater-than";
			_charNames[(char)0x2A8C] = "greater-than above double-line equal above less-than";
			_charNames[(char)0x2A8D] = "less-than above similar or equal";
			_charNames[(char)0x2A8E] = "greater-than above similar or equal";
			_charNames[(char)0x2A8F] = "less-than above similar above greater-than";
			_charNames[(char)0x2A90] = "greater-than above similar above less-than";
			_charNames[(char)0x2A91] = "less-than above greater-than above double-line equal";
			_charNames[(char)0x2A92] = "greater-than above less-than above double-line equal";
			_charNames[(char)0x2A93] = "less-than above slanted equal above greater-than above slanted equal";
			_charNames[(char)0x2A94] = "greater-than above slanted equal above less-than above slanted equal";
			_charNames[(char)0x2A95] = "slanted equal to or less-than";
			_charNames[(char)0x2A96] = "slanted equal to or greater-than";
			_charNames[(char)0x2A97] = "slanted equal to or less-than with dot inside";
			_charNames[(char)0x2A98] = "slanted equal to or greater-than with dot inside";
			_charNames[(char)0x2A99] = "double-line equal to or less-than";
			_charNames[(char)0x2A9A] = "double-line equal to or greater-than";
			_charNames[(char)0x2A9B] = "double-line slanted equal to or less-than";
			_charNames[(char)0x2A9C] = "double-line slanted equal to or greater-than";
			_charNames[(char)0x2A9D] = "similar or less-than";
			_charNames[(char)0x2A9E] = "similar or greater-than";
			_charNames[(char)0x2A9F] = "similar above less-than above equals sign";
			_charNames[(char)0x2AA0] = "similar above greater-than above equals sign";
			_charNames[(char)0x2AA1] = "double nested less-than";
			_charNames[(char)0x2AA2] = "double nested greater-than";
			_charNames[(char)0x2AA3] = "double nested less-than with underbar";
			_charNames[(char)0x2AA4] = "greater-than overlapping less-than";
			_charNames[(char)0x2AA5] = "greater-than beside less-than";
			_charNames[(char)0x2AA6] = "less-than closed by curve";
			_charNames[(char)0x2AA7] = "greater-than closed by curve";
			_charNames[(char)0x2AA8] = "less-than closed by curve above slanted equal";
			_charNames[(char)0x2AA9] = "greater-than closed by curve above slanted equal";
			_charNames[(char)0x2AAA] = "smaller than";
			_charNames[(char)0x2AAB] = "larger than";
			_charNames[(char)0x2AAC] = "smaller than or equal to";
			_charNames[(char)0x2AAD] = "larger than or equal to";
			_charNames[(char)0x2AAE] = "equals sign with bumpy above";
			_charNames[(char)0x2AAF] = "precedes above single-line equals sign";
			_charNames[(char)0x2AB0] = "succeeds above single-line equals sign";
			_charNames[(char)0x2AB1] = "precedes above single-line not equal to";
			_charNames[(char)0x2AB2] = "succeeds above single-line not equal to";
			_charNames[(char)0x2AB3] = "precedes above equals sign";
			_charNames[(char)0x2AB4] = "succeeds above equals sign";
			_charNames[(char)0x2AB5] = "precedes above not equal to";
			_charNames[(char)0x2AB6] = "succeeds above not equal to";
			_charNames[(char)0x2AB7] = "precedes above almost equal to";
			_charNames[(char)0x2AB8] = "succeeds above almost equal to";
			_charNames[(char)0x2AB9] = "precedes above not almost equal to";
			_charNames[(char)0x2ABA] = "succeeds above not almost equal to";
			_charNames[(char)0x2ABB] = "double precedes";
			_charNames[(char)0x2ABC] = "double succeeds";
			_charNames[(char)0x2ABD] = "subset with dot";
			_charNames[(char)0x2ABE] = "superset with dot";
			_charNames[(char)0x2ABF] = "subset with plus sign below";
			_charNames[(char)0x2AC0] = "superset with plus sign below";
			_charNames[(char)0x2AC1] = "subset with multiplication sign below";
			_charNames[(char)0x2AC2] = "superset with multiplication sign below";
			_charNames[(char)0x2AC3] = "subset of or equal to with dot above";
			_charNames[(char)0x2AC4] = "superset of or equal to with dot above";
			_charNames[(char)0x2AC5] = "subset of above equals sign";
			_charNames[(char)0x2AC6] = "superset of above equals sign";
			_charNames[(char)0x2AC7] = "subset of above tilde operator";
			_charNames[(char)0x2AC8] = "superset of above tilde operator";
			_charNames[(char)0x2AC9] = "subset of above almost equal to";
			_charNames[(char)0x2ACA] = "superset of above almost equal to";
			_charNames[(char)0x2ACB] = "subset of above not equal to";
			_charNames[(char)0x2ACC] = "superset of above not equal to";
			_charNames[(char)0x2ACD] = "square left open box operator";
			_charNames[(char)0x2ACE] = "square right open box operator";
			_charNames[(char)0x2ACF] = "closed subset";
			_charNames[(char)0x2AD0] = "closed superset";
			_charNames[(char)0x2AD1] = "closed subset or equal to";
			_charNames[(char)0x2AD2] = "closed superset or equal to";
			_charNames[(char)0x2AD3] = "subset above superset";
			_charNames[(char)0x2AD4] = "superset above subset";
			_charNames[(char)0x2AD5] = "subset above subset";
			_charNames[(char)0x2AD6] = "superset above superset";
			_charNames[(char)0x2AD7] = "superset beside subset";
			_charNames[(char)0x2AD8] = "superset beside and joined by dash with subset";
			_charNames[(char)0x2AD9] = "element of opening downwards";
			_charNames[(char)0x2ADA] = "pitchfork with tee top";
			_charNames[(char)0x2ADB] = "transversal intersection";
			_charNames[(char)0x2ADC] = "forking";
			_charNames[(char)0x2ADD] = "nonforking";
			_charNames[(char)0x2ADE] = "short left tack";
			_charNames[(char)0x2ADF] = "short down tack";
			_charNames[(char)0x2AE0] = "short up tack";
			_charNames[(char)0x2AE1] = "perpendicular with s";
			_charNames[(char)0x2AE2] = "vertical bar triple right turnstile";
			_charNames[(char)0x2AE3] = "double vertical bar left turnstile";
			_charNames[(char)0x2AE4] = "vertical bar double left turnstile";
			_charNames[(char)0x2AE5] = "double vertical bar double left turnstile";
			_charNames[(char)0x2AE6] = "long dash from left member of double vertical";
			_charNames[(char)0x2AE7] = "short down tack with overbar";
			_charNames[(char)0x2AE8] = "short up tack with underbar";
			_charNames[(char)0x2AE9] = "short up tack above short down tack";
			_charNames[(char)0x2AEA] = "double down tack";
			_charNames[(char)0x2AEB] = "double up tack";
			_charNames[(char)0x2AEC] = "double stroke not sign";
			_charNames[(char)0x2AED] = "reversed double stroke not sign";
			_charNames[(char)0x2AEE] = "does not divide with reversed negation slash";
			_charNames[(char)0x2AEF] = "vertical line with circle above";
			_charNames[(char)0x2AF0] = "vertical line with circle below";
			_charNames[(char)0x2AF1] = "down tack with circle below";
			_charNames[(char)0x2AF2] = "parallel with horizontal stroke";
			_charNames[(char)0x2AF3] = "parallel with tilde operator";
			_charNames[(char)0x2AF4] = "triple vertical bar binary relation";
			_charNames[(char)0x2AF5] = "triple vertical bar with horizontal stroke";
			_charNames[(char)0x2AF6] = "triple colon operator";
			_charNames[(char)0x2AF7] = "triple nested less-than";
			_charNames[(char)0x2AF8] = "triple nested greater-than";
			_charNames[(char)0x2AF9] = "double-line slanted less-than or equal to";
			_charNames[(char)0x2AFA] = "double-line slanted greater-than or equal to";
			_charNames[(char)0x2AFB] = "triple solidus binary relation";
			_charNames[(char)0x2AFC] = "large triple vertical bar operator";
			_charNames[(char)0x2AFD] = "double solidus operator";
			_charNames[(char)0x2AFE] = "white vertical bar";
			_charNames[(char)0x2AFF] = "n-ary white vertical bar";
			_charNames[(char)0x2B00] = "north east white arrow";
			_charNames[(char)0x2B01] = "north west white arrow";
			_charNames[(char)0x2B02] = "south east white arrow";
			_charNames[(char)0x2B03] = "south west white arrow";
			_charNames[(char)0x2B04] = "left right white arrow";
			_charNames[(char)0x2B05] = "leftwards black arrow";
			_charNames[(char)0x2B06] = "upwards black arrow";
			_charNames[(char)0x2B07] = "downwards black arrow";
			_charNames[(char)0x2B08] = "north east black arrow";
			_charNames[(char)0x2B09] = "north west black arrow";
			_charNames[(char)0x2B0A] = "south east black arrow";
			_charNames[(char)0x2B0B] = "south west black arrow";
			_charNames[(char)0x2B0C] = "left right black arrow";
			_charNames[(char)0x2B0D] = "up down black arrow";
			_charNames[(char)0x2B0E] = "rightwards arrow with tip downwards";
			_charNames[(char)0x2B0F] = "rightwards arrow with tip upwards";
			_charNames[(char)0x2B10] = "leftwards arrow with tip downwards";
			_charNames[(char)0x2B11] = "leftwards arrow with tip upwards";
			_charNames[(char)0x2B12] = "square with top half black";
			_charNames[(char)0x2B13] = "square with bottom half black";
			_charNames[(char)0x2C00] = "glagolitic capital letter azu";
			_charNames[(char)0x2C01] = "glagolitic capital letter buky";
			_charNames[(char)0x2C02] = "glagolitic capital letter vede";
			_charNames[(char)0x2C03] = "glagolitic capital letter glagoli";
			_charNames[(char)0x2C04] = "glagolitic capital letter dobro";
			_charNames[(char)0x2C05] = "glagolitic capital letter yestu";
			_charNames[(char)0x2C06] = "glagolitic capital letter zhivete";
			_charNames[(char)0x2C07] = "glagolitic capital letter dzelo";
			_charNames[(char)0x2C08] = "glagolitic capital letter zemlja";
			_charNames[(char)0x2C09] = "glagolitic capital letter izhe";
			_charNames[(char)0x2C0A] = "glagolitic capital letter initial izhe";
			_charNames[(char)0x2C0B] = "glagolitic capital letter i";
			_charNames[(char)0x2C0C] = "glagolitic capital letter djervi";
			_charNames[(char)0x2C0D] = "glagolitic capital letter kako";
			_charNames[(char)0x2C0E] = "glagolitic capital letter ljudije";
			_charNames[(char)0x2C0F] = "glagolitic capital letter myslite";
			_charNames[(char)0x2C10] = "glagolitic capital letter nashi";
			_charNames[(char)0x2C11] = "glagolitic capital letter onu";
			_charNames[(char)0x2C12] = "glagolitic capital letter pokoji";
			_charNames[(char)0x2C13] = "glagolitic capital letter ritsi";
			_charNames[(char)0x2C14] = "glagolitic capital letter slovo";
			_charNames[(char)0x2C15] = "glagolitic capital letter tvrido";
			_charNames[(char)0x2C16] = "glagolitic capital letter uku";
			_charNames[(char)0x2C17] = "glagolitic capital letter fritu";
			_charNames[(char)0x2C18] = "glagolitic capital letter heru";
			_charNames[(char)0x2C19] = "glagolitic capital letter otu";
			_charNames[(char)0x2C1A] = "glagolitic capital letter pe";
			_charNames[(char)0x2C1B] = "glagolitic capital letter shta";
			_charNames[(char)0x2C1C] = "glagolitic capital letter tsi";
			_charNames[(char)0x2C1D] = "glagolitic capital letter chrivi";
			_charNames[(char)0x2C1E] = "glagolitic capital letter sha";
			_charNames[(char)0x2C1F] = "glagolitic capital letter yeru";
			_charNames[(char)0x2C20] = "glagolitic capital letter yeri";
			_charNames[(char)0x2C21] = "glagolitic capital letter yati";
			_charNames[(char)0x2C22] = "glagolitic capital letter spidery ha";
			_charNames[(char)0x2C23] = "glagolitic capital letter yu";
			_charNames[(char)0x2C24] = "glagolitic capital letter small yus";
			_charNames[(char)0x2C25] = "glagolitic capital letter small yus with tail";
			_charNames[(char)0x2C26] = "glagolitic capital letter yo";
			_charNames[(char)0x2C27] = "glagolitic capital letter iotated small yus";
			_charNames[(char)0x2C28] = "glagolitic capital letter big yus";
			_charNames[(char)0x2C29] = "glagolitic capital letter iotated big yus";
			_charNames[(char)0x2C2A] = "glagolitic capital letter fita";
			_charNames[(char)0x2C2B] = "glagolitic capital letter izhitsa";
			_charNames[(char)0x2C2C] = "glagolitic capital letter shtapic";
			_charNames[(char)0x2C2D] = "glagolitic capital letter trokutasti a";
			_charNames[(char)0x2C2E] = "glagolitic capital letter latinate myslite";
			_charNames[(char)0x2C30] = "glagolitic small letter azu";
			_charNames[(char)0x2C31] = "glagolitic small letter buky";
			_charNames[(char)0x2C32] = "glagolitic small letter vede";
			_charNames[(char)0x2C33] = "glagolitic small letter glagoli";
			_charNames[(char)0x2C34] = "glagolitic small letter dobro";
			_charNames[(char)0x2C35] = "glagolitic small letter yestu";
			_charNames[(char)0x2C36] = "glagolitic small letter zhivete";
			_charNames[(char)0x2C37] = "glagolitic small letter dzelo";
			_charNames[(char)0x2C38] = "glagolitic small letter zemlja";
			_charNames[(char)0x2C39] = "glagolitic small letter izhe";
			_charNames[(char)0x2C3A] = "glagolitic small letter initial izhe";
			_charNames[(char)0x2C3B] = "glagolitic small letter i";
			_charNames[(char)0x2C3C] = "glagolitic small letter djervi";
			_charNames[(char)0x2C3D] = "glagolitic small letter kako";
			_charNames[(char)0x2C3E] = "glagolitic small letter ljudije";
			_charNames[(char)0x2C3F] = "glagolitic small letter myslite";
			_charNames[(char)0x2C40] = "glagolitic small letter nashi";
			_charNames[(char)0x2C41] = "glagolitic small letter onu";
			_charNames[(char)0x2C42] = "glagolitic small letter pokoji";
			_charNames[(char)0x2C43] = "glagolitic small letter ritsi";
			_charNames[(char)0x2C44] = "glagolitic small letter slovo";
			_charNames[(char)0x2C45] = "glagolitic small letter tvrido";
			_charNames[(char)0x2C46] = "glagolitic small letter uku";
			_charNames[(char)0x2C47] = "glagolitic small letter fritu";
			_charNames[(char)0x2C48] = "glagolitic small letter heru";
			_charNames[(char)0x2C49] = "glagolitic small letter otu";
			_charNames[(char)0x2C4A] = "glagolitic small letter pe";
			_charNames[(char)0x2C4B] = "glagolitic small letter shta";
			_charNames[(char)0x2C4C] = "glagolitic small letter tsi";
			_charNames[(char)0x2C4D] = "glagolitic small letter chrivi";
			_charNames[(char)0x2C4E] = "glagolitic small letter sha";
			_charNames[(char)0x2C4F] = "glagolitic small letter yeru";
			_charNames[(char)0x2C50] = "glagolitic small letter yeri";
			_charNames[(char)0x2C51] = "glagolitic small letter yati";
			_charNames[(char)0x2C52] = "glagolitic small letter spidery ha";
			_charNames[(char)0x2C53] = "glagolitic small letter yu";
			_charNames[(char)0x2C54] = "glagolitic small letter small yus";
			_charNames[(char)0x2C55] = "glagolitic small letter small yus with tail";
			_charNames[(char)0x2C56] = "glagolitic small letter yo";
			_charNames[(char)0x2C57] = "glagolitic small letter iotated small yus";
			_charNames[(char)0x2C58] = "glagolitic small letter big yus";
			_charNames[(char)0x2C59] = "glagolitic small letter iotated big yus";
			_charNames[(char)0x2C5A] = "glagolitic small letter fita";
			_charNames[(char)0x2C5B] = "glagolitic small letter izhitsa";
			_charNames[(char)0x2C5C] = "glagolitic small letter shtapic";
			_charNames[(char)0x2C5D] = "glagolitic small letter trokutasti a";
			_charNames[(char)0x2C5E] = "glagolitic small letter latinate myslite";
			_charNames[(char)0x2C80] = "coptic capital letter alfa";
			_charNames[(char)0x2C81] = "coptic small letter alfa";
			_charNames[(char)0x2C82] = "coptic capital letter vida";
			_charNames[(char)0x2C83] = "coptic small letter vida";
			_charNames[(char)0x2C84] = "coptic capital letter gamma";
			_charNames[(char)0x2C85] = "coptic small letter gamma";
			_charNames[(char)0x2C86] = "coptic capital letter dalda";
			_charNames[(char)0x2C87] = "coptic small letter dalda";
			_charNames[(char)0x2C88] = "coptic capital letter eie";
			_charNames[(char)0x2C89] = "coptic small letter eie";
			_charNames[(char)0x2C8A] = "coptic capital letter sou";
			_charNames[(char)0x2C8B] = "coptic small letter sou";
			_charNames[(char)0x2C8C] = "coptic capital letter zata";
			_charNames[(char)0x2C8D] = "coptic small letter zata";
			_charNames[(char)0x2C8E] = "coptic capital letter hate";
			_charNames[(char)0x2C8F] = "coptic small letter hate";
			_charNames[(char)0x2C90] = "coptic capital letter thethe";
			_charNames[(char)0x2C91] = "coptic small letter thethe";
			_charNames[(char)0x2C92] = "coptic capital letter iauda";
			_charNames[(char)0x2C93] = "coptic small letter iauda";
			_charNames[(char)0x2C94] = "coptic capital letter kapa";
			_charNames[(char)0x2C95] = "coptic small letter kapa";
			_charNames[(char)0x2C96] = "coptic capital letter laula";
			_charNames[(char)0x2C97] = "coptic small letter laula";
			_charNames[(char)0x2C98] = "coptic capital letter mi";
			_charNames[(char)0x2C99] = "coptic small letter mi";
			_charNames[(char)0x2C9A] = "coptic capital letter ni";
			_charNames[(char)0x2C9B] = "coptic small letter ni";
			_charNames[(char)0x2C9C] = "coptic capital letter ksi";
			_charNames[(char)0x2C9D] = "coptic small letter ksi";
			_charNames[(char)0x2C9E] = "coptic capital letter o";
			_charNames[(char)0x2C9F] = "coptic small letter o";
			_charNames[(char)0x2CA0] = "coptic capital letter pi";
			_charNames[(char)0x2CA1] = "coptic small letter pi";
			_charNames[(char)0x2CA2] = "coptic capital letter ro";
			_charNames[(char)0x2CA3] = "coptic small letter ro";
			_charNames[(char)0x2CA4] = "coptic capital letter sima";
			_charNames[(char)0x2CA5] = "coptic small letter sima";
			_charNames[(char)0x2CA6] = "coptic capital letter tau";
			_charNames[(char)0x2CA7] = "coptic small letter tau";
			_charNames[(char)0x2CA8] = "coptic capital letter ua";
			_charNames[(char)0x2CA9] = "coptic small letter ua";
			_charNames[(char)0x2CAA] = "coptic capital letter fi";
			_charNames[(char)0x2CAB] = "coptic small letter fi";
			_charNames[(char)0x2CAC] = "coptic capital letter khi";
			_charNames[(char)0x2CAD] = "coptic small letter khi";
			_charNames[(char)0x2CAE] = "coptic capital letter psi";
			_charNames[(char)0x2CAF] = "coptic small letter psi";
			_charNames[(char)0x2CB0] = "coptic capital letter oou";
			_charNames[(char)0x2CB1] = "coptic small letter oou";
			_charNames[(char)0x2CB2] = "coptic capital letter dialect-p alef";
			_charNames[(char)0x2CB3] = "coptic small letter dialect-p alef";
			_charNames[(char)0x2CB4] = "coptic capital letter old coptic ain";
			_charNames[(char)0x2CB5] = "coptic small letter old coptic ain";
			_charNames[(char)0x2CB6] = "coptic capital letter cryptogrammic eie";
			_charNames[(char)0x2CB7] = "coptic small letter cryptogrammic eie";
			_charNames[(char)0x2CB8] = "coptic capital letter dialect-p kapa";
			_charNames[(char)0x2CB9] = "coptic small letter dialect-p kapa";
			_charNames[(char)0x2CBA] = "coptic capital letter dialect-p ni";
			_charNames[(char)0x2CBB] = "coptic small letter dialect-p ni";
			_charNames[(char)0x2CBC] = "coptic capital letter cryptogrammic ni";
			_charNames[(char)0x2CBD] = "coptic small letter cryptogrammic ni";
			_charNames[(char)0x2CBE] = "coptic capital letter old coptic oou";
			_charNames[(char)0x2CBF] = "coptic small letter old coptic oou";
			_charNames[(char)0x2CC0] = "coptic capital letter sampi";
			_charNames[(char)0x2CC1] = "coptic small letter sampi";
			_charNames[(char)0x2CC2] = "coptic capital letter crossed shei";
			_charNames[(char)0x2CC3] = "coptic small letter crossed shei";
			_charNames[(char)0x2CC4] = "coptic capital letter old coptic shei";
			_charNames[(char)0x2CC5] = "coptic small letter old coptic shei";
			_charNames[(char)0x2CC6] = "coptic capital letter old coptic esh";
			_charNames[(char)0x2CC7] = "coptic small letter old coptic esh";
			_charNames[(char)0x2CC8] = "coptic capital letter akhmimic khei";
			_charNames[(char)0x2CC9] = "coptic small letter akhmimic khei";
			_charNames[(char)0x2CCA] = "coptic capital letter dialect-p hori";
			_charNames[(char)0x2CCB] = "coptic small letter dialect-p hori";
			_charNames[(char)0x2CCC] = "coptic capital letter old coptic hori";
			_charNames[(char)0x2CCD] = "coptic small letter old coptic hori";
			_charNames[(char)0x2CCE] = "coptic capital letter old coptic ha";
			_charNames[(char)0x2CCF] = "coptic small letter old coptic ha";
			_charNames[(char)0x2CD0] = "coptic capital letter l-shaped ha";
			_charNames[(char)0x2CD1] = "coptic small letter l-shaped ha";
			_charNames[(char)0x2CD2] = "coptic capital letter old coptic hei";
			_charNames[(char)0x2CD3] = "coptic small letter old coptic hei";
			_charNames[(char)0x2CD4] = "coptic capital letter old coptic hat";
			_charNames[(char)0x2CD5] = "coptic small letter old coptic hat";
			_charNames[(char)0x2CD6] = "coptic capital letter old coptic gangia";
			_charNames[(char)0x2CD7] = "coptic small letter old coptic gangia";
			_charNames[(char)0x2CD8] = "coptic capital letter old coptic dja";
			_charNames[(char)0x2CD9] = "coptic small letter old coptic dja";
			_charNames[(char)0x2CDA] = "coptic capital letter old coptic shima";
			_charNames[(char)0x2CDB] = "coptic small letter old coptic shima";
			_charNames[(char)0x2CDC] = "coptic capital letter old nubian shima";
			_charNames[(char)0x2CDD] = "coptic small letter old nubian shima";
			_charNames[(char)0x2CDE] = "coptic capital letter old nubian ngi";
			_charNames[(char)0x2CDF] = "coptic small letter old nubian ngi";
			_charNames[(char)0x2CE0] = "coptic capital letter old nubian nyi";
			_charNames[(char)0x2CE1] = "coptic small letter old nubian nyi";
			_charNames[(char)0x2CE2] = "coptic capital letter old nubian wau";
			_charNames[(char)0x2CE3] = "coptic small letter old nubian wau";
			_charNames[(char)0x2CE4] = "coptic symbol kai";
			_charNames[(char)0x2CE5] = "coptic symbol mi ro";
			_charNames[(char)0x2CE6] = "coptic symbol pi ro";
			_charNames[(char)0x2CE7] = "coptic symbol stauros";
			_charNames[(char)0x2CE8] = "coptic symbol tau ro";
			_charNames[(char)0x2CE9] = "coptic symbol khi ro";
			_charNames[(char)0x2CEA] = "coptic symbol shima sima";
			_charNames[(char)0x2CF9] = "coptic old nubian full stop";
			_charNames[(char)0x2CFA] = "coptic old nubian direct question mark";
			_charNames[(char)0x2CFB] = "coptic old nubian indirect question mark";
			_charNames[(char)0x2CFC] = "coptic old nubian verse divider";
			_charNames[(char)0x2CFD] = "coptic fraction one half";
			_charNames[(char)0x2CFE] = "coptic full stop";
			_charNames[(char)0x2CFF] = "coptic morphological divider";
			_charNames[(char)0x2D00] = "georgian small letter an";
			_charNames[(char)0x2D01] = "georgian small letter ban";
			_charNames[(char)0x2D02] = "georgian small letter gan";
			_charNames[(char)0x2D03] = "georgian small letter don";
			_charNames[(char)0x2D04] = "georgian small letter en";
			_charNames[(char)0x2D05] = "georgian small letter vin";
			_charNames[(char)0x2D06] = "georgian small letter zen";
			_charNames[(char)0x2D07] = "georgian small letter tan";
			_charNames[(char)0x2D08] = "georgian small letter in";
			_charNames[(char)0x2D09] = "georgian small letter kan";
			_charNames[(char)0x2D0A] = "georgian small letter las";
			_charNames[(char)0x2D0B] = "georgian small letter man";
			_charNames[(char)0x2D0C] = "georgian small letter nar";
			_charNames[(char)0x2D0D] = "georgian small letter on";
			_charNames[(char)0x2D0E] = "georgian small letter par";
			_charNames[(char)0x2D0F] = "georgian small letter zhar";
			_charNames[(char)0x2D10] = "georgian small letter rae";
			_charNames[(char)0x2D11] = "georgian small letter san";
			_charNames[(char)0x2D12] = "georgian small letter tar";
			_charNames[(char)0x2D13] = "georgian small letter un";
			_charNames[(char)0x2D14] = "georgian small letter phar";
			_charNames[(char)0x2D15] = "georgian small letter khar";
			_charNames[(char)0x2D16] = "georgian small letter ghan";
			_charNames[(char)0x2D17] = "georgian small letter qar";
			_charNames[(char)0x2D18] = "georgian small letter shin";
			_charNames[(char)0x2D19] = "georgian small letter chin";
			_charNames[(char)0x2D1A] = "georgian small letter can";
			_charNames[(char)0x2D1B] = "georgian small letter jil";
			_charNames[(char)0x2D1C] = "georgian small letter cil";
			_charNames[(char)0x2D1D] = "georgian small letter char";
			_charNames[(char)0x2D1E] = "georgian small letter xan";
			_charNames[(char)0x2D1F] = "georgian small letter jhan";
			_charNames[(char)0x2D20] = "georgian small letter hae";
			_charNames[(char)0x2D21] = "georgian small letter he";
			_charNames[(char)0x2D22] = "georgian small letter hie";
			_charNames[(char)0x2D23] = "georgian small letter we";
			_charNames[(char)0x2D24] = "georgian small letter har";
			_charNames[(char)0x2D25] = "georgian small letter hoe";
			_charNames[(char)0x2D30] = "tifinagh letter ya";
			_charNames[(char)0x2D31] = "tifinagh letter yab";
			_charNames[(char)0x2D32] = "tifinagh letter yabh";
			_charNames[(char)0x2D33] = "tifinagh letter yag";
			_charNames[(char)0x2D34] = "tifinagh letter yaghh";
			_charNames[(char)0x2D35] = "tifinagh letter berber academy yaj";
			_charNames[(char)0x2D36] = "tifinagh letter yaj";
			_charNames[(char)0x2D37] = "tifinagh letter yad";
			_charNames[(char)0x2D38] = "tifinagh letter yadh";
			_charNames[(char)0x2D39] = "tifinagh letter yadd";
			_charNames[(char)0x2D3A] = "tifinagh letter yaddh";
			_charNames[(char)0x2D3B] = "tifinagh letter yey";
			_charNames[(char)0x2D3C] = "tifinagh letter yaf";
			_charNames[(char)0x2D3D] = "tifinagh letter yak";
			_charNames[(char)0x2D3E] = "tifinagh letter tuareg yak";
			_charNames[(char)0x2D3F] = "tifinagh letter yakhh";
			_charNames[(char)0x2D40] = "tifinagh letter yah";
			_charNames[(char)0x2D41] = "tifinagh letter berber academy yah";
			_charNames[(char)0x2D42] = "tifinagh letter tuareg yah";
			_charNames[(char)0x2D43] = "tifinagh letter yahh";
			_charNames[(char)0x2D44] = "tifinagh letter yaa";
			_charNames[(char)0x2D45] = "tifinagh letter yakh";
			_charNames[(char)0x2D46] = "tifinagh letter tuareg yakh";
			_charNames[(char)0x2D47] = "tifinagh letter yaq";
			_charNames[(char)0x2D48] = "tifinagh letter tuareg yaq";
			_charNames[(char)0x2D49] = "tifinagh letter yi";
			_charNames[(char)0x2D4A] = "tifinagh letter yazh";
			_charNames[(char)0x2D4B] = "tifinagh letter ahaggar yazh";
			_charNames[(char)0x2D4C] = "tifinagh letter tuareg yazh";
			_charNames[(char)0x2D4D] = "tifinagh letter yal";
			_charNames[(char)0x2D4E] = "tifinagh letter yam";
			_charNames[(char)0x2D4F] = "tifinagh letter yan";
			_charNames[(char)0x2D50] = "tifinagh letter tuareg yagn";
			_charNames[(char)0x2D51] = "tifinagh letter tuareg yang";
			_charNames[(char)0x2D52] = "tifinagh letter yap";
			_charNames[(char)0x2D53] = "tifinagh letter yu";
			_charNames[(char)0x2D54] = "tifinagh letter yar";
			_charNames[(char)0x2D55] = "tifinagh letter yarr";
			_charNames[(char)0x2D56] = "tifinagh letter yagh";
			_charNames[(char)0x2D57] = "tifinagh letter tuareg yagh";
			_charNames[(char)0x2D58] = "tifinagh letter ayer yagh";
			_charNames[(char)0x2D59] = "tifinagh letter yas";
			_charNames[(char)0x2D5A] = "tifinagh letter yass";
			_charNames[(char)0x2D5B] = "tifinagh letter yash";
			_charNames[(char)0x2D5C] = "tifinagh letter yat";
			_charNames[(char)0x2D5D] = "tifinagh letter yath";
			_charNames[(char)0x2D5E] = "tifinagh letter yach";
			_charNames[(char)0x2D5F] = "tifinagh letter yatt";
			_charNames[(char)0x2D60] = "tifinagh letter yav";
			_charNames[(char)0x2D61] = "tifinagh letter yaw";
			_charNames[(char)0x2D62] = "tifinagh letter yay";
			_charNames[(char)0x2D63] = "tifinagh letter yaz";
			_charNames[(char)0x2D64] = "tifinagh letter tawellemet yaz";
			_charNames[(char)0x2D65] = "tifinagh letter yazz";
			_charNames[(char)0x2D6F] = "tifinagh modifier letter labialization mark";
			_charNames[(char)0x2D80] = "ethiopic syllable loa";
			_charNames[(char)0x2D81] = "ethiopic syllable moa";
			_charNames[(char)0x2D82] = "ethiopic syllable roa";
			_charNames[(char)0x2D83] = "ethiopic syllable soa";
			_charNames[(char)0x2D84] = "ethiopic syllable shoa";
			_charNames[(char)0x2D85] = "ethiopic syllable boa";
			_charNames[(char)0x2D86] = "ethiopic syllable toa";
			_charNames[(char)0x2D87] = "ethiopic syllable coa";
			_charNames[(char)0x2D88] = "ethiopic syllable noa";
			_charNames[(char)0x2D89] = "ethiopic syllable nyoa";
			_charNames[(char)0x2D8A] = "ethiopic syllable glottal oa";
			_charNames[(char)0x2D8B] = "ethiopic syllable zoa";
			_charNames[(char)0x2D8C] = "ethiopic syllable doa";
			_charNames[(char)0x2D8D] = "ethiopic syllable ddoa";
			_charNames[(char)0x2D8E] = "ethiopic syllable joa";
			_charNames[(char)0x2D8F] = "ethiopic syllable thoa";
			_charNames[(char)0x2D90] = "ethiopic syllable choa";
			_charNames[(char)0x2D91] = "ethiopic syllable phoa";
			_charNames[(char)0x2D92] = "ethiopic syllable poa";
			_charNames[(char)0x2D93] = "ethiopic syllable ggwa";
			_charNames[(char)0x2D94] = "ethiopic syllable ggwi";
			_charNames[(char)0x2D95] = "ethiopic syllable ggwee";
			_charNames[(char)0x2D96] = "ethiopic syllable ggwe";
			_charNames[(char)0x2DA0] = "ethiopic syllable ssa";
			_charNames[(char)0x2DA1] = "ethiopic syllable ssu";
			_charNames[(char)0x2DA2] = "ethiopic syllable ssi";
			_charNames[(char)0x2DA3] = "ethiopic syllable ssaa";
			_charNames[(char)0x2DA4] = "ethiopic syllable ssee";
			_charNames[(char)0x2DA5] = "ethiopic syllable sse";
			_charNames[(char)0x2DA6] = "ethiopic syllable sso";
			_charNames[(char)0x2DA8] = "ethiopic syllable cca";
			_charNames[(char)0x2DA9] = "ethiopic syllable ccu";
			_charNames[(char)0x2DAA] = "ethiopic syllable cci";
			_charNames[(char)0x2DAB] = "ethiopic syllable ccaa";
			_charNames[(char)0x2DAC] = "ethiopic syllable ccee";
			_charNames[(char)0x2DAD] = "ethiopic syllable cce";
			_charNames[(char)0x2DAE] = "ethiopic syllable cco";
			_charNames[(char)0x2DB0] = "ethiopic syllable zza";
			_charNames[(char)0x2DB1] = "ethiopic syllable zzu";
			_charNames[(char)0x2DB2] = "ethiopic syllable zzi";
			_charNames[(char)0x2DB3] = "ethiopic syllable zzaa";
			_charNames[(char)0x2DB4] = "ethiopic syllable zzee";
			_charNames[(char)0x2DB5] = "ethiopic syllable zze";
			_charNames[(char)0x2DB6] = "ethiopic syllable zzo";
			_charNames[(char)0x2DB8] = "ethiopic syllable ccha";
			_charNames[(char)0x2DB9] = "ethiopic syllable cchu";
			_charNames[(char)0x2DBA] = "ethiopic syllable cchi";
			_charNames[(char)0x2DBB] = "ethiopic syllable cchaa";
			_charNames[(char)0x2DBC] = "ethiopic syllable cchee";
			_charNames[(char)0x2DBD] = "ethiopic syllable cche";
			_charNames[(char)0x2DBE] = "ethiopic syllable ccho";
			_charNames[(char)0x2DC0] = "ethiopic syllable qya";
			_charNames[(char)0x2DC1] = "ethiopic syllable qyu";
			_charNames[(char)0x2DC2] = "ethiopic syllable qyi";
			_charNames[(char)0x2DC3] = "ethiopic syllable qyaa";
			_charNames[(char)0x2DC4] = "ethiopic syllable qyee";
			_charNames[(char)0x2DC5] = "ethiopic syllable qye";
			_charNames[(char)0x2DC6] = "ethiopic syllable qyo";
			_charNames[(char)0x2DC8] = "ethiopic syllable kya";
			_charNames[(char)0x2DC9] = "ethiopic syllable kyu";
			_charNames[(char)0x2DCA] = "ethiopic syllable kyi";
			_charNames[(char)0x2DCB] = "ethiopic syllable kyaa";
			_charNames[(char)0x2DCC] = "ethiopic syllable kyee";
			_charNames[(char)0x2DCD] = "ethiopic syllable kye";
			_charNames[(char)0x2DCE] = "ethiopic syllable kyo";
			_charNames[(char)0x2DD0] = "ethiopic syllable xya";
			_charNames[(char)0x2DD1] = "ethiopic syllable xyu";
			_charNames[(char)0x2DD2] = "ethiopic syllable xyi";
			_charNames[(char)0x2DD3] = "ethiopic syllable xyaa";
			_charNames[(char)0x2DD4] = "ethiopic syllable xyee";
			_charNames[(char)0x2DD5] = "ethiopic syllable xye";
			_charNames[(char)0x2DD6] = "ethiopic syllable xyo";
			_charNames[(char)0x2DD8] = "ethiopic syllable gya";
			_charNames[(char)0x2DD9] = "ethiopic syllable gyu";
			_charNames[(char)0x2DDA] = "ethiopic syllable gyi";
			_charNames[(char)0x2DDB] = "ethiopic syllable gyaa";
			_charNames[(char)0x2DDC] = "ethiopic syllable gyee";
			_charNames[(char)0x2DDD] = "ethiopic syllable gye";
			_charNames[(char)0x2DDE] = "ethiopic syllable gyo";
			_charNames[(char)0x2E00] = "right angle substitution marker";
			_charNames[(char)0x2E01] = "right angle dotted substitution marker";
			_charNames[(char)0x2E02] = "left substitution bracket";
			_charNames[(char)0x2E03] = "right substitution bracket";
			_charNames[(char)0x2E04] = "left dotted substitution bracket";
			_charNames[(char)0x2E05] = "right dotted substitution bracket";
			_charNames[(char)0x2E06] = "raised interpolation marker";
			_charNames[(char)0x2E07] = "raised dotted interpolation marker";
			_charNames[(char)0x2E08] = "dotted transposition marker";
			_charNames[(char)0x2E09] = "left transposition bracket";
			_charNames[(char)0x2E0A] = "right transposition bracket";
			_charNames[(char)0x2E0B] = "raised square";
			_charNames[(char)0x2E0C] = "left raised omission bracket";
			_charNames[(char)0x2E0D] = "right raised omission bracket";
			_charNames[(char)0x2E0E] = "editorial coronis";
			_charNames[(char)0x2E0F] = "paragraphos";
			_charNames[(char)0x2E10] = "forked paragraphos";
			_charNames[(char)0x2E11] = "reversed forked paragraphos";
			_charNames[(char)0x2E12] = "hypodiastole";
			_charNames[(char)0x2E13] = "dotted obelos";
			_charNames[(char)0x2E14] = "downwards ancora";
			_charNames[(char)0x2E15] = "upwards ancora";
			_charNames[(char)0x2E16] = "dotted right-pointing angle";
			_charNames[(char)0x2E17] = "double oblique hyphen";
			_charNames[(char)0x2E1C] = "left low paraphrase bracket";
			_charNames[(char)0x2E1D] = "right low paraphrase bracket";
			_charNames[(char)0x2E80] = "cjk radical repeat";
			_charNames[(char)0x2E81] = "cjk radical cliff";
			_charNames[(char)0x2E82] = "cjk radical second one";
			_charNames[(char)0x2E83] = "cjk radical second two";
			_charNames[(char)0x2E84] = "cjk radical second three";
			_charNames[(char)0x2E85] = "cjk radical person";
			_charNames[(char)0x2E86] = "cjk radical box";
			_charNames[(char)0x2E87] = "cjk radical table";
			_charNames[(char)0x2E88] = "cjk radical knife one";
			_charNames[(char)0x2E89] = "cjk radical knife two";
			_charNames[(char)0x2E8A] = "cjk radical divination";
			_charNames[(char)0x2E8B] = "cjk radical seal";
			_charNames[(char)0x2E8C] = "cjk radical small one";
			_charNames[(char)0x2E8D] = "cjk radical small two";
			_charNames[(char)0x2E8E] = "cjk radical lame one";
			_charNames[(char)0x2E8F] = "cjk radical lame two";
			_charNames[(char)0x2E90] = "cjk radical lame three";
			_charNames[(char)0x2E91] = "cjk radical lame four";
			_charNames[(char)0x2E92] = "cjk radical snake";
			_charNames[(char)0x2E93] = "cjk radical thread";
			_charNames[(char)0x2E94] = "cjk radical snout one";
			_charNames[(char)0x2E95] = "cjk radical snout two";
			_charNames[(char)0x2E96] = "cjk radical heart one";
			_charNames[(char)0x2E97] = "cjk radical heart two";
			_charNames[(char)0x2E98] = "cjk radical hand";
			_charNames[(char)0x2E99] = "cjk radical rap";
			_charNames[(char)0x2E9B] = "cjk radical choke";
			_charNames[(char)0x2E9C] = "cjk radical sun";
			_charNames[(char)0x2E9D] = "cjk radical moon";
			_charNames[(char)0x2E9E] = "cjk radical death";
			_charNames[(char)0x2E9F] = "cjk radical mother";
			_charNames[(char)0x2EA0] = "cjk radical civilian";
			_charNames[(char)0x2EA1] = "cjk radical water one";
			_charNames[(char)0x2EA2] = "cjk radical water two";
			_charNames[(char)0x2EA3] = "cjk radical fire";
			_charNames[(char)0x2EA4] = "cjk radical paw one";
			_charNames[(char)0x2EA5] = "cjk radical paw two";
			_charNames[(char)0x2EA6] = "cjk radical simplified half tree trunk";
			_charNames[(char)0x2EA7] = "cjk radical cow";
			_charNames[(char)0x2EA8] = "cjk radical dog";
			_charNames[(char)0x2EA9] = "cjk radical jade";
			_charNames[(char)0x2EAA] = "cjk radical bolt of cloth";
			_charNames[(char)0x2EAB] = "cjk radical eye";
			_charNames[(char)0x2EAC] = "cjk radical spirit one";
			_charNames[(char)0x2EAD] = "cjk radical spirit two";
			_charNames[(char)0x2EAE] = "cjk radical bamboo";
			_charNames[(char)0x2EAF] = "cjk radical silk";
			_charNames[(char)0x2EB0] = "cjk radical c-simplified silk";
			_charNames[(char)0x2EB1] = "cjk radical net one";
			_charNames[(char)0x2EB2] = "cjk radical net two";
			_charNames[(char)0x2EB3] = "cjk radical net three";
			_charNames[(char)0x2EB4] = "cjk radical net four";
			_charNames[(char)0x2EB5] = "cjk radical mesh";
			_charNames[(char)0x2EB6] = "cjk radical sheep";
			_charNames[(char)0x2EB7] = "cjk radical ram";
			_charNames[(char)0x2EB8] = "cjk radical ewe";
			_charNames[(char)0x2EB9] = "cjk radical old";
			_charNames[(char)0x2EBA] = "cjk radical brush one";
			_charNames[(char)0x2EBB] = "cjk radical brush two";
			_charNames[(char)0x2EBC] = "cjk radical meat";
			_charNames[(char)0x2EBD] = "cjk radical mortar";
			_charNames[(char)0x2EBE] = "cjk radical grass one";
			_charNames[(char)0x2EBF] = "cjk radical grass two";
			_charNames[(char)0x2EC0] = "cjk radical grass three";
			_charNames[(char)0x2EC1] = "cjk radical tiger";
			_charNames[(char)0x2EC2] = "cjk radical clothes";
			_charNames[(char)0x2EC3] = "cjk radical west one";
			_charNames[(char)0x2EC4] = "cjk radical west two";
			_charNames[(char)0x2EC5] = "cjk radical c-simplified see";
			_charNames[(char)0x2EC6] = "cjk radical simplified horn";
			_charNames[(char)0x2EC7] = "cjk radical horn";
			_charNames[(char)0x2EC8] = "cjk radical c-simplified speech";
			_charNames[(char)0x2EC9] = "cjk radical c-simplified shell";
			_charNames[(char)0x2ECA] = "cjk radical foot";
			_charNames[(char)0x2ECB] = "cjk radical c-simplified cart";
			_charNames[(char)0x2ECC] = "cjk radical simplified walk";
			_charNames[(char)0x2ECD] = "cjk radical walk one";
			_charNames[(char)0x2ECE] = "cjk radical walk two";
			_charNames[(char)0x2ECF] = "cjk radical city";
			_charNames[(char)0x2ED0] = "cjk radical c-simplified gold";
			_charNames[(char)0x2ED1] = "cjk radical long one";
			_charNames[(char)0x2ED2] = "cjk radical long two";
			_charNames[(char)0x2ED3] = "cjk radical c-simplified long";
			_charNames[(char)0x2ED4] = "cjk radical c-simplified gate";
			_charNames[(char)0x2ED5] = "cjk radical mound one";
			_charNames[(char)0x2ED6] = "cjk radical mound two";
			_charNames[(char)0x2ED7] = "cjk radical rain";
			_charNames[(char)0x2ED8] = "cjk radical blue";
			_charNames[(char)0x2ED9] = "cjk radical c-simplified tanned leather";
			_charNames[(char)0x2EDA] = "cjk radical c-simplified leaf";
			_charNames[(char)0x2EDB] = "cjk radical c-simplified wind";
			_charNames[(char)0x2EDC] = "cjk radical c-simplified fly";
			_charNames[(char)0x2EDD] = "cjk radical eat one";
			_charNames[(char)0x2EDE] = "cjk radical eat two";
			_charNames[(char)0x2EDF] = "cjk radical eat three";
			_charNames[(char)0x2EE0] = "cjk radical c-simplified eat";
			_charNames[(char)0x2EE1] = "cjk radical head";
			_charNames[(char)0x2EE2] = "cjk radical c-simplified horse";
			_charNames[(char)0x2EE3] = "cjk radical bone";
			_charNames[(char)0x2EE4] = "cjk radical ghost";
			_charNames[(char)0x2EE5] = "cjk radical c-simplified fish";
			_charNames[(char)0x2EE6] = "cjk radical c-simplified bird";
			_charNames[(char)0x2EE7] = "cjk radical c-simplified salt";
			_charNames[(char)0x2EE8] = "cjk radical simplified wheat";
			_charNames[(char)0x2EE9] = "cjk radical simplified yellow";
			_charNames[(char)0x2EEA] = "cjk radical c-simplified frog";
			_charNames[(char)0x2EEB] = "cjk radical j-simplified even";
			_charNames[(char)0x2EEC] = "cjk radical c-simplified even";
			_charNames[(char)0x2EED] = "cjk radical j-simplified tooth";
			_charNames[(char)0x2EEE] = "cjk radical c-simplified tooth";
			_charNames[(char)0x2EEF] = "cjk radical j-simplified dragon";
			_charNames[(char)0x2EF0] = "cjk radical c-simplified dragon";
			_charNames[(char)0x2EF1] = "cjk radical turtle";
			_charNames[(char)0x2EF2] = "cjk radical j-simplified turtle";
			_charNames[(char)0x2EF3] = "cjk radical c-simplified turtle";
			_charNames[(char)0x2F00] = "kangxi radical one";
			_charNames[(char)0x2F01] = "kangxi radical line";
			_charNames[(char)0x2F02] = "kangxi radical dot";
			_charNames[(char)0x2F03] = "kangxi radical slash";
			_charNames[(char)0x2F04] = "kangxi radical second";
			_charNames[(char)0x2F05] = "kangxi radical hook";
			_charNames[(char)0x2F06] = "kangxi radical two";
			_charNames[(char)0x2F07] = "kangxi radical lid";
			_charNames[(char)0x2F08] = "kangxi radical man";
			_charNames[(char)0x2F09] = "kangxi radical legs";
			_charNames[(char)0x2F0A] = "kangxi radical enter";
			_charNames[(char)0x2F0B] = "kangxi radical eight";
			_charNames[(char)0x2F0C] = "kangxi radical down box";
			_charNames[(char)0x2F0D] = "kangxi radical cover";
			_charNames[(char)0x2F0E] = "kangxi radical ice";
			_charNames[(char)0x2F0F] = "kangxi radical table";
			_charNames[(char)0x2F10] = "kangxi radical open box";
			_charNames[(char)0x2F11] = "kangxi radical knife";
			_charNames[(char)0x2F12] = "kangxi radical power";
			_charNames[(char)0x2F13] = "kangxi radical wrap";
			_charNames[(char)0x2F14] = "kangxi radical spoon";
			_charNames[(char)0x2F15] = "kangxi radical right open box";
			_charNames[(char)0x2F16] = "kangxi radical hiding enclosure";
			_charNames[(char)0x2F17] = "kangxi radical ten";
			_charNames[(char)0x2F18] = "kangxi radical divination";
			_charNames[(char)0x2F19] = "kangxi radical seal";
			_charNames[(char)0x2F1A] = "kangxi radical cliff";
			_charNames[(char)0x2F1B] = "kangxi radical private";
			_charNames[(char)0x2F1C] = "kangxi radical again";
			_charNames[(char)0x2F1D] = "kangxi radical mouth";
			_charNames[(char)0x2F1E] = "kangxi radical enclosure";
			_charNames[(char)0x2F1F] = "kangxi radical earth";
			_charNames[(char)0x2F20] = "kangxi radical scholar";
			_charNames[(char)0x2F21] = "kangxi radical go";
			_charNames[(char)0x2F22] = "kangxi radical go slowly";
			_charNames[(char)0x2F23] = "kangxi radical evening";
			_charNames[(char)0x2F24] = "kangxi radical big";
			_charNames[(char)0x2F25] = "kangxi radical woman";
			_charNames[(char)0x2F26] = "kangxi radical child";
			_charNames[(char)0x2F27] = "kangxi radical roof";
			_charNames[(char)0x2F28] = "kangxi radical inch";
			_charNames[(char)0x2F29] = "kangxi radical small";
			_charNames[(char)0x2F2A] = "kangxi radical lame";
			_charNames[(char)0x2F2B] = "kangxi radical corpse";
			_charNames[(char)0x2F2C] = "kangxi radical sprout";
			_charNames[(char)0x2F2D] = "kangxi radical mountain";
			_charNames[(char)0x2F2E] = "kangxi radical river";
			_charNames[(char)0x2F2F] = "kangxi radical work";
			_charNames[(char)0x2F30] = "kangxi radical oneself";
			_charNames[(char)0x2F31] = "kangxi radical turban";
			_charNames[(char)0x2F32] = "kangxi radical dry";
			_charNames[(char)0x2F33] = "kangxi radical short thread";
			_charNames[(char)0x2F34] = "kangxi radical dotted cliff";
			_charNames[(char)0x2F35] = "kangxi radical long stride";
			_charNames[(char)0x2F36] = "kangxi radical two hands";
			_charNames[(char)0x2F37] = "kangxi radical shoot";
			_charNames[(char)0x2F38] = "kangxi radical bow";
			_charNames[(char)0x2F39] = "kangxi radical snout";
			_charNames[(char)0x2F3A] = "kangxi radical bristle";
			_charNames[(char)0x2F3B] = "kangxi radical step";
			_charNames[(char)0x2F3C] = "kangxi radical heart";
			_charNames[(char)0x2F3D] = "kangxi radical halberd";
			_charNames[(char)0x2F3E] = "kangxi radical door";
			_charNames[(char)0x2F3F] = "kangxi radical hand";
			_charNames[(char)0x2F40] = "kangxi radical branch";
			_charNames[(char)0x2F41] = "kangxi radical rap";
			_charNames[(char)0x2F42] = "kangxi radical script";
			_charNames[(char)0x2F43] = "kangxi radical dipper";
			_charNames[(char)0x2F44] = "kangxi radical axe";
			_charNames[(char)0x2F45] = "kangxi radical square";
			_charNames[(char)0x2F46] = "kangxi radical not";
			_charNames[(char)0x2F47] = "kangxi radical sun";
			_charNames[(char)0x2F48] = "kangxi radical say";
			_charNames[(char)0x2F49] = "kangxi radical moon";
			_charNames[(char)0x2F4A] = "kangxi radical tree";
			_charNames[(char)0x2F4B] = "kangxi radical lack";
			_charNames[(char)0x2F4C] = "kangxi radical stop";
			_charNames[(char)0x2F4D] = "kangxi radical death";
			_charNames[(char)0x2F4E] = "kangxi radical weapon";
			_charNames[(char)0x2F4F] = "kangxi radical do not";
			_charNames[(char)0x2F50] = "kangxi radical compare";
			_charNames[(char)0x2F51] = "kangxi radical fur";
			_charNames[(char)0x2F52] = "kangxi radical clan";
			_charNames[(char)0x2F53] = "kangxi radical steam";
			_charNames[(char)0x2F54] = "kangxi radical water";
			_charNames[(char)0x2F55] = "kangxi radical fire";
			_charNames[(char)0x2F56] = "kangxi radical claw";
			_charNames[(char)0x2F57] = "kangxi radical father";
			_charNames[(char)0x2F58] = "kangxi radical double x";
			_charNames[(char)0x2F59] = "kangxi radical half tree trunk";
			_charNames[(char)0x2F5A] = "kangxi radical slice";
			_charNames[(char)0x2F5B] = "kangxi radical fang";
			_charNames[(char)0x2F5C] = "kangxi radical cow";
			_charNames[(char)0x2F5D] = "kangxi radical dog";
			_charNames[(char)0x2F5E] = "kangxi radical profound";
			_charNames[(char)0x2F5F] = "kangxi radical jade";
			_charNames[(char)0x2F60] = "kangxi radical melon";
			_charNames[(char)0x2F61] = "kangxi radical tile";
			_charNames[(char)0x2F62] = "kangxi radical sweet";
			_charNames[(char)0x2F63] = "kangxi radical life";
			_charNames[(char)0x2F64] = "kangxi radical use";
			_charNames[(char)0x2F65] = "kangxi radical field";
			_charNames[(char)0x2F66] = "kangxi radical bolt of cloth";
			_charNames[(char)0x2F67] = "kangxi radical sickness";
			_charNames[(char)0x2F68] = "kangxi radical dotted tent";
			_charNames[(char)0x2F69] = "kangxi radical white";
			_charNames[(char)0x2F6A] = "kangxi radical skin";
			_charNames[(char)0x2F6B] = "kangxi radical dish";
			_charNames[(char)0x2F6C] = "kangxi radical eye";
			_charNames[(char)0x2F6D] = "kangxi radical spear";
			_charNames[(char)0x2F6E] = "kangxi radical arrow";
			_charNames[(char)0x2F6F] = "kangxi radical stone";
			_charNames[(char)0x2F70] = "kangxi radical spirit";
			_charNames[(char)0x2F71] = "kangxi radical track";
			_charNames[(char)0x2F72] = "kangxi radical grain";
			_charNames[(char)0x2F73] = "kangxi radical cave";
			_charNames[(char)0x2F74] = "kangxi radical stand";
			_charNames[(char)0x2F75] = "kangxi radical bamboo";
			_charNames[(char)0x2F76] = "kangxi radical rice";
			_charNames[(char)0x2F77] = "kangxi radical silk";
			_charNames[(char)0x2F78] = "kangxi radical jar";
			_charNames[(char)0x2F79] = "kangxi radical net";
			_charNames[(char)0x2F7A] = "kangxi radical sheep";
			_charNames[(char)0x2F7B] = "kangxi radical feather";
			_charNames[(char)0x2F7C] = "kangxi radical old";
			_charNames[(char)0x2F7D] = "kangxi radical and";
			_charNames[(char)0x2F7E] = "kangxi radical plow";
			_charNames[(char)0x2F7F] = "kangxi radical ear";
			_charNames[(char)0x2F80] = "kangxi radical brush";
			_charNames[(char)0x2F81] = "kangxi radical meat";
			_charNames[(char)0x2F82] = "kangxi radical minister";
			_charNames[(char)0x2F83] = "kangxi radical self";
			_charNames[(char)0x2F84] = "kangxi radical arrive";
			_charNames[(char)0x2F85] = "kangxi radical mortar";
			_charNames[(char)0x2F86] = "kangxi radical tongue";
			_charNames[(char)0x2F87] = "kangxi radical oppose";
			_charNames[(char)0x2F88] = "kangxi radical boat";
			_charNames[(char)0x2F89] = "kangxi radical stopping";
			_charNames[(char)0x2F8A] = "kangxi radical color";
			_charNames[(char)0x2F8B] = "kangxi radical grass";
			_charNames[(char)0x2F8C] = "kangxi radical tiger";
			_charNames[(char)0x2F8D] = "kangxi radical insect";
			_charNames[(char)0x2F8E] = "kangxi radical blood";
			_charNames[(char)0x2F8F] = "kangxi radical walk enclosure";
			_charNames[(char)0x2F90] = "kangxi radical clothes";
			_charNames[(char)0x2F91] = "kangxi radical west";
			_charNames[(char)0x2F92] = "kangxi radical see";
			_charNames[(char)0x2F93] = "kangxi radical horn";
			_charNames[(char)0x2F94] = "kangxi radical speech";
			_charNames[(char)0x2F95] = "kangxi radical valley";
			_charNames[(char)0x2F96] = "kangxi radical bean";
			_charNames[(char)0x2F97] = "kangxi radical pig";
			_charNames[(char)0x2F98] = "kangxi radical badger";
			_charNames[(char)0x2F99] = "kangxi radical shell";
			_charNames[(char)0x2F9A] = "kangxi radical red";
			_charNames[(char)0x2F9B] = "kangxi radical run";
			_charNames[(char)0x2F9C] = "kangxi radical foot";
			_charNames[(char)0x2F9D] = "kangxi radical body";
			_charNames[(char)0x2F9E] = "kangxi radical cart";
			_charNames[(char)0x2F9F] = "kangxi radical bitter";
			_charNames[(char)0x2FA0] = "kangxi radical morning";
			_charNames[(char)0x2FA1] = "kangxi radical walk";
			_charNames[(char)0x2FA2] = "kangxi radical city";
			_charNames[(char)0x2FA3] = "kangxi radical wine";
			_charNames[(char)0x2FA4] = "kangxi radical distinguish";
			_charNames[(char)0x2FA5] = "kangxi radical village";
			_charNames[(char)0x2FA6] = "kangxi radical gold";
			_charNames[(char)0x2FA7] = "kangxi radical long";
			_charNames[(char)0x2FA8] = "kangxi radical gate";
			_charNames[(char)0x2FA9] = "kangxi radical mound";
			_charNames[(char)0x2FAA] = "kangxi radical slave";
			_charNames[(char)0x2FAB] = "kangxi radical short tailed bird";
			_charNames[(char)0x2FAC] = "kangxi radical rain";
			_charNames[(char)0x2FAD] = "kangxi radical blue";
			_charNames[(char)0x2FAE] = "kangxi radical wrong";
			_charNames[(char)0x2FAF] = "kangxi radical face";
			_charNames[(char)0x2FB0] = "kangxi radical leather";
			_charNames[(char)0x2FB1] = "kangxi radical tanned leather";
			_charNames[(char)0x2FB2] = "kangxi radical leek";
			_charNames[(char)0x2FB3] = "kangxi radical sound";
			_charNames[(char)0x2FB4] = "kangxi radical leaf";
			_charNames[(char)0x2FB5] = "kangxi radical wind";
			_charNames[(char)0x2FB6] = "kangxi radical fly";
			_charNames[(char)0x2FB7] = "kangxi radical eat";
			_charNames[(char)0x2FB8] = "kangxi radical head";
			_charNames[(char)0x2FB9] = "kangxi radical fragrant";
			_charNames[(char)0x2FBA] = "kangxi radical horse";
			_charNames[(char)0x2FBB] = "kangxi radical bone";
			_charNames[(char)0x2FBC] = "kangxi radical tall";
			_charNames[(char)0x2FBD] = "kangxi radical hair";
			_charNames[(char)0x2FBE] = "kangxi radical fight";
			_charNames[(char)0x2FBF] = "kangxi radical sacrificial wine";
			_charNames[(char)0x2FC0] = "kangxi radical cauldron";
			_charNames[(char)0x2FC1] = "kangxi radical ghost";
			_charNames[(char)0x2FC2] = "kangxi radical fish";
			_charNames[(char)0x2FC3] = "kangxi radical bird";
			_charNames[(char)0x2FC4] = "kangxi radical salt";
			_charNames[(char)0x2FC5] = "kangxi radical deer";
			_charNames[(char)0x2FC6] = "kangxi radical wheat";
			_charNames[(char)0x2FC7] = "kangxi radical hemp";
			_charNames[(char)0x2FC8] = "kangxi radical yellow";
			_charNames[(char)0x2FC9] = "kangxi radical millet";
			_charNames[(char)0x2FCA] = "kangxi radical black";
			_charNames[(char)0x2FCB] = "kangxi radical embroidery";
			_charNames[(char)0x2FCC] = "kangxi radical frog";
			_charNames[(char)0x2FCD] = "kangxi radical tripod";
			_charNames[(char)0x2FCE] = "kangxi radical drum";
			_charNames[(char)0x2FCF] = "kangxi radical rat";
			_charNames[(char)0x2FD0] = "kangxi radical nose";
			_charNames[(char)0x2FD1] = "kangxi radical even";
			_charNames[(char)0x2FD2] = "kangxi radical tooth";
			_charNames[(char)0x2FD3] = "kangxi radical dragon";
			_charNames[(char)0x2FD4] = "kangxi radical turtle";
			_charNames[(char)0x2FD5] = "kangxi radical flute";
			_charNames[(char)0x2FF0] = "ideographic description character left to right";
			_charNames[(char)0x2FF1] = "ideographic description character above to below";
			_charNames[(char)0x2FF2] = "ideographic description character left to middle and right";
			_charNames[(char)0x2FF3] = "ideographic description character above to middle and below";
			_charNames[(char)0x2FF4] = "ideographic description character full surround";
			_charNames[(char)0x2FF5] = "ideographic description character surround from above";
			_charNames[(char)0x2FF6] = "ideographic description character surround from below";
			_charNames[(char)0x2FF7] = "ideographic description character surround from left";
			_charNames[(char)0x2FF8] = "ideographic description character surround from upper left";
			_charNames[(char)0x2FF9] = "ideographic description character surround from upper right";
			_charNames[(char)0x2FFA] = "ideographic description character surround from lower left";
			_charNames[(char)0x2FFB] = "ideographic description character overlaid";
			_charNames[(char)0x3000] = "ideographic space";
			_charNames[(char)0x3001] = "ideographic comma";
			_charNames[(char)0x3002] = "ideographic full stop";
			_charNames[(char)0x3003] = "ditto mark";
			_charNames[(char)0x3004] = "japanese industrial standard symbol";
			_charNames[(char)0x3005] = "ideographic iteration mark";
			_charNames[(char)0x3006] = "ideographic closing mark";
			_charNames[(char)0x3007] = "ideographic number zero";
			_charNames[(char)0x3008] = "left angle bracket";
			_charNames[(char)0x3009] = "right angle bracket";
			_charNames[(char)0x300A] = "left double angle bracket";
			_charNames[(char)0x300B] = "right double angle bracket";
			_charNames[(char)0x300C] = "left corner bracket";
			_charNames[(char)0x300D] = "right corner bracket";
			_charNames[(char)0x300E] = "left white corner bracket";
			_charNames[(char)0x300F] = "right white corner bracket";
			_charNames[(char)0x3010] = "left black lenticular bracket";
			_charNames[(char)0x3011] = "right black lenticular bracket";
			_charNames[(char)0x3012] = "postal mark";
			_charNames[(char)0x3013] = "geta mark";
			_charNames[(char)0x3014] = "left tortoise shell bracket";
			_charNames[(char)0x3015] = "right tortoise shell bracket";
			_charNames[(char)0x3016] = "left white lenticular bracket";
			_charNames[(char)0x3017] = "right white lenticular bracket";
			_charNames[(char)0x3018] = "left white tortoise shell bracket";
			_charNames[(char)0x3019] = "right white tortoise shell bracket";
			_charNames[(char)0x301A] = "left white square bracket";
			_charNames[(char)0x301B] = "right white square bracket";
			_charNames[(char)0x301C] = "wave dash";
			_charNames[(char)0x301D] = "reversed double prime quotation mark";
			_charNames[(char)0x301E] = "double prime quotation mark";
			_charNames[(char)0x301F] = "low double prime quotation mark";
			_charNames[(char)0x3020] = "postal mark face";
			_charNames[(char)0x3021] = "hangzhou numeral one";
			_charNames[(char)0x3022] = "hangzhou numeral two";
			_charNames[(char)0x3023] = "hangzhou numeral three";
			_charNames[(char)0x3024] = "hangzhou numeral four";
			_charNames[(char)0x3025] = "hangzhou numeral five";
			_charNames[(char)0x3026] = "hangzhou numeral six";
			_charNames[(char)0x3027] = "hangzhou numeral seven";
			_charNames[(char)0x3028] = "hangzhou numeral eight";
			_charNames[(char)0x3029] = "hangzhou numeral nine";
			_charNames[(char)0x302A] = "ideographic level tone mark";
			_charNames[(char)0x302B] = "ideographic rising tone mark";
			_charNames[(char)0x302C] = "ideographic departing tone mark";
			_charNames[(char)0x302D] = "ideographic entering tone mark";
			_charNames[(char)0x302E] = "hangul single dot tone mark";
			_charNames[(char)0x302F] = "hangul double dot tone mark";
			_charNames[(char)0x3030] = "wavy dash";
			_charNames[(char)0x3031] = "vertical kana repeat mark";
			_charNames[(char)0x3032] = "vertical kana repeat with voiced sound mark";
			_charNames[(char)0x3033] = "vertical kana repeat mark upper half";
			_charNames[(char)0x3034] = "vertical kana repeat with voiced sound mark upper half";
			_charNames[(char)0x3035] = "vertical kana repeat mark lower half";
			_charNames[(char)0x3036] = "circled postal mark";
			_charNames[(char)0x3037] = "ideographic telegraph line feed separator symbol";
			_charNames[(char)0x3038] = "hangzhou numeral ten";
			_charNames[(char)0x3039] = "hangzhou numeral twenty";
			_charNames[(char)0x303A] = "hangzhou numeral thirty";
			_charNames[(char)0x303B] = "vertical ideographic iteration mark";
			_charNames[(char)0x303C] = "masu mark";
			_charNames[(char)0x303D] = "part alternation mark";
			_charNames[(char)0x303E] = "ideographic variation indicator";
			_charNames[(char)0x303F] = "ideographic half fill space";
			_charNames[(char)0x3041] = "hiragana letter small a";
			_charNames[(char)0x3042] = "hiragana letter a";
			_charNames[(char)0x3043] = "hiragana letter small i";
			_charNames[(char)0x3044] = "hiragana letter i";
			_charNames[(char)0x3045] = "hiragana letter small u";
			_charNames[(char)0x3046] = "hiragana letter u";
			_charNames[(char)0x3047] = "hiragana letter small e";
			_charNames[(char)0x3048] = "hiragana letter e";
			_charNames[(char)0x3049] = "hiragana letter small o";
			_charNames[(char)0x304A] = "hiragana letter o";
			_charNames[(char)0x304B] = "hiragana letter ka";
			_charNames[(char)0x304C] = "hiragana letter ga";
			_charNames[(char)0x304D] = "hiragana letter ki";
			_charNames[(char)0x304E] = "hiragana letter gi";
			_charNames[(char)0x304F] = "hiragana letter ku";
			_charNames[(char)0x3050] = "hiragana letter gu";
			_charNames[(char)0x3051] = "hiragana letter ke";
			_charNames[(char)0x3052] = "hiragana letter ge";
			_charNames[(char)0x3053] = "hiragana letter ko";
			_charNames[(char)0x3054] = "hiragana letter go";
			_charNames[(char)0x3055] = "hiragana letter sa";
			_charNames[(char)0x3056] = "hiragana letter za";
			_charNames[(char)0x3057] = "hiragana letter si";
			_charNames[(char)0x3058] = "hiragana letter zi";
			_charNames[(char)0x3059] = "hiragana letter su";
			_charNames[(char)0x305A] = "hiragana letter zu";
			_charNames[(char)0x305B] = "hiragana letter se";
			_charNames[(char)0x305C] = "hiragana letter ze";
			_charNames[(char)0x305D] = "hiragana letter so";
			_charNames[(char)0x305E] = "hiragana letter zo";
			_charNames[(char)0x305F] = "hiragana letter ta";
			_charNames[(char)0x3060] = "hiragana letter da";
			_charNames[(char)0x3061] = "hiragana letter ti";
			_charNames[(char)0x3062] = "hiragana letter di";
			_charNames[(char)0x3063] = "hiragana letter small tu";
			_charNames[(char)0x3064] = "hiragana letter tu";
			_charNames[(char)0x3065] = "hiragana letter du";
			_charNames[(char)0x3066] = "hiragana letter te";
			_charNames[(char)0x3067] = "hiragana letter de";
			_charNames[(char)0x3068] = "hiragana letter to";
			_charNames[(char)0x3069] = "hiragana letter do";
			_charNames[(char)0x306A] = "hiragana letter na";
			_charNames[(char)0x306B] = "hiragana letter ni";
			_charNames[(char)0x306C] = "hiragana letter nu";
			_charNames[(char)0x306D] = "hiragana letter ne";
			_charNames[(char)0x306E] = "hiragana letter no";
			_charNames[(char)0x306F] = "hiragana letter ha";
			_charNames[(char)0x3070] = "hiragana letter ba";
			_charNames[(char)0x3071] = "hiragana letter pa";
			_charNames[(char)0x3072] = "hiragana letter hi";
			_charNames[(char)0x3073] = "hiragana letter bi";
			_charNames[(char)0x3074] = "hiragana letter pi";
			_charNames[(char)0x3075] = "hiragana letter hu";
			_charNames[(char)0x3076] = "hiragana letter bu";
			_charNames[(char)0x3077] = "hiragana letter pu";
			_charNames[(char)0x3078] = "hiragana letter he";
			_charNames[(char)0x3079] = "hiragana letter be";
			_charNames[(char)0x307A] = "hiragana letter pe";
			_charNames[(char)0x307B] = "hiragana letter ho";
			_charNames[(char)0x307C] = "hiragana letter bo";
			_charNames[(char)0x307D] = "hiragana letter po";
			_charNames[(char)0x307E] = "hiragana letter ma";
			_charNames[(char)0x307F] = "hiragana letter mi";
			_charNames[(char)0x3080] = "hiragana letter mu";
			_charNames[(char)0x3081] = "hiragana letter me";
			_charNames[(char)0x3082] = "hiragana letter mo";
			_charNames[(char)0x3083] = "hiragana letter small ya";
			_charNames[(char)0x3084] = "hiragana letter ya";
			_charNames[(char)0x3085] = "hiragana letter small yu";
			_charNames[(char)0x3086] = "hiragana letter yu";
			_charNames[(char)0x3087] = "hiragana letter small yo";
			_charNames[(char)0x3088] = "hiragana letter yo";
			_charNames[(char)0x3089] = "hiragana letter ra";
			_charNames[(char)0x308A] = "hiragana letter ri";
			_charNames[(char)0x308B] = "hiragana letter ru";
			_charNames[(char)0x308C] = "hiragana letter re";
			_charNames[(char)0x308D] = "hiragana letter ro";
			_charNames[(char)0x308E] = "hiragana letter small wa";
			_charNames[(char)0x308F] = "hiragana letter wa";
			_charNames[(char)0x3090] = "hiragana letter wi";
			_charNames[(char)0x3091] = "hiragana letter we";
			_charNames[(char)0x3092] = "hiragana letter wo";
			_charNames[(char)0x3093] = "hiragana letter n";
			_charNames[(char)0x3094] = "hiragana letter vu";
			_charNames[(char)0x3095] = "hiragana letter small ka";
			_charNames[(char)0x3096] = "hiragana letter small ke";
			_charNames[(char)0x3099] = "combining katakana-hiragana voiced sound mark";
			_charNames[(char)0x309A] = "combining katakana-hiragana semi-voiced sound mark";
			_charNames[(char)0x309B] = "katakana-hiragana voiced sound mark";
			_charNames[(char)0x309C] = "katakana-hiragana semi-voiced sound mark";
			_charNames[(char)0x309D] = "hiragana iteration mark";
			_charNames[(char)0x309E] = "hiragana voiced iteration mark";
			_charNames[(char)0x309F] = "hiragana digraph yori";
			_charNames[(char)0x30A0] = "katakana-hiragana double hyphen";
			_charNames[(char)0x30A1] = "katakana letter small a";
			_charNames[(char)0x30A2] = "katakana letter a";
			_charNames[(char)0x30A3] = "katakana letter small i";
			_charNames[(char)0x30A4] = "katakana letter i";
			_charNames[(char)0x30A5] = "katakana letter small u";
			_charNames[(char)0x30A6] = "katakana letter u";
			_charNames[(char)0x30A7] = "katakana letter small e";
			_charNames[(char)0x30A8] = "katakana letter e";
			_charNames[(char)0x30A9] = "katakana letter small o";
			_charNames[(char)0x30AA] = "katakana letter o";
			_charNames[(char)0x30AB] = "katakana letter ka";
			_charNames[(char)0x30AC] = "katakana letter ga";
			_charNames[(char)0x30AD] = "katakana letter ki";
			_charNames[(char)0x30AE] = "katakana letter gi";
			_charNames[(char)0x30AF] = "katakana letter ku";
			_charNames[(char)0x30B0] = "katakana letter gu";
			_charNames[(char)0x30B1] = "katakana letter ke";
			_charNames[(char)0x30B2] = "katakana letter ge";
			_charNames[(char)0x30B3] = "katakana letter ko";
			_charNames[(char)0x30B4] = "katakana letter go";
			_charNames[(char)0x30B5] = "katakana letter sa";
			_charNames[(char)0x30B6] = "katakana letter za";
			_charNames[(char)0x30B7] = "katakana letter si";
			_charNames[(char)0x30B8] = "katakana letter zi";
			_charNames[(char)0x30B9] = "katakana letter su";
			_charNames[(char)0x30BA] = "katakana letter zu";
			_charNames[(char)0x30BB] = "katakana letter se";
			_charNames[(char)0x30BC] = "katakana letter ze";
			_charNames[(char)0x30BD] = "katakana letter so";
			_charNames[(char)0x30BE] = "katakana letter zo";
			_charNames[(char)0x30BF] = "katakana letter ta";
			_charNames[(char)0x30C0] = "katakana letter da";
			_charNames[(char)0x30C1] = "katakana letter ti";
			_charNames[(char)0x30C2] = "katakana letter di";
			_charNames[(char)0x30C3] = "katakana letter small tu";
			_charNames[(char)0x30C4] = "katakana letter tu";
			_charNames[(char)0x30C5] = "katakana letter du";
			_charNames[(char)0x30C6] = "katakana letter te";
			_charNames[(char)0x30C7] = "katakana letter de";
			_charNames[(char)0x30C8] = "katakana letter to";
			_charNames[(char)0x30C9] = "katakana letter do";
			_charNames[(char)0x30CA] = "katakana letter na";
			_charNames[(char)0x30CB] = "katakana letter ni";
			_charNames[(char)0x30CC] = "katakana letter nu";
			_charNames[(char)0x30CD] = "katakana letter ne";
			_charNames[(char)0x30CE] = "katakana letter no";
			_charNames[(char)0x30CF] = "katakana letter ha";
			_charNames[(char)0x30D0] = "katakana letter ba";
			_charNames[(char)0x30D1] = "katakana letter pa";
			_charNames[(char)0x30D2] = "katakana letter hi";
			_charNames[(char)0x30D3] = "katakana letter bi";
			_charNames[(char)0x30D4] = "katakana letter pi";
			_charNames[(char)0x30D5] = "katakana letter hu";
			_charNames[(char)0x30D6] = "katakana letter bu";
			_charNames[(char)0x30D7] = "katakana letter pu";
			_charNames[(char)0x30D8] = "katakana letter he";
			_charNames[(char)0x30D9] = "katakana letter be";
			_charNames[(char)0x30DA] = "katakana letter pe";
			_charNames[(char)0x30DB] = "katakana letter ho";
			_charNames[(char)0x30DC] = "katakana letter bo";
			_charNames[(char)0x30DD] = "katakana letter po";
			_charNames[(char)0x30DE] = "katakana letter ma";
			_charNames[(char)0x30DF] = "katakana letter mi";
			_charNames[(char)0x30E0] = "katakana letter mu";
			_charNames[(char)0x30E1] = "katakana letter me";
			_charNames[(char)0x30E2] = "katakana letter mo";
			_charNames[(char)0x30E3] = "katakana letter small ya";
			_charNames[(char)0x30E4] = "katakana letter ya";
			_charNames[(char)0x30E5] = "katakana letter small yu";
			_charNames[(char)0x30E6] = "katakana letter yu";
			_charNames[(char)0x30E7] = "katakana letter small yo";
			_charNames[(char)0x30E8] = "katakana letter yo";
			_charNames[(char)0x30E9] = "katakana letter ra";
			_charNames[(char)0x30EA] = "katakana letter ri";
			_charNames[(char)0x30EB] = "katakana letter ru";
			_charNames[(char)0x30EC] = "katakana letter re";
			_charNames[(char)0x30ED] = "katakana letter ro";
			_charNames[(char)0x30EE] = "katakana letter small wa";
			_charNames[(char)0x30EF] = "katakana letter wa";
			_charNames[(char)0x30F0] = "katakana letter wi";
			_charNames[(char)0x30F1] = "katakana letter we";
			_charNames[(char)0x30F2] = "katakana letter wo";
			_charNames[(char)0x30F3] = "katakana letter n";
			_charNames[(char)0x30F4] = "katakana letter vu";
			_charNames[(char)0x30F5] = "katakana letter small ka";
			_charNames[(char)0x30F6] = "katakana letter small ke";
			_charNames[(char)0x30F7] = "katakana letter va";
			_charNames[(char)0x30F8] = "katakana letter vi";
			_charNames[(char)0x30F9] = "katakana letter ve";
			_charNames[(char)0x30FA] = "katakana letter vo";
			_charNames[(char)0x30FB] = "katakana middle dot";
			_charNames[(char)0x30FC] = "katakana-hiragana prolonged sound mark";
			_charNames[(char)0x30FD] = "katakana iteration mark";
			_charNames[(char)0x30FE] = "katakana voiced iteration mark";
			_charNames[(char)0x30FF] = "katakana digraph koto";
			_charNames[(char)0x3105] = "bopomofo letter b";
			_charNames[(char)0x3106] = "bopomofo letter p";
			_charNames[(char)0x3107] = "bopomofo letter m";
			_charNames[(char)0x3108] = "bopomofo letter f";
			_charNames[(char)0x3109] = "bopomofo letter d";
			_charNames[(char)0x310A] = "bopomofo letter t";
			_charNames[(char)0x310B] = "bopomofo letter n";
			_charNames[(char)0x310C] = "bopomofo letter l";
			_charNames[(char)0x310D] = "bopomofo letter g";
			_charNames[(char)0x310E] = "bopomofo letter k";
			_charNames[(char)0x310F] = "bopomofo letter h";
			_charNames[(char)0x3110] = "bopomofo letter j";
			_charNames[(char)0x3111] = "bopomofo letter q";
			_charNames[(char)0x3112] = "bopomofo letter x";
			_charNames[(char)0x3113] = "bopomofo letter zh";
			_charNames[(char)0x3114] = "bopomofo letter ch";
			_charNames[(char)0x3115] = "bopomofo letter sh";
			_charNames[(char)0x3116] = "bopomofo letter r";
			_charNames[(char)0x3117] = "bopomofo letter z";
			_charNames[(char)0x3118] = "bopomofo letter c";
			_charNames[(char)0x3119] = "bopomofo letter s";
			_charNames[(char)0x311A] = "bopomofo letter a";
			_charNames[(char)0x311B] = "bopomofo letter o";
			_charNames[(char)0x311C] = "bopomofo letter e";
			_charNames[(char)0x311D] = "bopomofo letter eh";
			_charNames[(char)0x311E] = "bopomofo letter ai";
			_charNames[(char)0x311F] = "bopomofo letter ei";
			_charNames[(char)0x3120] = "bopomofo letter au";
			_charNames[(char)0x3121] = "bopomofo letter ou";
			_charNames[(char)0x3122] = "bopomofo letter an";
			_charNames[(char)0x3123] = "bopomofo letter en";
			_charNames[(char)0x3124] = "bopomofo letter ang";
			_charNames[(char)0x3125] = "bopomofo letter eng";
			_charNames[(char)0x3126] = "bopomofo letter er";
			_charNames[(char)0x3127] = "bopomofo letter i";
			_charNames[(char)0x3128] = "bopomofo letter u";
			_charNames[(char)0x3129] = "bopomofo letter iu";
			_charNames[(char)0x312A] = "bopomofo letter v";
			_charNames[(char)0x312B] = "bopomofo letter ng";
			_charNames[(char)0x312C] = "bopomofo letter gn";
			_charNames[(char)0x3131] = "hangul letter kiyeok";
			_charNames[(char)0x3132] = "hangul letter ssangkiyeok";
			_charNames[(char)0x3133] = "hangul letter kiyeok-sios";
			_charNames[(char)0x3134] = "hangul letter nieun";
			_charNames[(char)0x3135] = "hangul letter nieun-cieuc";
			_charNames[(char)0x3136] = "hangul letter nieun-hieuh";
			_charNames[(char)0x3137] = "hangul letter tikeut";
			_charNames[(char)0x3138] = "hangul letter ssangtikeut";
			_charNames[(char)0x3139] = "hangul letter rieul";
			_charNames[(char)0x313A] = "hangul letter rieul-kiyeok";
			_charNames[(char)0x313B] = "hangul letter rieul-mieum";
			_charNames[(char)0x313C] = "hangul letter rieul-pieup";
			_charNames[(char)0x313D] = "hangul letter rieul-sios";
			_charNames[(char)0x313E] = "hangul letter rieul-thieuth";
			_charNames[(char)0x313F] = "hangul letter rieul-phieuph";
			_charNames[(char)0x3140] = "hangul letter rieul-hieuh";
			_charNames[(char)0x3141] = "hangul letter mieum";
			_charNames[(char)0x3142] = "hangul letter pieup";
			_charNames[(char)0x3143] = "hangul letter ssangpieup";
			_charNames[(char)0x3144] = "hangul letter pieup-sios";
			_charNames[(char)0x3145] = "hangul letter sios";
			_charNames[(char)0x3146] = "hangul letter ssangsios";
			_charNames[(char)0x3147] = "hangul letter ieung";
			_charNames[(char)0x3148] = "hangul letter cieuc";
			_charNames[(char)0x3149] = "hangul letter ssangcieuc";
			_charNames[(char)0x314A] = "hangul letter chieuch";
			_charNames[(char)0x314B] = "hangul letter khieukh";
			_charNames[(char)0x314C] = "hangul letter thieuth";
			_charNames[(char)0x314D] = "hangul letter phieuph";
			_charNames[(char)0x314E] = "hangul letter hieuh";
			_charNames[(char)0x314F] = "hangul letter a";
			_charNames[(char)0x3150] = "hangul letter ae";
			_charNames[(char)0x3151] = "hangul letter ya";
			_charNames[(char)0x3152] = "hangul letter yae";
			_charNames[(char)0x3153] = "hangul letter eo";
			_charNames[(char)0x3154] = "hangul letter e";
			_charNames[(char)0x3155] = "hangul letter yeo";
			_charNames[(char)0x3156] = "hangul letter ye";
			_charNames[(char)0x3157] = "hangul letter o";
			_charNames[(char)0x3158] = "hangul letter wa";
			_charNames[(char)0x3159] = "hangul letter wae";
			_charNames[(char)0x315A] = "hangul letter oe";
			_charNames[(char)0x315B] = "hangul letter yo";
			_charNames[(char)0x315C] = "hangul letter u";
			_charNames[(char)0x315D] = "hangul letter weo";
			_charNames[(char)0x315E] = "hangul letter we";
			_charNames[(char)0x315F] = "hangul letter wi";
			_charNames[(char)0x3160] = "hangul letter yu";
			_charNames[(char)0x3161] = "hangul letter eu";
			_charNames[(char)0x3162] = "hangul letter yi";
			_charNames[(char)0x3163] = "hangul letter i";
			_charNames[(char)0x3164] = "hangul filler";
			_charNames[(char)0x3165] = "hangul letter ssangnieun";
			_charNames[(char)0x3166] = "hangul letter nieun-tikeut";
			_charNames[(char)0x3167] = "hangul letter nieun-sios";
			_charNames[(char)0x3168] = "hangul letter nieun-pansios";
			_charNames[(char)0x3169] = "hangul letter rieul-kiyeok-sios";
			_charNames[(char)0x316A] = "hangul letter rieul-tikeut";
			_charNames[(char)0x316B] = "hangul letter rieul-pieup-sios";
			_charNames[(char)0x316C] = "hangul letter rieul-pansios";
			_charNames[(char)0x316D] = "hangul letter rieul-yeorinhieuh";
			_charNames[(char)0x316E] = "hangul letter mieum-pieup";
			_charNames[(char)0x316F] = "hangul letter mieum-sios";
			_charNames[(char)0x3170] = "hangul letter mieum-pansios";
			_charNames[(char)0x3171] = "hangul letter kapyeounmieum";
			_charNames[(char)0x3172] = "hangul letter pieup-kiyeok";
			_charNames[(char)0x3173] = "hangul letter pieup-tikeut";
			_charNames[(char)0x3174] = "hangul letter pieup-sios-kiyeok";
			_charNames[(char)0x3175] = "hangul letter pieup-sios-tikeut";
			_charNames[(char)0x3176] = "hangul letter pieup-cieuc";
			_charNames[(char)0x3177] = "hangul letter pieup-thieuth";
			_charNames[(char)0x3178] = "hangul letter kapyeounpieup";
			_charNames[(char)0x3179] = "hangul letter kapyeounssangpieup";
			_charNames[(char)0x317A] = "hangul letter sios-kiyeok";
			_charNames[(char)0x317B] = "hangul letter sios-nieun";
			_charNames[(char)0x317C] = "hangul letter sios-tikeut";
			_charNames[(char)0x317D] = "hangul letter sios-pieup";
			_charNames[(char)0x317E] = "hangul letter sios-cieuc";
			_charNames[(char)0x317F] = "hangul letter pansios";
			_charNames[(char)0x3180] = "hangul letter ssangieung";
			_charNames[(char)0x3181] = "hangul letter yesieung";
			_charNames[(char)0x3182] = "hangul letter yesieung-sios";
			_charNames[(char)0x3183] = "hangul letter yesieung-pansios";
			_charNames[(char)0x3184] = "hangul letter kapyeounphieuph";
			_charNames[(char)0x3185] = "hangul letter ssanghieuh";
			_charNames[(char)0x3186] = "hangul letter yeorinhieuh";
			_charNames[(char)0x3187] = "hangul letter yo-ya";
			_charNames[(char)0x3188] = "hangul letter yo-yae";
			_charNames[(char)0x3189] = "hangul letter yo-i";
			_charNames[(char)0x318A] = "hangul letter yu-yeo";
			_charNames[(char)0x318B] = "hangul letter yu-ye";
			_charNames[(char)0x318C] = "hangul letter yu-i";
			_charNames[(char)0x318D] = "hangul letter araea";
			_charNames[(char)0x318E] = "hangul letter araeae";
			_charNames[(char)0x3190] = "ideographic annotation linking mark";
			_charNames[(char)0x3191] = "ideographic annotation reverse mark";
			_charNames[(char)0x3192] = "ideographic annotation one mark";
			_charNames[(char)0x3193] = "ideographic annotation two mark";
			_charNames[(char)0x3194] = "ideographic annotation three mark";
			_charNames[(char)0x3195] = "ideographic annotation four mark";
			_charNames[(char)0x3196] = "ideographic annotation top mark";
			_charNames[(char)0x3197] = "ideographic annotation middle mark";
			_charNames[(char)0x3198] = "ideographic annotation bottom mark";
			_charNames[(char)0x3199] = "ideographic annotation first mark";
			_charNames[(char)0x319A] = "ideographic annotation second mark";
			_charNames[(char)0x319B] = "ideographic annotation third mark";
			_charNames[(char)0x319C] = "ideographic annotation fourth mark";
			_charNames[(char)0x319D] = "ideographic annotation heaven mark";
			_charNames[(char)0x319E] = "ideographic annotation earth mark";
			_charNames[(char)0x319F] = "ideographic annotation man mark";
			_charNames[(char)0x31A0] = "bopomofo letter bu";
			_charNames[(char)0x31A1] = "bopomofo letter zi";
			_charNames[(char)0x31A2] = "bopomofo letter ji";
			_charNames[(char)0x31A3] = "bopomofo letter gu";
			_charNames[(char)0x31A4] = "bopomofo letter ee";
			_charNames[(char)0x31A5] = "bopomofo letter enn";
			_charNames[(char)0x31A6] = "bopomofo letter oo";
			_charNames[(char)0x31A7] = "bopomofo letter onn";
			_charNames[(char)0x31A8] = "bopomofo letter ir";
			_charNames[(char)0x31A9] = "bopomofo letter ann";
			_charNames[(char)0x31AA] = "bopomofo letter inn";
			_charNames[(char)0x31AB] = "bopomofo letter unn";
			_charNames[(char)0x31AC] = "bopomofo letter im";
			_charNames[(char)0x31AD] = "bopomofo letter ngg";
			_charNames[(char)0x31AE] = "bopomofo letter ainn";
			_charNames[(char)0x31AF] = "bopomofo letter aunn";
			_charNames[(char)0x31B0] = "bopomofo letter am";
			_charNames[(char)0x31B1] = "bopomofo letter om";
			_charNames[(char)0x31B2] = "bopomofo letter ong";
			_charNames[(char)0x31B3] = "bopomofo letter innn";
			_charNames[(char)0x31B4] = "bopomofo final letter p";
			_charNames[(char)0x31B5] = "bopomofo final letter t";
			_charNames[(char)0x31B6] = "bopomofo final letter k";
			_charNames[(char)0x31B7] = "bopomofo final letter h";
			_charNames[(char)0x31C0] = "cjk stroke t";
			_charNames[(char)0x31C1] = "cjk stroke wg";
			_charNames[(char)0x31C2] = "cjk stroke xg";
			_charNames[(char)0x31C3] = "cjk stroke bxg";
			_charNames[(char)0x31C4] = "cjk stroke sw";
			_charNames[(char)0x31C5] = "cjk stroke hzz";
			_charNames[(char)0x31C6] = "cjk stroke hzg";
			_charNames[(char)0x31C7] = "cjk stroke hp";
			_charNames[(char)0x31C8] = "cjk stroke hzwg";
			_charNames[(char)0x31C9] = "cjk stroke szwg";
			_charNames[(char)0x31CA] = "cjk stroke hzt";
			_charNames[(char)0x31CB] = "cjk stroke hzzp";
			_charNames[(char)0x31CC] = "cjk stroke hpwg";
			_charNames[(char)0x31CD] = "cjk stroke hzw";
			_charNames[(char)0x31CE] = "cjk stroke hzzz";
			_charNames[(char)0x31CF] = "cjk stroke n";
			_charNames[(char)0x31F0] = "katakana letter small ku";
			_charNames[(char)0x31F1] = "katakana letter small si";
			_charNames[(char)0x31F2] = "katakana letter small su";
			_charNames[(char)0x31F3] = "katakana letter small to";
			_charNames[(char)0x31F4] = "katakana letter small nu";
			_charNames[(char)0x31F5] = "katakana letter small ha";
			_charNames[(char)0x31F6] = "katakana letter small hi";
			_charNames[(char)0x31F7] = "katakana letter small hu";
			_charNames[(char)0x31F8] = "katakana letter small he";
			_charNames[(char)0x31F9] = "katakana letter small ho";
			_charNames[(char)0x31FA] = "katakana letter small mu";
			_charNames[(char)0x31FB] = "katakana letter small ra";
			_charNames[(char)0x31FC] = "katakana letter small ri";
			_charNames[(char)0x31FD] = "katakana letter small ru";
			_charNames[(char)0x31FE] = "katakana letter small re";
			_charNames[(char)0x31FF] = "katakana letter small ro";
			_charNames[(char)0x3200] = "parenthesized hangul kiyeok";
			_charNames[(char)0x3201] = "parenthesized hangul nieun";
			_charNames[(char)0x3202] = "parenthesized hangul tikeut";
			_charNames[(char)0x3203] = "parenthesized hangul rieul";
			_charNames[(char)0x3204] = "parenthesized hangul mieum";
			_charNames[(char)0x3205] = "parenthesized hangul pieup";
			_charNames[(char)0x3206] = "parenthesized hangul sios";
			_charNames[(char)0x3207] = "parenthesized hangul ieung";
			_charNames[(char)0x3208] = "parenthesized hangul cieuc";
			_charNames[(char)0x3209] = "parenthesized hangul chieuch";
			_charNames[(char)0x320A] = "parenthesized hangul khieukh";
			_charNames[(char)0x320B] = "parenthesized hangul thieuth";
			_charNames[(char)0x320C] = "parenthesized hangul phieuph";
			_charNames[(char)0x320D] = "parenthesized hangul hieuh";
			_charNames[(char)0x320E] = "parenthesized hangul kiyeok a";
			_charNames[(char)0x320F] = "parenthesized hangul nieun a";
			_charNames[(char)0x3210] = "parenthesized hangul tikeut a";
			_charNames[(char)0x3211] = "parenthesized hangul rieul a";
			_charNames[(char)0x3212] = "parenthesized hangul mieum a";
			_charNames[(char)0x3213] = "parenthesized hangul pieup a";
			_charNames[(char)0x3214] = "parenthesized hangul sios a";
			_charNames[(char)0x3215] = "parenthesized hangul ieung a";
			_charNames[(char)0x3216] = "parenthesized hangul cieuc a";
			_charNames[(char)0x3217] = "parenthesized hangul chieuch a";
			_charNames[(char)0x3218] = "parenthesized hangul khieukh a";
			_charNames[(char)0x3219] = "parenthesized hangul thieuth a";
			_charNames[(char)0x321A] = "parenthesized hangul phieuph a";
			_charNames[(char)0x321B] = "parenthesized hangul hieuh a";
			_charNames[(char)0x321C] = "parenthesized hangul cieuc u";
			_charNames[(char)0x321D] = "parenthesized korean character ojeon";
			_charNames[(char)0x321E] = "parenthesized korean character o hu";
			_charNames[(char)0x3220] = "parenthesized ideograph one";
			_charNames[(char)0x3221] = "parenthesized ideograph two";
			_charNames[(char)0x3222] = "parenthesized ideograph three";
			_charNames[(char)0x3223] = "parenthesized ideograph four";
			_charNames[(char)0x3224] = "parenthesized ideograph five";
			_charNames[(char)0x3225] = "parenthesized ideograph six";
			_charNames[(char)0x3226] = "parenthesized ideograph seven";
			_charNames[(char)0x3227] = "parenthesized ideograph eight";
			_charNames[(char)0x3228] = "parenthesized ideograph nine";
			_charNames[(char)0x3229] = "parenthesized ideograph ten";
			_charNames[(char)0x322A] = "parenthesized ideograph moon";
			_charNames[(char)0x322B] = "parenthesized ideograph fire";
			_charNames[(char)0x322C] = "parenthesized ideograph water";
			_charNames[(char)0x322D] = "parenthesized ideograph wood";
			_charNames[(char)0x322E] = "parenthesized ideograph metal";
			_charNames[(char)0x322F] = "parenthesized ideograph earth";
			_charNames[(char)0x3230] = "parenthesized ideograph sun";
			_charNames[(char)0x3231] = "parenthesized ideograph stock";
			_charNames[(char)0x3232] = "parenthesized ideograph have";
			_charNames[(char)0x3233] = "parenthesized ideograph society";
			_charNames[(char)0x3234] = "parenthesized ideograph name";
			_charNames[(char)0x3235] = "parenthesized ideograph special";
			_charNames[(char)0x3236] = "parenthesized ideograph financial";
			_charNames[(char)0x3237] = "parenthesized ideograph congratulation";
			_charNames[(char)0x3238] = "parenthesized ideograph labor";
			_charNames[(char)0x3239] = "parenthesized ideograph represent";
			_charNames[(char)0x323A] = "parenthesized ideograph call";
			_charNames[(char)0x323B] = "parenthesized ideograph study";
			_charNames[(char)0x323C] = "parenthesized ideograph supervise";
			_charNames[(char)0x323D] = "parenthesized ideograph enterprise";
			_charNames[(char)0x323E] = "parenthesized ideograph resource";
			_charNames[(char)0x323F] = "parenthesized ideograph alliance";
			_charNames[(char)0x3240] = "parenthesized ideograph festival";
			_charNames[(char)0x3241] = "parenthesized ideograph rest";
			_charNames[(char)0x3242] = "parenthesized ideograph self";
			_charNames[(char)0x3243] = "parenthesized ideograph reach";
			_charNames[(char)0x3250] = "partnership sign";
			_charNames[(char)0x3251] = "circled number twenty one";
			_charNames[(char)0x3252] = "circled number twenty two";
			_charNames[(char)0x3253] = "circled number twenty three";
			_charNames[(char)0x3254] = "circled number twenty four";
			_charNames[(char)0x3255] = "circled number twenty five";
			_charNames[(char)0x3256] = "circled number twenty six";
			_charNames[(char)0x3257] = "circled number twenty seven";
			_charNames[(char)0x3258] = "circled number twenty eight";
			_charNames[(char)0x3259] = "circled number twenty nine";
			_charNames[(char)0x325A] = "circled number thirty";
			_charNames[(char)0x325B] = "circled number thirty one";
			_charNames[(char)0x325C] = "circled number thirty two";
			_charNames[(char)0x325D] = "circled number thirty three";
			_charNames[(char)0x325E] = "circled number thirty four";
			_charNames[(char)0x325F] = "circled number thirty five";
			_charNames[(char)0x3260] = "circled hangul kiyeok";
			_charNames[(char)0x3261] = "circled hangul nieun";
			_charNames[(char)0x3262] = "circled hangul tikeut";
			_charNames[(char)0x3263] = "circled hangul rieul";
			_charNames[(char)0x3264] = "circled hangul mieum";
			_charNames[(char)0x3265] = "circled hangul pieup";
			_charNames[(char)0x3266] = "circled hangul sios";
			_charNames[(char)0x3267] = "circled hangul ieung";
			_charNames[(char)0x3268] = "circled hangul cieuc";
			_charNames[(char)0x3269] = "circled hangul chieuch";
			_charNames[(char)0x326A] = "circled hangul khieukh";
			_charNames[(char)0x326B] = "circled hangul thieuth";
			_charNames[(char)0x326C] = "circled hangul phieuph";
			_charNames[(char)0x326D] = "circled hangul hieuh";
			_charNames[(char)0x326E] = "circled hangul kiyeok a";
			_charNames[(char)0x326F] = "circled hangul nieun a";
			_charNames[(char)0x3270] = "circled hangul tikeut a";
			_charNames[(char)0x3271] = "circled hangul rieul a";
			_charNames[(char)0x3272] = "circled hangul mieum a";
			_charNames[(char)0x3273] = "circled hangul pieup a";
			_charNames[(char)0x3274] = "circled hangul sios a";
			_charNames[(char)0x3275] = "circled hangul ieung a";
			_charNames[(char)0x3276] = "circled hangul cieuc a";
			_charNames[(char)0x3277] = "circled hangul chieuch a";
			_charNames[(char)0x3278] = "circled hangul khieukh a";
			_charNames[(char)0x3279] = "circled hangul thieuth a";
			_charNames[(char)0x327A] = "circled hangul phieuph a";
			_charNames[(char)0x327B] = "circled hangul hieuh a";
			_charNames[(char)0x327C] = "circled korean character chamko";
			_charNames[(char)0x327D] = "circled korean character jueui";
			_charNames[(char)0x327E] = "circled hangul ieung u";
			_charNames[(char)0x327F] = "korean standard symbol";
			_charNames[(char)0x3280] = "circled ideograph one";
			_charNames[(char)0x3281] = "circled ideograph two";
			_charNames[(char)0x3282] = "circled ideograph three";
			_charNames[(char)0x3283] = "circled ideograph four";
			_charNames[(char)0x3284] = "circled ideograph five";
			_charNames[(char)0x3285] = "circled ideograph six";
			_charNames[(char)0x3286] = "circled ideograph seven";
			_charNames[(char)0x3287] = "circled ideograph eight";
			_charNames[(char)0x3288] = "circled ideograph nine";
			_charNames[(char)0x3289] = "circled ideograph ten";
			_charNames[(char)0x328A] = "circled ideograph moon";
			_charNames[(char)0x328B] = "circled ideograph fire";
			_charNames[(char)0x328C] = "circled ideograph water";
			_charNames[(char)0x328D] = "circled ideograph wood";
			_charNames[(char)0x328E] = "circled ideograph metal";
			_charNames[(char)0x328F] = "circled ideograph earth";
			_charNames[(char)0x3290] = "circled ideograph sun";
			_charNames[(char)0x3291] = "circled ideograph stock";
			_charNames[(char)0x3292] = "circled ideograph have";
			_charNames[(char)0x3293] = "circled ideograph society";
			_charNames[(char)0x3294] = "circled ideograph name";
			_charNames[(char)0x3295] = "circled ideograph special";
			_charNames[(char)0x3296] = "circled ideograph financial";
			_charNames[(char)0x3297] = "circled ideograph congratulation";
			_charNames[(char)0x3298] = "circled ideograph labor";
			_charNames[(char)0x3299] = "circled ideograph secret";
			_charNames[(char)0x329A] = "circled ideograph male";
			_charNames[(char)0x329B] = "circled ideograph female";
			_charNames[(char)0x329C] = "circled ideograph suitable";
			_charNames[(char)0x329D] = "circled ideograph excellent";
			_charNames[(char)0x329E] = "circled ideograph print";
			_charNames[(char)0x329F] = "circled ideograph attention";
			_charNames[(char)0x32A0] = "circled ideograph item";
			_charNames[(char)0x32A1] = "circled ideograph rest";
			_charNames[(char)0x32A2] = "circled ideograph copy";
			_charNames[(char)0x32A3] = "circled ideograph correct";
			_charNames[(char)0x32A4] = "circled ideograph high";
			_charNames[(char)0x32A5] = "circled ideograph centre";
			_charNames[(char)0x32A6] = "circled ideograph low";
			_charNames[(char)0x32A7] = "circled ideograph left";
			_charNames[(char)0x32A8] = "circled ideograph right";
			_charNames[(char)0x32A9] = "circled ideograph medicine";
			_charNames[(char)0x32AA] = "circled ideograph religion";
			_charNames[(char)0x32AB] = "circled ideograph study";
			_charNames[(char)0x32AC] = "circled ideograph supervise";
			_charNames[(char)0x32AD] = "circled ideograph enterprise";
			_charNames[(char)0x32AE] = "circled ideograph resource";
			_charNames[(char)0x32AF] = "circled ideograph alliance";
			_charNames[(char)0x32B0] = "circled ideograph night";
			_charNames[(char)0x32B1] = "circled number thirty six";
			_charNames[(char)0x32B2] = "circled number thirty seven";
			_charNames[(char)0x32B3] = "circled number thirty eight";
			_charNames[(char)0x32B4] = "circled number thirty nine";
			_charNames[(char)0x32B5] = "circled number forty";
			_charNames[(char)0x32B6] = "circled number forty one";
			_charNames[(char)0x32B7] = "circled number forty two";
			_charNames[(char)0x32B8] = "circled number forty three";
			_charNames[(char)0x32B9] = "circled number forty four";
			_charNames[(char)0x32BA] = "circled number forty five";
			_charNames[(char)0x32BB] = "circled number forty six";
			_charNames[(char)0x32BC] = "circled number forty seven";
			_charNames[(char)0x32BD] = "circled number forty eight";
			_charNames[(char)0x32BE] = "circled number forty nine";
			_charNames[(char)0x32BF] = "circled number fifty";
			_charNames[(char)0x32C0] = "ideographic telegraph symbol for january";
			_charNames[(char)0x32C1] = "ideographic telegraph symbol for february";
			_charNames[(char)0x32C2] = "ideographic telegraph symbol for march";
			_charNames[(char)0x32C3] = "ideographic telegraph symbol for april";
			_charNames[(char)0x32C4] = "ideographic telegraph symbol for may";
			_charNames[(char)0x32C5] = "ideographic telegraph symbol for june";
			_charNames[(char)0x32C6] = "ideographic telegraph symbol for july";
			_charNames[(char)0x32C7] = "ideographic telegraph symbol for august";
			_charNames[(char)0x32C8] = "ideographic telegraph symbol for september";
			_charNames[(char)0x32C9] = "ideographic telegraph symbol for october";
			_charNames[(char)0x32CA] = "ideographic telegraph symbol for november";
			_charNames[(char)0x32CB] = "ideographic telegraph symbol for december";
			_charNames[(char)0x32CC] = "square hg";
			_charNames[(char)0x32CD] = "square erg";
			_charNames[(char)0x32CE] = "square ev";
			_charNames[(char)0x32CF] = "limited liability sign";
			_charNames[(char)0x32D0] = "circled katakana a";
			_charNames[(char)0x32D1] = "circled katakana i";
			_charNames[(char)0x32D2] = "circled katakana u";
			_charNames[(char)0x32D3] = "circled katakana e";
			_charNames[(char)0x32D4] = "circled katakana o";
			_charNames[(char)0x32D5] = "circled katakana ka";
			_charNames[(char)0x32D6] = "circled katakana ki";
			_charNames[(char)0x32D7] = "circled katakana ku";
			_charNames[(char)0x32D8] = "circled katakana ke";
			_charNames[(char)0x32D9] = "circled katakana ko";
			_charNames[(char)0x32DA] = "circled katakana sa";
			_charNames[(char)0x32DB] = "circled katakana si";
			_charNames[(char)0x32DC] = "circled katakana su";
			_charNames[(char)0x32DD] = "circled katakana se";
			_charNames[(char)0x32DE] = "circled katakana so";
			_charNames[(char)0x32DF] = "circled katakana ta";
			_charNames[(char)0x32E0] = "circled katakana ti";
			_charNames[(char)0x32E1] = "circled katakana tu";
			_charNames[(char)0x32E2] = "circled katakana te";
			_charNames[(char)0x32E3] = "circled katakana to";
			_charNames[(char)0x32E4] = "circled katakana na";
			_charNames[(char)0x32E5] = "circled katakana ni";
			_charNames[(char)0x32E6] = "circled katakana nu";
			_charNames[(char)0x32E7] = "circled katakana ne";
			_charNames[(char)0x32E8] = "circled katakana no";
			_charNames[(char)0x32E9] = "circled katakana ha";
			_charNames[(char)0x32EA] = "circled katakana hi";
			_charNames[(char)0x32EB] = "circled katakana hu";
			_charNames[(char)0x32EC] = "circled katakana he";
			_charNames[(char)0x32ED] = "circled katakana ho";
			_charNames[(char)0x32EE] = "circled katakana ma";
			_charNames[(char)0x32EF] = "circled katakana mi";
			_charNames[(char)0x32F0] = "circled katakana mu";
			_charNames[(char)0x32F1] = "circled katakana me";
			_charNames[(char)0x32F2] = "circled katakana mo";
			_charNames[(char)0x32F3] = "circled katakana ya";
			_charNames[(char)0x32F4] = "circled katakana yu";
			_charNames[(char)0x32F5] = "circled katakana yo";
			_charNames[(char)0x32F6] = "circled katakana ra";
			_charNames[(char)0x32F7] = "circled katakana ri";
			_charNames[(char)0x32F8] = "circled katakana ru";
			_charNames[(char)0x32F9] = "circled katakana re";
			_charNames[(char)0x32FA] = "circled katakana ro";
			_charNames[(char)0x32FB] = "circled katakana wa";
			_charNames[(char)0x32FC] = "circled katakana wi";
			_charNames[(char)0x32FD] = "circled katakana we";
			_charNames[(char)0x32FE] = "circled katakana wo";
			_charNames[(char)0x3300] = "square apaato";
			_charNames[(char)0x3301] = "square aruhua";
			_charNames[(char)0x3302] = "square anpea";
			_charNames[(char)0x3303] = "square aaru";
			_charNames[(char)0x3304] = "square iningu";
			_charNames[(char)0x3305] = "square inti";
			_charNames[(char)0x3306] = "square uon";
			_charNames[(char)0x3307] = "square esukuudo";
			_charNames[(char)0x3308] = "square eekaa";
			_charNames[(char)0x3309] = "square onsu";
			_charNames[(char)0x330A] = "square oomu";
			_charNames[(char)0x330B] = "square kairi";
			_charNames[(char)0x330C] = "square karatto";
			_charNames[(char)0x330D] = "square karorii";
			_charNames[(char)0x330E] = "square garon";
			_charNames[(char)0x330F] = "square ganma";
			_charNames[(char)0x3310] = "square giga";
			_charNames[(char)0x3311] = "square ginii";
			_charNames[(char)0x3312] = "square kyurii";
			_charNames[(char)0x3313] = "square girudaa";
			_charNames[(char)0x3314] = "square kiro";
			_charNames[(char)0x3315] = "square kiroguramu";
			_charNames[(char)0x3316] = "square kiromeetoru";
			_charNames[(char)0x3317] = "square kirowatto";
			_charNames[(char)0x3318] = "square guramu";
			_charNames[(char)0x3319] = "square guramuton";
			_charNames[(char)0x331A] = "square kuruzeiro";
			_charNames[(char)0x331B] = "square kuroone";
			_charNames[(char)0x331C] = "square keesu";
			_charNames[(char)0x331D] = "square koruna";
			_charNames[(char)0x331E] = "square koopo";
			_charNames[(char)0x331F] = "square saikuru";
			_charNames[(char)0x3320] = "square santiimu";
			_charNames[(char)0x3321] = "square siringu";
			_charNames[(char)0x3322] = "square senti";
			_charNames[(char)0x3323] = "square sento";
			_charNames[(char)0x3324] = "square daasu";
			_charNames[(char)0x3325] = "square desi";
			_charNames[(char)0x3326] = "square doru";
			_charNames[(char)0x3327] = "square ton";
			_charNames[(char)0x3328] = "square nano";
			_charNames[(char)0x3329] = "square notto";
			_charNames[(char)0x332A] = "square haitu";
			_charNames[(char)0x332B] = "square paasento";
			_charNames[(char)0x332C] = "square paatu";
			_charNames[(char)0x332D] = "square baareru";
			_charNames[(char)0x332E] = "square piasutoru";
			_charNames[(char)0x332F] = "square pikuru";
			_charNames[(char)0x3330] = "square piko";
			_charNames[(char)0x3331] = "square biru";
			_charNames[(char)0x3332] = "square huaraddo";
			_charNames[(char)0x3333] = "square huiito";
			_charNames[(char)0x3334] = "square bussyeru";
			_charNames[(char)0x3335] = "square huran";
			_charNames[(char)0x3336] = "square hekutaaru";
			_charNames[(char)0x3337] = "square peso";
			_charNames[(char)0x3338] = "square penihi";
			_charNames[(char)0x3339] = "square herutu";
			_charNames[(char)0x333A] = "square pensu";
			_charNames[(char)0x333B] = "square peezi";
			_charNames[(char)0x333C] = "square beeta";
			_charNames[(char)0x333D] = "square pointo";
			_charNames[(char)0x333E] = "square boruto";
			_charNames[(char)0x333F] = "square hon";
			_charNames[(char)0x3340] = "square pondo";
			_charNames[(char)0x3341] = "square hooru";
			_charNames[(char)0x3342] = "square hoon";
			_charNames[(char)0x3343] = "square maikuro";
			_charNames[(char)0x3344] = "square mairu";
			_charNames[(char)0x3345] = "square mahha";
			_charNames[(char)0x3346] = "square maruku";
			_charNames[(char)0x3347] = "square mansyon";
			_charNames[(char)0x3348] = "square mikuron";
			_charNames[(char)0x3349] = "square miri";
			_charNames[(char)0x334A] = "square miribaaru";
			_charNames[(char)0x334B] = "square mega";
			_charNames[(char)0x334C] = "square megaton";
			_charNames[(char)0x334D] = "square meetoru";
			_charNames[(char)0x334E] = "square yaado";
			_charNames[(char)0x334F] = "square yaaru";
			_charNames[(char)0x3350] = "square yuan";
			_charNames[(char)0x3351] = "square rittoru";
			_charNames[(char)0x3352] = "square rira";
			_charNames[(char)0x3353] = "square rupii";
			_charNames[(char)0x3354] = "square ruuburu";
			_charNames[(char)0x3355] = "square remu";
			_charNames[(char)0x3356] = "square rentogen";
			_charNames[(char)0x3357] = "square watto";
			_charNames[(char)0x3358] = "ideographic telegraph symbol for hour zero";
			_charNames[(char)0x3359] = "ideographic telegraph symbol for hour one";
			_charNames[(char)0x335A] = "ideographic telegraph symbol for hour two";
			_charNames[(char)0x335B] = "ideographic telegraph symbol for hour three";
			_charNames[(char)0x335C] = "ideographic telegraph symbol for hour four";
			_charNames[(char)0x335D] = "ideographic telegraph symbol for hour five";
			_charNames[(char)0x335E] = "ideographic telegraph symbol for hour six";
			_charNames[(char)0x335F] = "ideographic telegraph symbol for hour seven";
			_charNames[(char)0x3360] = "ideographic telegraph symbol for hour eight";
			_charNames[(char)0x3361] = "ideographic telegraph symbol for hour nine";
			_charNames[(char)0x3362] = "ideographic telegraph symbol for hour ten";
			_charNames[(char)0x3363] = "ideographic telegraph symbol for hour eleven";
			_charNames[(char)0x3364] = "ideographic telegraph symbol for hour twelve";
			_charNames[(char)0x3365] = "ideographic telegraph symbol for hour thirteen";
			_charNames[(char)0x3366] = "ideographic telegraph symbol for hour fourteen";
			_charNames[(char)0x3367] = "ideographic telegraph symbol for hour fifteen";
			_charNames[(char)0x3368] = "ideographic telegraph symbol for hour sixteen";
			_charNames[(char)0x3369] = "ideographic telegraph symbol for hour seventeen";
			_charNames[(char)0x336A] = "ideographic telegraph symbol for hour eighteen";
			_charNames[(char)0x336B] = "ideographic telegraph symbol for hour nineteen";
			_charNames[(char)0x336C] = "ideographic telegraph symbol for hour twenty";
			_charNames[(char)0x336D] = "ideographic telegraph symbol for hour twenty-one";
			_charNames[(char)0x336E] = "ideographic telegraph symbol for hour twenty-two";
			_charNames[(char)0x336F] = "ideographic telegraph symbol for hour twenty-three";
			_charNames[(char)0x3370] = "ideographic telegraph symbol for hour twenty-four";
			_charNames[(char)0x3371] = "square hpa";
			_charNames[(char)0x3372] = "square da";
			_charNames[(char)0x3373] = "square au";
			_charNames[(char)0x3374] = "square bar";
			_charNames[(char)0x3375] = "square ov";
			_charNames[(char)0x3376] = "square pc";
			_charNames[(char)0x3377] = "square dm";
			_charNames[(char)0x3378] = "square dm squared";
			_charNames[(char)0x3379] = "square dm cubed";
			_charNames[(char)0x337A] = "square iu";
			_charNames[(char)0x337B] = "square era name heisei";
			_charNames[(char)0x337C] = "square era name syouwa";
			_charNames[(char)0x337D] = "square era name taisyou";
			_charNames[(char)0x337E] = "square era name meizi";
			_charNames[(char)0x337F] = "square corporation";
			_charNames[(char)0x3380] = "square pa amps";
			_charNames[(char)0x3381] = "square na";
			_charNames[(char)0x3382] = "square mu a";
			_charNames[(char)0x3383] = "square ma";
			_charNames[(char)0x3384] = "square ka";
			_charNames[(char)0x3385] = "square kb";
			_charNames[(char)0x3386] = "square mb";
			_charNames[(char)0x3387] = "square gb";
			_charNames[(char)0x3388] = "square cal";
			_charNames[(char)0x3389] = "square kcal";
			_charNames[(char)0x338A] = "square pf";
			_charNames[(char)0x338B] = "square nf";
			_charNames[(char)0x338C] = "square mu f";
			_charNames[(char)0x338D] = "square mu g";
			_charNames[(char)0x338E] = "square mg";
			_charNames[(char)0x338F] = "square kg";
			_charNames[(char)0x3390] = "square hz";
			_charNames[(char)0x3391] = "square khz";
			_charNames[(char)0x3392] = "square mhz";
			_charNames[(char)0x3393] = "square ghz";
			_charNames[(char)0x3394] = "square thz";
			_charNames[(char)0x3395] = "square mu l";
			_charNames[(char)0x3396] = "square ml";
			_charNames[(char)0x3397] = "square dl";
			_charNames[(char)0x3398] = "square kl";
			_charNames[(char)0x3399] = "square fm";
			_charNames[(char)0x339A] = "square nm";
			_charNames[(char)0x339B] = "square mu m";
			_charNames[(char)0x339C] = "square mm";
			_charNames[(char)0x339D] = "square cm";
			_charNames[(char)0x339E] = "square km";
			_charNames[(char)0x339F] = "square mm squared";
			_charNames[(char)0x33A0] = "square cm squared";
			_charNames[(char)0x33A1] = "square m squared";
			_charNames[(char)0x33A2] = "square km squared";
			_charNames[(char)0x33A3] = "square mm cubed";
			_charNames[(char)0x33A4] = "square cm cubed";
			_charNames[(char)0x33A5] = "square m cubed";
			_charNames[(char)0x33A6] = "square km cubed";
			_charNames[(char)0x33A7] = "square m over s";
			_charNames[(char)0x33A8] = "square m over s squared";
			_charNames[(char)0x33A9] = "square pa";
			_charNames[(char)0x33AA] = "square kpa";
			_charNames[(char)0x33AB] = "square mpa";
			_charNames[(char)0x33AC] = "square gpa";
			_charNames[(char)0x33AD] = "square rad";
			_charNames[(char)0x33AE] = "square rad over s";
			_charNames[(char)0x33AF] = "square rad over s squared";
			_charNames[(char)0x33B0] = "square ps";
			_charNames[(char)0x33B1] = "square ns";
			_charNames[(char)0x33B2] = "square mu s";
			_charNames[(char)0x33B3] = "square ms";
			_charNames[(char)0x33B4] = "square pv";
			_charNames[(char)0x33B5] = "square nv";
			_charNames[(char)0x33B6] = "square mu v";
			_charNames[(char)0x33B7] = "square mv";
			_charNames[(char)0x33B8] = "square kv";
			_charNames[(char)0x33B9] = "square mv mega";
			_charNames[(char)0x33BA] = "square pw";
			_charNames[(char)0x33BB] = "square nw";
			_charNames[(char)0x33BC] = "square mu w";
			_charNames[(char)0x33BD] = "square mw";
			_charNames[(char)0x33BE] = "square kw";
			_charNames[(char)0x33BF] = "square mw mega";
			_charNames[(char)0x33C0] = "square k ohm";
			_charNames[(char)0x33C1] = "square m ohm";
			_charNames[(char)0x33C2] = "square am";
			_charNames[(char)0x33C3] = "square bq";
			_charNames[(char)0x33C4] = "square cc";
			_charNames[(char)0x33C5] = "square cd";
			_charNames[(char)0x33C6] = "square c over kg";
			_charNames[(char)0x33C7] = "square co";
			_charNames[(char)0x33C8] = "square db";
			_charNames[(char)0x33C9] = "square gy";
			_charNames[(char)0x33CA] = "square ha";
			_charNames[(char)0x33CB] = "square hp";
			_charNames[(char)0x33CC] = "square in";
			_charNames[(char)0x33CD] = "square kk";
			_charNames[(char)0x33CE] = "square km capital";
			_charNames[(char)0x33CF] = "square kt";
			_charNames[(char)0x33D0] = "square lm";
			_charNames[(char)0x33D1] = "square ln";
			_charNames[(char)0x33D2] = "square log";
			_charNames[(char)0x33D3] = "square lx";
			_charNames[(char)0x33D4] = "square mb small";
			_charNames[(char)0x33D5] = "square mil";
			_charNames[(char)0x33D6] = "square mol";
			_charNames[(char)0x33D7] = "square ph";
			_charNames[(char)0x33D8] = "square pm";
			_charNames[(char)0x33D9] = "square ppm";
			_charNames[(char)0x33DA] = "square pr";
			_charNames[(char)0x33DB] = "square sr";
			_charNames[(char)0x33DC] = "square sv";
			_charNames[(char)0x33DD] = "square wb";
			_charNames[(char)0x33DE] = "square v over m";
			_charNames[(char)0x33DF] = "square a over m";
			_charNames[(char)0x33E0] = "ideographic telegraph symbol for day one";
			_charNames[(char)0x33E1] = "ideographic telegraph symbol for day two";
			_charNames[(char)0x33E2] = "ideographic telegraph symbol for day three";
			_charNames[(char)0x33E3] = "ideographic telegraph symbol for day four";
			_charNames[(char)0x33E4] = "ideographic telegraph symbol for day five";
			_charNames[(char)0x33E5] = "ideographic telegraph symbol for day six";
			_charNames[(char)0x33E6] = "ideographic telegraph symbol for day seven";
			_charNames[(char)0x33E7] = "ideographic telegraph symbol for day eight";
			_charNames[(char)0x33E8] = "ideographic telegraph symbol for day nine";
			_charNames[(char)0x33E9] = "ideographic telegraph symbol for day ten";
			_charNames[(char)0x33EA] = "ideographic telegraph symbol for day eleven";
			_charNames[(char)0x33EB] = "ideographic telegraph symbol for day twelve";
			_charNames[(char)0x33EC] = "ideographic telegraph symbol for day thirteen";
			_charNames[(char)0x33ED] = "ideographic telegraph symbol for day fourteen";
			_charNames[(char)0x33EE] = "ideographic telegraph symbol for day fifteen";
			_charNames[(char)0x33EF] = "ideographic telegraph symbol for day sixteen";
			_charNames[(char)0x33F0] = "ideographic telegraph symbol for day seventeen";
			_charNames[(char)0x33F1] = "ideographic telegraph symbol for day eighteen";
			_charNames[(char)0x33F2] = "ideographic telegraph symbol for day nineteen";
			_charNames[(char)0x33F3] = "ideographic telegraph symbol for day twenty";
			_charNames[(char)0x33F4] = "ideographic telegraph symbol for day twenty-one";
			_charNames[(char)0x33F5] = "ideographic telegraph symbol for day twenty-two";
			_charNames[(char)0x33F6] = "ideographic telegraph symbol for day twenty-three";
			_charNames[(char)0x33F7] = "ideographic telegraph symbol for day twenty-four";
			_charNames[(char)0x33F8] = "ideographic telegraph symbol for day twenty-five";
			_charNames[(char)0x33F9] = "ideographic telegraph symbol for day twenty-six";
			_charNames[(char)0x33FA] = "ideographic telegraph symbol for day twenty-seven";
			_charNames[(char)0x33FB] = "ideographic telegraph symbol for day twenty-eight";
			_charNames[(char)0x33FC] = "ideographic telegraph symbol for day twenty-nine";
			_charNames[(char)0x33FD] = "ideographic telegraph symbol for day thirty";
			_charNames[(char)0x33FE] = "ideographic telegraph symbol for day thirty-one";
			_charNames[(char)0x33FF] = "square gal";
			_charNames[(char)0x4DC0] = "hexagram for the creative heaven";
			_charNames[(char)0x4DC1] = "hexagram for the receptive earth";
			_charNames[(char)0x4DC2] = "hexagram for difficulty at the beginning";
			_charNames[(char)0x4DC3] = "hexagram for youthful folly";
			_charNames[(char)0x4DC4] = "hexagram for waiting";
			_charNames[(char)0x4DC5] = "hexagram for conflict";
			_charNames[(char)0x4DC6] = "hexagram for the army";
			_charNames[(char)0x4DC7] = "hexagram for holding together";
			_charNames[(char)0x4DC8] = "hexagram for small taming";
			_charNames[(char)0x4DC9] = "hexagram for treading";
			_charNames[(char)0x4DCA] = "hexagram for peace";
			_charNames[(char)0x4DCB] = "hexagram for standstill";
			_charNames[(char)0x4DCC] = "hexagram for fellowship";
			_charNames[(char)0x4DCD] = "hexagram for great possession";
			_charNames[(char)0x4DCE] = "hexagram for modesty";
			_charNames[(char)0x4DCF] = "hexagram for enthusiasm";
			_charNames[(char)0x4DD0] = "hexagram for following";
			_charNames[(char)0x4DD1] = "hexagram for work on the decayed";
			_charNames[(char)0x4DD2] = "hexagram for approach";
			_charNames[(char)0x4DD3] = "hexagram for contemplation";
			_charNames[(char)0x4DD4] = "hexagram for biting through";
			_charNames[(char)0x4DD5] = "hexagram for grace";
			_charNames[(char)0x4DD6] = "hexagram for splitting apart";
			_charNames[(char)0x4DD7] = "hexagram for return";
			_charNames[(char)0x4DD8] = "hexagram for innocence";
			_charNames[(char)0x4DD9] = "hexagram for great taming";
			_charNames[(char)0x4DDA] = "hexagram for mouth corners";
			_charNames[(char)0x4DDB] = "hexagram for great preponderance";
			_charNames[(char)0x4DDC] = "hexagram for the abysmal water";
			_charNames[(char)0x4DDD] = "hexagram for the clinging fire";
			_charNames[(char)0x4DDE] = "hexagram for influence";
			_charNames[(char)0x4DDF] = "hexagram for duration";
			_charNames[(char)0x4DE0] = "hexagram for retreat";
			_charNames[(char)0x4DE1] = "hexagram for great power";
			_charNames[(char)0x4DE2] = "hexagram for progress";
			_charNames[(char)0x4DE3] = "hexagram for darkening of the light";
			_charNames[(char)0x4DE4] = "hexagram for the family";
			_charNames[(char)0x4DE5] = "hexagram for opposition";
			_charNames[(char)0x4DE6] = "hexagram for obstruction";
			_charNames[(char)0x4DE7] = "hexagram for deliverance";
			_charNames[(char)0x4DE8] = "hexagram for decrease";
			_charNames[(char)0x4DE9] = "hexagram for increase";
			_charNames[(char)0x4DEA] = "hexagram for breakthrough";
			_charNames[(char)0x4DEB] = "hexagram for coming to meet";
			_charNames[(char)0x4DEC] = "hexagram for gathering together";
			_charNames[(char)0x4DED] = "hexagram for pushing upward";
			_charNames[(char)0x4DEE] = "hexagram for oppression";
			_charNames[(char)0x4DEF] = "hexagram for the well";
			_charNames[(char)0x4DF0] = "hexagram for revolution";
			_charNames[(char)0x4DF1] = "hexagram for the cauldron";
			_charNames[(char)0x4DF2] = "hexagram for the arousing thunder";
			_charNames[(char)0x4DF3] = "hexagram for the keeping still mountain";
			_charNames[(char)0x4DF4] = "hexagram for development";
			_charNames[(char)0x4DF5] = "hexagram for the marrying maiden";
			_charNames[(char)0x4DF6] = "hexagram for abundance";
			_charNames[(char)0x4DF7] = "hexagram for the wanderer";
			_charNames[(char)0x4DF8] = "hexagram for the gentle wind";
			_charNames[(char)0x4DF9] = "hexagram for the joyous lake";
			_charNames[(char)0x4DFA] = "hexagram for dispersion";
			_charNames[(char)0x4DFB] = "hexagram for limitation";
			_charNames[(char)0x4DFC] = "hexagram for inner truth";
			_charNames[(char)0x4DFD] = "hexagram for small preponderance";
			_charNames[(char)0x4DFE] = "hexagram for after completion";
			_charNames[(char)0x4DFF] = "hexagram for before completion";
			_charNames[(char)0xA000] = "yi syllable it";
			_charNames[(char)0xA001] = "yi syllable ix";
			_charNames[(char)0xA002] = "yi syllable i";
			_charNames[(char)0xA003] = "yi syllable ip";
			_charNames[(char)0xA004] = "yi syllable iet";
			_charNames[(char)0xA005] = "yi syllable iex";
			_charNames[(char)0xA006] = "yi syllable ie";
			_charNames[(char)0xA007] = "yi syllable iep";
			_charNames[(char)0xA008] = "yi syllable at";
			_charNames[(char)0xA009] = "yi syllable ax";
			_charNames[(char)0xA00A] = "yi syllable a";
			_charNames[(char)0xA00B] = "yi syllable ap";
			_charNames[(char)0xA00C] = "yi syllable uox";
			_charNames[(char)0xA00D] = "yi syllable uo";
			_charNames[(char)0xA00E] = "yi syllable uop";
			_charNames[(char)0xA00F] = "yi syllable ot";
			_charNames[(char)0xA010] = "yi syllable ox";
			_charNames[(char)0xA011] = "yi syllable o";
			_charNames[(char)0xA012] = "yi syllable op";
			_charNames[(char)0xA013] = "yi syllable ex";
			_charNames[(char)0xA014] = "yi syllable e";
			_charNames[(char)0xA015] = "yi syllable wu";
			_charNames[(char)0xA016] = "yi syllable bit";
			_charNames[(char)0xA017] = "yi syllable bix";
			_charNames[(char)0xA018] = "yi syllable bi";
			_charNames[(char)0xA019] = "yi syllable bip";
			_charNames[(char)0xA01A] = "yi syllable biet";
			_charNames[(char)0xA01B] = "yi syllable biex";
			_charNames[(char)0xA01C] = "yi syllable bie";
			_charNames[(char)0xA01D] = "yi syllable biep";
			_charNames[(char)0xA01E] = "yi syllable bat";
			_charNames[(char)0xA01F] = "yi syllable bax";
			_charNames[(char)0xA020] = "yi syllable ba";
			_charNames[(char)0xA021] = "yi syllable bap";
			_charNames[(char)0xA022] = "yi syllable buox";
			_charNames[(char)0xA023] = "yi syllable buo";
			_charNames[(char)0xA024] = "yi syllable buop";
			_charNames[(char)0xA025] = "yi syllable bot";
			_charNames[(char)0xA026] = "yi syllable box";
			_charNames[(char)0xA027] = "yi syllable bo";
			_charNames[(char)0xA028] = "yi syllable bop";
			_charNames[(char)0xA029] = "yi syllable bex";
			_charNames[(char)0xA02A] = "yi syllable be";
			_charNames[(char)0xA02B] = "yi syllable bep";
			_charNames[(char)0xA02C] = "yi syllable but";
			_charNames[(char)0xA02D] = "yi syllable bux";
			_charNames[(char)0xA02E] = "yi syllable bu";
			_charNames[(char)0xA02F] = "yi syllable bup";
			_charNames[(char)0xA030] = "yi syllable burx";
			_charNames[(char)0xA031] = "yi syllable bur";
			_charNames[(char)0xA032] = "yi syllable byt";
			_charNames[(char)0xA033] = "yi syllable byx";
			_charNames[(char)0xA034] = "yi syllable by";
			_charNames[(char)0xA035] = "yi syllable byp";
			_charNames[(char)0xA036] = "yi syllable byrx";
			_charNames[(char)0xA037] = "yi syllable byr";
			_charNames[(char)0xA038] = "yi syllable pit";
			_charNames[(char)0xA039] = "yi syllable pix";
			_charNames[(char)0xA03A] = "yi syllable pi";
			_charNames[(char)0xA03B] = "yi syllable pip";
			_charNames[(char)0xA03C] = "yi syllable piex";
			_charNames[(char)0xA03D] = "yi syllable pie";
			_charNames[(char)0xA03E] = "yi syllable piep";
			_charNames[(char)0xA03F] = "yi syllable pat";
			_charNames[(char)0xA040] = "yi syllable pax";
			_charNames[(char)0xA041] = "yi syllable pa";
			_charNames[(char)0xA042] = "yi syllable pap";
			_charNames[(char)0xA043] = "yi syllable puox";
			_charNames[(char)0xA044] = "yi syllable puo";
			_charNames[(char)0xA045] = "yi syllable puop";
			_charNames[(char)0xA046] = "yi syllable pot";
			_charNames[(char)0xA047] = "yi syllable pox";
			_charNames[(char)0xA048] = "yi syllable po";
			_charNames[(char)0xA049] = "yi syllable pop";
			_charNames[(char)0xA04A] = "yi syllable put";
			_charNames[(char)0xA04B] = "yi syllable pux";
			_charNames[(char)0xA04C] = "yi syllable pu";
			_charNames[(char)0xA04D] = "yi syllable pup";
			_charNames[(char)0xA04E] = "yi syllable purx";
			_charNames[(char)0xA04F] = "yi syllable pur";
			_charNames[(char)0xA050] = "yi syllable pyt";
			_charNames[(char)0xA051] = "yi syllable pyx";
			_charNames[(char)0xA052] = "yi syllable py";
			_charNames[(char)0xA053] = "yi syllable pyp";
			_charNames[(char)0xA054] = "yi syllable pyrx";
			_charNames[(char)0xA055] = "yi syllable pyr";
			_charNames[(char)0xA056] = "yi syllable bbit";
			_charNames[(char)0xA057] = "yi syllable bbix";
			_charNames[(char)0xA058] = "yi syllable bbi";
			_charNames[(char)0xA059] = "yi syllable bbip";
			_charNames[(char)0xA05A] = "yi syllable bbiet";
			_charNames[(char)0xA05B] = "yi syllable bbiex";
			_charNames[(char)0xA05C] = "yi syllable bbie";
			_charNames[(char)0xA05D] = "yi syllable bbiep";
			_charNames[(char)0xA05E] = "yi syllable bbat";
			_charNames[(char)0xA05F] = "yi syllable bbax";
			_charNames[(char)0xA060] = "yi syllable bba";
			_charNames[(char)0xA061] = "yi syllable bbap";
			_charNames[(char)0xA062] = "yi syllable bbuox";
			_charNames[(char)0xA063] = "yi syllable bbuo";
			_charNames[(char)0xA064] = "yi syllable bbuop";
			_charNames[(char)0xA065] = "yi syllable bbot";
			_charNames[(char)0xA066] = "yi syllable bbox";
			_charNames[(char)0xA067] = "yi syllable bbo";
			_charNames[(char)0xA068] = "yi syllable bbop";
			_charNames[(char)0xA069] = "yi syllable bbex";
			_charNames[(char)0xA06A] = "yi syllable bbe";
			_charNames[(char)0xA06B] = "yi syllable bbep";
			_charNames[(char)0xA06C] = "yi syllable bbut";
			_charNames[(char)0xA06D] = "yi syllable bbux";
			_charNames[(char)0xA06E] = "yi syllable bbu";
			_charNames[(char)0xA06F] = "yi syllable bbup";
			_charNames[(char)0xA070] = "yi syllable bburx";
			_charNames[(char)0xA071] = "yi syllable bbur";
			_charNames[(char)0xA072] = "yi syllable bbyt";
			_charNames[(char)0xA073] = "yi syllable bbyx";
			_charNames[(char)0xA074] = "yi syllable bby";
			_charNames[(char)0xA075] = "yi syllable bbyp";
			_charNames[(char)0xA076] = "yi syllable nbit";
			_charNames[(char)0xA077] = "yi syllable nbix";
			_charNames[(char)0xA078] = "yi syllable nbi";
			_charNames[(char)0xA079] = "yi syllable nbip";
			_charNames[(char)0xA07A] = "yi syllable nbiex";
			_charNames[(char)0xA07B] = "yi syllable nbie";
			_charNames[(char)0xA07C] = "yi syllable nbiep";
			_charNames[(char)0xA07D] = "yi syllable nbat";
			_charNames[(char)0xA07E] = "yi syllable nbax";
			_charNames[(char)0xA07F] = "yi syllable nba";
			_charNames[(char)0xA080] = "yi syllable nbap";
			_charNames[(char)0xA081] = "yi syllable nbot";
			_charNames[(char)0xA082] = "yi syllable nbox";
			_charNames[(char)0xA083] = "yi syllable nbo";
			_charNames[(char)0xA084] = "yi syllable nbop";
			_charNames[(char)0xA085] = "yi syllable nbut";
			_charNames[(char)0xA086] = "yi syllable nbux";
			_charNames[(char)0xA087] = "yi syllable nbu";
			_charNames[(char)0xA088] = "yi syllable nbup";
			_charNames[(char)0xA089] = "yi syllable nburx";
			_charNames[(char)0xA08A] = "yi syllable nbur";
			_charNames[(char)0xA08B] = "yi syllable nbyt";
			_charNames[(char)0xA08C] = "yi syllable nbyx";
			_charNames[(char)0xA08D] = "yi syllable nby";
			_charNames[(char)0xA08E] = "yi syllable nbyp";
			_charNames[(char)0xA08F] = "yi syllable nbyrx";
			_charNames[(char)0xA090] = "yi syllable nbyr";
			_charNames[(char)0xA091] = "yi syllable hmit";
			_charNames[(char)0xA092] = "yi syllable hmix";
			_charNames[(char)0xA093] = "yi syllable hmi";
			_charNames[(char)0xA094] = "yi syllable hmip";
			_charNames[(char)0xA095] = "yi syllable hmiex";
			_charNames[(char)0xA096] = "yi syllable hmie";
			_charNames[(char)0xA097] = "yi syllable hmiep";
			_charNames[(char)0xA098] = "yi syllable hmat";
			_charNames[(char)0xA099] = "yi syllable hmax";
			_charNames[(char)0xA09A] = "yi syllable hma";
			_charNames[(char)0xA09B] = "yi syllable hmap";
			_charNames[(char)0xA09C] = "yi syllable hmuox";
			_charNames[(char)0xA09D] = "yi syllable hmuo";
			_charNames[(char)0xA09E] = "yi syllable hmuop";
			_charNames[(char)0xA09F] = "yi syllable hmot";
			_charNames[(char)0xA0A0] = "yi syllable hmox";
			_charNames[(char)0xA0A1] = "yi syllable hmo";
			_charNames[(char)0xA0A2] = "yi syllable hmop";
			_charNames[(char)0xA0A3] = "yi syllable hmut";
			_charNames[(char)0xA0A4] = "yi syllable hmux";
			_charNames[(char)0xA0A5] = "yi syllable hmu";
			_charNames[(char)0xA0A6] = "yi syllable hmup";
			_charNames[(char)0xA0A7] = "yi syllable hmurx";
			_charNames[(char)0xA0A8] = "yi syllable hmur";
			_charNames[(char)0xA0A9] = "yi syllable hmyx";
			_charNames[(char)0xA0AA] = "yi syllable hmy";
			_charNames[(char)0xA0AB] = "yi syllable hmyp";
			_charNames[(char)0xA0AC] = "yi syllable hmyrx";
			_charNames[(char)0xA0AD] = "yi syllable hmyr";
			_charNames[(char)0xA0AE] = "yi syllable mit";
			_charNames[(char)0xA0AF] = "yi syllable mix";
			_charNames[(char)0xA0B0] = "yi syllable mi";
			_charNames[(char)0xA0B1] = "yi syllable mip";
			_charNames[(char)0xA0B2] = "yi syllable miex";
			_charNames[(char)0xA0B3] = "yi syllable mie";
			_charNames[(char)0xA0B4] = "yi syllable miep";
			_charNames[(char)0xA0B5] = "yi syllable mat";
			_charNames[(char)0xA0B6] = "yi syllable max";
			_charNames[(char)0xA0B7] = "yi syllable ma";
			_charNames[(char)0xA0B8] = "yi syllable map";
			_charNames[(char)0xA0B9] = "yi syllable muot";
			_charNames[(char)0xA0BA] = "yi syllable muox";
			_charNames[(char)0xA0BB] = "yi syllable muo";
			_charNames[(char)0xA0BC] = "yi syllable muop";
			_charNames[(char)0xA0BD] = "yi syllable mot";
			_charNames[(char)0xA0BE] = "yi syllable mox";
			_charNames[(char)0xA0BF] = "yi syllable mo";
			_charNames[(char)0xA0C0] = "yi syllable mop";
			_charNames[(char)0xA0C1] = "yi syllable mex";
			_charNames[(char)0xA0C2] = "yi syllable me";
			_charNames[(char)0xA0C3] = "yi syllable mut";
			_charNames[(char)0xA0C4] = "yi syllable mux";
			_charNames[(char)0xA0C5] = "yi syllable mu";
			_charNames[(char)0xA0C6] = "yi syllable mup";
			_charNames[(char)0xA0C7] = "yi syllable murx";
			_charNames[(char)0xA0C8] = "yi syllable mur";
			_charNames[(char)0xA0C9] = "yi syllable myt";
			_charNames[(char)0xA0CA] = "yi syllable myx";
			_charNames[(char)0xA0CB] = "yi syllable my";
			_charNames[(char)0xA0CC] = "yi syllable myp";
			_charNames[(char)0xA0CD] = "yi syllable fit";
			_charNames[(char)0xA0CE] = "yi syllable fix";
			_charNames[(char)0xA0CF] = "yi syllable fi";
			_charNames[(char)0xA0D0] = "yi syllable fip";
			_charNames[(char)0xA0D1] = "yi syllable fat";
			_charNames[(char)0xA0D2] = "yi syllable fax";
			_charNames[(char)0xA0D3] = "yi syllable fa";
			_charNames[(char)0xA0D4] = "yi syllable fap";
			_charNames[(char)0xA0D5] = "yi syllable fox";
			_charNames[(char)0xA0D6] = "yi syllable fo";
			_charNames[(char)0xA0D7] = "yi syllable fop";
			_charNames[(char)0xA0D8] = "yi syllable fut";
			_charNames[(char)0xA0D9] = "yi syllable fux";
			_charNames[(char)0xA0DA] = "yi syllable fu";
			_charNames[(char)0xA0DB] = "yi syllable fup";
			_charNames[(char)0xA0DC] = "yi syllable furx";
			_charNames[(char)0xA0DD] = "yi syllable fur";
			_charNames[(char)0xA0DE] = "yi syllable fyt";
			_charNames[(char)0xA0DF] = "yi syllable fyx";
			_charNames[(char)0xA0E0] = "yi syllable fy";
			_charNames[(char)0xA0E1] = "yi syllable fyp";
			_charNames[(char)0xA0E2] = "yi syllable vit";
			_charNames[(char)0xA0E3] = "yi syllable vix";
			_charNames[(char)0xA0E4] = "yi syllable vi";
			_charNames[(char)0xA0E5] = "yi syllable vip";
			_charNames[(char)0xA0E6] = "yi syllable viet";
			_charNames[(char)0xA0E7] = "yi syllable viex";
			_charNames[(char)0xA0E8] = "yi syllable vie";
			_charNames[(char)0xA0E9] = "yi syllable viep";
			_charNames[(char)0xA0EA] = "yi syllable vat";
			_charNames[(char)0xA0EB] = "yi syllable vax";
			_charNames[(char)0xA0EC] = "yi syllable va";
			_charNames[(char)0xA0ED] = "yi syllable vap";
			_charNames[(char)0xA0EE] = "yi syllable vot";
			_charNames[(char)0xA0EF] = "yi syllable vox";
			_charNames[(char)0xA0F0] = "yi syllable vo";
			_charNames[(char)0xA0F1] = "yi syllable vop";
			_charNames[(char)0xA0F2] = "yi syllable vex";
			_charNames[(char)0xA0F3] = "yi syllable vep";
			_charNames[(char)0xA0F4] = "yi syllable vut";
			_charNames[(char)0xA0F5] = "yi syllable vux";
			_charNames[(char)0xA0F6] = "yi syllable vu";
			_charNames[(char)0xA0F7] = "yi syllable vup";
			_charNames[(char)0xA0F8] = "yi syllable vurx";
			_charNames[(char)0xA0F9] = "yi syllable vur";
			_charNames[(char)0xA0FA] = "yi syllable vyt";
			_charNames[(char)0xA0FB] = "yi syllable vyx";
			_charNames[(char)0xA0FC] = "yi syllable vy";
			_charNames[(char)0xA0FD] = "yi syllable vyp";
			_charNames[(char)0xA0FE] = "yi syllable vyrx";
			_charNames[(char)0xA0FF] = "yi syllable vyr";
			_charNames[(char)0xA100] = "yi syllable dit";
			_charNames[(char)0xA101] = "yi syllable dix";
			_charNames[(char)0xA102] = "yi syllable di";
			_charNames[(char)0xA103] = "yi syllable dip";
			_charNames[(char)0xA104] = "yi syllable diex";
			_charNames[(char)0xA105] = "yi syllable die";
			_charNames[(char)0xA106] = "yi syllable diep";
			_charNames[(char)0xA107] = "yi syllable dat";
			_charNames[(char)0xA108] = "yi syllable dax";
			_charNames[(char)0xA109] = "yi syllable da";
			_charNames[(char)0xA10A] = "yi syllable dap";
			_charNames[(char)0xA10B] = "yi syllable duox";
			_charNames[(char)0xA10C] = "yi syllable duo";
			_charNames[(char)0xA10D] = "yi syllable dot";
			_charNames[(char)0xA10E] = "yi syllable dox";
			_charNames[(char)0xA10F] = "yi syllable do";
			_charNames[(char)0xA110] = "yi syllable dop";
			_charNames[(char)0xA111] = "yi syllable dex";
			_charNames[(char)0xA112] = "yi syllable de";
			_charNames[(char)0xA113] = "yi syllable dep";
			_charNames[(char)0xA114] = "yi syllable dut";
			_charNames[(char)0xA115] = "yi syllable dux";
			_charNames[(char)0xA116] = "yi syllable du";
			_charNames[(char)0xA117] = "yi syllable dup";
			_charNames[(char)0xA118] = "yi syllable durx";
			_charNames[(char)0xA119] = "yi syllable dur";
			_charNames[(char)0xA11A] = "yi syllable tit";
			_charNames[(char)0xA11B] = "yi syllable tix";
			_charNames[(char)0xA11C] = "yi syllable ti";
			_charNames[(char)0xA11D] = "yi syllable tip";
			_charNames[(char)0xA11E] = "yi syllable tiex";
			_charNames[(char)0xA11F] = "yi syllable tie";
			_charNames[(char)0xA120] = "yi syllable tiep";
			_charNames[(char)0xA121] = "yi syllable tat";
			_charNames[(char)0xA122] = "yi syllable tax";
			_charNames[(char)0xA123] = "yi syllable ta";
			_charNames[(char)0xA124] = "yi syllable tap";
			_charNames[(char)0xA125] = "yi syllable tuot";
			_charNames[(char)0xA126] = "yi syllable tuox";
			_charNames[(char)0xA127] = "yi syllable tuo";
			_charNames[(char)0xA128] = "yi syllable tuop";
			_charNames[(char)0xA129] = "yi syllable tot";
			_charNames[(char)0xA12A] = "yi syllable tox";
			_charNames[(char)0xA12B] = "yi syllable to";
			_charNames[(char)0xA12C] = "yi syllable top";
			_charNames[(char)0xA12D] = "yi syllable tex";
			_charNames[(char)0xA12E] = "yi syllable te";
			_charNames[(char)0xA12F] = "yi syllable tep";
			_charNames[(char)0xA130] = "yi syllable tut";
			_charNames[(char)0xA131] = "yi syllable tux";
			_charNames[(char)0xA132] = "yi syllable tu";
			_charNames[(char)0xA133] = "yi syllable tup";
			_charNames[(char)0xA134] = "yi syllable turx";
			_charNames[(char)0xA135] = "yi syllable tur";
			_charNames[(char)0xA136] = "yi syllable ddit";
			_charNames[(char)0xA137] = "yi syllable ddix";
			_charNames[(char)0xA138] = "yi syllable ddi";
			_charNames[(char)0xA139] = "yi syllable ddip";
			_charNames[(char)0xA13A] = "yi syllable ddiex";
			_charNames[(char)0xA13B] = "yi syllable ddie";
			_charNames[(char)0xA13C] = "yi syllable ddiep";
			_charNames[(char)0xA13D] = "yi syllable ddat";
			_charNames[(char)0xA13E] = "yi syllable ddax";
			_charNames[(char)0xA13F] = "yi syllable dda";
			_charNames[(char)0xA140] = "yi syllable ddap";
			_charNames[(char)0xA141] = "yi syllable dduox";
			_charNames[(char)0xA142] = "yi syllable dduo";
			_charNames[(char)0xA143] = "yi syllable dduop";
			_charNames[(char)0xA144] = "yi syllable ddot";
			_charNames[(char)0xA145] = "yi syllable ddox";
			_charNames[(char)0xA146] = "yi syllable ddo";
			_charNames[(char)0xA147] = "yi syllable ddop";
			_charNames[(char)0xA148] = "yi syllable ddex";
			_charNames[(char)0xA149] = "yi syllable dde";
			_charNames[(char)0xA14A] = "yi syllable ddep";
			_charNames[(char)0xA14B] = "yi syllable ddut";
			_charNames[(char)0xA14C] = "yi syllable ddux";
			_charNames[(char)0xA14D] = "yi syllable ddu";
			_charNames[(char)0xA14E] = "yi syllable ddup";
			_charNames[(char)0xA14F] = "yi syllable ddurx";
			_charNames[(char)0xA150] = "yi syllable ddur";
			_charNames[(char)0xA151] = "yi syllable ndit";
			_charNames[(char)0xA152] = "yi syllable ndix";
			_charNames[(char)0xA153] = "yi syllable ndi";
			_charNames[(char)0xA154] = "yi syllable ndip";
			_charNames[(char)0xA155] = "yi syllable ndiex";
			_charNames[(char)0xA156] = "yi syllable ndie";
			_charNames[(char)0xA157] = "yi syllable ndat";
			_charNames[(char)0xA158] = "yi syllable ndax";
			_charNames[(char)0xA159] = "yi syllable nda";
			_charNames[(char)0xA15A] = "yi syllable ndap";
			_charNames[(char)0xA15B] = "yi syllable ndot";
			_charNames[(char)0xA15C] = "yi syllable ndox";
			_charNames[(char)0xA15D] = "yi syllable ndo";
			_charNames[(char)0xA15E] = "yi syllable ndop";
			_charNames[(char)0xA15F] = "yi syllable ndex";
			_charNames[(char)0xA160] = "yi syllable nde";
			_charNames[(char)0xA161] = "yi syllable ndep";
			_charNames[(char)0xA162] = "yi syllable ndut";
			_charNames[(char)0xA163] = "yi syllable ndux";
			_charNames[(char)0xA164] = "yi syllable ndu";
			_charNames[(char)0xA165] = "yi syllable ndup";
			_charNames[(char)0xA166] = "yi syllable ndurx";
			_charNames[(char)0xA167] = "yi syllable ndur";
			_charNames[(char)0xA168] = "yi syllable hnit";
			_charNames[(char)0xA169] = "yi syllable hnix";
			_charNames[(char)0xA16A] = "yi syllable hni";
			_charNames[(char)0xA16B] = "yi syllable hnip";
			_charNames[(char)0xA16C] = "yi syllable hniet";
			_charNames[(char)0xA16D] = "yi syllable hniex";
			_charNames[(char)0xA16E] = "yi syllable hnie";
			_charNames[(char)0xA16F] = "yi syllable hniep";
			_charNames[(char)0xA170] = "yi syllable hnat";
			_charNames[(char)0xA171] = "yi syllable hnax";
			_charNames[(char)0xA172] = "yi syllable hna";
			_charNames[(char)0xA173] = "yi syllable hnap";
			_charNames[(char)0xA174] = "yi syllable hnuox";
			_charNames[(char)0xA175] = "yi syllable hnuo";
			_charNames[(char)0xA176] = "yi syllable hnot";
			_charNames[(char)0xA177] = "yi syllable hnox";
			_charNames[(char)0xA178] = "yi syllable hnop";
			_charNames[(char)0xA179] = "yi syllable hnex";
			_charNames[(char)0xA17A] = "yi syllable hne";
			_charNames[(char)0xA17B] = "yi syllable hnep";
			_charNames[(char)0xA17C] = "yi syllable hnut";
			_charNames[(char)0xA17D] = "yi syllable nit";
			_charNames[(char)0xA17E] = "yi syllable nix";
			_charNames[(char)0xA17F] = "yi syllable ni";
			_charNames[(char)0xA180] = "yi syllable nip";
			_charNames[(char)0xA181] = "yi syllable niex";
			_charNames[(char)0xA182] = "yi syllable nie";
			_charNames[(char)0xA183] = "yi syllable niep";
			_charNames[(char)0xA184] = "yi syllable nax";
			_charNames[(char)0xA185] = "yi syllable na";
			_charNames[(char)0xA186] = "yi syllable nap";
			_charNames[(char)0xA187] = "yi syllable nuox";
			_charNames[(char)0xA188] = "yi syllable nuo";
			_charNames[(char)0xA189] = "yi syllable nuop";
			_charNames[(char)0xA18A] = "yi syllable not";
			_charNames[(char)0xA18B] = "yi syllable nox";
			_charNames[(char)0xA18C] = "yi syllable no";
			_charNames[(char)0xA18D] = "yi syllable nop";
			_charNames[(char)0xA18E] = "yi syllable nex";
			_charNames[(char)0xA18F] = "yi syllable ne";
			_charNames[(char)0xA190] = "yi syllable nep";
			_charNames[(char)0xA191] = "yi syllable nut";
			_charNames[(char)0xA192] = "yi syllable nux";
			_charNames[(char)0xA193] = "yi syllable nu";
			_charNames[(char)0xA194] = "yi syllable nup";
			_charNames[(char)0xA195] = "yi syllable nurx";
			_charNames[(char)0xA196] = "yi syllable nur";
			_charNames[(char)0xA197] = "yi syllable hlit";
			_charNames[(char)0xA198] = "yi syllable hlix";
			_charNames[(char)0xA199] = "yi syllable hli";
			_charNames[(char)0xA19A] = "yi syllable hlip";
			_charNames[(char)0xA19B] = "yi syllable hliex";
			_charNames[(char)0xA19C] = "yi syllable hlie";
			_charNames[(char)0xA19D] = "yi syllable hliep";
			_charNames[(char)0xA19E] = "yi syllable hlat";
			_charNames[(char)0xA19F] = "yi syllable hlax";
			_charNames[(char)0xA1A0] = "yi syllable hla";
			_charNames[(char)0xA1A1] = "yi syllable hlap";
			_charNames[(char)0xA1A2] = "yi syllable hluox";
			_charNames[(char)0xA1A3] = "yi syllable hluo";
			_charNames[(char)0xA1A4] = "yi syllable hluop";
			_charNames[(char)0xA1A5] = "yi syllable hlox";
			_charNames[(char)0xA1A6] = "yi syllable hlo";
			_charNames[(char)0xA1A7] = "yi syllable hlop";
			_charNames[(char)0xA1A8] = "yi syllable hlex";
			_charNames[(char)0xA1A9] = "yi syllable hle";
			_charNames[(char)0xA1AA] = "yi syllable hlep";
			_charNames[(char)0xA1AB] = "yi syllable hlut";
			_charNames[(char)0xA1AC] = "yi syllable hlux";
			_charNames[(char)0xA1AD] = "yi syllable hlu";
			_charNames[(char)0xA1AE] = "yi syllable hlup";
			_charNames[(char)0xA1AF] = "yi syllable hlurx";
			_charNames[(char)0xA1B0] = "yi syllable hlur";
			_charNames[(char)0xA1B1] = "yi syllable hlyt";
			_charNames[(char)0xA1B2] = "yi syllable hlyx";
			_charNames[(char)0xA1B3] = "yi syllable hly";
			_charNames[(char)0xA1B4] = "yi syllable hlyp";
			_charNames[(char)0xA1B5] = "yi syllable hlyrx";
			_charNames[(char)0xA1B6] = "yi syllable hlyr";
			_charNames[(char)0xA1B7] = "yi syllable lit";
			_charNames[(char)0xA1B8] = "yi syllable lix";
			_charNames[(char)0xA1B9] = "yi syllable li";
			_charNames[(char)0xA1BA] = "yi syllable lip";
			_charNames[(char)0xA1BB] = "yi syllable liet";
			_charNames[(char)0xA1BC] = "yi syllable liex";
			_charNames[(char)0xA1BD] = "yi syllable lie";
			_charNames[(char)0xA1BE] = "yi syllable liep";
			_charNames[(char)0xA1BF] = "yi syllable lat";
			_charNames[(char)0xA1C0] = "yi syllable lax";
			_charNames[(char)0xA1C1] = "yi syllable la";
			_charNames[(char)0xA1C2] = "yi syllable lap";
			_charNames[(char)0xA1C3] = "yi syllable luot";
			_charNames[(char)0xA1C4] = "yi syllable luox";
			_charNames[(char)0xA1C5] = "yi syllable luo";
			_charNames[(char)0xA1C6] = "yi syllable luop";
			_charNames[(char)0xA1C7] = "yi syllable lot";
			_charNames[(char)0xA1C8] = "yi syllable lox";
			_charNames[(char)0xA1C9] = "yi syllable lo";
			_charNames[(char)0xA1CA] = "yi syllable lop";
			_charNames[(char)0xA1CB] = "yi syllable lex";
			_charNames[(char)0xA1CC] = "yi syllable le";
			_charNames[(char)0xA1CD] = "yi syllable lep";
			_charNames[(char)0xA1CE] = "yi syllable lut";
			_charNames[(char)0xA1CF] = "yi syllable lux";
			_charNames[(char)0xA1D0] = "yi syllable lu";
			_charNames[(char)0xA1D1] = "yi syllable lup";
			_charNames[(char)0xA1D2] = "yi syllable lurx";
			_charNames[(char)0xA1D3] = "yi syllable lur";
			_charNames[(char)0xA1D4] = "yi syllable lyt";
			_charNames[(char)0xA1D5] = "yi syllable lyx";
			_charNames[(char)0xA1D6] = "yi syllable ly";
			_charNames[(char)0xA1D7] = "yi syllable lyp";
			_charNames[(char)0xA1D8] = "yi syllable lyrx";
			_charNames[(char)0xA1D9] = "yi syllable lyr";
			_charNames[(char)0xA1DA] = "yi syllable git";
			_charNames[(char)0xA1DB] = "yi syllable gix";
			_charNames[(char)0xA1DC] = "yi syllable gi";
			_charNames[(char)0xA1DD] = "yi syllable gip";
			_charNames[(char)0xA1DE] = "yi syllable giet";
			_charNames[(char)0xA1DF] = "yi syllable giex";
			_charNames[(char)0xA1E0] = "yi syllable gie";
			_charNames[(char)0xA1E1] = "yi syllable giep";
			_charNames[(char)0xA1E2] = "yi syllable gat";
			_charNames[(char)0xA1E3] = "yi syllable gax";
			_charNames[(char)0xA1E4] = "yi syllable ga";
			_charNames[(char)0xA1E5] = "yi syllable gap";
			_charNames[(char)0xA1E6] = "yi syllable guot";
			_charNames[(char)0xA1E7] = "yi syllable guox";
			_charNames[(char)0xA1E8] = "yi syllable guo";
			_charNames[(char)0xA1E9] = "yi syllable guop";
			_charNames[(char)0xA1EA] = "yi syllable got";
			_charNames[(char)0xA1EB] = "yi syllable gox";
			_charNames[(char)0xA1EC] = "yi syllable go";
			_charNames[(char)0xA1ED] = "yi syllable gop";
			_charNames[(char)0xA1EE] = "yi syllable get";
			_charNames[(char)0xA1EF] = "yi syllable gex";
			_charNames[(char)0xA1F0] = "yi syllable ge";
			_charNames[(char)0xA1F1] = "yi syllable gep";
			_charNames[(char)0xA1F2] = "yi syllable gut";
			_charNames[(char)0xA1F3] = "yi syllable gux";
			_charNames[(char)0xA1F4] = "yi syllable gu";
			_charNames[(char)0xA1F5] = "yi syllable gup";
			_charNames[(char)0xA1F6] = "yi syllable gurx";
			_charNames[(char)0xA1F7] = "yi syllable gur";
			_charNames[(char)0xA1F8] = "yi syllable kit";
			_charNames[(char)0xA1F9] = "yi syllable kix";
			_charNames[(char)0xA1FA] = "yi syllable ki";
			_charNames[(char)0xA1FB] = "yi syllable kip";
			_charNames[(char)0xA1FC] = "yi syllable kiex";
			_charNames[(char)0xA1FD] = "yi syllable kie";
			_charNames[(char)0xA1FE] = "yi syllable kiep";
			_charNames[(char)0xA1FF] = "yi syllable kat";
			_charNames[(char)0xA200] = "yi syllable kax";
			_charNames[(char)0xA201] = "yi syllable ka";
			_charNames[(char)0xA202] = "yi syllable kap";
			_charNames[(char)0xA203] = "yi syllable kuox";
			_charNames[(char)0xA204] = "yi syllable kuo";
			_charNames[(char)0xA205] = "yi syllable kuop";
			_charNames[(char)0xA206] = "yi syllable kot";
			_charNames[(char)0xA207] = "yi syllable kox";
			_charNames[(char)0xA208] = "yi syllable ko";
			_charNames[(char)0xA209] = "yi syllable kop";
			_charNames[(char)0xA20A] = "yi syllable ket";
			_charNames[(char)0xA20B] = "yi syllable kex";
			_charNames[(char)0xA20C] = "yi syllable ke";
			_charNames[(char)0xA20D] = "yi syllable kep";
			_charNames[(char)0xA20E] = "yi syllable kut";
			_charNames[(char)0xA20F] = "yi syllable kux";
			_charNames[(char)0xA210] = "yi syllable ku";
			_charNames[(char)0xA211] = "yi syllable kup";
			_charNames[(char)0xA212] = "yi syllable kurx";
			_charNames[(char)0xA213] = "yi syllable kur";
			_charNames[(char)0xA214] = "yi syllable ggit";
			_charNames[(char)0xA215] = "yi syllable ggix";
			_charNames[(char)0xA216] = "yi syllable ggi";
			_charNames[(char)0xA217] = "yi syllable ggiex";
			_charNames[(char)0xA218] = "yi syllable ggie";
			_charNames[(char)0xA219] = "yi syllable ggiep";
			_charNames[(char)0xA21A] = "yi syllable ggat";
			_charNames[(char)0xA21B] = "yi syllable ggax";
			_charNames[(char)0xA21C] = "yi syllable gga";
			_charNames[(char)0xA21D] = "yi syllable ggap";
			_charNames[(char)0xA21E] = "yi syllable gguot";
			_charNames[(char)0xA21F] = "yi syllable gguox";
			_charNames[(char)0xA220] = "yi syllable gguo";
			_charNames[(char)0xA221] = "yi syllable gguop";
			_charNames[(char)0xA222] = "yi syllable ggot";
			_charNames[(char)0xA223] = "yi syllable ggox";
			_charNames[(char)0xA224] = "yi syllable ggo";
			_charNames[(char)0xA225] = "yi syllable ggop";
			_charNames[(char)0xA226] = "yi syllable gget";
			_charNames[(char)0xA227] = "yi syllable ggex";
			_charNames[(char)0xA228] = "yi syllable gge";
			_charNames[(char)0xA229] = "yi syllable ggep";
			_charNames[(char)0xA22A] = "yi syllable ggut";
			_charNames[(char)0xA22B] = "yi syllable ggux";
			_charNames[(char)0xA22C] = "yi syllable ggu";
			_charNames[(char)0xA22D] = "yi syllable ggup";
			_charNames[(char)0xA22E] = "yi syllable ggurx";
			_charNames[(char)0xA22F] = "yi syllable ggur";
			_charNames[(char)0xA230] = "yi syllable mgiex";
			_charNames[(char)0xA231] = "yi syllable mgie";
			_charNames[(char)0xA232] = "yi syllable mgat";
			_charNames[(char)0xA233] = "yi syllable mgax";
			_charNames[(char)0xA234] = "yi syllable mga";
			_charNames[(char)0xA235] = "yi syllable mgap";
			_charNames[(char)0xA236] = "yi syllable mguox";
			_charNames[(char)0xA237] = "yi syllable mguo";
			_charNames[(char)0xA238] = "yi syllable mguop";
			_charNames[(char)0xA239] = "yi syllable mgot";
			_charNames[(char)0xA23A] = "yi syllable mgox";
			_charNames[(char)0xA23B] = "yi syllable mgo";
			_charNames[(char)0xA23C] = "yi syllable mgop";
			_charNames[(char)0xA23D] = "yi syllable mgex";
			_charNames[(char)0xA23E] = "yi syllable mge";
			_charNames[(char)0xA23F] = "yi syllable mgep";
			_charNames[(char)0xA240] = "yi syllable mgut";
			_charNames[(char)0xA241] = "yi syllable mgux";
			_charNames[(char)0xA242] = "yi syllable mgu";
			_charNames[(char)0xA243] = "yi syllable mgup";
			_charNames[(char)0xA244] = "yi syllable mgurx";
			_charNames[(char)0xA245] = "yi syllable mgur";
			_charNames[(char)0xA246] = "yi syllable hxit";
			_charNames[(char)0xA247] = "yi syllable hxix";
			_charNames[(char)0xA248] = "yi syllable hxi";
			_charNames[(char)0xA249] = "yi syllable hxip";
			_charNames[(char)0xA24A] = "yi syllable hxiet";
			_charNames[(char)0xA24B] = "yi syllable hxiex";
			_charNames[(char)0xA24C] = "yi syllable hxie";
			_charNames[(char)0xA24D] = "yi syllable hxiep";
			_charNames[(char)0xA24E] = "yi syllable hxat";
			_charNames[(char)0xA24F] = "yi syllable hxax";
			_charNames[(char)0xA250] = "yi syllable hxa";
			_charNames[(char)0xA251] = "yi syllable hxap";
			_charNames[(char)0xA252] = "yi syllable hxuot";
			_charNames[(char)0xA253] = "yi syllable hxuox";
			_charNames[(char)0xA254] = "yi syllable hxuo";
			_charNames[(char)0xA255] = "yi syllable hxuop";
			_charNames[(char)0xA256] = "yi syllable hxot";
			_charNames[(char)0xA257] = "yi syllable hxox";
			_charNames[(char)0xA258] = "yi syllable hxo";
			_charNames[(char)0xA259] = "yi syllable hxop";
			_charNames[(char)0xA25A] = "yi syllable hxex";
			_charNames[(char)0xA25B] = "yi syllable hxe";
			_charNames[(char)0xA25C] = "yi syllable hxep";
			_charNames[(char)0xA25D] = "yi syllable ngiex";
			_charNames[(char)0xA25E] = "yi syllable ngie";
			_charNames[(char)0xA25F] = "yi syllable ngiep";
			_charNames[(char)0xA260] = "yi syllable ngat";
			_charNames[(char)0xA261] = "yi syllable ngax";
			_charNames[(char)0xA262] = "yi syllable nga";
			_charNames[(char)0xA263] = "yi syllable ngap";
			_charNames[(char)0xA264] = "yi syllable nguot";
			_charNames[(char)0xA265] = "yi syllable nguox";
			_charNames[(char)0xA266] = "yi syllable nguo";
			_charNames[(char)0xA267] = "yi syllable ngot";
			_charNames[(char)0xA268] = "yi syllable ngox";
			_charNames[(char)0xA269] = "yi syllable ngo";
			_charNames[(char)0xA26A] = "yi syllable ngop";
			_charNames[(char)0xA26B] = "yi syllable ngex";
			_charNames[(char)0xA26C] = "yi syllable nge";
			_charNames[(char)0xA26D] = "yi syllable ngep";
			_charNames[(char)0xA26E] = "yi syllable hit";
			_charNames[(char)0xA26F] = "yi syllable hiex";
			_charNames[(char)0xA270] = "yi syllable hie";
			_charNames[(char)0xA271] = "yi syllable hat";
			_charNames[(char)0xA272] = "yi syllable hax";
			_charNames[(char)0xA273] = "yi syllable ha";
			_charNames[(char)0xA274] = "yi syllable hap";
			_charNames[(char)0xA275] = "yi syllable huot";
			_charNames[(char)0xA276] = "yi syllable huox";
			_charNames[(char)0xA277] = "yi syllable huo";
			_charNames[(char)0xA278] = "yi syllable huop";
			_charNames[(char)0xA279] = "yi syllable hot";
			_charNames[(char)0xA27A] = "yi syllable hox";
			_charNames[(char)0xA27B] = "yi syllable ho";
			_charNames[(char)0xA27C] = "yi syllable hop";
			_charNames[(char)0xA27D] = "yi syllable hex";
			_charNames[(char)0xA27E] = "yi syllable he";
			_charNames[(char)0xA27F] = "yi syllable hep";
			_charNames[(char)0xA280] = "yi syllable wat";
			_charNames[(char)0xA281] = "yi syllable wax";
			_charNames[(char)0xA282] = "yi syllable wa";
			_charNames[(char)0xA283] = "yi syllable wap";
			_charNames[(char)0xA284] = "yi syllable wuox";
			_charNames[(char)0xA285] = "yi syllable wuo";
			_charNames[(char)0xA286] = "yi syllable wuop";
			_charNames[(char)0xA287] = "yi syllable wox";
			_charNames[(char)0xA288] = "yi syllable wo";
			_charNames[(char)0xA289] = "yi syllable wop";
			_charNames[(char)0xA28A] = "yi syllable wex";
			_charNames[(char)0xA28B] = "yi syllable we";
			_charNames[(char)0xA28C] = "yi syllable wep";
			_charNames[(char)0xA28D] = "yi syllable zit";
			_charNames[(char)0xA28E] = "yi syllable zix";
			_charNames[(char)0xA28F] = "yi syllable zi";
			_charNames[(char)0xA290] = "yi syllable zip";
			_charNames[(char)0xA291] = "yi syllable ziex";
			_charNames[(char)0xA292] = "yi syllable zie";
			_charNames[(char)0xA293] = "yi syllable ziep";
			_charNames[(char)0xA294] = "yi syllable zat";
			_charNames[(char)0xA295] = "yi syllable zax";
			_charNames[(char)0xA296] = "yi syllable za";
			_charNames[(char)0xA297] = "yi syllable zap";
			_charNames[(char)0xA298] = "yi syllable zuox";
			_charNames[(char)0xA299] = "yi syllable zuo";
			_charNames[(char)0xA29A] = "yi syllable zuop";
			_charNames[(char)0xA29B] = "yi syllable zot";
			_charNames[(char)0xA29C] = "yi syllable zox";
			_charNames[(char)0xA29D] = "yi syllable zo";
			_charNames[(char)0xA29E] = "yi syllable zop";
			_charNames[(char)0xA29F] = "yi syllable zex";
			_charNames[(char)0xA2A0] = "yi syllable ze";
			_charNames[(char)0xA2A1] = "yi syllable zep";
			_charNames[(char)0xA2A2] = "yi syllable zut";
			_charNames[(char)0xA2A3] = "yi syllable zux";
			_charNames[(char)0xA2A4] = "yi syllable zu";
			_charNames[(char)0xA2A5] = "yi syllable zup";
			_charNames[(char)0xA2A6] = "yi syllable zurx";
			_charNames[(char)0xA2A7] = "yi syllable zur";
			_charNames[(char)0xA2A8] = "yi syllable zyt";
			_charNames[(char)0xA2A9] = "yi syllable zyx";
			_charNames[(char)0xA2AA] = "yi syllable zy";
			_charNames[(char)0xA2AB] = "yi syllable zyp";
			_charNames[(char)0xA2AC] = "yi syllable zyrx";
			_charNames[(char)0xA2AD] = "yi syllable zyr";
			_charNames[(char)0xA2AE] = "yi syllable cit";
			_charNames[(char)0xA2AF] = "yi syllable cix";
			_charNames[(char)0xA2B0] = "yi syllable ci";
			_charNames[(char)0xA2B1] = "yi syllable cip";
			_charNames[(char)0xA2B2] = "yi syllable ciet";
			_charNames[(char)0xA2B3] = "yi syllable ciex";
			_charNames[(char)0xA2B4] = "yi syllable cie";
			_charNames[(char)0xA2B5] = "yi syllable ciep";
			_charNames[(char)0xA2B6] = "yi syllable cat";
			_charNames[(char)0xA2B7] = "yi syllable cax";
			_charNames[(char)0xA2B8] = "yi syllable ca";
			_charNames[(char)0xA2B9] = "yi syllable cap";
			_charNames[(char)0xA2BA] = "yi syllable cuox";
			_charNames[(char)0xA2BB] = "yi syllable cuo";
			_charNames[(char)0xA2BC] = "yi syllable cuop";
			_charNames[(char)0xA2BD] = "yi syllable cot";
			_charNames[(char)0xA2BE] = "yi syllable cox";
			_charNames[(char)0xA2BF] = "yi syllable co";
			_charNames[(char)0xA2C0] = "yi syllable cop";
			_charNames[(char)0xA2C1] = "yi syllable cex";
			_charNames[(char)0xA2C2] = "yi syllable ce";
			_charNames[(char)0xA2C3] = "yi syllable cep";
			_charNames[(char)0xA2C4] = "yi syllable cut";
			_charNames[(char)0xA2C5] = "yi syllable cux";
			_charNames[(char)0xA2C6] = "yi syllable cu";
			_charNames[(char)0xA2C7] = "yi syllable cup";
			_charNames[(char)0xA2C8] = "yi syllable curx";
			_charNames[(char)0xA2C9] = "yi syllable cur";
			_charNames[(char)0xA2CA] = "yi syllable cyt";
			_charNames[(char)0xA2CB] = "yi syllable cyx";
			_charNames[(char)0xA2CC] = "yi syllable cy";
			_charNames[(char)0xA2CD] = "yi syllable cyp";
			_charNames[(char)0xA2CE] = "yi syllable cyrx";
			_charNames[(char)0xA2CF] = "yi syllable cyr";
			_charNames[(char)0xA2D0] = "yi syllable zzit";
			_charNames[(char)0xA2D1] = "yi syllable zzix";
			_charNames[(char)0xA2D2] = "yi syllable zzi";
			_charNames[(char)0xA2D3] = "yi syllable zzip";
			_charNames[(char)0xA2D4] = "yi syllable zziet";
			_charNames[(char)0xA2D5] = "yi syllable zziex";
			_charNames[(char)0xA2D6] = "yi syllable zzie";
			_charNames[(char)0xA2D7] = "yi syllable zziep";
			_charNames[(char)0xA2D8] = "yi syllable zzat";
			_charNames[(char)0xA2D9] = "yi syllable zzax";
			_charNames[(char)0xA2DA] = "yi syllable zza";
			_charNames[(char)0xA2DB] = "yi syllable zzap";
			_charNames[(char)0xA2DC] = "yi syllable zzox";
			_charNames[(char)0xA2DD] = "yi syllable zzo";
			_charNames[(char)0xA2DE] = "yi syllable zzop";
			_charNames[(char)0xA2DF] = "yi syllable zzex";
			_charNames[(char)0xA2E0] = "yi syllable zze";
			_charNames[(char)0xA2E1] = "yi syllable zzep";
			_charNames[(char)0xA2E2] = "yi syllable zzux";
			_charNames[(char)0xA2E3] = "yi syllable zzu";
			_charNames[(char)0xA2E4] = "yi syllable zzup";
			_charNames[(char)0xA2E5] = "yi syllable zzurx";
			_charNames[(char)0xA2E6] = "yi syllable zzur";
			_charNames[(char)0xA2E7] = "yi syllable zzyt";
			_charNames[(char)0xA2E8] = "yi syllable zzyx";
			_charNames[(char)0xA2E9] = "yi syllable zzy";
			_charNames[(char)0xA2EA] = "yi syllable zzyp";
			_charNames[(char)0xA2EB] = "yi syllable zzyrx";
			_charNames[(char)0xA2EC] = "yi syllable zzyr";
			_charNames[(char)0xA2ED] = "yi syllable nzit";
			_charNames[(char)0xA2EE] = "yi syllable nzix";
			_charNames[(char)0xA2EF] = "yi syllable nzi";
			_charNames[(char)0xA2F0] = "yi syllable nzip";
			_charNames[(char)0xA2F1] = "yi syllable nziex";
			_charNames[(char)0xA2F2] = "yi syllable nzie";
			_charNames[(char)0xA2F3] = "yi syllable nziep";
			_charNames[(char)0xA2F4] = "yi syllable nzat";
			_charNames[(char)0xA2F5] = "yi syllable nzax";
			_charNames[(char)0xA2F6] = "yi syllable nza";
			_charNames[(char)0xA2F7] = "yi syllable nzap";
			_charNames[(char)0xA2F8] = "yi syllable nzuox";
			_charNames[(char)0xA2F9] = "yi syllable nzuo";
			_charNames[(char)0xA2FA] = "yi syllable nzox";
			_charNames[(char)0xA2FB] = "yi syllable nzop";
			_charNames[(char)0xA2FC] = "yi syllable nzex";
			_charNames[(char)0xA2FD] = "yi syllable nze";
			_charNames[(char)0xA2FE] = "yi syllable nzux";
			_charNames[(char)0xA2FF] = "yi syllable nzu";
			_charNames[(char)0xA300] = "yi syllable nzup";
			_charNames[(char)0xA301] = "yi syllable nzurx";
			_charNames[(char)0xA302] = "yi syllable nzur";
			_charNames[(char)0xA303] = "yi syllable nzyt";
			_charNames[(char)0xA304] = "yi syllable nzyx";
			_charNames[(char)0xA305] = "yi syllable nzy";
			_charNames[(char)0xA306] = "yi syllable nzyp";
			_charNames[(char)0xA307] = "yi syllable nzyrx";
			_charNames[(char)0xA308] = "yi syllable nzyr";
			_charNames[(char)0xA309] = "yi syllable sit";
			_charNames[(char)0xA30A] = "yi syllable six";
			_charNames[(char)0xA30B] = "yi syllable si";
			_charNames[(char)0xA30C] = "yi syllable sip";
			_charNames[(char)0xA30D] = "yi syllable siex";
			_charNames[(char)0xA30E] = "yi syllable sie";
			_charNames[(char)0xA30F] = "yi syllable siep";
			_charNames[(char)0xA310] = "yi syllable sat";
			_charNames[(char)0xA311] = "yi syllable sax";
			_charNames[(char)0xA312] = "yi syllable sa";
			_charNames[(char)0xA313] = "yi syllable sap";
			_charNames[(char)0xA314] = "yi syllable suox";
			_charNames[(char)0xA315] = "yi syllable suo";
			_charNames[(char)0xA316] = "yi syllable suop";
			_charNames[(char)0xA317] = "yi syllable sot";
			_charNames[(char)0xA318] = "yi syllable sox";
			_charNames[(char)0xA319] = "yi syllable so";
			_charNames[(char)0xA31A] = "yi syllable sop";
			_charNames[(char)0xA31B] = "yi syllable sex";
			_charNames[(char)0xA31C] = "yi syllable se";
			_charNames[(char)0xA31D] = "yi syllable sep";
			_charNames[(char)0xA31E] = "yi syllable sut";
			_charNames[(char)0xA31F] = "yi syllable sux";
			_charNames[(char)0xA320] = "yi syllable su";
			_charNames[(char)0xA321] = "yi syllable sup";
			_charNames[(char)0xA322] = "yi syllable surx";
			_charNames[(char)0xA323] = "yi syllable sur";
			_charNames[(char)0xA324] = "yi syllable syt";
			_charNames[(char)0xA325] = "yi syllable syx";
			_charNames[(char)0xA326] = "yi syllable sy";
			_charNames[(char)0xA327] = "yi syllable syp";
			_charNames[(char)0xA328] = "yi syllable syrx";
			_charNames[(char)0xA329] = "yi syllable syr";
			_charNames[(char)0xA32A] = "yi syllable ssit";
			_charNames[(char)0xA32B] = "yi syllable ssix";
			_charNames[(char)0xA32C] = "yi syllable ssi";
			_charNames[(char)0xA32D] = "yi syllable ssip";
			_charNames[(char)0xA32E] = "yi syllable ssiex";
			_charNames[(char)0xA32F] = "yi syllable ssie";
			_charNames[(char)0xA330] = "yi syllable ssiep";
			_charNames[(char)0xA331] = "yi syllable ssat";
			_charNames[(char)0xA332] = "yi syllable ssax";
			_charNames[(char)0xA333] = "yi syllable ssa";
			_charNames[(char)0xA334] = "yi syllable ssap";
			_charNames[(char)0xA335] = "yi syllable ssot";
			_charNames[(char)0xA336] = "yi syllable ssox";
			_charNames[(char)0xA337] = "yi syllable sso";
			_charNames[(char)0xA338] = "yi syllable ssop";
			_charNames[(char)0xA339] = "yi syllable ssex";
			_charNames[(char)0xA33A] = "yi syllable sse";
			_charNames[(char)0xA33B] = "yi syllable ssep";
			_charNames[(char)0xA33C] = "yi syllable ssut";
			_charNames[(char)0xA33D] = "yi syllable ssux";
			_charNames[(char)0xA33E] = "yi syllable ssu";
			_charNames[(char)0xA33F] = "yi syllable ssup";
			_charNames[(char)0xA340] = "yi syllable ssyt";
			_charNames[(char)0xA341] = "yi syllable ssyx";
			_charNames[(char)0xA342] = "yi syllable ssy";
			_charNames[(char)0xA343] = "yi syllable ssyp";
			_charNames[(char)0xA344] = "yi syllable ssyrx";
			_charNames[(char)0xA345] = "yi syllable ssyr";
			_charNames[(char)0xA346] = "yi syllable zhat";
			_charNames[(char)0xA347] = "yi syllable zhax";
			_charNames[(char)0xA348] = "yi syllable zha";
			_charNames[(char)0xA349] = "yi syllable zhap";
			_charNames[(char)0xA34A] = "yi syllable zhuox";
			_charNames[(char)0xA34B] = "yi syllable zhuo";
			_charNames[(char)0xA34C] = "yi syllable zhuop";
			_charNames[(char)0xA34D] = "yi syllable zhot";
			_charNames[(char)0xA34E] = "yi syllable zhox";
			_charNames[(char)0xA34F] = "yi syllable zho";
			_charNames[(char)0xA350] = "yi syllable zhop";
			_charNames[(char)0xA351] = "yi syllable zhet";
			_charNames[(char)0xA352] = "yi syllable zhex";
			_charNames[(char)0xA353] = "yi syllable zhe";
			_charNames[(char)0xA354] = "yi syllable zhep";
			_charNames[(char)0xA355] = "yi syllable zhut";
			_charNames[(char)0xA356] = "yi syllable zhux";
			_charNames[(char)0xA357] = "yi syllable zhu";
			_charNames[(char)0xA358] = "yi syllable zhup";
			_charNames[(char)0xA359] = "yi syllable zhurx";
			_charNames[(char)0xA35A] = "yi syllable zhur";
			_charNames[(char)0xA35B] = "yi syllable zhyt";
			_charNames[(char)0xA35C] = "yi syllable zhyx";
			_charNames[(char)0xA35D] = "yi syllable zhy";
			_charNames[(char)0xA35E] = "yi syllable zhyp";
			_charNames[(char)0xA35F] = "yi syllable zhyrx";
			_charNames[(char)0xA360] = "yi syllable zhyr";
			_charNames[(char)0xA361] = "yi syllable chat";
			_charNames[(char)0xA362] = "yi syllable chax";
			_charNames[(char)0xA363] = "yi syllable cha";
			_charNames[(char)0xA364] = "yi syllable chap";
			_charNames[(char)0xA365] = "yi syllable chuot";
			_charNames[(char)0xA366] = "yi syllable chuox";
			_charNames[(char)0xA367] = "yi syllable chuo";
			_charNames[(char)0xA368] = "yi syllable chuop";
			_charNames[(char)0xA369] = "yi syllable chot";
			_charNames[(char)0xA36A] = "yi syllable chox";
			_charNames[(char)0xA36B] = "yi syllable cho";
			_charNames[(char)0xA36C] = "yi syllable chop";
			_charNames[(char)0xA36D] = "yi syllable chet";
			_charNames[(char)0xA36E] = "yi syllable chex";
			_charNames[(char)0xA36F] = "yi syllable che";
			_charNames[(char)0xA370] = "yi syllable chep";
			_charNames[(char)0xA371] = "yi syllable chux";
			_charNames[(char)0xA372] = "yi syllable chu";
			_charNames[(char)0xA373] = "yi syllable chup";
			_charNames[(char)0xA374] = "yi syllable churx";
			_charNames[(char)0xA375] = "yi syllable chur";
			_charNames[(char)0xA376] = "yi syllable chyt";
			_charNames[(char)0xA377] = "yi syllable chyx";
			_charNames[(char)0xA378] = "yi syllable chy";
			_charNames[(char)0xA379] = "yi syllable chyp";
			_charNames[(char)0xA37A] = "yi syllable chyrx";
			_charNames[(char)0xA37B] = "yi syllable chyr";
			_charNames[(char)0xA37C] = "yi syllable rrax";
			_charNames[(char)0xA37D] = "yi syllable rra";
			_charNames[(char)0xA37E] = "yi syllable rruox";
			_charNames[(char)0xA37F] = "yi syllable rruo";
			_charNames[(char)0xA380] = "yi syllable rrot";
			_charNames[(char)0xA381] = "yi syllable rrox";
			_charNames[(char)0xA382] = "yi syllable rro";
			_charNames[(char)0xA383] = "yi syllable rrop";
			_charNames[(char)0xA384] = "yi syllable rret";
			_charNames[(char)0xA385] = "yi syllable rrex";
			_charNames[(char)0xA386] = "yi syllable rre";
			_charNames[(char)0xA387] = "yi syllable rrep";
			_charNames[(char)0xA388] = "yi syllable rrut";
			_charNames[(char)0xA389] = "yi syllable rrux";
			_charNames[(char)0xA38A] = "yi syllable rru";
			_charNames[(char)0xA38B] = "yi syllable rrup";
			_charNames[(char)0xA38C] = "yi syllable rrurx";
			_charNames[(char)0xA38D] = "yi syllable rrur";
			_charNames[(char)0xA38E] = "yi syllable rryt";
			_charNames[(char)0xA38F] = "yi syllable rryx";
			_charNames[(char)0xA390] = "yi syllable rry";
			_charNames[(char)0xA391] = "yi syllable rryp";
			_charNames[(char)0xA392] = "yi syllable rryrx";
			_charNames[(char)0xA393] = "yi syllable rryr";
			_charNames[(char)0xA394] = "yi syllable nrat";
			_charNames[(char)0xA395] = "yi syllable nrax";
			_charNames[(char)0xA396] = "yi syllable nra";
			_charNames[(char)0xA397] = "yi syllable nrap";
			_charNames[(char)0xA398] = "yi syllable nrox";
			_charNames[(char)0xA399] = "yi syllable nro";
			_charNames[(char)0xA39A] = "yi syllable nrop";
			_charNames[(char)0xA39B] = "yi syllable nret";
			_charNames[(char)0xA39C] = "yi syllable nrex";
			_charNames[(char)0xA39D] = "yi syllable nre";
			_charNames[(char)0xA39E] = "yi syllable nrep";
			_charNames[(char)0xA39F] = "yi syllable nrut";
			_charNames[(char)0xA3A0] = "yi syllable nrux";
			_charNames[(char)0xA3A1] = "yi syllable nru";
			_charNames[(char)0xA3A2] = "yi syllable nrup";
			_charNames[(char)0xA3A3] = "yi syllable nrurx";
			_charNames[(char)0xA3A4] = "yi syllable nrur";
			_charNames[(char)0xA3A5] = "yi syllable nryt";
			_charNames[(char)0xA3A6] = "yi syllable nryx";
			_charNames[(char)0xA3A7] = "yi syllable nry";
			_charNames[(char)0xA3A8] = "yi syllable nryp";
			_charNames[(char)0xA3A9] = "yi syllable nryrx";
			_charNames[(char)0xA3AA] = "yi syllable nryr";
			_charNames[(char)0xA3AB] = "yi syllable shat";
			_charNames[(char)0xA3AC] = "yi syllable shax";
			_charNames[(char)0xA3AD] = "yi syllable sha";
			_charNames[(char)0xA3AE] = "yi syllable shap";
			_charNames[(char)0xA3AF] = "yi syllable shuox";
			_charNames[(char)0xA3B0] = "yi syllable shuo";
			_charNames[(char)0xA3B1] = "yi syllable shuop";
			_charNames[(char)0xA3B2] = "yi syllable shot";
			_charNames[(char)0xA3B3] = "yi syllable shox";
			_charNames[(char)0xA3B4] = "yi syllable sho";
			_charNames[(char)0xA3B5] = "yi syllable shop";
			_charNames[(char)0xA3B6] = "yi syllable shet";
			_charNames[(char)0xA3B7] = "yi syllable shex";
			_charNames[(char)0xA3B8] = "yi syllable she";
			_charNames[(char)0xA3B9] = "yi syllable shep";
			_charNames[(char)0xA3BA] = "yi syllable shut";
			_charNames[(char)0xA3BB] = "yi syllable shux";
			_charNames[(char)0xA3BC] = "yi syllable shu";
			_charNames[(char)0xA3BD] = "yi syllable shup";
			_charNames[(char)0xA3BE] = "yi syllable shurx";
			_charNames[(char)0xA3BF] = "yi syllable shur";
			_charNames[(char)0xA3C0] = "yi syllable shyt";
			_charNames[(char)0xA3C1] = "yi syllable shyx";
			_charNames[(char)0xA3C2] = "yi syllable shy";
			_charNames[(char)0xA3C3] = "yi syllable shyp";
			_charNames[(char)0xA3C4] = "yi syllable shyrx";
			_charNames[(char)0xA3C5] = "yi syllable shyr";
			_charNames[(char)0xA3C6] = "yi syllable rat";
			_charNames[(char)0xA3C7] = "yi syllable rax";
			_charNames[(char)0xA3C8] = "yi syllable ra";
			_charNames[(char)0xA3C9] = "yi syllable rap";
			_charNames[(char)0xA3CA] = "yi syllable ruox";
			_charNames[(char)0xA3CB] = "yi syllable ruo";
			_charNames[(char)0xA3CC] = "yi syllable ruop";
			_charNames[(char)0xA3CD] = "yi syllable rot";
			_charNames[(char)0xA3CE] = "yi syllable rox";
			_charNames[(char)0xA3CF] = "yi syllable ro";
			_charNames[(char)0xA3D0] = "yi syllable rop";
			_charNames[(char)0xA3D1] = "yi syllable rex";
			_charNames[(char)0xA3D2] = "yi syllable re";
			_charNames[(char)0xA3D3] = "yi syllable rep";
			_charNames[(char)0xA3D4] = "yi syllable rut";
			_charNames[(char)0xA3D5] = "yi syllable rux";
			_charNames[(char)0xA3D6] = "yi syllable ru";
			_charNames[(char)0xA3D7] = "yi syllable rup";
			_charNames[(char)0xA3D8] = "yi syllable rurx";
			_charNames[(char)0xA3D9] = "yi syllable rur";
			_charNames[(char)0xA3DA] = "yi syllable ryt";
			_charNames[(char)0xA3DB] = "yi syllable ryx";
			_charNames[(char)0xA3DC] = "yi syllable ry";
			_charNames[(char)0xA3DD] = "yi syllable ryp";
			_charNames[(char)0xA3DE] = "yi syllable ryrx";
			_charNames[(char)0xA3DF] = "yi syllable ryr";
			_charNames[(char)0xA3E0] = "yi syllable jit";
			_charNames[(char)0xA3E1] = "yi syllable jix";
			_charNames[(char)0xA3E2] = "yi syllable ji";
			_charNames[(char)0xA3E3] = "yi syllable jip";
			_charNames[(char)0xA3E4] = "yi syllable jiet";
			_charNames[(char)0xA3E5] = "yi syllable jiex";
			_charNames[(char)0xA3E6] = "yi syllable jie";
			_charNames[(char)0xA3E7] = "yi syllable jiep";
			_charNames[(char)0xA3E8] = "yi syllable juot";
			_charNames[(char)0xA3E9] = "yi syllable juox";
			_charNames[(char)0xA3EA] = "yi syllable juo";
			_charNames[(char)0xA3EB] = "yi syllable juop";
			_charNames[(char)0xA3EC] = "yi syllable jot";
			_charNames[(char)0xA3ED] = "yi syllable jox";
			_charNames[(char)0xA3EE] = "yi syllable jo";
			_charNames[(char)0xA3EF] = "yi syllable jop";
			_charNames[(char)0xA3F0] = "yi syllable jut";
			_charNames[(char)0xA3F1] = "yi syllable jux";
			_charNames[(char)0xA3F2] = "yi syllable ju";
			_charNames[(char)0xA3F3] = "yi syllable jup";
			_charNames[(char)0xA3F4] = "yi syllable jurx";
			_charNames[(char)0xA3F5] = "yi syllable jur";
			_charNames[(char)0xA3F6] = "yi syllable jyt";
			_charNames[(char)0xA3F7] = "yi syllable jyx";
			_charNames[(char)0xA3F8] = "yi syllable jy";
			_charNames[(char)0xA3F9] = "yi syllable jyp";
			_charNames[(char)0xA3FA] = "yi syllable jyrx";
			_charNames[(char)0xA3FB] = "yi syllable jyr";
			_charNames[(char)0xA3FC] = "yi syllable qit";
			_charNames[(char)0xA3FD] = "yi syllable qix";
			_charNames[(char)0xA3FE] = "yi syllable qi";
			_charNames[(char)0xA3FF] = "yi syllable qip";
			_charNames[(char)0xA400] = "yi syllable qiet";
			_charNames[(char)0xA401] = "yi syllable qiex";
			_charNames[(char)0xA402] = "yi syllable qie";
			_charNames[(char)0xA403] = "yi syllable qiep";
			_charNames[(char)0xA404] = "yi syllable quot";
			_charNames[(char)0xA405] = "yi syllable quox";
			_charNames[(char)0xA406] = "yi syllable quo";
			_charNames[(char)0xA407] = "yi syllable quop";
			_charNames[(char)0xA408] = "yi syllable qot";
			_charNames[(char)0xA409] = "yi syllable qox";
			_charNames[(char)0xA40A] = "yi syllable qo";
			_charNames[(char)0xA40B] = "yi syllable qop";
			_charNames[(char)0xA40C] = "yi syllable qut";
			_charNames[(char)0xA40D] = "yi syllable qux";
			_charNames[(char)0xA40E] = "yi syllable qu";
			_charNames[(char)0xA40F] = "yi syllable qup";
			_charNames[(char)0xA410] = "yi syllable qurx";
			_charNames[(char)0xA411] = "yi syllable qur";
			_charNames[(char)0xA412] = "yi syllable qyt";
			_charNames[(char)0xA413] = "yi syllable qyx";
			_charNames[(char)0xA414] = "yi syllable qy";
			_charNames[(char)0xA415] = "yi syllable qyp";
			_charNames[(char)0xA416] = "yi syllable qyrx";
			_charNames[(char)0xA417] = "yi syllable qyr";
			_charNames[(char)0xA418] = "yi syllable jjit";
			_charNames[(char)0xA419] = "yi syllable jjix";
			_charNames[(char)0xA41A] = "yi syllable jji";
			_charNames[(char)0xA41B] = "yi syllable jjip";
			_charNames[(char)0xA41C] = "yi syllable jjiet";
			_charNames[(char)0xA41D] = "yi syllable jjiex";
			_charNames[(char)0xA41E] = "yi syllable jjie";
			_charNames[(char)0xA41F] = "yi syllable jjiep";
			_charNames[(char)0xA420] = "yi syllable jjuox";
			_charNames[(char)0xA421] = "yi syllable jjuo";
			_charNames[(char)0xA422] = "yi syllable jjuop";
			_charNames[(char)0xA423] = "yi syllable jjot";
			_charNames[(char)0xA424] = "yi syllable jjox";
			_charNames[(char)0xA425] = "yi syllable jjo";
			_charNames[(char)0xA426] = "yi syllable jjop";
			_charNames[(char)0xA427] = "yi syllable jjut";
			_charNames[(char)0xA428] = "yi syllable jjux";
			_charNames[(char)0xA429] = "yi syllable jju";
			_charNames[(char)0xA42A] = "yi syllable jjup";
			_charNames[(char)0xA42B] = "yi syllable jjurx";
			_charNames[(char)0xA42C] = "yi syllable jjur";
			_charNames[(char)0xA42D] = "yi syllable jjyt";
			_charNames[(char)0xA42E] = "yi syllable jjyx";
			_charNames[(char)0xA42F] = "yi syllable jjy";
			_charNames[(char)0xA430] = "yi syllable jjyp";
			_charNames[(char)0xA431] = "yi syllable njit";
			_charNames[(char)0xA432] = "yi syllable njix";
			_charNames[(char)0xA433] = "yi syllable nji";
			_charNames[(char)0xA434] = "yi syllable njip";
			_charNames[(char)0xA435] = "yi syllable njiet";
			_charNames[(char)0xA436] = "yi syllable njiex";
			_charNames[(char)0xA437] = "yi syllable njie";
			_charNames[(char)0xA438] = "yi syllable njiep";
			_charNames[(char)0xA439] = "yi syllable njuox";
			_charNames[(char)0xA43A] = "yi syllable njuo";
			_charNames[(char)0xA43B] = "yi syllable njot";
			_charNames[(char)0xA43C] = "yi syllable njox";
			_charNames[(char)0xA43D] = "yi syllable njo";
			_charNames[(char)0xA43E] = "yi syllable njop";
			_charNames[(char)0xA43F] = "yi syllable njux";
			_charNames[(char)0xA440] = "yi syllable nju";
			_charNames[(char)0xA441] = "yi syllable njup";
			_charNames[(char)0xA442] = "yi syllable njurx";
			_charNames[(char)0xA443] = "yi syllable njur";
			_charNames[(char)0xA444] = "yi syllable njyt";
			_charNames[(char)0xA445] = "yi syllable njyx";
			_charNames[(char)0xA446] = "yi syllable njy";
			_charNames[(char)0xA447] = "yi syllable njyp";
			_charNames[(char)0xA448] = "yi syllable njyrx";
			_charNames[(char)0xA449] = "yi syllable njyr";
			_charNames[(char)0xA44A] = "yi syllable nyit";
			_charNames[(char)0xA44B] = "yi syllable nyix";
			_charNames[(char)0xA44C] = "yi syllable nyi";
			_charNames[(char)0xA44D] = "yi syllable nyip";
			_charNames[(char)0xA44E] = "yi syllable nyiet";
			_charNames[(char)0xA44F] = "yi syllable nyiex";
			_charNames[(char)0xA450] = "yi syllable nyie";
			_charNames[(char)0xA451] = "yi syllable nyiep";
			_charNames[(char)0xA452] = "yi syllable nyuox";
			_charNames[(char)0xA453] = "yi syllable nyuo";
			_charNames[(char)0xA454] = "yi syllable nyuop";
			_charNames[(char)0xA455] = "yi syllable nyot";
			_charNames[(char)0xA456] = "yi syllable nyox";
			_charNames[(char)0xA457] = "yi syllable nyo";
			_charNames[(char)0xA458] = "yi syllable nyop";
			_charNames[(char)0xA459] = "yi syllable nyut";
			_charNames[(char)0xA45A] = "yi syllable nyux";
			_charNames[(char)0xA45B] = "yi syllable nyu";
			_charNames[(char)0xA45C] = "yi syllable nyup";
			_charNames[(char)0xA45D] = "yi syllable xit";
			_charNames[(char)0xA45E] = "yi syllable xix";
			_charNames[(char)0xA45F] = "yi syllable xi";
			_charNames[(char)0xA460] = "yi syllable xip";
			_charNames[(char)0xA461] = "yi syllable xiet";
			_charNames[(char)0xA462] = "yi syllable xiex";
			_charNames[(char)0xA463] = "yi syllable xie";
			_charNames[(char)0xA464] = "yi syllable xiep";
			_charNames[(char)0xA465] = "yi syllable xuox";
			_charNames[(char)0xA466] = "yi syllable xuo";
			_charNames[(char)0xA467] = "yi syllable xot";
			_charNames[(char)0xA468] = "yi syllable xox";
			_charNames[(char)0xA469] = "yi syllable xo";
			_charNames[(char)0xA46A] = "yi syllable xop";
			_charNames[(char)0xA46B] = "yi syllable xyt";
			_charNames[(char)0xA46C] = "yi syllable xyx";
			_charNames[(char)0xA46D] = "yi syllable xy";
			_charNames[(char)0xA46E] = "yi syllable xyp";
			_charNames[(char)0xA46F] = "yi syllable xyrx";
			_charNames[(char)0xA470] = "yi syllable xyr";
			_charNames[(char)0xA471] = "yi syllable yit";
			_charNames[(char)0xA472] = "yi syllable yix";
			_charNames[(char)0xA473] = "yi syllable yi";
			_charNames[(char)0xA474] = "yi syllable yip";
			_charNames[(char)0xA475] = "yi syllable yiet";
			_charNames[(char)0xA476] = "yi syllable yiex";
			_charNames[(char)0xA477] = "yi syllable yie";
			_charNames[(char)0xA478] = "yi syllable yiep";
			_charNames[(char)0xA479] = "yi syllable yuot";
			_charNames[(char)0xA47A] = "yi syllable yuox";
			_charNames[(char)0xA47B] = "yi syllable yuo";
			_charNames[(char)0xA47C] = "yi syllable yuop";
			_charNames[(char)0xA47D] = "yi syllable yot";
			_charNames[(char)0xA47E] = "yi syllable yox";
			_charNames[(char)0xA47F] = "yi syllable yo";
			_charNames[(char)0xA480] = "yi syllable yop";
			_charNames[(char)0xA481] = "yi syllable yut";
			_charNames[(char)0xA482] = "yi syllable yux";
			_charNames[(char)0xA483] = "yi syllable yu";
			_charNames[(char)0xA484] = "yi syllable yup";
			_charNames[(char)0xA485] = "yi syllable yurx";
			_charNames[(char)0xA486] = "yi syllable yur";
			_charNames[(char)0xA487] = "yi syllable yyt";
			_charNames[(char)0xA488] = "yi syllable yyx";
			_charNames[(char)0xA489] = "yi syllable yy";
			_charNames[(char)0xA48A] = "yi syllable yyp";
			_charNames[(char)0xA48B] = "yi syllable yyrx";
			_charNames[(char)0xA48C] = "yi syllable yyr";
			_charNames[(char)0xA490] = "yi radical qot";
			_charNames[(char)0xA491] = "yi radical li";
			_charNames[(char)0xA492] = "yi radical kit";
			_charNames[(char)0xA493] = "yi radical nyip";
			_charNames[(char)0xA494] = "yi radical cyp";
			_charNames[(char)0xA495] = "yi radical ssi";
			_charNames[(char)0xA496] = "yi radical ggop";
			_charNames[(char)0xA497] = "yi radical gep";
			_charNames[(char)0xA498] = "yi radical mi";
			_charNames[(char)0xA499] = "yi radical hxit";
			_charNames[(char)0xA49A] = "yi radical lyr";
			_charNames[(char)0xA49B] = "yi radical bbut";
			_charNames[(char)0xA49C] = "yi radical mop";
			_charNames[(char)0xA49D] = "yi radical yo";
			_charNames[(char)0xA49E] = "yi radical put";
			_charNames[(char)0xA49F] = "yi radical hxuo";
			_charNames[(char)0xA4A0] = "yi radical tat";
			_charNames[(char)0xA4A1] = "yi radical ga";
			_charNames[(char)0xA4A2] = "yi radical zup";
			_charNames[(char)0xA4A3] = "yi radical cyt";
			_charNames[(char)0xA4A4] = "yi radical ddur";
			_charNames[(char)0xA4A5] = "yi radical bur";
			_charNames[(char)0xA4A6] = "yi radical gguo";
			_charNames[(char)0xA4A7] = "yi radical nyop";
			_charNames[(char)0xA4A8] = "yi radical tu";
			_charNames[(char)0xA4A9] = "yi radical op";
			_charNames[(char)0xA4AA] = "yi radical jjut";
			_charNames[(char)0xA4AB] = "yi radical zot";
			_charNames[(char)0xA4AC] = "yi radical pyt";
			_charNames[(char)0xA4AD] = "yi radical hmo";
			_charNames[(char)0xA4AE] = "yi radical yit";
			_charNames[(char)0xA4AF] = "yi radical vur";
			_charNames[(char)0xA4B0] = "yi radical shy";
			_charNames[(char)0xA4B1] = "yi radical vep";
			_charNames[(char)0xA4B2] = "yi radical za";
			_charNames[(char)0xA4B3] = "yi radical jo";
			_charNames[(char)0xA4B4] = "yi radical nzup";
			_charNames[(char)0xA4B5] = "yi radical jjy";
			_charNames[(char)0xA4B6] = "yi radical got";
			_charNames[(char)0xA4B7] = "yi radical jjie";
			_charNames[(char)0xA4B8] = "yi radical wo";
			_charNames[(char)0xA4B9] = "yi radical du";
			_charNames[(char)0xA4BA] = "yi radical shur";
			_charNames[(char)0xA4BB] = "yi radical lie";
			_charNames[(char)0xA4BC] = "yi radical cy";
			_charNames[(char)0xA4BD] = "yi radical cuop";
			_charNames[(char)0xA4BE] = "yi radical cip";
			_charNames[(char)0xA4BF] = "yi radical hxop";
			_charNames[(char)0xA4C0] = "yi radical shat";
			_charNames[(char)0xA4C1] = "yi radical zur";
			_charNames[(char)0xA4C2] = "yi radical shop";
			_charNames[(char)0xA4C3] = "yi radical che";
			_charNames[(char)0xA4C4] = "yi radical zziet";
			_charNames[(char)0xA4C5] = "yi radical nbie";
			_charNames[(char)0xA4C6] = "yi radical ke";
			_charNames[(char)0xA700] = "modifier letter chinese tone yin ping";
			_charNames[(char)0xA701] = "modifier letter chinese tone yang ping";
			_charNames[(char)0xA702] = "modifier letter chinese tone yin shang";
			_charNames[(char)0xA703] = "modifier letter chinese tone yang shang";
			_charNames[(char)0xA704] = "modifier letter chinese tone yin qu";
			_charNames[(char)0xA705] = "modifier letter chinese tone yang qu";
			_charNames[(char)0xA706] = "modifier letter chinese tone yin ru";
			_charNames[(char)0xA707] = "modifier letter chinese tone yang ru";
			_charNames[(char)0xA708] = "modifier letter extra-high dotted tone bar";
			_charNames[(char)0xA709] = "modifier letter high dotted tone bar";
			_charNames[(char)0xA70A] = "modifier letter mid dotted tone bar";
			_charNames[(char)0xA70B] = "modifier letter low dotted tone bar";
			_charNames[(char)0xA70C] = "modifier letter extra-low dotted tone bar";
			_charNames[(char)0xA70D] = "modifier letter extra-high dotted left-stem tone bar";
			_charNames[(char)0xA70E] = "modifier letter high dotted left-stem tone bar";
			_charNames[(char)0xA70F] = "modifier letter mid dotted left-stem tone bar";
			_charNames[(char)0xA710] = "modifier letter low dotted left-stem tone bar";
			_charNames[(char)0xA711] = "modifier letter extra-low dotted left-stem tone bar";
			_charNames[(char)0xA712] = "modifier letter extra-high left-stem tone bar";
			_charNames[(char)0xA713] = "modifier letter high left-stem tone bar";
			_charNames[(char)0xA714] = "modifier letter mid left-stem tone bar";
			_charNames[(char)0xA715] = "modifier letter low left-stem tone bar";
			_charNames[(char)0xA716] = "modifier letter extra-low left-stem tone bar";
			_charNames[(char)0xA800] = "syloti nagri letter a";
			_charNames[(char)0xA801] = "syloti nagri letter i";
			_charNames[(char)0xA802] = "syloti nagri sign dvisvara";
			_charNames[(char)0xA803] = "syloti nagri letter u";
			_charNames[(char)0xA804] = "syloti nagri letter e";
			_charNames[(char)0xA805] = "syloti nagri letter o";
			_charNames[(char)0xA806] = "syloti nagri sign hasanta";
			_charNames[(char)0xA807] = "syloti nagri letter ko";
			_charNames[(char)0xA808] = "syloti nagri letter kho";
			_charNames[(char)0xA809] = "syloti nagri letter go";
			_charNames[(char)0xA80A] = "syloti nagri letter gho";
			_charNames[(char)0xA80B] = "syloti nagri sign anusvara";
			_charNames[(char)0xA80C] = "syloti nagri letter co";
			_charNames[(char)0xA80D] = "syloti nagri letter cho";
			_charNames[(char)0xA80E] = "syloti nagri letter jo";
			_charNames[(char)0xA80F] = "syloti nagri letter jho";
			_charNames[(char)0xA810] = "syloti nagri letter tto";
			_charNames[(char)0xA811] = "syloti nagri letter ttho";
			_charNames[(char)0xA812] = "syloti nagri letter ddo";
			_charNames[(char)0xA813] = "syloti nagri letter ddho";
			_charNames[(char)0xA814] = "syloti nagri letter to";
			_charNames[(char)0xA815] = "syloti nagri letter tho";
			_charNames[(char)0xA816] = "syloti nagri letter do";
			_charNames[(char)0xA817] = "syloti nagri letter dho";
			_charNames[(char)0xA818] = "syloti nagri letter no";
			_charNames[(char)0xA819] = "syloti nagri letter po";
			_charNames[(char)0xA81A] = "syloti nagri letter pho";
			_charNames[(char)0xA81B] = "syloti nagri letter bo";
			_charNames[(char)0xA81C] = "syloti nagri letter bho";
			_charNames[(char)0xA81D] = "syloti nagri letter mo";
			_charNames[(char)0xA81E] = "syloti nagri letter ro";
			_charNames[(char)0xA81F] = "syloti nagri letter lo";
			_charNames[(char)0xA820] = "syloti nagri letter rro";
			_charNames[(char)0xA821] = "syloti nagri letter so";
			_charNames[(char)0xA822] = "syloti nagri letter ho";
			_charNames[(char)0xA823] = "syloti nagri vowel sign a";
			_charNames[(char)0xA824] = "syloti nagri vowel sign i";
			_charNames[(char)0xA825] = "syloti nagri vowel sign u";
			_charNames[(char)0xA826] = "syloti nagri vowel sign e";
			_charNames[(char)0xA827] = "syloti nagri vowel sign oo";
			_charNames[(char)0xA828] = "syloti nagri poetry mark-1";
			_charNames[(char)0xA829] = "syloti nagri poetry mark-2";
			_charNames[(char)0xA82A] = "syloti nagri poetry mark-3";
			_charNames[(char)0xA82B] = "syloti nagri poetry mark-4";
			_charNames[(char)0xF900] = "cjk compatibility ideograph-f900";
			_charNames[(char)0xF901] = "cjk compatibility ideograph-f901";
			_charNames[(char)0xF902] = "cjk compatibility ideograph-f902";
			_charNames[(char)0xF903] = "cjk compatibility ideograph-f903";
			_charNames[(char)0xF904] = "cjk compatibility ideograph-f904";
			_charNames[(char)0xF905] = "cjk compatibility ideograph-f905";
			_charNames[(char)0xF906] = "cjk compatibility ideograph-f906";
			_charNames[(char)0xF907] = "cjk compatibility ideograph-f907";
			_charNames[(char)0xF908] = "cjk compatibility ideograph-f908";
			_charNames[(char)0xF909] = "cjk compatibility ideograph-f909";
			_charNames[(char)0xF90A] = "cjk compatibility ideograph-f90a";
			_charNames[(char)0xF90B] = "cjk compatibility ideograph-f90b";
			_charNames[(char)0xF90C] = "cjk compatibility ideograph-f90c";
			_charNames[(char)0xF90D] = "cjk compatibility ideograph-f90d";
			_charNames[(char)0xF90E] = "cjk compatibility ideograph-f90e";
			_charNames[(char)0xF90F] = "cjk compatibility ideograph-f90f";
			_charNames[(char)0xF910] = "cjk compatibility ideograph-f910";
			_charNames[(char)0xF911] = "cjk compatibility ideograph-f911";
			_charNames[(char)0xF912] = "cjk compatibility ideograph-f912";
			_charNames[(char)0xF913] = "cjk compatibility ideograph-f913";
			_charNames[(char)0xF914] = "cjk compatibility ideograph-f914";
			_charNames[(char)0xF915] = "cjk compatibility ideograph-f915";
			_charNames[(char)0xF916] = "cjk compatibility ideograph-f916";
			_charNames[(char)0xF917] = "cjk compatibility ideograph-f917";
			_charNames[(char)0xF918] = "cjk compatibility ideograph-f918";
			_charNames[(char)0xF919] = "cjk compatibility ideograph-f919";
			_charNames[(char)0xF91A] = "cjk compatibility ideograph-f91a";
			_charNames[(char)0xF91B] = "cjk compatibility ideograph-f91b";
			_charNames[(char)0xF91C] = "cjk compatibility ideograph-f91c";
			_charNames[(char)0xF91D] = "cjk compatibility ideograph-f91d";
			_charNames[(char)0xF91E] = "cjk compatibility ideograph-f91e";
			_charNames[(char)0xF91F] = "cjk compatibility ideograph-f91f";
			_charNames[(char)0xF920] = "cjk compatibility ideograph-f920";
			_charNames[(char)0xF921] = "cjk compatibility ideograph-f921";
			_charNames[(char)0xF922] = "cjk compatibility ideograph-f922";
			_charNames[(char)0xF923] = "cjk compatibility ideograph-f923";
			_charNames[(char)0xF924] = "cjk compatibility ideograph-f924";
			_charNames[(char)0xF925] = "cjk compatibility ideograph-f925";
			_charNames[(char)0xF926] = "cjk compatibility ideograph-f926";
			_charNames[(char)0xF927] = "cjk compatibility ideograph-f927";
			_charNames[(char)0xF928] = "cjk compatibility ideograph-f928";
			_charNames[(char)0xF929] = "cjk compatibility ideograph-f929";
			_charNames[(char)0xF92A] = "cjk compatibility ideograph-f92a";
			_charNames[(char)0xF92B] = "cjk compatibility ideograph-f92b";
			_charNames[(char)0xF92C] = "cjk compatibility ideograph-f92c";
			_charNames[(char)0xF92D] = "cjk compatibility ideograph-f92d";
			_charNames[(char)0xF92E] = "cjk compatibility ideograph-f92e";
			_charNames[(char)0xF92F] = "cjk compatibility ideograph-f92f";
			_charNames[(char)0xF930] = "cjk compatibility ideograph-f930";
			_charNames[(char)0xF931] = "cjk compatibility ideograph-f931";
			_charNames[(char)0xF932] = "cjk compatibility ideograph-f932";
			_charNames[(char)0xF933] = "cjk compatibility ideograph-f933";
			_charNames[(char)0xF934] = "cjk compatibility ideograph-f934";
			_charNames[(char)0xF935] = "cjk compatibility ideograph-f935";
			_charNames[(char)0xF936] = "cjk compatibility ideograph-f936";
			_charNames[(char)0xF937] = "cjk compatibility ideograph-f937";
			_charNames[(char)0xF938] = "cjk compatibility ideograph-f938";
			_charNames[(char)0xF939] = "cjk compatibility ideograph-f939";
			_charNames[(char)0xF93A] = "cjk compatibility ideograph-f93a";
			_charNames[(char)0xF93B] = "cjk compatibility ideograph-f93b";
			_charNames[(char)0xF93C] = "cjk compatibility ideograph-f93c";
			_charNames[(char)0xF93D] = "cjk compatibility ideograph-f93d";
			_charNames[(char)0xF93E] = "cjk compatibility ideograph-f93e";
			_charNames[(char)0xF93F] = "cjk compatibility ideograph-f93f";
			_charNames[(char)0xF940] = "cjk compatibility ideograph-f940";
			_charNames[(char)0xF941] = "cjk compatibility ideograph-f941";
			_charNames[(char)0xF942] = "cjk compatibility ideograph-f942";
			_charNames[(char)0xF943] = "cjk compatibility ideograph-f943";
			_charNames[(char)0xF944] = "cjk compatibility ideograph-f944";
			_charNames[(char)0xF945] = "cjk compatibility ideograph-f945";
			_charNames[(char)0xF946] = "cjk compatibility ideograph-f946";
			_charNames[(char)0xF947] = "cjk compatibility ideograph-f947";
			_charNames[(char)0xF948] = "cjk compatibility ideograph-f948";
			_charNames[(char)0xF949] = "cjk compatibility ideograph-f949";
			_charNames[(char)0xF94A] = "cjk compatibility ideograph-f94a";
			_charNames[(char)0xF94B] = "cjk compatibility ideograph-f94b";
			_charNames[(char)0xF94C] = "cjk compatibility ideograph-f94c";
			_charNames[(char)0xF94D] = "cjk compatibility ideograph-f94d";
			_charNames[(char)0xF94E] = "cjk compatibility ideograph-f94e";
			_charNames[(char)0xF94F] = "cjk compatibility ideograph-f94f";
			_charNames[(char)0xF950] = "cjk compatibility ideograph-f950";
			_charNames[(char)0xF951] = "cjk compatibility ideograph-f951";
			_charNames[(char)0xF952] = "cjk compatibility ideograph-f952";
			_charNames[(char)0xF953] = "cjk compatibility ideograph-f953";
			_charNames[(char)0xF954] = "cjk compatibility ideograph-f954";
			_charNames[(char)0xF955] = "cjk compatibility ideograph-f955";
			_charNames[(char)0xF956] = "cjk compatibility ideograph-f956";
			_charNames[(char)0xF957] = "cjk compatibility ideograph-f957";
			_charNames[(char)0xF958] = "cjk compatibility ideograph-f958";
			_charNames[(char)0xF959] = "cjk compatibility ideograph-f959";
			_charNames[(char)0xF95A] = "cjk compatibility ideograph-f95a";
			_charNames[(char)0xF95B] = "cjk compatibility ideograph-f95b";
			_charNames[(char)0xF95C] = "cjk compatibility ideograph-f95c";
			_charNames[(char)0xF95D] = "cjk compatibility ideograph-f95d";
			_charNames[(char)0xF95E] = "cjk compatibility ideograph-f95e";
			_charNames[(char)0xF95F] = "cjk compatibility ideograph-f95f";
			_charNames[(char)0xF960] = "cjk compatibility ideograph-f960";
			_charNames[(char)0xF961] = "cjk compatibility ideograph-f961";
			_charNames[(char)0xF962] = "cjk compatibility ideograph-f962";
			_charNames[(char)0xF963] = "cjk compatibility ideograph-f963";
			_charNames[(char)0xF964] = "cjk compatibility ideograph-f964";
			_charNames[(char)0xF965] = "cjk compatibility ideograph-f965";
			_charNames[(char)0xF966] = "cjk compatibility ideograph-f966";
			_charNames[(char)0xF967] = "cjk compatibility ideograph-f967";
			_charNames[(char)0xF968] = "cjk compatibility ideograph-f968";
			_charNames[(char)0xF969] = "cjk compatibility ideograph-f969";
			_charNames[(char)0xF96A] = "cjk compatibility ideograph-f96a";
			_charNames[(char)0xF96B] = "cjk compatibility ideograph-f96b";
			_charNames[(char)0xF96C] = "cjk compatibility ideograph-f96c";
			_charNames[(char)0xF96D] = "cjk compatibility ideograph-f96d";
			_charNames[(char)0xF96E] = "cjk compatibility ideograph-f96e";
			_charNames[(char)0xF96F] = "cjk compatibility ideograph-f96f";
			_charNames[(char)0xF970] = "cjk compatibility ideograph-f970";
			_charNames[(char)0xF971] = "cjk compatibility ideograph-f971";
			_charNames[(char)0xF972] = "cjk compatibility ideograph-f972";
			_charNames[(char)0xF973] = "cjk compatibility ideograph-f973";
			_charNames[(char)0xF974] = "cjk compatibility ideograph-f974";
			_charNames[(char)0xF975] = "cjk compatibility ideograph-f975";
			_charNames[(char)0xF976] = "cjk compatibility ideograph-f976";
			_charNames[(char)0xF977] = "cjk compatibility ideograph-f977";
			_charNames[(char)0xF978] = "cjk compatibility ideograph-f978";
			_charNames[(char)0xF979] = "cjk compatibility ideograph-f979";
			_charNames[(char)0xF97A] = "cjk compatibility ideograph-f97a";
			_charNames[(char)0xF97B] = "cjk compatibility ideograph-f97b";
			_charNames[(char)0xF97C] = "cjk compatibility ideograph-f97c";
			_charNames[(char)0xF97D] = "cjk compatibility ideograph-f97d";
			_charNames[(char)0xF97E] = "cjk compatibility ideograph-f97e";
			_charNames[(char)0xF97F] = "cjk compatibility ideograph-f97f";
			_charNames[(char)0xF980] = "cjk compatibility ideograph-f980";
			_charNames[(char)0xF981] = "cjk compatibility ideograph-f981";
			_charNames[(char)0xF982] = "cjk compatibility ideograph-f982";
			_charNames[(char)0xF983] = "cjk compatibility ideograph-f983";
			_charNames[(char)0xF984] = "cjk compatibility ideograph-f984";
			_charNames[(char)0xF985] = "cjk compatibility ideograph-f985";
			_charNames[(char)0xF986] = "cjk compatibility ideograph-f986";
			_charNames[(char)0xF987] = "cjk compatibility ideograph-f987";
			_charNames[(char)0xF988] = "cjk compatibility ideograph-f988";
			_charNames[(char)0xF989] = "cjk compatibility ideograph-f989";
			_charNames[(char)0xF98A] = "cjk compatibility ideograph-f98a";
			_charNames[(char)0xF98B] = "cjk compatibility ideograph-f98b";
			_charNames[(char)0xF98C] = "cjk compatibility ideograph-f98c";
			_charNames[(char)0xF98D] = "cjk compatibility ideograph-f98d";
			_charNames[(char)0xF98E] = "cjk compatibility ideograph-f98e";
			_charNames[(char)0xF98F] = "cjk compatibility ideograph-f98f";
			_charNames[(char)0xF990] = "cjk compatibility ideograph-f990";
			_charNames[(char)0xF991] = "cjk compatibility ideograph-f991";
			_charNames[(char)0xF992] = "cjk compatibility ideograph-f992";
			_charNames[(char)0xF993] = "cjk compatibility ideograph-f993";
			_charNames[(char)0xF994] = "cjk compatibility ideograph-f994";
			_charNames[(char)0xF995] = "cjk compatibility ideograph-f995";
			_charNames[(char)0xF996] = "cjk compatibility ideograph-f996";
			_charNames[(char)0xF997] = "cjk compatibility ideograph-f997";
			_charNames[(char)0xF998] = "cjk compatibility ideograph-f998";
			_charNames[(char)0xF999] = "cjk compatibility ideograph-f999";
			_charNames[(char)0xF99A] = "cjk compatibility ideograph-f99a";
			_charNames[(char)0xF99B] = "cjk compatibility ideograph-f99b";
			_charNames[(char)0xF99C] = "cjk compatibility ideograph-f99c";
			_charNames[(char)0xF99D] = "cjk compatibility ideograph-f99d";
			_charNames[(char)0xF99E] = "cjk compatibility ideograph-f99e";
			_charNames[(char)0xF99F] = "cjk compatibility ideograph-f99f";
			_charNames[(char)0xF9A0] = "cjk compatibility ideograph-f9a0";
			_charNames[(char)0xF9A1] = "cjk compatibility ideograph-f9a1";
			_charNames[(char)0xF9A2] = "cjk compatibility ideograph-f9a2";
			_charNames[(char)0xF9A3] = "cjk compatibility ideograph-f9a3";
			_charNames[(char)0xF9A4] = "cjk compatibility ideograph-f9a4";
			_charNames[(char)0xF9A5] = "cjk compatibility ideograph-f9a5";
			_charNames[(char)0xF9A6] = "cjk compatibility ideograph-f9a6";
			_charNames[(char)0xF9A7] = "cjk compatibility ideograph-f9a7";
			_charNames[(char)0xF9A8] = "cjk compatibility ideograph-f9a8";
			_charNames[(char)0xF9A9] = "cjk compatibility ideograph-f9a9";
			_charNames[(char)0xF9AA] = "cjk compatibility ideograph-f9aa";
			_charNames[(char)0xF9AB] = "cjk compatibility ideograph-f9ab";
			_charNames[(char)0xF9AC] = "cjk compatibility ideograph-f9ac";
			_charNames[(char)0xF9AD] = "cjk compatibility ideograph-f9ad";
			_charNames[(char)0xF9AE] = "cjk compatibility ideograph-f9ae";
			_charNames[(char)0xF9AF] = "cjk compatibility ideograph-f9af";
			_charNames[(char)0xF9B0] = "cjk compatibility ideograph-f9b0";
			_charNames[(char)0xF9B1] = "cjk compatibility ideograph-f9b1";
			_charNames[(char)0xF9B2] = "cjk compatibility ideograph-f9b2";
			_charNames[(char)0xF9B3] = "cjk compatibility ideograph-f9b3";
			_charNames[(char)0xF9B4] = "cjk compatibility ideograph-f9b4";
			_charNames[(char)0xF9B5] = "cjk compatibility ideograph-f9b5";
			_charNames[(char)0xF9B6] = "cjk compatibility ideograph-f9b6";
			_charNames[(char)0xF9B7] = "cjk compatibility ideograph-f9b7";
			_charNames[(char)0xF9B8] = "cjk compatibility ideograph-f9b8";
			_charNames[(char)0xF9B9] = "cjk compatibility ideograph-f9b9";
			_charNames[(char)0xF9BA] = "cjk compatibility ideograph-f9ba";
			_charNames[(char)0xF9BB] = "cjk compatibility ideograph-f9bb";
			_charNames[(char)0xF9BC] = "cjk compatibility ideograph-f9bc";
			_charNames[(char)0xF9BD] = "cjk compatibility ideograph-f9bd";
			_charNames[(char)0xF9BE] = "cjk compatibility ideograph-f9be";
			_charNames[(char)0xF9BF] = "cjk compatibility ideograph-f9bf";
			_charNames[(char)0xF9C0] = "cjk compatibility ideograph-f9c0";
			_charNames[(char)0xF9C1] = "cjk compatibility ideograph-f9c1";
			_charNames[(char)0xF9C2] = "cjk compatibility ideograph-f9c2";
			_charNames[(char)0xF9C3] = "cjk compatibility ideograph-f9c3";
			_charNames[(char)0xF9C4] = "cjk compatibility ideograph-f9c4";
			_charNames[(char)0xF9C5] = "cjk compatibility ideograph-f9c5";
			_charNames[(char)0xF9C6] = "cjk compatibility ideograph-f9c6";
			_charNames[(char)0xF9C7] = "cjk compatibility ideograph-f9c7";
			_charNames[(char)0xF9C8] = "cjk compatibility ideograph-f9c8";
			_charNames[(char)0xF9C9] = "cjk compatibility ideograph-f9c9";
			_charNames[(char)0xF9CA] = "cjk compatibility ideograph-f9ca";
			_charNames[(char)0xF9CB] = "cjk compatibility ideograph-f9cb";
			_charNames[(char)0xF9CC] = "cjk compatibility ideograph-f9cc";
			_charNames[(char)0xF9CD] = "cjk compatibility ideograph-f9cd";
			_charNames[(char)0xF9CE] = "cjk compatibility ideograph-f9ce";
			_charNames[(char)0xF9CF] = "cjk compatibility ideograph-f9cf";
			_charNames[(char)0xF9D0] = "cjk compatibility ideograph-f9d0";
			_charNames[(char)0xF9D1] = "cjk compatibility ideograph-f9d1";
			_charNames[(char)0xF9D2] = "cjk compatibility ideograph-f9d2";
			_charNames[(char)0xF9D3] = "cjk compatibility ideograph-f9d3";
			_charNames[(char)0xF9D4] = "cjk compatibility ideograph-f9d4";
			_charNames[(char)0xF9D5] = "cjk compatibility ideograph-f9d5";
			_charNames[(char)0xF9D6] = "cjk compatibility ideograph-f9d6";
			_charNames[(char)0xF9D7] = "cjk compatibility ideograph-f9d7";
			_charNames[(char)0xF9D8] = "cjk compatibility ideograph-f9d8";
			_charNames[(char)0xF9D9] = "cjk compatibility ideograph-f9d9";
			_charNames[(char)0xF9DA] = "cjk compatibility ideograph-f9da";
			_charNames[(char)0xF9DB] = "cjk compatibility ideograph-f9db";
			_charNames[(char)0xF9DC] = "cjk compatibility ideograph-f9dc";
			_charNames[(char)0xF9DD] = "cjk compatibility ideograph-f9dd";
			_charNames[(char)0xF9DE] = "cjk compatibility ideograph-f9de";
			_charNames[(char)0xF9DF] = "cjk compatibility ideograph-f9df";
			_charNames[(char)0xF9E0] = "cjk compatibility ideograph-f9e0";
			_charNames[(char)0xF9E1] = "cjk compatibility ideograph-f9e1";
			_charNames[(char)0xF9E2] = "cjk compatibility ideograph-f9e2";
			_charNames[(char)0xF9E3] = "cjk compatibility ideograph-f9e3";
			_charNames[(char)0xF9E4] = "cjk compatibility ideograph-f9e4";
			_charNames[(char)0xF9E5] = "cjk compatibility ideograph-f9e5";
			_charNames[(char)0xF9E6] = "cjk compatibility ideograph-f9e6";
			_charNames[(char)0xF9E7] = "cjk compatibility ideograph-f9e7";
			_charNames[(char)0xF9E8] = "cjk compatibility ideograph-f9e8";
			_charNames[(char)0xF9E9] = "cjk compatibility ideograph-f9e9";
			_charNames[(char)0xF9EA] = "cjk compatibility ideograph-f9ea";
			_charNames[(char)0xF9EB] = "cjk compatibility ideograph-f9eb";
			_charNames[(char)0xF9EC] = "cjk compatibility ideograph-f9ec";
			_charNames[(char)0xF9ED] = "cjk compatibility ideograph-f9ed";
			_charNames[(char)0xF9EE] = "cjk compatibility ideograph-f9ee";
			_charNames[(char)0xF9EF] = "cjk compatibility ideograph-f9ef";
			_charNames[(char)0xF9F0] = "cjk compatibility ideograph-f9f0";
			_charNames[(char)0xF9F1] = "cjk compatibility ideograph-f9f1";
			_charNames[(char)0xF9F2] = "cjk compatibility ideograph-f9f2";
			_charNames[(char)0xF9F3] = "cjk compatibility ideograph-f9f3";
			_charNames[(char)0xF9F4] = "cjk compatibility ideograph-f9f4";
			_charNames[(char)0xF9F5] = "cjk compatibility ideograph-f9f5";
			_charNames[(char)0xF9F6] = "cjk compatibility ideograph-f9f6";
			_charNames[(char)0xF9F7] = "cjk compatibility ideograph-f9f7";
			_charNames[(char)0xF9F8] = "cjk compatibility ideograph-f9f8";
			_charNames[(char)0xF9F9] = "cjk compatibility ideograph-f9f9";
			_charNames[(char)0xF9FA] = "cjk compatibility ideograph-f9fa";
			_charNames[(char)0xF9FB] = "cjk compatibility ideograph-f9fb";
			_charNames[(char)0xF9FC] = "cjk compatibility ideograph-f9fc";
			_charNames[(char)0xF9FD] = "cjk compatibility ideograph-f9fd";
			_charNames[(char)0xF9FE] = "cjk compatibility ideograph-f9fe";
			_charNames[(char)0xF9FF] = "cjk compatibility ideograph-f9ff";
			_charNames[(char)0xFA00] = "cjk compatibility ideograph-fa00";
			_charNames[(char)0xFA01] = "cjk compatibility ideograph-fa01";
			_charNames[(char)0xFA02] = "cjk compatibility ideograph-fa02";
			_charNames[(char)0xFA03] = "cjk compatibility ideograph-fa03";
			_charNames[(char)0xFA04] = "cjk compatibility ideograph-fa04";
			_charNames[(char)0xFA05] = "cjk compatibility ideograph-fa05";
			_charNames[(char)0xFA06] = "cjk compatibility ideograph-fa06";
			_charNames[(char)0xFA07] = "cjk compatibility ideograph-fa07";
			_charNames[(char)0xFA08] = "cjk compatibility ideograph-fa08";
			_charNames[(char)0xFA09] = "cjk compatibility ideograph-fa09";
			_charNames[(char)0xFA0A] = "cjk compatibility ideograph-fa0a";
			_charNames[(char)0xFA0B] = "cjk compatibility ideograph-fa0b";
			_charNames[(char)0xFA0C] = "cjk compatibility ideograph-fa0c";
			_charNames[(char)0xFA0D] = "cjk compatibility ideograph-fa0d";
			_charNames[(char)0xFA0E] = "cjk compatibility ideograph-fa0e";
			_charNames[(char)0xFA0F] = "cjk compatibility ideograph-fa0f";
			_charNames[(char)0xFA10] = "cjk compatibility ideograph-fa10";
			_charNames[(char)0xFA11] = "cjk compatibility ideograph-fa11";
			_charNames[(char)0xFA12] = "cjk compatibility ideograph-fa12";
			_charNames[(char)0xFA13] = "cjk compatibility ideograph-fa13";
			_charNames[(char)0xFA14] = "cjk compatibility ideograph-fa14";
			_charNames[(char)0xFA15] = "cjk compatibility ideograph-fa15";
			_charNames[(char)0xFA16] = "cjk compatibility ideograph-fa16";
			_charNames[(char)0xFA17] = "cjk compatibility ideograph-fa17";
			_charNames[(char)0xFA18] = "cjk compatibility ideograph-fa18";
			_charNames[(char)0xFA19] = "cjk compatibility ideograph-fa19";
			_charNames[(char)0xFA1A] = "cjk compatibility ideograph-fa1a";
			_charNames[(char)0xFA1B] = "cjk compatibility ideograph-fa1b";
			_charNames[(char)0xFA1C] = "cjk compatibility ideograph-fa1c";
			_charNames[(char)0xFA1D] = "cjk compatibility ideograph-fa1d";
			_charNames[(char)0xFA1E] = "cjk compatibility ideograph-fa1e";
			_charNames[(char)0xFA1F] = "cjk compatibility ideograph-fa1f";
			_charNames[(char)0xFA20] = "cjk compatibility ideograph-fa20";
			_charNames[(char)0xFA21] = "cjk compatibility ideograph-fa21";
			_charNames[(char)0xFA22] = "cjk compatibility ideograph-fa22";
			_charNames[(char)0xFA23] = "cjk compatibility ideograph-fa23";
			_charNames[(char)0xFA24] = "cjk compatibility ideograph-fa24";
			_charNames[(char)0xFA25] = "cjk compatibility ideograph-fa25";
			_charNames[(char)0xFA26] = "cjk compatibility ideograph-fa26";
			_charNames[(char)0xFA27] = "cjk compatibility ideograph-fa27";
			_charNames[(char)0xFA28] = "cjk compatibility ideograph-fa28";
			_charNames[(char)0xFA29] = "cjk compatibility ideograph-fa29";
			_charNames[(char)0xFA2A] = "cjk compatibility ideograph-fa2a";
			_charNames[(char)0xFA2B] = "cjk compatibility ideograph-fa2b";
			_charNames[(char)0xFA2C] = "cjk compatibility ideograph-fa2c";
			_charNames[(char)0xFA2D] = "cjk compatibility ideograph-fa2d";
			_charNames[(char)0xFA30] = "cjk compatibility ideograph-fa30";
			_charNames[(char)0xFA31] = "cjk compatibility ideograph-fa31";
			_charNames[(char)0xFA32] = "cjk compatibility ideograph-fa32";
			_charNames[(char)0xFA33] = "cjk compatibility ideograph-fa33";
			_charNames[(char)0xFA34] = "cjk compatibility ideograph-fa34";
			_charNames[(char)0xFA35] = "cjk compatibility ideograph-fa35";
			_charNames[(char)0xFA36] = "cjk compatibility ideograph-fa36";
			_charNames[(char)0xFA37] = "cjk compatibility ideograph-fa37";
			_charNames[(char)0xFA38] = "cjk compatibility ideograph-fa38";
			_charNames[(char)0xFA39] = "cjk compatibility ideograph-fa39";
			_charNames[(char)0xFA3A] = "cjk compatibility ideograph-fa3a";
			_charNames[(char)0xFA3B] = "cjk compatibility ideograph-fa3b";
			_charNames[(char)0xFA3C] = "cjk compatibility ideograph-fa3c";
			_charNames[(char)0xFA3D] = "cjk compatibility ideograph-fa3d";
			_charNames[(char)0xFA3E] = "cjk compatibility ideograph-fa3e";
			_charNames[(char)0xFA3F] = "cjk compatibility ideograph-fa3f";
			_charNames[(char)0xFA40] = "cjk compatibility ideograph-fa40";
			_charNames[(char)0xFA41] = "cjk compatibility ideograph-fa41";
			_charNames[(char)0xFA42] = "cjk compatibility ideograph-fa42";
			_charNames[(char)0xFA43] = "cjk compatibility ideograph-fa43";
			_charNames[(char)0xFA44] = "cjk compatibility ideograph-fa44";
			_charNames[(char)0xFA45] = "cjk compatibility ideograph-fa45";
			_charNames[(char)0xFA46] = "cjk compatibility ideograph-fa46";
			_charNames[(char)0xFA47] = "cjk compatibility ideograph-fa47";
			_charNames[(char)0xFA48] = "cjk compatibility ideograph-fa48";
			_charNames[(char)0xFA49] = "cjk compatibility ideograph-fa49";
			_charNames[(char)0xFA4A] = "cjk compatibility ideograph-fa4a";
			_charNames[(char)0xFA4B] = "cjk compatibility ideograph-fa4b";
			_charNames[(char)0xFA4C] = "cjk compatibility ideograph-fa4c";
			_charNames[(char)0xFA4D] = "cjk compatibility ideograph-fa4d";
			_charNames[(char)0xFA4E] = "cjk compatibility ideograph-fa4e";
			_charNames[(char)0xFA4F] = "cjk compatibility ideograph-fa4f";
			_charNames[(char)0xFA50] = "cjk compatibility ideograph-fa50";
			_charNames[(char)0xFA51] = "cjk compatibility ideograph-fa51";
			_charNames[(char)0xFA52] = "cjk compatibility ideograph-fa52";
			_charNames[(char)0xFA53] = "cjk compatibility ideograph-fa53";
			_charNames[(char)0xFA54] = "cjk compatibility ideograph-fa54";
			_charNames[(char)0xFA55] = "cjk compatibility ideograph-fa55";
			_charNames[(char)0xFA56] = "cjk compatibility ideograph-fa56";
			_charNames[(char)0xFA57] = "cjk compatibility ideograph-fa57";
			_charNames[(char)0xFA58] = "cjk compatibility ideograph-fa58";
			_charNames[(char)0xFA59] = "cjk compatibility ideograph-fa59";
			_charNames[(char)0xFA5A] = "cjk compatibility ideograph-fa5a";
			_charNames[(char)0xFA5B] = "cjk compatibility ideograph-fa5b";
			_charNames[(char)0xFA5C] = "cjk compatibility ideograph-fa5c";
			_charNames[(char)0xFA5D] = "cjk compatibility ideograph-fa5d";
			_charNames[(char)0xFA5E] = "cjk compatibility ideograph-fa5e";
			_charNames[(char)0xFA5F] = "cjk compatibility ideograph-fa5f";
			_charNames[(char)0xFA60] = "cjk compatibility ideograph-fa60";
			_charNames[(char)0xFA61] = "cjk compatibility ideograph-fa61";
			_charNames[(char)0xFA62] = "cjk compatibility ideograph-fa62";
			_charNames[(char)0xFA63] = "cjk compatibility ideograph-fa63";
			_charNames[(char)0xFA64] = "cjk compatibility ideograph-fa64";
			_charNames[(char)0xFA65] = "cjk compatibility ideograph-fa65";
			_charNames[(char)0xFA66] = "cjk compatibility ideograph-fa66";
			_charNames[(char)0xFA67] = "cjk compatibility ideograph-fa67";
			_charNames[(char)0xFA68] = "cjk compatibility ideograph-fa68";
			_charNames[(char)0xFA69] = "cjk compatibility ideograph-fa69";
			_charNames[(char)0xFA6A] = "cjk compatibility ideograph-fa6a";
			_charNames[(char)0xFA70] = "cjk compatibility ideograph-fa70";
			_charNames[(char)0xFA71] = "cjk compatibility ideograph-fa71";
			_charNames[(char)0xFA72] = "cjk compatibility ideograph-fa72";
			_charNames[(char)0xFA73] = "cjk compatibility ideograph-fa73";
			_charNames[(char)0xFA74] = "cjk compatibility ideograph-fa74";
			_charNames[(char)0xFA75] = "cjk compatibility ideograph-fa75";
			_charNames[(char)0xFA76] = "cjk compatibility ideograph-fa76";
			_charNames[(char)0xFA77] = "cjk compatibility ideograph-fa77";
			_charNames[(char)0xFA78] = "cjk compatibility ideograph-fa78";
			_charNames[(char)0xFA79] = "cjk compatibility ideograph-fa79";
			_charNames[(char)0xFA7A] = "cjk compatibility ideograph-fa7a";
			_charNames[(char)0xFA7B] = "cjk compatibility ideograph-fa7b";
			_charNames[(char)0xFA7C] = "cjk compatibility ideograph-fa7c";
			_charNames[(char)0xFA7D] = "cjk compatibility ideograph-fa7d";
			_charNames[(char)0xFA7E] = "cjk compatibility ideograph-fa7e";
			_charNames[(char)0xFA7F] = "cjk compatibility ideograph-fa7f";
			_charNames[(char)0xFA80] = "cjk compatibility ideograph-fa80";
			_charNames[(char)0xFA81] = "cjk compatibility ideograph-fa81";
			_charNames[(char)0xFA82] = "cjk compatibility ideograph-fa82";
			_charNames[(char)0xFA83] = "cjk compatibility ideograph-fa83";
			_charNames[(char)0xFA84] = "cjk compatibility ideograph-fa84";
			_charNames[(char)0xFA85] = "cjk compatibility ideograph-fa85";
			_charNames[(char)0xFA86] = "cjk compatibility ideograph-fa86";
			_charNames[(char)0xFA87] = "cjk compatibility ideograph-fa87";
			_charNames[(char)0xFA88] = "cjk compatibility ideograph-fa88";
			_charNames[(char)0xFA89] = "cjk compatibility ideograph-fa89";
			_charNames[(char)0xFA8A] = "cjk compatibility ideograph-fa8a";
			_charNames[(char)0xFA8B] = "cjk compatibility ideograph-fa8b";
			_charNames[(char)0xFA8C] = "cjk compatibility ideograph-fa8c";
			_charNames[(char)0xFA8D] = "cjk compatibility ideograph-fa8d";
			_charNames[(char)0xFA8E] = "cjk compatibility ideograph-fa8e";
			_charNames[(char)0xFA8F] = "cjk compatibility ideograph-fa8f";
			_charNames[(char)0xFA90] = "cjk compatibility ideograph-fa90";
			_charNames[(char)0xFA91] = "cjk compatibility ideograph-fa91";
			_charNames[(char)0xFA92] = "cjk compatibility ideograph-fa92";
			_charNames[(char)0xFA93] = "cjk compatibility ideograph-fa93";
			_charNames[(char)0xFA94] = "cjk compatibility ideograph-fa94";
			_charNames[(char)0xFA95] = "cjk compatibility ideograph-fa95";
			_charNames[(char)0xFA96] = "cjk compatibility ideograph-fa96";
			_charNames[(char)0xFA97] = "cjk compatibility ideograph-fa97";
			_charNames[(char)0xFA98] = "cjk compatibility ideograph-fa98";
			_charNames[(char)0xFA99] = "cjk compatibility ideograph-fa99";
			_charNames[(char)0xFA9A] = "cjk compatibility ideograph-fa9a";
			_charNames[(char)0xFA9B] = "cjk compatibility ideograph-fa9b";
			_charNames[(char)0xFA9C] = "cjk compatibility ideograph-fa9c";
			_charNames[(char)0xFA9D] = "cjk compatibility ideograph-fa9d";
			_charNames[(char)0xFA9E] = "cjk compatibility ideograph-fa9e";
			_charNames[(char)0xFA9F] = "cjk compatibility ideograph-fa9f";
			_charNames[(char)0xFAA0] = "cjk compatibility ideograph-faa0";
			_charNames[(char)0xFAA1] = "cjk compatibility ideograph-faa1";
			_charNames[(char)0xFAA2] = "cjk compatibility ideograph-faa2";
			_charNames[(char)0xFAA3] = "cjk compatibility ideograph-faa3";
			_charNames[(char)0xFAA4] = "cjk compatibility ideograph-faa4";
			_charNames[(char)0xFAA5] = "cjk compatibility ideograph-faa5";
			_charNames[(char)0xFAA6] = "cjk compatibility ideograph-faa6";
			_charNames[(char)0xFAA7] = "cjk compatibility ideograph-faa7";
			_charNames[(char)0xFAA8] = "cjk compatibility ideograph-faa8";
			_charNames[(char)0xFAA9] = "cjk compatibility ideograph-faa9";
			_charNames[(char)0xFAAA] = "cjk compatibility ideograph-faaa";
			_charNames[(char)0xFAAB] = "cjk compatibility ideograph-faab";
			_charNames[(char)0xFAAC] = "cjk compatibility ideograph-faac";
			_charNames[(char)0xFAAD] = "cjk compatibility ideograph-faad";
			_charNames[(char)0xFAAE] = "cjk compatibility ideograph-faae";
			_charNames[(char)0xFAAF] = "cjk compatibility ideograph-faaf";
			_charNames[(char)0xFAB0] = "cjk compatibility ideograph-fab0";
			_charNames[(char)0xFAB1] = "cjk compatibility ideograph-fab1";
			_charNames[(char)0xFAB2] = "cjk compatibility ideograph-fab2";
			_charNames[(char)0xFAB3] = "cjk compatibility ideograph-fab3";
			_charNames[(char)0xFAB4] = "cjk compatibility ideograph-fab4";
			_charNames[(char)0xFAB5] = "cjk compatibility ideograph-fab5";
			_charNames[(char)0xFAB6] = "cjk compatibility ideograph-fab6";
			_charNames[(char)0xFAB7] = "cjk compatibility ideograph-fab7";
			_charNames[(char)0xFAB8] = "cjk compatibility ideograph-fab8";
			_charNames[(char)0xFAB9] = "cjk compatibility ideograph-fab9";
			_charNames[(char)0xFABA] = "cjk compatibility ideograph-faba";
			_charNames[(char)0xFABB] = "cjk compatibility ideograph-fabb";
			_charNames[(char)0xFABC] = "cjk compatibility ideograph-fabc";
			_charNames[(char)0xFABD] = "cjk compatibility ideograph-fabd";
			_charNames[(char)0xFABE] = "cjk compatibility ideograph-fabe";
			_charNames[(char)0xFABF] = "cjk compatibility ideograph-fabf";
			_charNames[(char)0xFAC0] = "cjk compatibility ideograph-fac0";
			_charNames[(char)0xFAC1] = "cjk compatibility ideograph-fac1";
			_charNames[(char)0xFAC2] = "cjk compatibility ideograph-fac2";
			_charNames[(char)0xFAC3] = "cjk compatibility ideograph-fac3";
			_charNames[(char)0xFAC4] = "cjk compatibility ideograph-fac4";
			_charNames[(char)0xFAC5] = "cjk compatibility ideograph-fac5";
			_charNames[(char)0xFAC6] = "cjk compatibility ideograph-fac6";
			_charNames[(char)0xFAC7] = "cjk compatibility ideograph-fac7";
			_charNames[(char)0xFAC8] = "cjk compatibility ideograph-fac8";
			_charNames[(char)0xFAC9] = "cjk compatibility ideograph-fac9";
			_charNames[(char)0xFACA] = "cjk compatibility ideograph-faca";
			_charNames[(char)0xFACB] = "cjk compatibility ideograph-facb";
			_charNames[(char)0xFACC] = "cjk compatibility ideograph-facc";
			_charNames[(char)0xFACD] = "cjk compatibility ideograph-facd";
			_charNames[(char)0xFACE] = "cjk compatibility ideograph-face";
			_charNames[(char)0xFACF] = "cjk compatibility ideograph-facf";
			_charNames[(char)0xFAD0] = "cjk compatibility ideograph-fad0";
			_charNames[(char)0xFAD1] = "cjk compatibility ideograph-fad1";
			_charNames[(char)0xFAD2] = "cjk compatibility ideograph-fad2";
			_charNames[(char)0xFAD3] = "cjk compatibility ideograph-fad3";
			_charNames[(char)0xFAD4] = "cjk compatibility ideograph-fad4";
			_charNames[(char)0xFAD5] = "cjk compatibility ideograph-fad5";
			_charNames[(char)0xFAD6] = "cjk compatibility ideograph-fad6";
			_charNames[(char)0xFAD7] = "cjk compatibility ideograph-fad7";
			_charNames[(char)0xFAD8] = "cjk compatibility ideograph-fad8";
			_charNames[(char)0xFAD9] = "cjk compatibility ideograph-fad9";
			_charNames[(char)0xFB00] = "latin small ligature ff";
			_charNames[(char)0xFB01] = "latin small ligature fi";
			_charNames[(char)0xFB02] = "latin small ligature fl";
			_charNames[(char)0xFB03] = "latin small ligature ffi";
			_charNames[(char)0xFB04] = "latin small ligature ffl";
			_charNames[(char)0xFB05] = "latin small ligature long s t";
			_charNames[(char)0xFB06] = "latin small ligature st";
			_charNames[(char)0xFB13] = "armenian small ligature men now";
			_charNames[(char)0xFB14] = "armenian small ligature men ech";
			_charNames[(char)0xFB15] = "armenian small ligature men ini";
			_charNames[(char)0xFB16] = "armenian small ligature vew now";
			_charNames[(char)0xFB17] = "armenian small ligature men xeh";
			_charNames[(char)0xFB1D] = "hebrew letter yod with hiriq";
			_charNames[(char)0xFB1E] = "hebrew point judeo-spanish varika";
			_charNames[(char)0xFB1F] = "hebrew ligature yiddish yod yod patah";
			_charNames[(char)0xFB20] = "hebrew letter alternative ayin";
			_charNames[(char)0xFB21] = "hebrew letter wide alef";
			_charNames[(char)0xFB22] = "hebrew letter wide dalet";
			_charNames[(char)0xFB23] = "hebrew letter wide he";
			_charNames[(char)0xFB24] = "hebrew letter wide kaf";
			_charNames[(char)0xFB25] = "hebrew letter wide lamed";
			_charNames[(char)0xFB26] = "hebrew letter wide final mem";
			_charNames[(char)0xFB27] = "hebrew letter wide resh";
			_charNames[(char)0xFB28] = "hebrew letter wide tav";
			_charNames[(char)0xFB29] = "hebrew letter alternative plus sign";
			_charNames[(char)0xFB2A] = "hebrew letter shin with shin dot";
			_charNames[(char)0xFB2B] = "hebrew letter shin with sin dot";
			_charNames[(char)0xFB2C] = "hebrew letter shin with dagesh and shin dot";
			_charNames[(char)0xFB2D] = "hebrew letter shin with dagesh and sin dot";
			_charNames[(char)0xFB2E] = "hebrew letter alef with patah";
			_charNames[(char)0xFB2F] = "hebrew letter alef with qamats";
			_charNames[(char)0xFB30] = "hebrew letter alef with mapiq";
			_charNames[(char)0xFB31] = "hebrew letter bet with dagesh";
			_charNames[(char)0xFB32] = "hebrew letter gimel with dagesh";
			_charNames[(char)0xFB33] = "hebrew letter dalet with dagesh";
			_charNames[(char)0xFB34] = "hebrew letter he with mapiq";
			_charNames[(char)0xFB35] = "hebrew letter vav with dagesh";
			_charNames[(char)0xFB36] = "hebrew letter zayin with dagesh";
			_charNames[(char)0xFB38] = "hebrew letter tet with dagesh";
			_charNames[(char)0xFB39] = "hebrew letter yod with dagesh";
			_charNames[(char)0xFB3A] = "hebrew letter final kaf with dagesh";
			_charNames[(char)0xFB3B] = "hebrew letter kaf with dagesh";
			_charNames[(char)0xFB3C] = "hebrew letter lamed with dagesh";
			_charNames[(char)0xFB3E] = "hebrew letter mem with dagesh";
			_charNames[(char)0xFB40] = "hebrew letter nun with dagesh";
			_charNames[(char)0xFB41] = "hebrew letter samekh with dagesh";
			_charNames[(char)0xFB43] = "hebrew letter final pe with dagesh";
			_charNames[(char)0xFB44] = "hebrew letter pe with dagesh";
			_charNames[(char)0xFB46] = "hebrew letter tsadi with dagesh";
			_charNames[(char)0xFB47] = "hebrew letter qof with dagesh";
			_charNames[(char)0xFB48] = "hebrew letter resh with dagesh";
			_charNames[(char)0xFB49] = "hebrew letter shin with dagesh";
			_charNames[(char)0xFB4A] = "hebrew letter tav with dagesh";
			_charNames[(char)0xFB4B] = "hebrew letter vav with holam";
			_charNames[(char)0xFB4C] = "hebrew letter bet with rafe";
			_charNames[(char)0xFB4D] = "hebrew letter kaf with rafe";
			_charNames[(char)0xFB4E] = "hebrew letter pe with rafe";
			_charNames[(char)0xFB4F] = "hebrew ligature alef lamed";
			_charNames[(char)0xFB50] = "arabic letter alef wasla isolated form";
			_charNames[(char)0xFB51] = "arabic letter alef wasla final form";
			_charNames[(char)0xFB52] = "arabic letter beeh isolated form";
			_charNames[(char)0xFB53] = "arabic letter beeh final form";
			_charNames[(char)0xFB54] = "arabic letter beeh initial form";
			_charNames[(char)0xFB55] = "arabic letter beeh medial form";
			_charNames[(char)0xFB56] = "arabic letter peh isolated form";
			_charNames[(char)0xFB57] = "arabic letter peh final form";
			_charNames[(char)0xFB58] = "arabic letter peh initial form";
			_charNames[(char)0xFB59] = "arabic letter peh medial form";
			_charNames[(char)0xFB5A] = "arabic letter beheh isolated form";
			_charNames[(char)0xFB5B] = "arabic letter beheh final form";
			_charNames[(char)0xFB5C] = "arabic letter beheh initial form";
			_charNames[(char)0xFB5D] = "arabic letter beheh medial form";
			_charNames[(char)0xFB5E] = "arabic letter tteheh isolated form";
			_charNames[(char)0xFB5F] = "arabic letter tteheh final form";
			_charNames[(char)0xFB60] = "arabic letter tteheh initial form";
			_charNames[(char)0xFB61] = "arabic letter tteheh medial form";
			_charNames[(char)0xFB62] = "arabic letter teheh isolated form";
			_charNames[(char)0xFB63] = "arabic letter teheh final form";
			_charNames[(char)0xFB64] = "arabic letter teheh initial form";
			_charNames[(char)0xFB65] = "arabic letter teheh medial form";
			_charNames[(char)0xFB66] = "arabic letter tteh isolated form";
			_charNames[(char)0xFB67] = "arabic letter tteh final form";
			_charNames[(char)0xFB68] = "arabic letter tteh initial form";
			_charNames[(char)0xFB69] = "arabic letter tteh medial form";
			_charNames[(char)0xFB6A] = "arabic letter veh isolated form";
			_charNames[(char)0xFB6B] = "arabic letter veh final form";
			_charNames[(char)0xFB6C] = "arabic letter veh initial form";
			_charNames[(char)0xFB6D] = "arabic letter veh medial form";
			_charNames[(char)0xFB6E] = "arabic letter peheh isolated form";
			_charNames[(char)0xFB6F] = "arabic letter peheh final form";
			_charNames[(char)0xFB70] = "arabic letter peheh initial form";
			_charNames[(char)0xFB71] = "arabic letter peheh medial form";
			_charNames[(char)0xFB72] = "arabic letter dyeh isolated form";
			_charNames[(char)0xFB73] = "arabic letter dyeh final form";
			_charNames[(char)0xFB74] = "arabic letter dyeh initial form";
			_charNames[(char)0xFB75] = "arabic letter dyeh medial form";
			_charNames[(char)0xFB76] = "arabic letter nyeh isolated form";
			_charNames[(char)0xFB77] = "arabic letter nyeh final form";
			_charNames[(char)0xFB78] = "arabic letter nyeh initial form";
			_charNames[(char)0xFB79] = "arabic letter nyeh medial form";
			_charNames[(char)0xFB7A] = "arabic letter tcheh isolated form";
			_charNames[(char)0xFB7B] = "arabic letter tcheh final form";
			_charNames[(char)0xFB7C] = "arabic letter tcheh initial form";
			_charNames[(char)0xFB7D] = "arabic letter tcheh medial form";
			_charNames[(char)0xFB7E] = "arabic letter tcheheh isolated form";
			_charNames[(char)0xFB7F] = "arabic letter tcheheh final form";
			_charNames[(char)0xFB80] = "arabic letter tcheheh initial form";
			_charNames[(char)0xFB81] = "arabic letter tcheheh medial form";
			_charNames[(char)0xFB82] = "arabic letter ddahal isolated form";
			_charNames[(char)0xFB83] = "arabic letter ddahal final form";
			_charNames[(char)0xFB84] = "arabic letter dahal isolated form";
			_charNames[(char)0xFB85] = "arabic letter dahal final form";
			_charNames[(char)0xFB86] = "arabic letter dul isolated form";
			_charNames[(char)0xFB87] = "arabic letter dul final form";
			_charNames[(char)0xFB88] = "arabic letter ddal isolated form";
			_charNames[(char)0xFB89] = "arabic letter ddal final form";
			_charNames[(char)0xFB8A] = "arabic letter jeh isolated form";
			_charNames[(char)0xFB8B] = "arabic letter jeh final form";
			_charNames[(char)0xFB8C] = "arabic letter rreh isolated form";
			_charNames[(char)0xFB8D] = "arabic letter rreh final form";
			_charNames[(char)0xFB8E] = "arabic letter keheh isolated form";
			_charNames[(char)0xFB8F] = "arabic letter keheh final form";
			_charNames[(char)0xFB90] = "arabic letter keheh initial form";
			_charNames[(char)0xFB91] = "arabic letter keheh medial form";
			_charNames[(char)0xFB92] = "arabic letter gaf isolated form";
			_charNames[(char)0xFB93] = "arabic letter gaf final form";
			_charNames[(char)0xFB94] = "arabic letter gaf initial form";
			_charNames[(char)0xFB95] = "arabic letter gaf medial form";
			_charNames[(char)0xFB96] = "arabic letter gueh isolated form";
			_charNames[(char)0xFB97] = "arabic letter gueh final form";
			_charNames[(char)0xFB98] = "arabic letter gueh initial form";
			_charNames[(char)0xFB99] = "arabic letter gueh medial form";
			_charNames[(char)0xFB9A] = "arabic letter ngoeh isolated form";
			_charNames[(char)0xFB9B] = "arabic letter ngoeh final form";
			_charNames[(char)0xFB9C] = "arabic letter ngoeh initial form";
			_charNames[(char)0xFB9D] = "arabic letter ngoeh medial form";
			_charNames[(char)0xFB9E] = "arabic letter noon ghunna isolated form";
			_charNames[(char)0xFB9F] = "arabic letter noon ghunna final form";
			_charNames[(char)0xFBA0] = "arabic letter rnoon isolated form";
			_charNames[(char)0xFBA1] = "arabic letter rnoon final form";
			_charNames[(char)0xFBA2] = "arabic letter rnoon initial form";
			_charNames[(char)0xFBA3] = "arabic letter rnoon medial form";
			_charNames[(char)0xFBA4] = "arabic letter heh with yeh above isolated form";
			_charNames[(char)0xFBA5] = "arabic letter heh with yeh above final form";
			_charNames[(char)0xFBA6] = "arabic letter heh goal isolated form";
			_charNames[(char)0xFBA7] = "arabic letter heh goal final form";
			_charNames[(char)0xFBA8] = "arabic letter heh goal initial form";
			_charNames[(char)0xFBA9] = "arabic letter heh goal medial form";
			_charNames[(char)0xFBAA] = "arabic letter heh doachashmee isolated form";
			_charNames[(char)0xFBAB] = "arabic letter heh doachashmee final form";
			_charNames[(char)0xFBAC] = "arabic letter heh doachashmee initial form";
			_charNames[(char)0xFBAD] = "arabic letter heh doachashmee medial form";
			_charNames[(char)0xFBAE] = "arabic letter yeh barree isolated form";
			_charNames[(char)0xFBAF] = "arabic letter yeh barree final form";
			_charNames[(char)0xFBB0] = "arabic letter yeh barree with hamza above isolated form";
			_charNames[(char)0xFBB1] = "arabic letter yeh barree with hamza above final form";
			_charNames[(char)0xFBD3] = "arabic letter ng isolated form";
			_charNames[(char)0xFBD4] = "arabic letter ng final form";
			_charNames[(char)0xFBD5] = "arabic letter ng initial form";
			_charNames[(char)0xFBD6] = "arabic letter ng medial form";
			_charNames[(char)0xFBD7] = "arabic letter u isolated form";
			_charNames[(char)0xFBD8] = "arabic letter u final form";
			_charNames[(char)0xFBD9] = "arabic letter oe isolated form";
			_charNames[(char)0xFBDA] = "arabic letter oe final form";
			_charNames[(char)0xFBDB] = "arabic letter yu isolated form";
			_charNames[(char)0xFBDC] = "arabic letter yu final form";
			_charNames[(char)0xFBDD] = "arabic letter u with hamza above isolated form";
			_charNames[(char)0xFBDE] = "arabic letter ve isolated form";
			_charNames[(char)0xFBDF] = "arabic letter ve final form";
			_charNames[(char)0xFBE0] = "arabic letter kirghiz oe isolated form";
			_charNames[(char)0xFBE1] = "arabic letter kirghiz oe final form";
			_charNames[(char)0xFBE2] = "arabic letter kirghiz yu isolated form";
			_charNames[(char)0xFBE3] = "arabic letter kirghiz yu final form";
			_charNames[(char)0xFBE4] = "arabic letter e isolated form";
			_charNames[(char)0xFBE5] = "arabic letter e final form";
			_charNames[(char)0xFBE6] = "arabic letter e initial form";
			_charNames[(char)0xFBE7] = "arabic letter e medial form";
			_charNames[(char)0xFBE8] = "arabic letter uighur kazakh kirghiz alef maksura initial form";
			_charNames[(char)0xFBE9] = "arabic letter uighur kazakh kirghiz alef maksura medial form";
			_charNames[(char)0xFBEA] = "arabic ligature yeh with hamza above with alef isolated form";
			_charNames[(char)0xFBEB] = "arabic ligature yeh with hamza above with alef final form";
			_charNames[(char)0xFBEC] = "arabic ligature yeh with hamza above with ae isolated form";
			_charNames[(char)0xFBED] = "arabic ligature yeh with hamza above with ae final form";
			_charNames[(char)0xFBEE] = "arabic ligature yeh with hamza above with waw isolated form";
			_charNames[(char)0xFBEF] = "arabic ligature yeh with hamza above with waw final form";
			_charNames[(char)0xFBF0] = "arabic ligature yeh with hamza above with u isolated form";
			_charNames[(char)0xFBF1] = "arabic ligature yeh with hamza above with u final form";
			_charNames[(char)0xFBF2] = "arabic ligature yeh with hamza above with oe isolated form";
			_charNames[(char)0xFBF3] = "arabic ligature yeh with hamza above with oe final form";
			_charNames[(char)0xFBF4] = "arabic ligature yeh with hamza above with yu isolated form";
			_charNames[(char)0xFBF5] = "arabic ligature yeh with hamza above with yu final form";
			_charNames[(char)0xFBF6] = "arabic ligature yeh with hamza above with e isolated form";
			_charNames[(char)0xFBF7] = "arabic ligature yeh with hamza above with e final form";
			_charNames[(char)0xFBF8] = "arabic ligature yeh with hamza above with e initial form";
			_charNames[(char)0xFBF9] = "arabic ligature uighur kirghiz yeh with hamza above with alef maksura isolated form";
			_charNames[(char)0xFBFA] = "arabic ligature uighur kirghiz yeh with hamza above with alef maksura final form";
			_charNames[(char)0xFBFB] = "arabic ligature uighur kirghiz yeh with hamza above with alef maksura initial form";
			_charNames[(char)0xFBFC] = "arabic letter farsi yeh isolated form";
			_charNames[(char)0xFBFD] = "arabic letter farsi yeh final form";
			_charNames[(char)0xFBFE] = "arabic letter farsi yeh initial form";
			_charNames[(char)0xFBFF] = "arabic letter farsi yeh medial form";
			_charNames[(char)0xFC00] = "arabic ligature yeh with hamza above with jeem isolated form";
			_charNames[(char)0xFC01] = "arabic ligature yeh with hamza above with hah isolated form";
			_charNames[(char)0xFC02] = "arabic ligature yeh with hamza above with meem isolated form";
			_charNames[(char)0xFC03] = "arabic ligature yeh with hamza above with alef maksura isolated form";
			_charNames[(char)0xFC04] = "arabic ligature yeh with hamza above with yeh isolated form";
			_charNames[(char)0xFC05] = "arabic ligature beh with jeem isolated form";
			_charNames[(char)0xFC06] = "arabic ligature beh with hah isolated form";
			_charNames[(char)0xFC07] = "arabic ligature beh with khah isolated form";
			_charNames[(char)0xFC08] = "arabic ligature beh with meem isolated form";
			_charNames[(char)0xFC09] = "arabic ligature beh with alef maksura isolated form";
			_charNames[(char)0xFC0A] = "arabic ligature beh with yeh isolated form";
			_charNames[(char)0xFC0B] = "arabic ligature teh with jeem isolated form";
			_charNames[(char)0xFC0C] = "arabic ligature teh with hah isolated form";
			_charNames[(char)0xFC0D] = "arabic ligature teh with khah isolated form";
			_charNames[(char)0xFC0E] = "arabic ligature teh with meem isolated form";
			_charNames[(char)0xFC0F] = "arabic ligature teh with alef maksura isolated form";
			_charNames[(char)0xFC10] = "arabic ligature teh with yeh isolated form";
			_charNames[(char)0xFC11] = "arabic ligature theh with jeem isolated form";
			_charNames[(char)0xFC12] = "arabic ligature theh with meem isolated form";
			_charNames[(char)0xFC13] = "arabic ligature theh with alef maksura isolated form";
			_charNames[(char)0xFC14] = "arabic ligature theh with yeh isolated form";
			_charNames[(char)0xFC15] = "arabic ligature jeem with hah isolated form";
			_charNames[(char)0xFC16] = "arabic ligature jeem with meem isolated form";
			_charNames[(char)0xFC17] = "arabic ligature hah with jeem isolated form";
			_charNames[(char)0xFC18] = "arabic ligature hah with meem isolated form";
			_charNames[(char)0xFC19] = "arabic ligature khah with jeem isolated form";
			_charNames[(char)0xFC1A] = "arabic ligature khah with hah isolated form";
			_charNames[(char)0xFC1B] = "arabic ligature khah with meem isolated form";
			_charNames[(char)0xFC1C] = "arabic ligature seen with jeem isolated form";
			_charNames[(char)0xFC1D] = "arabic ligature seen with hah isolated form";
			_charNames[(char)0xFC1E] = "arabic ligature seen with khah isolated form";
			_charNames[(char)0xFC1F] = "arabic ligature seen with meem isolated form";
			_charNames[(char)0xFC20] = "arabic ligature sad with hah isolated form";
			_charNames[(char)0xFC21] = "arabic ligature sad with meem isolated form";
			_charNames[(char)0xFC22] = "arabic ligature dad with jeem isolated form";
			_charNames[(char)0xFC23] = "arabic ligature dad with hah isolated form";
			_charNames[(char)0xFC24] = "arabic ligature dad with khah isolated form";
			_charNames[(char)0xFC25] = "arabic ligature dad with meem isolated form";
			_charNames[(char)0xFC26] = "arabic ligature tah with hah isolated form";
			_charNames[(char)0xFC27] = "arabic ligature tah with meem isolated form";
			_charNames[(char)0xFC28] = "arabic ligature zah with meem isolated form";
			_charNames[(char)0xFC29] = "arabic ligature ain with jeem isolated form";
			_charNames[(char)0xFC2A] = "arabic ligature ain with meem isolated form";
			_charNames[(char)0xFC2B] = "arabic ligature ghain with jeem isolated form";
			_charNames[(char)0xFC2C] = "arabic ligature ghain with meem isolated form";
			_charNames[(char)0xFC2D] = "arabic ligature feh with jeem isolated form";
			_charNames[(char)0xFC2E] = "arabic ligature feh with hah isolated form";
			_charNames[(char)0xFC2F] = "arabic ligature feh with khah isolated form";
			_charNames[(char)0xFC30] = "arabic ligature feh with meem isolated form";
			_charNames[(char)0xFC31] = "arabic ligature feh with alef maksura isolated form";
			_charNames[(char)0xFC32] = "arabic ligature feh with yeh isolated form";
			_charNames[(char)0xFC33] = "arabic ligature qaf with hah isolated form";
			_charNames[(char)0xFC34] = "arabic ligature qaf with meem isolated form";
			_charNames[(char)0xFC35] = "arabic ligature qaf with alef maksura isolated form";
			_charNames[(char)0xFC36] = "arabic ligature qaf with yeh isolated form";
			_charNames[(char)0xFC37] = "arabic ligature kaf with alef isolated form";
			_charNames[(char)0xFC38] = "arabic ligature kaf with jeem isolated form";
			_charNames[(char)0xFC39] = "arabic ligature kaf with hah isolated form";
			_charNames[(char)0xFC3A] = "arabic ligature kaf with khah isolated form";
			_charNames[(char)0xFC3B] = "arabic ligature kaf with lam isolated form";
			_charNames[(char)0xFC3C] = "arabic ligature kaf with meem isolated form";
			_charNames[(char)0xFC3D] = "arabic ligature kaf with alef maksura isolated form";
			_charNames[(char)0xFC3E] = "arabic ligature kaf with yeh isolated form";
			_charNames[(char)0xFC3F] = "arabic ligature lam with jeem isolated form";
			_charNames[(char)0xFC40] = "arabic ligature lam with hah isolated form";
			_charNames[(char)0xFC41] = "arabic ligature lam with khah isolated form";
			_charNames[(char)0xFC42] = "arabic ligature lam with meem isolated form";
			_charNames[(char)0xFC43] = "arabic ligature lam with alef maksura isolated form";
			_charNames[(char)0xFC44] = "arabic ligature lam with yeh isolated form";
			_charNames[(char)0xFC45] = "arabic ligature meem with jeem isolated form";
			_charNames[(char)0xFC46] = "arabic ligature meem with hah isolated form";
			_charNames[(char)0xFC47] = "arabic ligature meem with khah isolated form";
			_charNames[(char)0xFC48] = "arabic ligature meem with meem isolated form";
			_charNames[(char)0xFC49] = "arabic ligature meem with alef maksura isolated form";
			_charNames[(char)0xFC4A] = "arabic ligature meem with yeh isolated form";
			_charNames[(char)0xFC4B] = "arabic ligature noon with jeem isolated form";
			_charNames[(char)0xFC4C] = "arabic ligature noon with hah isolated form";
			_charNames[(char)0xFC4D] = "arabic ligature noon with khah isolated form";
			_charNames[(char)0xFC4E] = "arabic ligature noon with meem isolated form";
			_charNames[(char)0xFC4F] = "arabic ligature noon with alef maksura isolated form";
			_charNames[(char)0xFC50] = "arabic ligature noon with yeh isolated form";
			_charNames[(char)0xFC51] = "arabic ligature heh with jeem isolated form";
			_charNames[(char)0xFC52] = "arabic ligature heh with meem isolated form";
			_charNames[(char)0xFC53] = "arabic ligature heh with alef maksura isolated form";
			_charNames[(char)0xFC54] = "arabic ligature heh with yeh isolated form";
			_charNames[(char)0xFC55] = "arabic ligature yeh with jeem isolated form";
			_charNames[(char)0xFC56] = "arabic ligature yeh with hah isolated form";
			_charNames[(char)0xFC57] = "arabic ligature yeh with khah isolated form";
			_charNames[(char)0xFC58] = "arabic ligature yeh with meem isolated form";
			_charNames[(char)0xFC59] = "arabic ligature yeh with alef maksura isolated form";
			_charNames[(char)0xFC5A] = "arabic ligature yeh with yeh isolated form";
			_charNames[(char)0xFC5B] = "arabic ligature thal with superscript alef isolated form";
			_charNames[(char)0xFC5C] = "arabic ligature reh with superscript alef isolated form";
			_charNames[(char)0xFC5D] = "arabic ligature alef maksura with superscript alef isolated form";
			_charNames[(char)0xFC5E] = "arabic ligature shadda with dammatan isolated form";
			_charNames[(char)0xFC5F] = "arabic ligature shadda with kasratan isolated form";
			_charNames[(char)0xFC60] = "arabic ligature shadda with fatha isolated form";
			_charNames[(char)0xFC61] = "arabic ligature shadda with damma isolated form";
			_charNames[(char)0xFC62] = "arabic ligature shadda with kasra isolated form";
			_charNames[(char)0xFC63] = "arabic ligature shadda with superscript alef isolated form";
			_charNames[(char)0xFC64] = "arabic ligature yeh with hamza above with reh final form";
			_charNames[(char)0xFC65] = "arabic ligature yeh with hamza above with zain final form";
			_charNames[(char)0xFC66] = "arabic ligature yeh with hamza above with meem final form";
			_charNames[(char)0xFC67] = "arabic ligature yeh with hamza above with noon final form";
			_charNames[(char)0xFC68] = "arabic ligature yeh with hamza above with alef maksura final form";
			_charNames[(char)0xFC69] = "arabic ligature yeh with hamza above with yeh final form";
			_charNames[(char)0xFC6A] = "arabic ligature beh with reh final form";
			_charNames[(char)0xFC6B] = "arabic ligature beh with zain final form";
			_charNames[(char)0xFC6C] = "arabic ligature beh with meem final form";
			_charNames[(char)0xFC6D] = "arabic ligature beh with noon final form";
			_charNames[(char)0xFC6E] = "arabic ligature beh with alef maksura final form";
			_charNames[(char)0xFC6F] = "arabic ligature beh with yeh final form";
			_charNames[(char)0xFC70] = "arabic ligature teh with reh final form";
			_charNames[(char)0xFC71] = "arabic ligature teh with zain final form";
			_charNames[(char)0xFC72] = "arabic ligature teh with meem final form";
			_charNames[(char)0xFC73] = "arabic ligature teh with noon final form";
			_charNames[(char)0xFC74] = "arabic ligature teh with alef maksura final form";
			_charNames[(char)0xFC75] = "arabic ligature teh with yeh final form";
			_charNames[(char)0xFC76] = "arabic ligature theh with reh final form";
			_charNames[(char)0xFC77] = "arabic ligature theh with zain final form";
			_charNames[(char)0xFC78] = "arabic ligature theh with meem final form";
			_charNames[(char)0xFC79] = "arabic ligature theh with noon final form";
			_charNames[(char)0xFC7A] = "arabic ligature theh with alef maksura final form";
			_charNames[(char)0xFC7B] = "arabic ligature theh with yeh final form";
			_charNames[(char)0xFC7C] = "arabic ligature feh with alef maksura final form";
			_charNames[(char)0xFC7D] = "arabic ligature feh with yeh final form";
			_charNames[(char)0xFC7E] = "arabic ligature qaf with alef maksura final form";
			_charNames[(char)0xFC7F] = "arabic ligature qaf with yeh final form";
			_charNames[(char)0xFC80] = "arabic ligature kaf with alef final form";
			_charNames[(char)0xFC81] = "arabic ligature kaf with lam final form";
			_charNames[(char)0xFC82] = "arabic ligature kaf with meem final form";
			_charNames[(char)0xFC83] = "arabic ligature kaf with alef maksura final form";
			_charNames[(char)0xFC84] = "arabic ligature kaf with yeh final form";
			_charNames[(char)0xFC85] = "arabic ligature lam with meem final form";
			_charNames[(char)0xFC86] = "arabic ligature lam with alef maksura final form";
			_charNames[(char)0xFC87] = "arabic ligature lam with yeh final form";
			_charNames[(char)0xFC88] = "arabic ligature meem with alef final form";
			_charNames[(char)0xFC89] = "arabic ligature meem with meem final form";
			_charNames[(char)0xFC8A] = "arabic ligature noon with reh final form";
			_charNames[(char)0xFC8B] = "arabic ligature noon with zain final form";
			_charNames[(char)0xFC8C] = "arabic ligature noon with meem final form";
			_charNames[(char)0xFC8D] = "arabic ligature noon with noon final form";
			_charNames[(char)0xFC8E] = "arabic ligature noon with alef maksura final form";
			_charNames[(char)0xFC8F] = "arabic ligature noon with yeh final form";
			_charNames[(char)0xFC90] = "arabic ligature alef maksura with superscript alef final form";
			_charNames[(char)0xFC91] = "arabic ligature yeh with reh final form";
			_charNames[(char)0xFC92] = "arabic ligature yeh with zain final form";
			_charNames[(char)0xFC93] = "arabic ligature yeh with meem final form";
			_charNames[(char)0xFC94] = "arabic ligature yeh with noon final form";
			_charNames[(char)0xFC95] = "arabic ligature yeh with alef maksura final form";
			_charNames[(char)0xFC96] = "arabic ligature yeh with yeh final form";
			_charNames[(char)0xFC97] = "arabic ligature yeh with hamza above with jeem initial form";
			_charNames[(char)0xFC98] = "arabic ligature yeh with hamza above with hah initial form";
			_charNames[(char)0xFC99] = "arabic ligature yeh with hamza above with khah initial form";
			_charNames[(char)0xFC9A] = "arabic ligature yeh with hamza above with meem initial form";
			_charNames[(char)0xFC9B] = "arabic ligature yeh with hamza above with heh initial form";
			_charNames[(char)0xFC9C] = "arabic ligature beh with jeem initial form";
			_charNames[(char)0xFC9D] = "arabic ligature beh with hah initial form";
			_charNames[(char)0xFC9E] = "arabic ligature beh with khah initial form";
			_charNames[(char)0xFC9F] = "arabic ligature beh with meem initial form";
			_charNames[(char)0xFCA0] = "arabic ligature beh with heh initial form";
			_charNames[(char)0xFCA1] = "arabic ligature teh with jeem initial form";
			_charNames[(char)0xFCA2] = "arabic ligature teh with hah initial form";
			_charNames[(char)0xFCA3] = "arabic ligature teh with khah initial form";
			_charNames[(char)0xFCA4] = "arabic ligature teh with meem initial form";
			_charNames[(char)0xFCA5] = "arabic ligature teh with heh initial form";
			_charNames[(char)0xFCA6] = "arabic ligature theh with meem initial form";
			_charNames[(char)0xFCA7] = "arabic ligature jeem with hah initial form";
			_charNames[(char)0xFCA8] = "arabic ligature jeem with meem initial form";
			_charNames[(char)0xFCA9] = "arabic ligature hah with jeem initial form";
			_charNames[(char)0xFCAA] = "arabic ligature hah with meem initial form";
			_charNames[(char)0xFCAB] = "arabic ligature khah with jeem initial form";
			_charNames[(char)0xFCAC] = "arabic ligature khah with meem initial form";
			_charNames[(char)0xFCAD] = "arabic ligature seen with jeem initial form";
			_charNames[(char)0xFCAE] = "arabic ligature seen with hah initial form";
			_charNames[(char)0xFCAF] = "arabic ligature seen with khah initial form";
			_charNames[(char)0xFCB0] = "arabic ligature seen with meem initial form";
			_charNames[(char)0xFCB1] = "arabic ligature sad with hah initial form";
			_charNames[(char)0xFCB2] = "arabic ligature sad with khah initial form";
			_charNames[(char)0xFCB3] = "arabic ligature sad with meem initial form";
			_charNames[(char)0xFCB4] = "arabic ligature dad with jeem initial form";
			_charNames[(char)0xFCB5] = "arabic ligature dad with hah initial form";
			_charNames[(char)0xFCB6] = "arabic ligature dad with khah initial form";
			_charNames[(char)0xFCB7] = "arabic ligature dad with meem initial form";
			_charNames[(char)0xFCB8] = "arabic ligature tah with hah initial form";
			_charNames[(char)0xFCB9] = "arabic ligature zah with meem initial form";
			_charNames[(char)0xFCBA] = "arabic ligature ain with jeem initial form";
			_charNames[(char)0xFCBB] = "arabic ligature ain with meem initial form";
			_charNames[(char)0xFCBC] = "arabic ligature ghain with jeem initial form";
			_charNames[(char)0xFCBD] = "arabic ligature ghain with meem initial form";
			_charNames[(char)0xFCBE] = "arabic ligature feh with jeem initial form";
			_charNames[(char)0xFCBF] = "arabic ligature feh with hah initial form";
			_charNames[(char)0xFCC0] = "arabic ligature feh with khah initial form";
			_charNames[(char)0xFCC1] = "arabic ligature feh with meem initial form";
			_charNames[(char)0xFCC2] = "arabic ligature qaf with hah initial form";
			_charNames[(char)0xFCC3] = "arabic ligature qaf with meem initial form";
			_charNames[(char)0xFCC4] = "arabic ligature kaf with jeem initial form";
			_charNames[(char)0xFCC5] = "arabic ligature kaf with hah initial form";
			_charNames[(char)0xFCC6] = "arabic ligature kaf with khah initial form";
			_charNames[(char)0xFCC7] = "arabic ligature kaf with lam initial form";
			_charNames[(char)0xFCC8] = "arabic ligature kaf with meem initial form";
			_charNames[(char)0xFCC9] = "arabic ligature lam with jeem initial form";
			_charNames[(char)0xFCCA] = "arabic ligature lam with hah initial form";
			_charNames[(char)0xFCCB] = "arabic ligature lam with khah initial form";
			_charNames[(char)0xFCCC] = "arabic ligature lam with meem initial form";
			_charNames[(char)0xFCCD] = "arabic ligature lam with heh initial form";
			_charNames[(char)0xFCCE] = "arabic ligature meem with jeem initial form";
			_charNames[(char)0xFCCF] = "arabic ligature meem with hah initial form";
			_charNames[(char)0xFCD0] = "arabic ligature meem with khah initial form";
			_charNames[(char)0xFCD1] = "arabic ligature meem with meem initial form";
			_charNames[(char)0xFCD2] = "arabic ligature noon with jeem initial form";
			_charNames[(char)0xFCD3] = "arabic ligature noon with hah initial form";
			_charNames[(char)0xFCD4] = "arabic ligature noon with khah initial form";
			_charNames[(char)0xFCD5] = "arabic ligature noon with meem initial form";
			_charNames[(char)0xFCD6] = "arabic ligature noon with heh initial form";
			_charNames[(char)0xFCD7] = "arabic ligature heh with jeem initial form";
			_charNames[(char)0xFCD8] = "arabic ligature heh with meem initial form";
			_charNames[(char)0xFCD9] = "arabic ligature heh with superscript alef initial form";
			_charNames[(char)0xFCDA] = "arabic ligature yeh with jeem initial form";
			_charNames[(char)0xFCDB] = "arabic ligature yeh with hah initial form";
			_charNames[(char)0xFCDC] = "arabic ligature yeh with khah initial form";
			_charNames[(char)0xFCDD] = "arabic ligature yeh with meem initial form";
			_charNames[(char)0xFCDE] = "arabic ligature yeh with heh initial form";
			_charNames[(char)0xFCDF] = "arabic ligature yeh with hamza above with meem medial form";
			_charNames[(char)0xFCE0] = "arabic ligature yeh with hamza above with heh medial form";
			_charNames[(char)0xFCE1] = "arabic ligature beh with meem medial form";
			_charNames[(char)0xFCE2] = "arabic ligature beh with heh medial form";
			_charNames[(char)0xFCE3] = "arabic ligature teh with meem medial form";
			_charNames[(char)0xFCE4] = "arabic ligature teh with heh medial form";
			_charNames[(char)0xFCE5] = "arabic ligature theh with meem medial form";
			_charNames[(char)0xFCE6] = "arabic ligature theh with heh medial form";
			_charNames[(char)0xFCE7] = "arabic ligature seen with meem medial form";
			_charNames[(char)0xFCE8] = "arabic ligature seen with heh medial form";
			_charNames[(char)0xFCE9] = "arabic ligature sheen with meem medial form";
			_charNames[(char)0xFCEA] = "arabic ligature sheen with heh medial form";
			_charNames[(char)0xFCEB] = "arabic ligature kaf with lam medial form";
			_charNames[(char)0xFCEC] = "arabic ligature kaf with meem medial form";
			_charNames[(char)0xFCED] = "arabic ligature lam with meem medial form";
			_charNames[(char)0xFCEE] = "arabic ligature noon with meem medial form";
			_charNames[(char)0xFCEF] = "arabic ligature noon with heh medial form";
			_charNames[(char)0xFCF0] = "arabic ligature yeh with meem medial form";
			_charNames[(char)0xFCF1] = "arabic ligature yeh with heh medial form";
			_charNames[(char)0xFCF2] = "arabic ligature shadda with fatha medial form";
			_charNames[(char)0xFCF3] = "arabic ligature shadda with damma medial form";
			_charNames[(char)0xFCF4] = "arabic ligature shadda with kasra medial form";
			_charNames[(char)0xFCF5] = "arabic ligature tah with alef maksura isolated form";
			_charNames[(char)0xFCF6] = "arabic ligature tah with yeh isolated form";
			_charNames[(char)0xFCF7] = "arabic ligature ain with alef maksura isolated form";
			_charNames[(char)0xFCF8] = "arabic ligature ain with yeh isolated form";
			_charNames[(char)0xFCF9] = "arabic ligature ghain with alef maksura isolated form";
			_charNames[(char)0xFCFA] = "arabic ligature ghain with yeh isolated form";
			_charNames[(char)0xFCFB] = "arabic ligature seen with alef maksura isolated form";
			_charNames[(char)0xFCFC] = "arabic ligature seen with yeh isolated form";
			_charNames[(char)0xFCFD] = "arabic ligature sheen with alef maksura isolated form";
			_charNames[(char)0xFCFE] = "arabic ligature sheen with yeh isolated form";
			_charNames[(char)0xFCFF] = "arabic ligature hah with alef maksura isolated form";
			_charNames[(char)0xFD00] = "arabic ligature hah with yeh isolated form";
			_charNames[(char)0xFD01] = "arabic ligature jeem with alef maksura isolated form";
			_charNames[(char)0xFD02] = "arabic ligature jeem with yeh isolated form";
			_charNames[(char)0xFD03] = "arabic ligature khah with alef maksura isolated form";
			_charNames[(char)0xFD04] = "arabic ligature khah with yeh isolated form";
			_charNames[(char)0xFD05] = "arabic ligature sad with alef maksura isolated form";
			_charNames[(char)0xFD06] = "arabic ligature sad with yeh isolated form";
			_charNames[(char)0xFD07] = "arabic ligature dad with alef maksura isolated form";
			_charNames[(char)0xFD08] = "arabic ligature dad with yeh isolated form";
			_charNames[(char)0xFD09] = "arabic ligature sheen with jeem isolated form";
			_charNames[(char)0xFD0A] = "arabic ligature sheen with hah isolated form";
			_charNames[(char)0xFD0B] = "arabic ligature sheen with khah isolated form";
			_charNames[(char)0xFD0C] = "arabic ligature sheen with meem isolated form";
			_charNames[(char)0xFD0D] = "arabic ligature sheen with reh isolated form";
			_charNames[(char)0xFD0E] = "arabic ligature seen with reh isolated form";
			_charNames[(char)0xFD0F] = "arabic ligature sad with reh isolated form";
			_charNames[(char)0xFD10] = "arabic ligature dad with reh isolated form";
			_charNames[(char)0xFD11] = "arabic ligature tah with alef maksura final form";
			_charNames[(char)0xFD12] = "arabic ligature tah with yeh final form";
			_charNames[(char)0xFD13] = "arabic ligature ain with alef maksura final form";
			_charNames[(char)0xFD14] = "arabic ligature ain with yeh final form";
			_charNames[(char)0xFD15] = "arabic ligature ghain with alef maksura final form";
			_charNames[(char)0xFD16] = "arabic ligature ghain with yeh final form";
			_charNames[(char)0xFD17] = "arabic ligature seen with alef maksura final form";
			_charNames[(char)0xFD18] = "arabic ligature seen with yeh final form";
			_charNames[(char)0xFD19] = "arabic ligature sheen with alef maksura final form";
			_charNames[(char)0xFD1A] = "arabic ligature sheen with yeh final form";
			_charNames[(char)0xFD1B] = "arabic ligature hah with alef maksura final form";
			_charNames[(char)0xFD1C] = "arabic ligature hah with yeh final form";
			_charNames[(char)0xFD1D] = "arabic ligature jeem with alef maksura final form";
			_charNames[(char)0xFD1E] = "arabic ligature jeem with yeh final form";
			_charNames[(char)0xFD1F] = "arabic ligature khah with alef maksura final form";
			_charNames[(char)0xFD20] = "arabic ligature khah with yeh final form";
			_charNames[(char)0xFD21] = "arabic ligature sad with alef maksura final form";
			_charNames[(char)0xFD22] = "arabic ligature sad with yeh final form";
			_charNames[(char)0xFD23] = "arabic ligature dad with alef maksura final form";
			_charNames[(char)0xFD24] = "arabic ligature dad with yeh final form";
			_charNames[(char)0xFD25] = "arabic ligature sheen with jeem final form";
			_charNames[(char)0xFD26] = "arabic ligature sheen with hah final form";
			_charNames[(char)0xFD27] = "arabic ligature sheen with khah final form";
			_charNames[(char)0xFD28] = "arabic ligature sheen with meem final form";
			_charNames[(char)0xFD29] = "arabic ligature sheen with reh final form";
			_charNames[(char)0xFD2A] = "arabic ligature seen with reh final form";
			_charNames[(char)0xFD2B] = "arabic ligature sad with reh final form";
			_charNames[(char)0xFD2C] = "arabic ligature dad with reh final form";
			_charNames[(char)0xFD2D] = "arabic ligature sheen with jeem initial form";
			_charNames[(char)0xFD2E] = "arabic ligature sheen with hah initial form";
			_charNames[(char)0xFD2F] = "arabic ligature sheen with khah initial form";
			_charNames[(char)0xFD30] = "arabic ligature sheen with meem initial form";
			_charNames[(char)0xFD31] = "arabic ligature seen with heh initial form";
			_charNames[(char)0xFD32] = "arabic ligature sheen with heh initial form";
			_charNames[(char)0xFD33] = "arabic ligature tah with meem initial form";
			_charNames[(char)0xFD34] = "arabic ligature seen with jeem medial form";
			_charNames[(char)0xFD35] = "arabic ligature seen with hah medial form";
			_charNames[(char)0xFD36] = "arabic ligature seen with khah medial form";
			_charNames[(char)0xFD37] = "arabic ligature sheen with jeem medial form";
			_charNames[(char)0xFD38] = "arabic ligature sheen with hah medial form";
			_charNames[(char)0xFD39] = "arabic ligature sheen with khah medial form";
			_charNames[(char)0xFD3A] = "arabic ligature tah with meem medial form";
			_charNames[(char)0xFD3B] = "arabic ligature zah with meem medial form";
			_charNames[(char)0xFD3C] = "arabic ligature alef with fathatan final form";
			_charNames[(char)0xFD3D] = "arabic ligature alef with fathatan isolated form";
			_charNames[(char)0xFD3E] = "ornate left parenthesis";
			_charNames[(char)0xFD3F] = "ornate right parenthesis";
			_charNames[(char)0xFD50] = "arabic ligature teh with jeem with meem initial form";
			_charNames[(char)0xFD51] = "arabic ligature teh with hah with jeem final form";
			_charNames[(char)0xFD52] = "arabic ligature teh with hah with jeem initial form";
			_charNames[(char)0xFD53] = "arabic ligature teh with hah with meem initial form";
			_charNames[(char)0xFD54] = "arabic ligature teh with khah with meem initial form";
			_charNames[(char)0xFD55] = "arabic ligature teh with meem with jeem initial form";
			_charNames[(char)0xFD56] = "arabic ligature teh with meem with hah initial form";
			_charNames[(char)0xFD57] = "arabic ligature teh with meem with khah initial form";
			_charNames[(char)0xFD58] = "arabic ligature jeem with meem with hah final form";
			_charNames[(char)0xFD59] = "arabic ligature jeem with meem with hah initial form";
			_charNames[(char)0xFD5A] = "arabic ligature hah with meem with yeh final form";
			_charNames[(char)0xFD5B] = "arabic ligature hah with meem with alef maksura final form";
			_charNames[(char)0xFD5C] = "arabic ligature seen with hah with jeem initial form";
			_charNames[(char)0xFD5D] = "arabic ligature seen with jeem with hah initial form";
			_charNames[(char)0xFD5E] = "arabic ligature seen with jeem with alef maksura final form";
			_charNames[(char)0xFD5F] = "arabic ligature seen with meem with hah final form";
			_charNames[(char)0xFD60] = "arabic ligature seen with meem with hah initial form";
			_charNames[(char)0xFD61] = "arabic ligature seen with meem with jeem initial form";
			_charNames[(char)0xFD62] = "arabic ligature seen with meem with meem final form";
			_charNames[(char)0xFD63] = "arabic ligature seen with meem with meem initial form";
			_charNames[(char)0xFD64] = "arabic ligature sad with hah with hah final form";
			_charNames[(char)0xFD65] = "arabic ligature sad with hah with hah initial form";
			_charNames[(char)0xFD66] = "arabic ligature sad with meem with meem final form";
			_charNames[(char)0xFD67] = "arabic ligature sheen with hah with meem final form";
			_charNames[(char)0xFD68] = "arabic ligature sheen with hah with meem initial form";
			_charNames[(char)0xFD69] = "arabic ligature sheen with jeem with yeh final form";
			_charNames[(char)0xFD6A] = "arabic ligature sheen with meem with khah final form";
			_charNames[(char)0xFD6B] = "arabic ligature sheen with meem with khah initial form";
			_charNames[(char)0xFD6C] = "arabic ligature sheen with meem with meem final form";
			_charNames[(char)0xFD6D] = "arabic ligature sheen with meem with meem initial form";
			_charNames[(char)0xFD6E] = "arabic ligature dad with hah with alef maksura final form";
			_charNames[(char)0xFD6F] = "arabic ligature dad with khah with meem final form";
			_charNames[(char)0xFD70] = "arabic ligature dad with khah with meem initial form";
			_charNames[(char)0xFD71] = "arabic ligature tah with meem with hah final form";
			_charNames[(char)0xFD72] = "arabic ligature tah with meem with hah initial form";
			_charNames[(char)0xFD73] = "arabic ligature tah with meem with meem initial form";
			_charNames[(char)0xFD74] = "arabic ligature tah with meem with yeh final form";
			_charNames[(char)0xFD75] = "arabic ligature ain with jeem with meem final form";
			_charNames[(char)0xFD76] = "arabic ligature ain with meem with meem final form";
			_charNames[(char)0xFD77] = "arabic ligature ain with meem with meem initial form";
			_charNames[(char)0xFD78] = "arabic ligature ain with meem with alef maksura final form";
			_charNames[(char)0xFD79] = "arabic ligature ghain with meem with meem final form";
			_charNames[(char)0xFD7A] = "arabic ligature ghain with meem with yeh final form";
			_charNames[(char)0xFD7B] = "arabic ligature ghain with meem with alef maksura final form";
			_charNames[(char)0xFD7C] = "arabic ligature feh with khah with meem final form";
			_charNames[(char)0xFD7D] = "arabic ligature feh with khah with meem initial form";
			_charNames[(char)0xFD7E] = "arabic ligature qaf with meem with hah final form";
			_charNames[(char)0xFD7F] = "arabic ligature qaf with meem with meem final form";
			_charNames[(char)0xFD80] = "arabic ligature lam with hah with meem final form";
			_charNames[(char)0xFD81] = "arabic ligature lam with hah with yeh final form";
			_charNames[(char)0xFD82] = "arabic ligature lam with hah with alef maksura final form";
			_charNames[(char)0xFD83] = "arabic ligature lam with jeem with jeem initial form";
			_charNames[(char)0xFD84] = "arabic ligature lam with jeem with jeem final form";
			_charNames[(char)0xFD85] = "arabic ligature lam with khah with meem final form";
			_charNames[(char)0xFD86] = "arabic ligature lam with khah with meem initial form";
			_charNames[(char)0xFD87] = "arabic ligature lam with meem with hah final form";
			_charNames[(char)0xFD88] = "arabic ligature lam with meem with hah initial form";
			_charNames[(char)0xFD89] = "arabic ligature meem with hah with jeem initial form";
			_charNames[(char)0xFD8A] = "arabic ligature meem with hah with meem initial form";
			_charNames[(char)0xFD8B] = "arabic ligature meem with hah with yeh final form";
			_charNames[(char)0xFD8C] = "arabic ligature meem with jeem with hah initial form";
			_charNames[(char)0xFD8D] = "arabic ligature meem with jeem with meem initial form";
			_charNames[(char)0xFD8E] = "arabic ligature meem with khah with jeem initial form";
			_charNames[(char)0xFD8F] = "arabic ligature meem with khah with meem initial form";
			_charNames[(char)0xFD92] = "arabic ligature meem with jeem with khah initial form";
			_charNames[(char)0xFD93] = "arabic ligature heh with meem with jeem initial form";
			_charNames[(char)0xFD94] = "arabic ligature heh with meem with meem initial form";
			_charNames[(char)0xFD95] = "arabic ligature noon with hah with meem initial form";
			_charNames[(char)0xFD96] = "arabic ligature noon with hah with alef maksura final form";
			_charNames[(char)0xFD97] = "arabic ligature noon with jeem with meem final form";
			_charNames[(char)0xFD98] = "arabic ligature noon with jeem with meem initial form";
			_charNames[(char)0xFD99] = "arabic ligature noon with jeem with alef maksura final form";
			_charNames[(char)0xFD9A] = "arabic ligature noon with meem with yeh final form";
			_charNames[(char)0xFD9B] = "arabic ligature noon with meem with alef maksura final form";
			_charNames[(char)0xFD9C] = "arabic ligature yeh with meem with meem final form";
			_charNames[(char)0xFD9D] = "arabic ligature yeh with meem with meem initial form";
			_charNames[(char)0xFD9E] = "arabic ligature beh with khah with yeh final form";
			_charNames[(char)0xFD9F] = "arabic ligature teh with jeem with yeh final form";
			_charNames[(char)0xFDA0] = "arabic ligature teh with jeem with alef maksura final form";
			_charNames[(char)0xFDA1] = "arabic ligature teh with khah with yeh final form";
			_charNames[(char)0xFDA2] = "arabic ligature teh with khah with alef maksura final form";
			_charNames[(char)0xFDA3] = "arabic ligature teh with meem with yeh final form";
			_charNames[(char)0xFDA4] = "arabic ligature teh with meem with alef maksura final form";
			_charNames[(char)0xFDA5] = "arabic ligature jeem with meem with yeh final form";
			_charNames[(char)0xFDA6] = "arabic ligature jeem with hah with alef maksura final form";
			_charNames[(char)0xFDA7] = "arabic ligature jeem with meem with alef maksura final form";
			_charNames[(char)0xFDA8] = "arabic ligature seen with khah with alef maksura final form";
			_charNames[(char)0xFDA9] = "arabic ligature sad with hah with yeh final form";
			_charNames[(char)0xFDAA] = "arabic ligature sheen with hah with yeh final form";
			_charNames[(char)0xFDAB] = "arabic ligature dad with hah with yeh final form";
			_charNames[(char)0xFDAC] = "arabic ligature lam with jeem with yeh final form";
			_charNames[(char)0xFDAD] = "arabic ligature lam with meem with yeh final form";
			_charNames[(char)0xFDAE] = "arabic ligature yeh with hah with yeh final form";
			_charNames[(char)0xFDAF] = "arabic ligature yeh with jeem with yeh final form";
			_charNames[(char)0xFDB0] = "arabic ligature yeh with meem with yeh final form";
			_charNames[(char)0xFDB1] = "arabic ligature meem with meem with yeh final form";
			_charNames[(char)0xFDB2] = "arabic ligature qaf with meem with yeh final form";
			_charNames[(char)0xFDB3] = "arabic ligature noon with hah with yeh final form";
			_charNames[(char)0xFDB4] = "arabic ligature qaf with meem with hah initial form";
			_charNames[(char)0xFDB5] = "arabic ligature lam with hah with meem initial form";
			_charNames[(char)0xFDB6] = "arabic ligature ain with meem with yeh final form";
			_charNames[(char)0xFDB7] = "arabic ligature kaf with meem with yeh final form";
			_charNames[(char)0xFDB8] = "arabic ligature noon with jeem with hah initial form";
			_charNames[(char)0xFDB9] = "arabic ligature meem with khah with yeh final form";
			_charNames[(char)0xFDBA] = "arabic ligature lam with jeem with meem initial form";
			_charNames[(char)0xFDBB] = "arabic ligature kaf with meem with meem final form";
			_charNames[(char)0xFDBC] = "arabic ligature lam with jeem with meem final form";
			_charNames[(char)0xFDBD] = "arabic ligature noon with jeem with hah final form";
			_charNames[(char)0xFDBE] = "arabic ligature jeem with hah with yeh final form";
			_charNames[(char)0xFDBF] = "arabic ligature hah with jeem with yeh final form";
			_charNames[(char)0xFDC0] = "arabic ligature meem with jeem with yeh final form";
			_charNames[(char)0xFDC1] = "arabic ligature feh with meem with yeh final form";
			_charNames[(char)0xFDC2] = "arabic ligature beh with hah with yeh final form";
			_charNames[(char)0xFDC3] = "arabic ligature kaf with meem with meem initial form";
			_charNames[(char)0xFDC4] = "arabic ligature ain with jeem with meem initial form";
			_charNames[(char)0xFDC5] = "arabic ligature sad with meem with meem initial form";
			_charNames[(char)0xFDC6] = "arabic ligature seen with khah with yeh final form";
			_charNames[(char)0xFDC7] = "arabic ligature noon with jeem with yeh final form";
			_charNames[(char)0xFDF0] = "arabic ligature salla used as koranic stop sign isolated form";
			_charNames[(char)0xFDF1] = "arabic ligature qala used as koranic stop sign isolated form";
			_charNames[(char)0xFDF2] = "arabic ligature allah isolated form";
			_charNames[(char)0xFDF3] = "arabic ligature akbar isolated form";
			_charNames[(char)0xFDF4] = "arabic ligature mohammad isolated form";
			_charNames[(char)0xFDF5] = "arabic ligature salam isolated form";
			_charNames[(char)0xFDF6] = "arabic ligature rasoul isolated form";
			_charNames[(char)0xFDF7] = "arabic ligature alayhe isolated form";
			_charNames[(char)0xFDF8] = "arabic ligature wasallam isolated form";
			_charNames[(char)0xFDF9] = "arabic ligature salla isolated form";
			_charNames[(char)0xFDFA] = "arabic ligature sallallahou alayhe wasallam";
			_charNames[(char)0xFDFB] = "arabic ligature jallajalalouhou";
			_charNames[(char)0xFDFC] = "rial sign";
			_charNames[(char)0xFDFD] = "arabic ligature bismillah ar-rahman ar-raheem";
			_charNames[(char)0xFE00] = "variation selector-1";
			_charNames[(char)0xFE01] = "variation selector-2";
			_charNames[(char)0xFE02] = "variation selector-3";
			_charNames[(char)0xFE03] = "variation selector-4";
			_charNames[(char)0xFE04] = "variation selector-5";
			_charNames[(char)0xFE05] = "variation selector-6";
			_charNames[(char)0xFE06] = "variation selector-7";
			_charNames[(char)0xFE07] = "variation selector-8";
			_charNames[(char)0xFE08] = "variation selector-9";
			_charNames[(char)0xFE09] = "variation selector-10";
			_charNames[(char)0xFE0A] = "variation selector-11";
			_charNames[(char)0xFE0B] = "variation selector-12";
			_charNames[(char)0xFE0C] = "variation selector-13";
			_charNames[(char)0xFE0D] = "variation selector-14";
			_charNames[(char)0xFE0E] = "variation selector-15";
			_charNames[(char)0xFE0F] = "variation selector-16";
			_charNames[(char)0xFE10] = "presentation form for vertical comma";
			_charNames[(char)0xFE11] = "presentation form for vertical ideographic comma";
			_charNames[(char)0xFE12] = "presentation form for vertical ideographic full stop";
			_charNames[(char)0xFE13] = "presentation form for vertical colon";
			_charNames[(char)0xFE14] = "presentation form for vertical semicolon";
			_charNames[(char)0xFE15] = "presentation form for vertical exclamation mark";
			_charNames[(char)0xFE16] = "presentation form for vertical question mark";
			_charNames[(char)0xFE17] = "presentation form for vertical left white lenticular bracket";
			_charNames[(char)0xFE18] = "presentation form for vertical right white lenticular brakcet";
			_charNames[(char)0xFE19] = "presentation form for vertical horizontal ellipsis";
			_charNames[(char)0xFE20] = "combining ligature left half";
			_charNames[(char)0xFE21] = "combining ligature right half";
			_charNames[(char)0xFE22] = "combining double tilde left half";
			_charNames[(char)0xFE23] = "combining double tilde right half";
			_charNames[(char)0xFE30] = "presentation form for vertical two dot leader";
			_charNames[(char)0xFE31] = "presentation form for vertical em dash";
			_charNames[(char)0xFE32] = "presentation form for vertical en dash";
			_charNames[(char)0xFE33] = "presentation form for vertical low line";
			_charNames[(char)0xFE34] = "presentation form for vertical wavy low line";
			_charNames[(char)0xFE35] = "presentation form for vertical left parenthesis";
			_charNames[(char)0xFE36] = "presentation form for vertical right parenthesis";
			_charNames[(char)0xFE37] = "presentation form for vertical left curly bracket";
			_charNames[(char)0xFE38] = "presentation form for vertical right curly bracket";
			_charNames[(char)0xFE39] = "presentation form for vertical left tortoise shell bracket";
			_charNames[(char)0xFE3A] = "presentation form for vertical right tortoise shell bracket";
			_charNames[(char)0xFE3B] = "presentation form for vertical left black lenticular bracket";
			_charNames[(char)0xFE3C] = "presentation form for vertical right black lenticular bracket";
			_charNames[(char)0xFE3D] = "presentation form for vertical left double angle bracket";
			_charNames[(char)0xFE3E] = "presentation form for vertical right double angle bracket";
			_charNames[(char)0xFE3F] = "presentation form for vertical left angle bracket";
			_charNames[(char)0xFE40] = "presentation form for vertical right angle bracket";
			_charNames[(char)0xFE41] = "presentation form for vertical left corner bracket";
			_charNames[(char)0xFE42] = "presentation form for vertical right corner bracket";
			_charNames[(char)0xFE43] = "presentation form for vertical left white corner bracket";
			_charNames[(char)0xFE44] = "presentation form for vertical right white corner bracket";
			_charNames[(char)0xFE45] = "sesame dot";
			_charNames[(char)0xFE46] = "white sesame dot";
			_charNames[(char)0xFE47] = "presentation form for vertical left square bracket";
			_charNames[(char)0xFE48] = "presentation form for vertical right square bracket";
			_charNames[(char)0xFE49] = "dashed overline";
			_charNames[(char)0xFE4A] = "centreline overline";
			_charNames[(char)0xFE4B] = "wavy overline";
			_charNames[(char)0xFE4C] = "double wavy overline";
			_charNames[(char)0xFE4D] = "dashed low line";
			_charNames[(char)0xFE4E] = "centreline low line";
			_charNames[(char)0xFE4F] = "wavy low line";
			_charNames[(char)0xFE50] = "small comma";
			_charNames[(char)0xFE51] = "small ideographic comma";
			_charNames[(char)0xFE52] = "small full stop";
			_charNames[(char)0xFE54] = "small semicolon";
			_charNames[(char)0xFE55] = "small colon";
			_charNames[(char)0xFE56] = "small question mark";
			_charNames[(char)0xFE57] = "small exclamation mark";
			_charNames[(char)0xFE58] = "small em dash";
			_charNames[(char)0xFE59] = "small left parenthesis";
			_charNames[(char)0xFE5A] = "small right parenthesis";
			_charNames[(char)0xFE5B] = "small left curly bracket";
			_charNames[(char)0xFE5C] = "small right curly bracket";
			_charNames[(char)0xFE5D] = "small left tortoise shell bracket";
			_charNames[(char)0xFE5E] = "small right tortoise shell bracket";
			_charNames[(char)0xFE5F] = "small number sign";
			_charNames[(char)0xFE60] = "small ampersand";
			_charNames[(char)0xFE61] = "small asterisk";
			_charNames[(char)0xFE62] = "small plus sign";
			_charNames[(char)0xFE63] = "small hyphen-minus";
			_charNames[(char)0xFE64] = "small less-than sign";
			_charNames[(char)0xFE65] = "small greater-than sign";
			_charNames[(char)0xFE66] = "small equals sign";
			_charNames[(char)0xFE68] = "small reverse solidus";
			_charNames[(char)0xFE69] = "small dollar sign";
			_charNames[(char)0xFE6A] = "small percent sign";
			_charNames[(char)0xFE6B] = "small commercial at";
			_charNames[(char)0xFE70] = "arabic fathatan isolated form";
			_charNames[(char)0xFE71] = "arabic tatweel with fathatan above";
			_charNames[(char)0xFE72] = "arabic dammatan isolated form";
			_charNames[(char)0xFE73] = "arabic tail fragment";
			_charNames[(char)0xFE74] = "arabic kasratan isolated form";
			_charNames[(char)0xFE76] = "arabic fatha isolated form";
			_charNames[(char)0xFE77] = "arabic fatha medial form";
			_charNames[(char)0xFE78] = "arabic damma isolated form";
			_charNames[(char)0xFE79] = "arabic damma medial form";
			_charNames[(char)0xFE7A] = "arabic kasra isolated form";
			_charNames[(char)0xFE7B] = "arabic kasra medial form";
			_charNames[(char)0xFE7C] = "arabic shadda isolated form";
			_charNames[(char)0xFE7D] = "arabic shadda medial form";
			_charNames[(char)0xFE7E] = "arabic sukun isolated form";
			_charNames[(char)0xFE7F] = "arabic sukun medial form";
			_charNames[(char)0xFE80] = "arabic letter hamza isolated form";
			_charNames[(char)0xFE81] = "arabic letter alef with madda above isolated form";
			_charNames[(char)0xFE82] = "arabic letter alef with madda above final form";
			_charNames[(char)0xFE83] = "arabic letter alef with hamza above isolated form";
			_charNames[(char)0xFE84] = "arabic letter alef with hamza above final form";
			_charNames[(char)0xFE85] = "arabic letter waw with hamza above isolated form";
			_charNames[(char)0xFE86] = "arabic letter waw with hamza above final form";
			_charNames[(char)0xFE87] = "arabic letter alef with hamza below isolated form";
			_charNames[(char)0xFE88] = "arabic letter alef with hamza below final form";
			_charNames[(char)0xFE89] = "arabic letter yeh with hamza above isolated form";
			_charNames[(char)0xFE8A] = "arabic letter yeh with hamza above final form";
			_charNames[(char)0xFE8B] = "arabic letter yeh with hamza above initial form";
			_charNames[(char)0xFE8C] = "arabic letter yeh with hamza above medial form";
			_charNames[(char)0xFE8D] = "arabic letter alef isolated form";
			_charNames[(char)0xFE8E] = "arabic letter alef final form";
			_charNames[(char)0xFE8F] = "arabic letter beh isolated form";
			_charNames[(char)0xFE90] = "arabic letter beh final form";
			_charNames[(char)0xFE91] = "arabic letter beh initial form";
			_charNames[(char)0xFE92] = "arabic letter beh medial form";
			_charNames[(char)0xFE93] = "arabic letter teh marbuta isolated form";
			_charNames[(char)0xFE94] = "arabic letter teh marbuta final form";
			_charNames[(char)0xFE95] = "arabic letter teh isolated form";
			_charNames[(char)0xFE96] = "arabic letter teh final form";
			_charNames[(char)0xFE97] = "arabic letter teh initial form";
			_charNames[(char)0xFE98] = "arabic letter teh medial form";
			_charNames[(char)0xFE99] = "arabic letter theh isolated form";
			_charNames[(char)0xFE9A] = "arabic letter theh final form";
			_charNames[(char)0xFE9B] = "arabic letter theh initial form";
			_charNames[(char)0xFE9C] = "arabic letter theh medial form";
			_charNames[(char)0xFE9D] = "arabic letter jeem isolated form";
			_charNames[(char)0xFE9E] = "arabic letter jeem final form";
			_charNames[(char)0xFE9F] = "arabic letter jeem initial form";
			_charNames[(char)0xFEA0] = "arabic letter jeem medial form";
			_charNames[(char)0xFEA1] = "arabic letter hah isolated form";
			_charNames[(char)0xFEA2] = "arabic letter hah final form";
			_charNames[(char)0xFEA3] = "arabic letter hah initial form";
			_charNames[(char)0xFEA4] = "arabic letter hah medial form";
			_charNames[(char)0xFEA5] = "arabic letter khah isolated form";
			_charNames[(char)0xFEA6] = "arabic letter khah final form";
			_charNames[(char)0xFEA7] = "arabic letter khah initial form";
			_charNames[(char)0xFEA8] = "arabic letter khah medial form";
			_charNames[(char)0xFEA9] = "arabic letter dal isolated form";
			_charNames[(char)0xFEAA] = "arabic letter dal final form";
			_charNames[(char)0xFEAB] = "arabic letter thal isolated form";
			_charNames[(char)0xFEAC] = "arabic letter thal final form";
			_charNames[(char)0xFEAD] = "arabic letter reh isolated form";
			_charNames[(char)0xFEAE] = "arabic letter reh final form";
			_charNames[(char)0xFEAF] = "arabic letter zain isolated form";
			_charNames[(char)0xFEB0] = "arabic letter zain final form";
			_charNames[(char)0xFEB1] = "arabic letter seen isolated form";
			_charNames[(char)0xFEB2] = "arabic letter seen final form";
			_charNames[(char)0xFEB3] = "arabic letter seen initial form";
			_charNames[(char)0xFEB4] = "arabic letter seen medial form";
			_charNames[(char)0xFEB5] = "arabic letter sheen isolated form";
			_charNames[(char)0xFEB6] = "arabic letter sheen final form";
			_charNames[(char)0xFEB7] = "arabic letter sheen initial form";
			_charNames[(char)0xFEB8] = "arabic letter sheen medial form";
			_charNames[(char)0xFEB9] = "arabic letter sad isolated form";
			_charNames[(char)0xFEBA] = "arabic letter sad final form";
			_charNames[(char)0xFEBB] = "arabic letter sad initial form";
			_charNames[(char)0xFEBC] = "arabic letter sad medial form";
			_charNames[(char)0xFEBD] = "arabic letter dad isolated form";
			_charNames[(char)0xFEBE] = "arabic letter dad final form";
			_charNames[(char)0xFEBF] = "arabic letter dad initial form";
			_charNames[(char)0xFEC0] = "arabic letter dad medial form";
			_charNames[(char)0xFEC1] = "arabic letter tah isolated form";
			_charNames[(char)0xFEC2] = "arabic letter tah final form";
			_charNames[(char)0xFEC3] = "arabic letter tah initial form";
			_charNames[(char)0xFEC4] = "arabic letter tah medial form";
			_charNames[(char)0xFEC5] = "arabic letter zah isolated form";
			_charNames[(char)0xFEC6] = "arabic letter zah final form";
			_charNames[(char)0xFEC7] = "arabic letter zah initial form";
			_charNames[(char)0xFEC8] = "arabic letter zah medial form";
			_charNames[(char)0xFEC9] = "arabic letter ain isolated form";
			_charNames[(char)0xFECA] = "arabic letter ain final form";
			_charNames[(char)0xFECB] = "arabic letter ain initial form";
			_charNames[(char)0xFECC] = "arabic letter ain medial form";
			_charNames[(char)0xFECD] = "arabic letter ghain isolated form";
			_charNames[(char)0xFECE] = "arabic letter ghain final form";
			_charNames[(char)0xFECF] = "arabic letter ghain initial form";
			_charNames[(char)0xFED0] = "arabic letter ghain medial form";
			_charNames[(char)0xFED1] = "arabic letter feh isolated form";
			_charNames[(char)0xFED2] = "arabic letter feh final form";
			_charNames[(char)0xFED3] = "arabic letter feh initial form";
			_charNames[(char)0xFED4] = "arabic letter feh medial form";
			_charNames[(char)0xFED5] = "arabic letter qaf isolated form";
			_charNames[(char)0xFED6] = "arabic letter qaf final form";
			_charNames[(char)0xFED7] = "arabic letter qaf initial form";
			_charNames[(char)0xFED8] = "arabic letter qaf medial form";
			_charNames[(char)0xFED9] = "arabic letter kaf isolated form";
			_charNames[(char)0xFEDA] = "arabic letter kaf final form";
			_charNames[(char)0xFEDB] = "arabic letter kaf initial form";
			_charNames[(char)0xFEDC] = "arabic letter kaf medial form";
			_charNames[(char)0xFEDD] = "arabic letter lam isolated form";
			_charNames[(char)0xFEDE] = "arabic letter lam final form";
			_charNames[(char)0xFEDF] = "arabic letter lam initial form";
			_charNames[(char)0xFEE0] = "arabic letter lam medial form";
			_charNames[(char)0xFEE1] = "arabic letter meem isolated form";
			_charNames[(char)0xFEE2] = "arabic letter meem final form";
			_charNames[(char)0xFEE3] = "arabic letter meem initial form";
			_charNames[(char)0xFEE4] = "arabic letter meem medial form";
			_charNames[(char)0xFEE5] = "arabic letter noon isolated form";
			_charNames[(char)0xFEE6] = "arabic letter noon final form";
			_charNames[(char)0xFEE7] = "arabic letter noon initial form";
			_charNames[(char)0xFEE8] = "arabic letter noon medial form";
			_charNames[(char)0xFEE9] = "arabic letter heh isolated form";
			_charNames[(char)0xFEEA] = "arabic letter heh final form";
			_charNames[(char)0xFEEB] = "arabic letter heh initial form";
			_charNames[(char)0xFEEC] = "arabic letter heh medial form";
			_charNames[(char)0xFEED] = "arabic letter waw isolated form";
			_charNames[(char)0xFEEE] = "arabic letter waw final form";
			_charNames[(char)0xFEEF] = "arabic letter alef maksura isolated form";
			_charNames[(char)0xFEF0] = "arabic letter alef maksura final form";
			_charNames[(char)0xFEF1] = "arabic letter yeh isolated form";
			_charNames[(char)0xFEF2] = "arabic letter yeh final form";
			_charNames[(char)0xFEF3] = "arabic letter yeh initial form";
			_charNames[(char)0xFEF4] = "arabic letter yeh medial form";
			_charNames[(char)0xFEF5] = "arabic ligature lam with alef with madda above isolated form";
			_charNames[(char)0xFEF6] = "arabic ligature lam with alef with madda above final form";
			_charNames[(char)0xFEF7] = "arabic ligature lam with alef with hamza above isolated form";
			_charNames[(char)0xFEF8] = "arabic ligature lam with alef with hamza above final form";
			_charNames[(char)0xFEF9] = "arabic ligature lam with alef with hamza below isolated form";
			_charNames[(char)0xFEFA] = "arabic ligature lam with alef with hamza below final form";
			_charNames[(char)0xFEFB] = "arabic ligature lam with alef isolated form";
			_charNames[(char)0xFEFC] = "arabic ligature lam with alef final form";
			_charNames[(char)0xFEFF] = "zero width no-break space";
			_charNames[(char)0xFF01] = "fullwidth exclamation mark";
			_charNames[(char)0xFF02] = "fullwidth quotation mark";
			_charNames[(char)0xFF03] = "fullwidth number sign";
			_charNames[(char)0xFF04] = "fullwidth dollar sign";
			_charNames[(char)0xFF05] = "fullwidth percent sign";
			_charNames[(char)0xFF06] = "fullwidth ampersand";
			_charNames[(char)0xFF07] = "fullwidth apostrophe";
			_charNames[(char)0xFF08] = "fullwidth left parenthesis";
			_charNames[(char)0xFF09] = "fullwidth right parenthesis";
			_charNames[(char)0xFF0A] = "fullwidth asterisk";
			_charNames[(char)0xFF0B] = "fullwidth plus sign";
			_charNames[(char)0xFF0C] = "fullwidth comma";
			_charNames[(char)0xFF0D] = "fullwidth hyphen-minus";
			_charNames[(char)0xFF0E] = "fullwidth full stop";
			_charNames[(char)0xFF0F] = "fullwidth solidus";
			_charNames[(char)0xFF10] = "fullwidth digit zero";
			_charNames[(char)0xFF11] = "fullwidth digit one";
			_charNames[(char)0xFF12] = "fullwidth digit two";
			_charNames[(char)0xFF13] = "fullwidth digit three";
			_charNames[(char)0xFF14] = "fullwidth digit four";
			_charNames[(char)0xFF15] = "fullwidth digit five";
			_charNames[(char)0xFF16] = "fullwidth digit six";
			_charNames[(char)0xFF17] = "fullwidth digit seven";
			_charNames[(char)0xFF18] = "fullwidth digit eight";
			_charNames[(char)0xFF19] = "fullwidth digit nine";
			_charNames[(char)0xFF1A] = "fullwidth colon";
			_charNames[(char)0xFF1B] = "fullwidth semicolon";
			_charNames[(char)0xFF1C] = "fullwidth less-than sign";
			_charNames[(char)0xFF1D] = "fullwidth equals sign";
			_charNames[(char)0xFF1E] = "fullwidth greater-than sign";
			_charNames[(char)0xFF1F] = "fullwidth question mark";
			_charNames[(char)0xFF20] = "fullwidth commercial at";
			_charNames[(char)0xFF21] = "fullwidth latin capital letter a";
			_charNames[(char)0xFF22] = "fullwidth latin capital letter b";
			_charNames[(char)0xFF23] = "fullwidth latin capital letter c";
			_charNames[(char)0xFF24] = "fullwidth latin capital letter d";
			_charNames[(char)0xFF25] = "fullwidth latin capital letter e";
			_charNames[(char)0xFF26] = "fullwidth latin capital letter f";
			_charNames[(char)0xFF27] = "fullwidth latin capital letter g";
			_charNames[(char)0xFF28] = "fullwidth latin capital letter h";
			_charNames[(char)0xFF29] = "fullwidth latin capital letter i";
			_charNames[(char)0xFF2A] = "fullwidth latin capital letter j";
			_charNames[(char)0xFF2B] = "fullwidth latin capital letter k";
			_charNames[(char)0xFF2C] = "fullwidth latin capital letter l";
			_charNames[(char)0xFF2D] = "fullwidth latin capital letter m";
			_charNames[(char)0xFF2E] = "fullwidth latin capital letter n";
			_charNames[(char)0xFF2F] = "fullwidth latin capital letter o";
			_charNames[(char)0xFF30] = "fullwidth latin capital letter p";
			_charNames[(char)0xFF31] = "fullwidth latin capital letter q";
			_charNames[(char)0xFF32] = "fullwidth latin capital letter r";
			_charNames[(char)0xFF33] = "fullwidth latin capital letter s";
			_charNames[(char)0xFF34] = "fullwidth latin capital letter t";
			_charNames[(char)0xFF35] = "fullwidth latin capital letter u";
			_charNames[(char)0xFF36] = "fullwidth latin capital letter v";
			_charNames[(char)0xFF37] = "fullwidth latin capital letter w";
			_charNames[(char)0xFF38] = "fullwidth latin capital letter x";
			_charNames[(char)0xFF39] = "fullwidth latin capital letter y";
			_charNames[(char)0xFF3A] = "fullwidth latin capital letter z";
			_charNames[(char)0xFF3B] = "fullwidth left square bracket";
			_charNames[(char)0xFF3C] = "fullwidth reverse solidus";
			_charNames[(char)0xFF3D] = "fullwidth right square bracket";
			_charNames[(char)0xFF3E] = "fullwidth circumflex accent";
			_charNames[(char)0xFF3F] = "fullwidth low line";
			_charNames[(char)0xFF40] = "fullwidth grave accent";
			_charNames[(char)0xFF41] = "fullwidth latin small letter a";
			_charNames[(char)0xFF42] = "fullwidth latin small letter b";
			_charNames[(char)0xFF43] = "fullwidth latin small letter c";
			_charNames[(char)0xFF44] = "fullwidth latin small letter d";
			_charNames[(char)0xFF45] = "fullwidth latin small letter e";
			_charNames[(char)0xFF46] = "fullwidth latin small letter f";
			_charNames[(char)0xFF47] = "fullwidth latin small letter g";
			_charNames[(char)0xFF48] = "fullwidth latin small letter h";
			_charNames[(char)0xFF49] = "fullwidth latin small letter i";
			_charNames[(char)0xFF4A] = "fullwidth latin small letter j";
			_charNames[(char)0xFF4B] = "fullwidth latin small letter k";
			_charNames[(char)0xFF4C] = "fullwidth latin small letter l";
			_charNames[(char)0xFF4D] = "fullwidth latin small letter m";
			_charNames[(char)0xFF4E] = "fullwidth latin small letter n";
			_charNames[(char)0xFF4F] = "fullwidth latin small letter o";
			_charNames[(char)0xFF50] = "fullwidth latin small letter p";
			_charNames[(char)0xFF51] = "fullwidth latin small letter q";
			_charNames[(char)0xFF52] = "fullwidth latin small letter r";
			_charNames[(char)0xFF53] = "fullwidth latin small letter s";
			_charNames[(char)0xFF54] = "fullwidth latin small letter t";
			_charNames[(char)0xFF55] = "fullwidth latin small letter u";
			_charNames[(char)0xFF56] = "fullwidth latin small letter v";
			_charNames[(char)0xFF57] = "fullwidth latin small letter w";
			_charNames[(char)0xFF58] = "fullwidth latin small letter x";
			_charNames[(char)0xFF59] = "fullwidth latin small letter y";
			_charNames[(char)0xFF5A] = "fullwidth latin small letter z";
			_charNames[(char)0xFF5B] = "fullwidth left curly bracket";
			_charNames[(char)0xFF5C] = "fullwidth vertical line";
			_charNames[(char)0xFF5D] = "fullwidth right curly bracket";
			_charNames[(char)0xFF5E] = "fullwidth tilde";
			_charNames[(char)0xFF5F] = "fullwidth left white parenthesis";
			_charNames[(char)0xFF60] = "fullwidth right white parenthesis";
			_charNames[(char)0xFF61] = "halfwidth ideographic full stop";
			_charNames[(char)0xFF62] = "halfwidth left corner bracket";
			_charNames[(char)0xFF63] = "halfwidth right corner bracket";
			_charNames[(char)0xFF64] = "halfwidth ideographic comma";
			_charNames[(char)0xFF65] = "halfwidth katakana middle dot";
			_charNames[(char)0xFF66] = "halfwidth katakana letter wo";
			_charNames[(char)0xFF67] = "halfwidth katakana letter small a";
			_charNames[(char)0xFF68] = "halfwidth katakana letter small i";
			_charNames[(char)0xFF69] = "halfwidth katakana letter small u";
			_charNames[(char)0xFF6A] = "halfwidth katakana letter small e";
			_charNames[(char)0xFF6B] = "halfwidth katakana letter small o";
			_charNames[(char)0xFF6C] = "halfwidth katakana letter small ya";
			_charNames[(char)0xFF6D] = "halfwidth katakana letter small yu";
			_charNames[(char)0xFF6E] = "halfwidth katakana letter small yo";
			_charNames[(char)0xFF6F] = "halfwidth katakana letter small tu";
			_charNames[(char)0xFF70] = "halfwidth katakana-hiragana prolonged sound mark";
			_charNames[(char)0xFF71] = "halfwidth katakana letter a";
			_charNames[(char)0xFF72] = "halfwidth katakana letter i";
			_charNames[(char)0xFF73] = "halfwidth katakana letter u";
			_charNames[(char)0xFF74] = "halfwidth katakana letter e";
			_charNames[(char)0xFF75] = "halfwidth katakana letter o";
			_charNames[(char)0xFF76] = "halfwidth katakana letter ka";
			_charNames[(char)0xFF77] = "halfwidth katakana letter ki";
			_charNames[(char)0xFF78] = "halfwidth katakana letter ku";
			_charNames[(char)0xFF79] = "halfwidth katakana letter ke";
			_charNames[(char)0xFF7A] = "halfwidth katakana letter ko";
			_charNames[(char)0xFF7B] = "halfwidth katakana letter sa";
			_charNames[(char)0xFF7C] = "halfwidth katakana letter si";
			_charNames[(char)0xFF7D] = "halfwidth katakana letter su";
			_charNames[(char)0xFF7E] = "halfwidth katakana letter se";
			_charNames[(char)0xFF7F] = "halfwidth katakana letter so";
			_charNames[(char)0xFF80] = "halfwidth katakana letter ta";
			_charNames[(char)0xFF81] = "halfwidth katakana letter ti";
			_charNames[(char)0xFF82] = "halfwidth katakana letter tu";
			_charNames[(char)0xFF83] = "halfwidth katakana letter te";
			_charNames[(char)0xFF84] = "halfwidth katakana letter to";
			_charNames[(char)0xFF85] = "halfwidth katakana letter na";
			_charNames[(char)0xFF86] = "halfwidth katakana letter ni";
			_charNames[(char)0xFF87] = "halfwidth katakana letter nu";
			_charNames[(char)0xFF88] = "halfwidth katakana letter ne";
			_charNames[(char)0xFF89] = "halfwidth katakana letter no";
			_charNames[(char)0xFF8A] = "halfwidth katakana letter ha";
			_charNames[(char)0xFF8B] = "halfwidth katakana letter hi";
			_charNames[(char)0xFF8C] = "halfwidth katakana letter hu";
			_charNames[(char)0xFF8D] = "halfwidth katakana letter he";
			_charNames[(char)0xFF8E] = "halfwidth katakana letter ho";
			_charNames[(char)0xFF8F] = "halfwidth katakana letter ma";
			_charNames[(char)0xFF90] = "halfwidth katakana letter mi";
			_charNames[(char)0xFF91] = "halfwidth katakana letter mu";
			_charNames[(char)0xFF92] = "halfwidth katakana letter me";
			_charNames[(char)0xFF93] = "halfwidth katakana letter mo";
			_charNames[(char)0xFF94] = "halfwidth katakana letter ya";
			_charNames[(char)0xFF95] = "halfwidth katakana letter yu";
			_charNames[(char)0xFF96] = "halfwidth katakana letter yo";
			_charNames[(char)0xFF97] = "halfwidth katakana letter ra";
			_charNames[(char)0xFF98] = "halfwidth katakana letter ri";
			_charNames[(char)0xFF99] = "halfwidth katakana letter ru";
			_charNames[(char)0xFF9A] = "halfwidth katakana letter re";
			_charNames[(char)0xFF9B] = "halfwidth katakana letter ro";
			_charNames[(char)0xFF9C] = "halfwidth katakana letter wa";
			_charNames[(char)0xFF9D] = "halfwidth katakana letter n";
			_charNames[(char)0xFF9E] = "halfwidth katakana voiced sound mark";
			_charNames[(char)0xFF9F] = "halfwidth katakana semi-voiced sound mark";
			_charNames[(char)0xFFA0] = "halfwidth hangul filler";
			_charNames[(char)0xFFA1] = "halfwidth hangul letter kiyeok";
			_charNames[(char)0xFFA2] = "halfwidth hangul letter ssangkiyeok";
			_charNames[(char)0xFFA3] = "halfwidth hangul letter kiyeok-sios";
			_charNames[(char)0xFFA4] = "halfwidth hangul letter nieun";
			_charNames[(char)0xFFA5] = "halfwidth hangul letter nieun-cieuc";
			_charNames[(char)0xFFA6] = "halfwidth hangul letter nieun-hieuh";
			_charNames[(char)0xFFA7] = "halfwidth hangul letter tikeut";
			_charNames[(char)0xFFA8] = "halfwidth hangul letter ssangtikeut";
			_charNames[(char)0xFFA9] = "halfwidth hangul letter rieul";
			_charNames[(char)0xFFAA] = "halfwidth hangul letter rieul-kiyeok";
			_charNames[(char)0xFFAB] = "halfwidth hangul letter rieul-mieum";
			_charNames[(char)0xFFAC] = "halfwidth hangul letter rieul-pieup";
			_charNames[(char)0xFFAD] = "halfwidth hangul letter rieul-sios";
			_charNames[(char)0xFFAE] = "halfwidth hangul letter rieul-thieuth";
			_charNames[(char)0xFFAF] = "halfwidth hangul letter rieul-phieuph";
			_charNames[(char)0xFFB0] = "halfwidth hangul letter rieul-hieuh";
			_charNames[(char)0xFFB1] = "halfwidth hangul letter mieum";
			_charNames[(char)0xFFB2] = "halfwidth hangul letter pieup";
			_charNames[(char)0xFFB3] = "halfwidth hangul letter ssangpieup";
			_charNames[(char)0xFFB4] = "halfwidth hangul letter pieup-sios";
			_charNames[(char)0xFFB5] = "halfwidth hangul letter sios";
			_charNames[(char)0xFFB6] = "halfwidth hangul letter ssangsios";
			_charNames[(char)0xFFB7] = "halfwidth hangul letter ieung";
			_charNames[(char)0xFFB8] = "halfwidth hangul letter cieuc";
			_charNames[(char)0xFFB9] = "halfwidth hangul letter ssangcieuc";
			_charNames[(char)0xFFBA] = "halfwidth hangul letter chieuch";
			_charNames[(char)0xFFBB] = "halfwidth hangul letter khieukh";
			_charNames[(char)0xFFBC] = "halfwidth hangul letter thieuth";
			_charNames[(char)0xFFBD] = "halfwidth hangul letter phieuph";
			_charNames[(char)0xFFBE] = "halfwidth hangul letter hieuh";
			_charNames[(char)0xFFC2] = "halfwidth hangul letter a";
			_charNames[(char)0xFFC3] = "halfwidth hangul letter ae";
			_charNames[(char)0xFFC4] = "halfwidth hangul letter ya";
			_charNames[(char)0xFFC5] = "halfwidth hangul letter yae";
			_charNames[(char)0xFFC6] = "halfwidth hangul letter eo";
			_charNames[(char)0xFFC7] = "halfwidth hangul letter e";
			_charNames[(char)0xFFCA] = "halfwidth hangul letter yeo";
			_charNames[(char)0xFFCB] = "halfwidth hangul letter ye";
			_charNames[(char)0xFFCC] = "halfwidth hangul letter o";
			_charNames[(char)0xFFCD] = "halfwidth hangul letter wa";
			_charNames[(char)0xFFCE] = "halfwidth hangul letter wae";
			_charNames[(char)0xFFCF] = "halfwidth hangul letter oe";
			_charNames[(char)0xFFD2] = "halfwidth hangul letter yo";
			_charNames[(char)0xFFD3] = "halfwidth hangul letter u";
			_charNames[(char)0xFFD4] = "halfwidth hangul letter weo";
			_charNames[(char)0xFFD5] = "halfwidth hangul letter we";
			_charNames[(char)0xFFD6] = "halfwidth hangul letter wi";
			_charNames[(char)0xFFD7] = "halfwidth hangul letter yu";
			_charNames[(char)0xFFDA] = "halfwidth hangul letter eu";
			_charNames[(char)0xFFDB] = "halfwidth hangul letter yi";
			_charNames[(char)0xFFDC] = "halfwidth hangul letter i";
			_charNames[(char)0xFFE0] = "fullwidth cent sign";
			_charNames[(char)0xFFE1] = "fullwidth pound sign";
			_charNames[(char)0xFFE2] = "fullwidth not sign";
			_charNames[(char)0xFFE3] = "fullwidth macron";
			_charNames[(char)0xFFE4] = "fullwidth broken bar";
			_charNames[(char)0xFFE5] = "fullwidth yen sign";
			_charNames[(char)0xFFE6] = "fullwidth won sign";
			_charNames[(char)0xFFE8] = "halfwidth forms light vertical";
			_charNames[(char)0xFFE9] = "halfwidth leftwards arrow";
			_charNames[(char)0xFFEA] = "halfwidth upwards arrow";
			_charNames[(char)0xFFEB] = "halfwidth rightwards arrow";
			_charNames[(char)0xFFEC] = "halfwidth downwards arrow";
			_charNames[(char)0xFFED] = "halfwidth black square";
			_charNames[(char)0xFFEE] = "halfwidth white circle";
			_charNames[(char)0xFFF9] = "interlinear annotation anchor";
			_charNames[(char)0xFFFA] = "interlinear annotation separator";
			_charNames[(char)0xFFFB] = "interlinear annotation terminator";
			_charNames[(char)0xFFFC] = "object replacement character";
			_charNames[(char)0xFFFD] = "replacement character";
		}
		public static string NameOf(char c) { return _charNames[c]; }
	}
}
