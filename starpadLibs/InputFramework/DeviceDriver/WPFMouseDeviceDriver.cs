using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Input;

namespace InputFramework.DeviceDriver
{
    /// <summary>
    /// Class MouseDevice.cs
    /// Author: Adam Gokcezade
    /// Creation Date: 01. September 2008
    /// </summary>

    public class WPFMouseDeviceDriver : PointDeviceDriver
    {
        private Window mWindow;

        public WPFMouseDeviceDriver(Window window)
        {
            mWindow = window;

            mWindow.PreviewMouseDown += new MouseButtonEventHandler(window_PreviewMouseDown);
            mWindow.PreviewMouseUp += new MouseButtonEventHandler(window_PreviewMouseUp);
            mWindow.PreviewMouseMove += new MouseEventHandler(window_PreviewMouseMove);
        }

        public override void Dispose()
        {
        }

        private void window_PreviewMouseDown(Object sender, MouseButtonEventArgs mouseButtonEventArgs) {
            //check if the event was not generated by a stylus device
            if (mouseButtonEventArgs.StylusDevice == null)
            {
                PointEventArgs pointEventArgs = new PointEventArgs();

                initPointEvent(ref pointEventArgs, mouseButtonEventArgs);

                switch (mouseButtonEventArgs.ChangedButton)
                {
                    case MouseButton.Left:
                        pointEventArgs.PointEventType = PointEventType.LeftDown;
                        break;
                    case MouseButton.Middle:
                        pointEventArgs.PointEventType = PointEventType.MiddleDown;
                        break;
                    case MouseButton.Right:
                        pointEventArgs.PointEventType = PointEventType.RightDown;
                        break;
                    default:
                        pointEventArgs.PointEventType = PointEventType.Unknown;
                        break;
                }

                OnPointEvent(pointEventArgs);
                mouseButtonEventArgs.Handled = true;
            }
        }

        private void window_PreviewMouseUp(Object sender, MouseButtonEventArgs mouseButtonEventArgs)
        {
            //check if the event was not generated by a stylus device
            if (mouseButtonEventArgs.StylusDevice == null)
            {
                PointEventArgs pointEventArgs = new PointEventArgs();

                initPointEvent(ref pointEventArgs, mouseButtonEventArgs);

                switch (mouseButtonEventArgs.ChangedButton)
                {
                    case MouseButton.Left:
                        pointEventArgs.PointEventType = PointEventType.LeftUp;
                        break;
                    case MouseButton.Middle:
                        pointEventArgs.PointEventType = PointEventType.MiddleUp;
                        break;
                    case MouseButton.Right:
                        pointEventArgs.PointEventType = PointEventType.RightUp;
                        break;
                    default:
                        pointEventArgs.PointEventType = PointEventType.Unknown;
                        break;
                }

                OnPointEvent(pointEventArgs);
                mouseButtonEventArgs.Handled = true;
            }
        }


        private void window_PreviewMouseMove(Object sender, MouseEventArgs mouseEventArgs)
        {
            //check if the event was not generated by a stylus device
            if (mouseEventArgs.StylusDevice == null)
            {
                PointEventArgs pointEventArgs = new PointEventArgs();

                initPointEvent(ref pointEventArgs, mouseEventArgs);

                if (mouseEventArgs.LeftButton == MouseButtonState.Pressed ||
                    mouseEventArgs.MiddleButton == MouseButtonState.Pressed ||
                    mouseEventArgs.RightButton == MouseButtonState.Pressed)
                {
                    pointEventArgs.PointEventType = PointEventType.Drag;
                }
                else
                {
                    pointEventArgs.PointEventType = PointEventType.Move;
                }

                OnPointEvent(pointEventArgs);
                mouseEventArgs.Handled = true;
            }
        }

        private void initPointEvent(ref PointEventArgs pointEventArgs, MouseEventArgs mouseEventArgs)
        {
            pointEventArgs.Handled = false;
            pointEventArgs.DeviceUID = new DeviceUID() { DeviceID = 0, DeviceDriverID = this.DeviceDriverID };
            pointEventArgs.DeviceType = DeviceType.Mouse;

            Point[] intermediatePointsWindow = new Point[64];
            
            int numPoints = 0;
            try
            {
                numPoints = Mouse.GetIntermediatePoints(mWindow, intermediatePointsWindow);
            }
            catch (System.ComponentModel.Win32Exception)
            {
                numPoints = 0;
            }
            
            if(numPoints <= 0)
            {
                // sometimes that function throws a win32 exception. Fill it with the current point
                numPoints = 1;
                intermediatePointsWindow[0] = mouseEventArgs.GetPosition(mWindow);
            }

            pointEventArgs.InBetweenPointsScreen = new PressurePoint[numPoints];
            for (int i = 0; i < numPoints; i++)
            {
                pointEventArgs.InBetweenPointsScreen[i] = new PressurePoint(mWindow.PointToScreen(intermediatePointsWindow[(numPoints - 1) - i]));
            }

            // Mouse cursor position in screen coordinates
            Point mouseWindow = mouseEventArgs.GetPosition(mWindow);
            pointEventArgs.PointScreen = new PressurePoint(mWindow.PointToScreen(mouseWindow));
        }
    }
}
