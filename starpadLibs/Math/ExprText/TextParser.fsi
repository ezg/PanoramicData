// Signature file for parser generated by fsyacc
module starPadSDK.MathExpr.TextInternals.Parser
open starPadSDK.MathExpr
type token = 
  | EOF
  | LE
  | GE
  | NE
  | PM
  | MP
  | ERRS
  | ERRE
  | LSB
  | RSB
  | US
  | LT
  | GT
  | COMMA
  | LP
  | RP
  | LCB
  | RCB
  | EQ
  | FACT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | POW
  | VB
  | LLT
  | GGT
  | ID of (string)
  | WKS of (string)
  | LETTERSYM
  | GROUPEDLETTERSYM
  | WORDSYM
  | NULL
  | TOKEN of (string)
  | INTEGER of (string)
  | DOUBLE of (float)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_NE
    | TOKEN_PM
    | TOKEN_MP
    | TOKEN_ERRS
    | TOKEN_ERRE
    | TOKEN_LSB
    | TOKEN_RSB
    | TOKEN_US
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_COMMA
    | TOKEN_LP
    | TOKEN_RP
    | TOKEN_LCB
    | TOKEN_RCB
    | TOKEN_EQ
    | TOKEN_FACT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_POW
    | TOKEN_VB
    | TOKEN_LLT
    | TOKEN_GGT
    | TOKEN_ID
    | TOKEN_WKS
    | TOKEN_LETTERSYM
    | TOKEN_GROUPEDLETTERSYM
    | TOKEN_WORDSYM
    | TOKEN_NULL
    | TOKEN_TOKEN
    | TOKEN_INTEGER
    | TOKEN_DOUBLE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startexpr
    | NONTERM_expr
    | NONTERM_relnexpr
    | NONTERM_plusexpr
    | NONTERM_timesexpr
    | NONTERM_powerexpr
    | NONTERM_nonpfxpowerexpr
    | NONTERM_prefixexpr
    | NONTERM_postfixexpr
    | NONTERM_primaryexpr
    | NONTERM_primaryexprnovb
    | NONTERM_arrlist
    | NONTERM_arglist
    | NONTERM_sym
    | NONTERM_number
    | NONTERM_realnumber
    | NONTERM_doublenumber
    | NONTERM_integernumber
    | NONTERM_complexnumber
    | NONTERM_lettersym
    | NONTERM_groupedlettersym
    | NONTERM_lettersymlist
    | NONTERM_wordsym
    | NONTERM_wellknownsym
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val expr : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Expr) 
